WEBVTT

1
00:00:01.009 --> 00:00:04.585
(excited pop music)

2
00:00:04.585 --> 00:00:05.430
<v Lecturer>All right, we're going to talk</v>

3
00:00:05.430 --> 00:00:06.610
about attributes now.

4
00:00:06.610 --> 00:00:08.640
So when you're working with html elements,

5
00:00:08.640 --> 00:00:10.410
you have these things called attributes.

6
00:00:10.410 --> 00:00:14.943
Attributes are anything that is provided to an element

7
00:00:14.943 --> 00:00:16.650
as additional info.

8
00:00:16.650 --> 00:00:19.360
So things like classes, source.

9
00:00:19.360 --> 00:00:21.730
One attribute we were clearly missing here

10
00:00:21.730 --> 00:00:23.453
is an alt attribute.

11
00:00:23.453 --> 00:00:26.080
So attributes work exactly the same way

12
00:00:26.080 --> 00:00:27.520
as all of the different properties

13
00:00:27.520 --> 00:00:28.760
that we've been working with.

14
00:00:28.760 --> 00:00:30.500
So I'm gonna show you how to do that real quick

15
00:00:30.500 --> 00:00:33.860
and then I'm gonna go into custom attributes

16
00:00:33.860 --> 00:00:34.970
and data attributes.

17
00:00:34.970 --> 00:00:36.690
So let's go.

18
00:00:36.690 --> 00:00:38.320
Well, do we have this image here?

19
00:00:38.320 --> 00:00:39.740
Yeah, we have it as a pic.

20
00:00:39.740 --> 00:00:42.980
So I'll say pic dot alt is equal to,

21
00:00:42.980 --> 00:00:47.980
and I'm obviously using a image placeholder service here.

22
00:00:48.570 --> 00:00:50.630
So these are changing but a good alt

23
00:00:50.630 --> 00:00:52.130
would describe the image.

24
00:00:52.130 --> 00:00:54.080
So we would say, 'cute pup'.

25
00:00:54.080 --> 00:00:55.650
By the way, this is kind of an aside

26
00:00:55.650 --> 00:00:58.790
but whenever you're doing alt attributes on an image,

27
00:00:58.790 --> 00:01:02.240
you don't have to say like 'photo of a cute pup'

28
00:01:02.240 --> 00:01:05.610
because the people that are using screen readers know

29
00:01:05.610 --> 00:01:09.920
it's a photo because the screen reader will tell them

30
00:01:09.920 --> 00:01:11.890
and so you just say, 'cute pup'.

31
00:01:11.890 --> 00:01:14.270
Don't need to say 'image of' or 'photo of'.

32
00:01:14.270 --> 00:01:17.505
Now if I refresh this, please stay cute pup.

33
00:01:17.505 --> 00:01:19.120
(sigh) Sky.

34
00:01:19.120 --> 00:01:20.860
All right, well you see that the alt

35
00:01:20.860 --> 00:01:22.240
is then showing up there, right?

36
00:01:22.240 --> 00:01:25.805
Even though we hadn't authored it here,

37
00:01:25.805 --> 00:01:28.950
you can access all of the different attributes

38
00:01:28.950 --> 00:01:29.783
that are on it.

39
00:01:29.783 --> 00:01:32.300
So, other things you could say, I don't know,

40
00:01:32.300 --> 00:01:35.223
pic dot width is equal to 200.

41
00:01:37.040 --> 00:01:39.453
See now it's just showing up as 200.

42
00:01:41.390 --> 00:01:43.300
You can put a title on it, you can put a,

43
00:01:43.300 --> 00:01:46.980
oh, you can also, most of them are both getters and setters.

44
00:01:46.980 --> 00:01:51.480
Meaning that, I could console that log, the pic dot alt.

45
00:01:51.480 --> 00:01:52.383
That's a getter.

46
00:01:54.450 --> 00:01:55.713
And this is a setter.

47
00:01:57.520 --> 00:02:02.460
And you'll see that we get the text of someone's weird feet.

48
00:02:02.460 --> 00:02:04.120
Neat.

49
00:02:04.120 --> 00:02:06.190
You see we've got the actual text

50
00:02:06.190 --> 00:02:07.900
so you can pull it.

51
00:02:07.900 --> 00:02:10.420
Some of the other stuff are only getters.

52
00:02:10.420 --> 00:02:15.410
So if we were to console log the pic dot natural width

53
00:02:17.220 --> 00:02:21.270
it will then tell us, oh that's an interesting one.

54
00:02:21.270 --> 00:02:22.103
Look at this.

55
00:02:22.103 --> 00:02:23.580
Zero.

56
00:02:23.580 --> 00:02:27.350
If I were to now run that from my console

57
00:02:28.910 --> 00:02:30.433
it tells us it's 600.

58
00:02:31.550 --> 00:02:36.340
Why is it zero when I console log it here

59
00:02:36.340 --> 00:02:40.290
but when I run it in the terminal it's 600?

60
00:02:40.290 --> 00:02:44.076
So that is actually a problem that you frequently run into

61
00:02:44.076 --> 00:02:47.485
and that is because you have to often wait

62
00:02:47.485 --> 00:02:50.590
for the image to actually be downloaded before we know

63
00:02:50.590 --> 00:02:51.510
how large it is.

64
00:02:51.510 --> 00:02:53.930
So this was a big problem when everybody

65
00:02:53.930 --> 00:02:56.900
was building slideshows 'cause you tried to resize the image

66
00:02:56.900 --> 00:02:59.410
but you had to wait for the image to be downloaded entirely

67
00:02:59.410 --> 00:03:00.870
before you knew how big it was.

68
00:03:00.870 --> 00:03:04.030
So the natural which will just tell us the width

69
00:03:04.030 --> 00:03:05.840
of the actual pixels.

70
00:03:05.840 --> 00:03:07.730
So how do you solve that?

71
00:03:07.730 --> 00:03:11.510
Well, we're going to be getting into event listeners

72
00:03:11.510 --> 00:03:13.209
but I can just show you real quick.

73
00:03:13.209 --> 00:03:16.960
We can just say 'window.addEventListener'

74
00:03:16.960 --> 00:03:19.080
and I think it's the loaded?

75
00:03:19.080 --> 00:03:21.410
Yeah, those are loaded events.

76
00:03:21.410 --> 00:03:22.500
Load or loaded?

77
00:03:22.500 --> 00:03:23.846
Let's try load.

78
00:03:23.846 --> 00:03:27.310
And what that will do is it will wait for all of the images

79
00:03:27.310 --> 00:03:30.130
on the page and all of the resources, all of the CSS,

80
00:03:30.130 --> 00:03:33.030
all of the JavaScript, all of that has to be downloaded

81
00:03:33.030 --> 00:03:34.110
before this will fire.

82
00:03:34.110 --> 00:03:36.150
So we can run a function here

83
00:03:37.625 --> 00:03:39.970
and then if we were to put that natural width

84
00:03:39.970 --> 00:03:42.583
let's duplicate it so we can see it in both.

85
00:03:43.844 --> 00:03:48.680
Can you see how that takes a split second to show up?

86
00:03:48.680 --> 00:03:51.833
If I put an even larger image, maybe I'll make it 6000.

87
00:03:54.930 --> 00:03:55.763
Oh.

88
00:03:55.763 --> 00:03:57.420
You can't do photos that big.

89
00:03:57.420 --> 00:03:59.093
Maybe if we do 500.

90
00:04:00.640 --> 00:04:03.510
It takes a split second before it actually shows up.

91
00:04:03.510 --> 00:04:07.650
You can also use this Event Listener on images.

92
00:04:07.650 --> 00:04:10.720
So you could just take our pic and wait for

93
00:04:10.720 --> 00:04:13.065
that specific one to load.

94
00:04:13.065 --> 00:04:15.180
That's probably a better use case

95
00:04:15.180 --> 00:04:17.747
'cause you just care about this one.

96
00:04:17.747 --> 00:04:19.630
Can you see that that will work as well?

97
00:04:19.630 --> 00:04:21.100
So we're getting a little ahead of ourselves

98
00:04:21.100 --> 00:04:23.100
with add Event Listeners but it's good to know

99
00:04:23.100 --> 00:04:24.730
that those are some of the gotchas

100
00:04:24.730 --> 00:04:26.250
that JavaScript will get you.

101
00:04:26.250 --> 00:04:30.427
And you might be saying, "But Wes, we put the JavaScript

102
00:04:30.427 --> 00:04:31.260
"at the bottom.

103
00:04:31.260 --> 00:04:32.617
"Doesn't that mean that it waits

104
00:04:32.617 --> 00:04:33.870
"for everything to be loaded?"

105
00:04:33.870 --> 00:04:38.040
And yes, this waits for the html to be loaded on the page

106
00:04:38.040 --> 00:04:40.030
but if the html then goes ahead

107
00:04:40.030 --> 00:04:44.646
and has to make additional requests like downloading images,

108
00:04:44.646 --> 00:04:46.170
it doesn't wait for those.

109
00:04:46.170 --> 00:04:48.750
So if that's the case then you have to listen

110
00:04:48.750 --> 00:04:52.290
for the load event either on the window

111
00:04:52.290 --> 00:04:55.163
or on each individual pics.

112
00:04:55.163 --> 00:04:57.090
So natural width, we were talking

113
00:04:57.090 --> 00:04:59.160
about how this is only a getter, right?

114
00:04:59.160 --> 00:05:02.950
If we were trying to set the natural width of an image,

115
00:05:02.950 --> 00:05:04.860
I don't know if it will error at us or anything.

116
00:05:04.860 --> 00:05:05.693
Let's see.

117
00:05:08.960 --> 00:05:11.620
No, no sort of error but it doesn't do anything.

118
00:05:11.620 --> 00:05:12.453
Why?

119
00:05:12.453 --> 00:05:14.710
Because that's not something that you can change.

120
00:05:14.710 --> 00:05:16.920
That is the actual image of the size.

121
00:05:16.920 --> 00:05:18.680
So if you did want to change the width of it,

122
00:05:18.680 --> 00:05:21.750
you'd have to pop a width attribute on it

123
00:05:21.750 --> 00:05:25.030
and then that will actually change it.

124
00:05:25.030 --> 00:05:28.000
So those are getters and setters.

125
00:05:28.000 --> 00:05:29.780
All of the attributes that you can think of

126
00:05:29.780 --> 00:05:33.300
on any type of element are all done via getters and setters

127
00:05:33.300 --> 00:05:36.690
and you just use the dot notation.

128
00:05:36.690 --> 00:05:41.080
You may have run into these get attributes, set attribute

129
00:05:41.080 --> 00:05:43.400
and has attribute methods.

130
00:05:43.400 --> 00:05:47.620
So if we take this pic and we were to run dot get attribute

131
00:05:47.620 --> 00:05:50.623
and we were to get the, let's get the alt.

132
00:05:52.060 --> 00:05:53.530
And let's just console that log,

133
00:05:53.530 --> 00:05:55.130
well what is returned from that?

134
00:05:57.690 --> 00:05:58.870
That works, right?

135
00:05:58.870 --> 00:06:03.870
And we can also use dot set attribute

136
00:06:07.780 --> 00:06:09.660
alt and we wanna set it to

137
00:06:11.546 --> 00:06:13.403
'REALLY CUTE PUP'

138
00:06:15.768 --> 00:06:16.690
and that works as well

139
00:06:16.690 --> 00:06:18.260
and then there's also has attribute

140
00:06:18.260 --> 00:06:21.500
which is return true or false if it's been set or not.

141
00:06:21.500 --> 00:06:25.540
So what's the different between this method, set attribute,

142
00:06:25.540 --> 00:06:27.710
and then just using this dot notation

143
00:06:27.710 --> 00:06:29.659
where you're just setting and getting a property

144
00:06:29.659 --> 00:06:32.170
on the picture object?

145
00:06:32.170 --> 00:06:34.900
And the answer to that is that set attribute

146
00:06:34.900 --> 00:06:39.200
will also work for things that are nonstandard.

147
00:06:39.200 --> 00:06:42.100
So we have html as a spec and you have all

148
00:06:42.100 --> 00:06:44.483
of your standard attributes like alt and title

149
00:06:44.483 --> 00:06:46.660
and width and height and source

150
00:06:46.660 --> 00:06:48.110
and all of those good things.

151
00:06:48.110 --> 00:06:51.570
But if you for some reason wanna set an attribute

152
00:06:51.570 --> 00:06:54.140
that is nonstandard, which you shouldn't do,

153
00:06:54.140 --> 00:06:55.770
I'll talk about that in a second,

154
00:06:55.770 --> 00:06:58.500
you can use set attribute to make something.

155
00:06:58.500 --> 00:07:00.033
Wes is cool.

156
00:07:02.330 --> 00:07:05.220
And now if we inspect that element up here,

157
00:07:05.220 --> 00:07:07.970
you see we get this 'Wes is cool' attribute on it.

158
00:07:07.970 --> 00:07:11.300
Now, you shouldn't just go willy nilly making up

159
00:07:11.300 --> 00:07:16.300
your own attributes because what if the html spec wants

160
00:07:16.870 --> 00:07:19.511
to introduce a 'Wes is cool' attribute in the future

161
00:07:19.511 --> 00:07:22.400
and now all of a sudden you have this legacy code

162
00:07:22.400 --> 00:07:24.850
that is clashing with the actual standard

163
00:07:24.850 --> 00:07:26.160
and that's what leads to bugs.

164
00:07:26.160 --> 00:07:29.800
That's what's happened in the past a lot of times.

165
00:07:29.800 --> 00:07:33.020
That's why we have JavaScript dot includes

166
00:07:33.020 --> 00:07:35.680
instead of dot contains on a raise.

167
00:07:35.680 --> 00:07:38.610
Because there previously was another library

168
00:07:38.610 --> 00:07:41.810
that used includes and they took it

169
00:07:41.810 --> 00:07:43.950
and they over, and then when the browser tried

170
00:07:43.950 --> 00:07:46.060
to use includes they overwrote each other

171
00:07:46.060 --> 00:07:48.530
and their functionality wasn't exactly the same

172
00:07:48.530 --> 00:07:49.900
and that was a bit of a pain.

173
00:07:49.900 --> 00:07:51.570
So don't ever just make

174
00:07:51.570 --> 00:07:53.370
your own attributes straight away like this.

175
00:07:53.370 --> 00:07:58.370
If you do want to use your own custom attributes,

176
00:07:58.640 --> 00:08:00.300
I'm gonna comment that out 'cause honestly,

177
00:08:00.300 --> 00:08:04.200
very rarely do I ever have to use set and get attribute.

178
00:08:04.200 --> 00:08:06.930
Because if you do want your own custom attributes,

179
00:08:06.930 --> 00:08:08.700
you use what are called data attributes.

180
00:08:08.700 --> 00:08:11.543
Now, data attributes are things like,

181
00:08:13.170 --> 00:08:15.370
let's get a couple images here

182
00:08:17.740 --> 00:08:21.660
which say data dash name is equal to Wes

183
00:08:21.660 --> 00:08:26.050
and maybe on this one data dash name is equal to Kate

184
00:08:26.050 --> 00:08:30.370
and data dash name is equal to lux.

185
00:08:30.370 --> 00:08:33.190
Oh, I messed up my quotes there.

186
00:08:33.190 --> 00:08:34.470
Eh, I'll get rid of this one.

187
00:08:34.470 --> 00:08:38.785
So I just wanted to attach a piece of metadata

188
00:08:38.785 --> 00:08:40.550
to each of these images.

189
00:08:40.550 --> 00:08:43.550
And if you wanna attach metadata or some sort of data

190
00:08:43.550 --> 00:08:48.000
to an element that does not have any sort

191
00:08:48.000 --> 00:08:51.290
of standard attribute like a name attribute

192
00:08:51.290 --> 00:08:54.300
then what you can use is you can just use data dash

193
00:08:54.300 --> 00:08:55.560
and then you make it up.

194
00:08:55.560 --> 00:08:57.080
You can use anything you want.

195
00:08:57.080 --> 00:09:00.320
You could do data dash dog, data dash description,

196
00:09:00.320 --> 00:09:03.760
data dash name and that will allow you

197
00:09:03.760 --> 00:09:05.460
to attach metadata to the image.

198
00:09:05.460 --> 00:09:08.610
Now, if we refresh this and inspect each of these

199
00:09:08.610 --> 00:09:11.880
you see they have data on them

200
00:09:11.880 --> 00:09:14.360
and then I can go into this,

201
00:09:14.360 --> 00:09:18.033
let's put a class on one of them.

202
00:09:19.000 --> 00:09:22.223
Let's just say class is equal to custom.

203
00:09:24.530 --> 00:09:27.070
Then I will grab it.

204
00:09:27.070 --> 00:09:29.380
Const custom

205
00:09:29.380 --> 00:09:33.823
is equal to document dot query selector dot custom.

206
00:09:35.970 --> 00:09:37.910
Now if we console log custom

207
00:09:39.130 --> 00:09:42.360
and if we wanna access the data attributes

208
00:09:42.360 --> 00:09:45.680
on that custom image, you might think we do dot data

209
00:09:47.260 --> 00:09:48.650
and it gives us undefined.

210
00:09:48.650 --> 00:09:52.130
If you wanna be able to access those data attributes on it,

211
00:09:52.130 --> 00:09:56.040
you call the dot data set and it's all one word,

212
00:09:56.040 --> 00:09:57.930
not camel case or anything like that

213
00:09:57.930 --> 00:10:01.060
and what data set will give is an object

214
00:10:01.060 --> 00:10:03.550
that's full of all the property values that you have.

215
00:10:03.550 --> 00:10:06.610
So data dash name is just name is equal to Wes

216
00:10:06.610 --> 00:10:09.770
and if I had multiple data properties on there,

217
00:10:09.770 --> 00:10:13.653
data dash last is equal to boss,

218
00:10:15.670 --> 00:10:18.730
then what we have is an object with each

219
00:10:18.730 --> 00:10:20.357
of those properties on it.

220
00:10:20.357 --> 00:10:22.440
And why would that ever be useful?

221
00:10:22.440 --> 00:10:25.190
Well we can do things like listen for a click.

222
00:10:25.190 --> 00:10:28.660
So we can say custom dot add event listener,

223
00:10:28.660 --> 00:10:30.920
we'll listen for a click, and when somebody clicks

224
00:10:30.920 --> 00:10:32.900
on that again, I know we haven't learned this yet

225
00:10:32.900 --> 00:10:34.920
but we're going ahead of ourselves a little bit,

226
00:10:34.920 --> 00:10:38.623
we can do something like alert welcome,

227
00:10:41.530 --> 00:10:46.220
we'll take the custom dot data set dot first.

228
00:10:46.220 --> 00:10:47.173
Oh no, it was name.

229
00:10:50.520 --> 00:10:52.573
And then dot last.

230
00:10:54.380 --> 00:10:57.480
And now if I click on this, it says, "Welcome wes boss".

231
00:10:57.480 --> 00:11:00.270
I could attach this event listener to the other two as well

232
00:11:00.270 --> 00:11:02.070
and then make this pretty dynamic.

233
00:11:02.070 --> 00:11:03.090
We'll be using that a lot.

234
00:11:03.090 --> 00:11:05.250
I love using data attributes when you're just coding

235
00:11:05.250 --> 00:11:08.050
some vanilla JavaScript up on there.

236
00:11:08.050 --> 00:11:10.710
So again, any time you need a custom attribute,

237
00:11:10.710 --> 00:11:14.240
anytime you need to associate some sort of information,

238
00:11:14.240 --> 00:11:17.770
some sort of text, I've even seen people use this

239
00:11:17.770 --> 00:11:19.970
for data dash large.

240
00:11:19.970 --> 00:11:21.840
You have a little thumbnail and then when you click

241
00:11:21.840 --> 00:11:24.120
on that image it shows a larger version.

242
00:11:24.120 --> 00:11:27.760
Maybe you can give it a secondary path to a larger version

243
00:11:27.760 --> 00:11:28.593
of that image.

244
00:11:28.593 --> 00:11:32.633
So we'll do lots of examples like that in the coming videos

245
00:11:34.230 --> 00:11:37.220
and that is attributes in JavaScript.

246
00:11:37.220 --> 00:11:40.373
Let's go into learning how to create some html.

