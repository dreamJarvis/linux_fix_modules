WEBVTT

1
00:00:00.779 --> 00:00:03.696
(techno-pop music)

2
00:00:05.440 --> 00:00:06.370
<v Wes off screen>Alright now we're gonna start</v>

3
00:00:06.370 --> 00:00:08.220
the section of the course where we learn about

4
00:00:08.220 --> 00:00:09.420
objects and arrays.

5
00:00:09.420 --> 00:00:11.520
So first let's learn about objects.

6
00:00:11.520 --> 00:00:14.010
Objects are another fundamental building block

7
00:00:14.010 --> 00:00:14.870
of JavaScript.

8
00:00:14.870 --> 00:00:18.130
Just like we have strings, and numbers, and booleans.

9
00:00:18.130 --> 00:00:20.930
We have objects and you're actually, you will soon find out

10
00:00:20.930 --> 00:00:23.820
that actually everything in JavaScript is an object.

11
00:00:23.820 --> 00:00:25.420
So, what are they?

12
00:00:25.420 --> 00:00:26.610
Well objects allow us to

13
00:00:26.610 --> 00:00:28.440
group together properties and values,

14
00:00:28.440 --> 00:00:30.760
or keys and values is often what we call it.

15
00:00:30.760 --> 00:00:33.328
I'll be saying properties and values in this course.

16
00:00:33.328 --> 00:00:37.410
And they have many uses from storing related data,

17
00:00:37.410 --> 00:00:39.150
from storing functionality,

18
00:00:39.150 --> 00:00:41.610
all the way through creating your own custom types.

19
00:00:41.610 --> 00:00:42.960
It's important to note that

20
00:00:43.840 --> 00:00:45.630
objects are used for where

21
00:00:45.630 --> 00:00:49.160
the order of the properties does not matter.

22
00:00:49.160 --> 00:00:51.210
Now that's really important to note

23
00:00:51.210 --> 00:00:54.020
because if the order of the properties in your objects,

24
00:00:54.020 --> 00:00:56.910
so if we were creating a person,

25
00:00:56.910 --> 00:00:57.940
let's just go ahead and do that.

26
00:00:57.940 --> 00:00:59.879
So a const person is equal to curly brackets.

27
00:00:59.879 --> 00:01:02.440
And we same name is equal to Wes.

28
00:01:02.440 --> 00:01:05.160
And age is equal to 100.

29
00:01:05.160 --> 00:01:06.880
If I were to console log that person

30
00:01:06.880 --> 00:01:09.700
it's probably going to be in the order of name and age.

31
00:01:09.700 --> 00:01:10.533
Let's see here.

32
00:01:10.533 --> 00:01:11.366
There we go.

33
00:01:11.366 --> 00:01:12.199
Right?

34
00:01:12.199 --> 00:01:13.800
And if I were to re-order them

35
00:01:13.800 --> 00:01:15.280
put a commma there

36
00:01:15.280 --> 00:01:16.530
and refresh.

37
00:01:16.530 --> 00:01:18.110
Now it does show me age and name;

38
00:01:18.110 --> 00:01:19.300
however,

39
00:01:19.300 --> 00:01:22.260
just because the JavaScript interpreter does that

40
00:01:22.260 --> 00:01:23.340
it's not guaranteed.

41
00:01:23.340 --> 00:01:25.790
So never rely on the order at which you've put

42
00:01:25.790 --> 00:01:27.960
the properties into the object

43
00:01:27.960 --> 00:01:30.340
to be maintained the same way.

44
00:01:30.340 --> 00:01:32.390
I've definitely seen it in different browsers

45
00:01:32.390 --> 00:01:33.280
in different orders

46
00:01:33.280 --> 00:01:35.660
and that's totally okay.

47
00:01:35.660 --> 00:01:36.930
Now, to create an object

48
00:01:36.930 --> 00:01:38.240
you generally are gonna do this.

49
00:01:38.240 --> 00:01:39.560
You open up a curly bracket

50
00:01:39.560 --> 00:01:41.670
and you go and close your curly bracket.

51
00:01:41.670 --> 00:01:43.050
And that is what is referred to as

52
00:01:43.050 --> 00:01:45.390
the object literal syntax.

53
00:01:45.390 --> 00:01:48.110
You can also use this syntax

54
00:01:48.110 --> 00:01:51.610
where you say new capital O object.

55
00:01:51.610 --> 00:01:53.070
You open up your parenthesis

56
00:01:53.070 --> 00:01:54.640
and then close your parenthesis.

57
00:01:54.640 --> 00:01:56.410
And then you pass curly bracket

58
00:01:56.410 --> 00:01:59.530
with each property and value along with it.

59
00:01:59.530 --> 00:02:02.470
Now you probably won't see that notation

60
00:02:02.470 --> 00:02:04.630
all that often or ever

61
00:02:04.630 --> 00:02:07.810
simply because the object literal syntax

62
00:02:07.810 --> 00:02:08.643
is much cleaner.

63
00:02:08.643 --> 00:02:10.850
Same thing why you can technically do like

64
00:02:10.850 --> 00:02:13.925
const name is equal to new string.

65
00:02:13.925 --> 00:02:16.060
And that's just another way to create a string.

66
00:02:16.060 --> 00:02:16.980
But we don't do that

67
00:02:16.980 --> 00:02:18.670
we just do single quotes

68
00:02:18.670 --> 00:02:21.270
which is the string literal syntax.

69
00:02:21.270 --> 00:02:22.530
So when we're creating objects

70
00:02:22.530 --> 00:02:24.720
we will create just curly brackets.

71
00:02:24.720 --> 00:02:26.010
We'll talk about that new keyword

72
00:02:26.010 --> 00:02:27.200
in coming videos.

73
00:02:27.200 --> 00:02:28.440
And that's what we have.

74
00:02:28.440 --> 00:02:29.740
Now keywords here.

75
00:02:29.740 --> 00:02:31.360
Property on the left

76
00:02:31.360 --> 00:02:32.193
colon

77
00:02:32.193 --> 00:02:35.010
and then we have the value on the right.

78
00:02:35.010 --> 00:02:37.540
The values of an object can be any type.

79
00:02:37.540 --> 00:02:38.940
Meaning they can be a string,

80
00:02:38.940 --> 00:02:40.110
they can be a boolean,

81
00:02:40.110 --> 00:02:41.020
they can be a number,

82
00:02:41.020 --> 00:02:42.600
they can be other objects,

83
00:02:42.600 --> 00:02:44.950
they can be other arrays.

84
00:02:44.950 --> 00:02:46.200
Pretty, any type you can think of.

85
00:02:46.200 --> 00:02:47.817
Think of any type in the world right now

86
00:02:47.817 --> 00:02:49.100
and it could be that type.

87
00:02:49.100 --> 00:02:50.180
Okay (laughs)

88
00:02:50.180 --> 00:02:51.640
So let's take a look at

89
00:02:51.640 --> 00:02:53.090
like maybe we have a variable.

90
00:02:53.090 --> 00:02:53.923
Const

91
00:02:55.210 --> 00:02:56.890
Age is equal to 100.

92
00:02:56.890 --> 00:02:58.890
Now if I want to take the value

93
00:02:58.890 --> 00:03:01.110
of age and put it into this person

94
00:03:01.110 --> 00:03:03.840
we can swap out the hard coded 100

95
00:03:03.840 --> 00:03:05.880
with a variable of age.

96
00:03:05.880 --> 00:03:06.730
Let me take a look at that.

97
00:03:06.730 --> 00:03:08.420
You see the 100s being passed on.

98
00:03:08.420 --> 00:03:10.450
That's a pretty common thing that we'll do.

99
00:03:10.450 --> 00:03:13.170
Now if you ever run into this situation,

100
00:03:13.170 --> 00:03:16.330
where the property is the same name

101
00:03:16.330 --> 00:03:20.810
as the value variable that you're setting it to.

102
00:03:20.810 --> 00:03:24.130
You can simply get away with simply doing age.

103
00:03:24.130 --> 00:03:24.963
Like that.

104
00:03:24.963 --> 00:03:26.040
And that's the exact same thing as age

105
00:03:26.040 --> 00:03:27.110
saying age, age.

106
00:03:27.110 --> 00:03:29.528
If I was in a dot js file here,

107
00:03:29.528 --> 00:03:31.377
my Prettier would automatically be like

108
00:03:31.377 --> 00:03:33.330
"Okay let's a little bit redundant",

109
00:03:33.330 --> 00:03:35.820
so you can simply just pass it.

110
00:03:35.820 --> 00:03:37.110
Like that.

111
00:03:37.110 --> 00:03:39.110
The properties of an object can

112
00:03:39.110 --> 00:03:41.410
they pretty much follow the same rules

113
00:03:41.410 --> 00:03:42.260
as variables.

114
00:03:42.260 --> 00:03:43.610
And I'm gonna recommend that

115
00:03:43.610 --> 00:03:47.010
you use the same rules as you name your variables.

116
00:03:47.010 --> 00:03:48.110
However, you can

117
00:03:48.970 --> 00:03:50.680
you go a little bit further with

118
00:03:50.680 --> 00:03:52.200
the properties on an object.

119
00:03:52.200 --> 00:03:55.180
Where if you put these in quotes

120
00:03:55.180 --> 00:03:56.360
and we were to say

121
00:03:56.360 --> 00:03:57.963
cool dash dude.

122
00:03:59.090 --> 00:04:00.472
And let's say true,

123
00:04:00.472 --> 00:04:02.400
you can set that to a boolean,

124
00:04:02.400 --> 00:04:03.233
refresh.

125
00:04:03.233 --> 00:04:05.280
You'll see that there is a property

126
00:04:05.280 --> 00:04:06.300
with a dash in it.

127
00:04:06.300 --> 00:04:08.680
You cannot have variables with a dash in it.

128
00:04:08.680 --> 00:04:10.730
But you can have properties.

129
00:04:10.730 --> 00:04:12.648
Similarly you can also have

130
00:04:12.648 --> 00:04:14.840
spaces in your properties.

131
00:04:14.840 --> 00:04:16.480
Really cool,

132
00:04:16.480 --> 00:04:17.650
false.

133
00:04:17.650 --> 00:04:19.870
And you can have numbers.

134
00:04:19.870 --> 00:04:21.420
If you were to put them in the string.

135
00:04:21.420 --> 00:04:23.580
I guess it's not technically a number there

136
00:04:23.580 --> 00:04:26.610
but it's a string of seven, seven, seven.

137
00:04:26.610 --> 00:04:29.390
And you'll see that, that is in there.

138
00:04:29.390 --> 00:04:31.050
You'll notice that I'm putting,

139
00:04:31.050 --> 00:04:32.390
let me see that they're available there.

140
00:04:32.390 --> 00:04:33.580
We'll talk about how to get to them.

141
00:04:33.580 --> 00:04:34.413
Hey look at that!

142
00:04:34.413 --> 00:04:35.300
That's a perfect example!

143
00:04:35.300 --> 00:04:36.720
That seven, seven, seven.

144
00:04:36.720 --> 00:04:38.060
They put that at the top.

145
00:04:38.060 --> 00:04:39.120
Whereas I put it here

146
00:04:39.120 --> 00:04:41.480
because you can't trust the order of the properties

147
00:04:41.480 --> 00:04:42.740
in an object.

148
00:04:42.740 --> 00:04:44.130
You'll notice that I'm putting commas

149
00:04:44.130 --> 00:04:45.950
after every single one of these.

150
00:04:45.950 --> 00:04:47.890
And I'm gonna recommend that you put

151
00:04:47.890 --> 00:04:49.050
this on the end.

152
00:04:49.050 --> 00:04:51.690
After any time you put a property value

153
00:04:51.690 --> 00:04:53.300
just put a comma on the end.

154
00:04:53.300 --> 00:04:55.470
Even if there's nothing to come after it.

155
00:04:55.470 --> 00:04:56.860
It's not totally necessary.

156
00:04:56.860 --> 00:04:58.630
You see it work just fine there.

157
00:04:58.630 --> 00:05:00.740
But putting a trail end comma on there,

158
00:05:00.740 --> 00:05:02.920
what that will do is it will make sure

159
00:05:02.920 --> 00:05:04.680
that the next time you come around

160
00:05:04.680 --> 00:05:05.780
and add in

161
00:05:05.780 --> 00:05:06.720
a dog

162
00:05:06.720 --> 00:05:07.950
of Snickers

163
00:05:07.950 --> 00:05:10.490
it will allow us to easily add it.

164
00:05:10.490 --> 00:05:12.120
Watch this it will work just fine.

165
00:05:12.120 --> 00:05:13.450
What happens all the time is

166
00:05:13.450 --> 00:05:14.297
if you don't do that,

167
00:05:14.297 --> 00:05:15.130
and it's called

168
00:05:15.130 --> 00:05:18.250
a trail end comma or a comma dangle

169
00:05:18.250 --> 00:05:19.440
it's often called.

170
00:05:19.440 --> 00:05:20.720
If you don't put that on there

171
00:05:20.720 --> 00:05:22.670
then you'll come around in like

172
00:05:22.670 --> 00:05:23.503
I don't know

173
00:05:23.503 --> 00:05:24.336
two months.

174
00:05:24.336 --> 00:05:26.610
You'll be like "Alright just pop a new value in there"

175
00:05:26.610 --> 00:05:28.547
and give it a save and then (makes a buzzer sound)

176
00:05:28.547 --> 00:05:31.920
"unexpected identifier online 20".

177
00:05:31.920 --> 00:05:33.157
And you're, you look at this and like

178
00:05:33.157 --> 00:05:34.360
"What's wrong with that?

179
00:05:34.360 --> 00:05:35.560
It looks fine. Dog.

180
00:05:35.560 --> 00:05:37.500
That's a good, that's a property value.".

181
00:05:37.500 --> 00:05:39.490
And it's because you forgot the comma.

182
00:05:39.490 --> 00:05:41.690
The other sort of gotcha there is that

183
00:05:41.690 --> 00:05:43.740
if you are using a version control system

184
00:05:43.740 --> 00:05:44.740
like Git,

185
00:05:44.740 --> 00:05:46.503
and let's say we had this.

186
00:05:47.350 --> 00:05:49.310
And somebody comes around and

187
00:05:49.310 --> 00:05:51.780
needs to add a dog property to it.

188
00:05:51.780 --> 00:05:52.840
What they have to do

189
00:05:52.840 --> 00:05:54.700
is they have to modify this line

190
00:05:54.700 --> 00:05:55.760
by adding a comma.

191
00:05:55.760 --> 00:05:58.170
And then they also have to modify this line

192
00:05:58.170 --> 00:06:00.050
to add the new property value.

193
00:06:00.050 --> 00:06:01.300
And what you've done there is

194
00:06:01.300 --> 00:06:05.240
you've not really modified this line of to how it works.

195
00:06:05.240 --> 00:06:06.510
But you have added a comma.

196
00:06:06.510 --> 00:06:08.980
So if you do what's called a Git blame.

197
00:06:08.980 --> 00:06:10.180
And a Git blame will show you

198
00:06:10.180 --> 00:06:11.950
who wrote that line of code.

199
00:06:11.950 --> 00:06:13.710
Then the Git blame will fall on you.

200
00:06:13.710 --> 00:06:15.490
Even though somebody else

201
00:06:15.490 --> 00:06:18.610
probably has written that line of code.

202
00:06:18.610 --> 00:06:21.040
So always put a comma dangle on there.

203
00:06:21.040 --> 00:06:22.500
You'll probably see me forget it.

204
00:06:22.500 --> 00:06:24.650
And that's because I'm an old-timer.

205
00:06:24.650 --> 00:06:26.990
And you previously could not put

206
00:06:26.990 --> 00:06:29.250
a comma dangle on the end

207
00:06:29.250 --> 00:06:30.083
it would break.

208
00:06:30.083 --> 00:06:31.920
But now all modern browsers support

209
00:06:31.920 --> 00:06:35.080
putting a comma dangle on there.

210
00:06:35.080 --> 00:06:36.400
Other things you can do is

211
00:06:36.400 --> 00:06:39.070
add nested properties or nested objects.

212
00:06:39.070 --> 00:06:41.420
So if you were to add a sub-property

213
00:06:41.420 --> 00:06:43.370
called like clothing.

214
00:06:43.370 --> 00:06:46.010
And you can give it a sub-object.

215
00:06:46.010 --> 00:06:47.260
And you can say like

216
00:06:47.260 --> 00:06:49.360
shirts ten

217
00:06:49.360 --> 00:06:51.291
pants two.

218
00:06:51.291 --> 00:06:53.100
And if we open it up you see

219
00:06:53.100 --> 00:06:55.730
our object has a nested object

220
00:06:55.730 --> 00:06:56.870
called clothing

221
00:06:56.870 --> 00:06:57.760
which is shirt and pants.

222
00:06:57.760 --> 00:06:58.739
And you can nest

223
00:06:58.739 --> 00:07:00.660
objects

224
00:07:00.660 --> 00:07:02.980
as deep as you possibly could want.

225
00:07:02.980 --> 00:07:04.780
There is sort of a gotcha around

226
00:07:04.780 --> 00:07:07.330
copying objects or cloning objects

227
00:07:07.330 --> 00:07:10.303
that we'll talk about in just a second.

228
00:07:12.276 --> 00:07:15.420
Finally adding a property after the object has been created

229
00:07:15.420 --> 00:07:16.530
is totally possible.

230
00:07:16.530 --> 00:07:18.130
You can just go to person.

231
00:07:18.130 --> 00:07:21.170
And you can use the dot notation

232
00:07:21.170 --> 00:07:22.970
to add a new property.

233
00:07:22.970 --> 00:07:24.890
So if I were to

234
00:07:24.890 --> 00:07:25.723
put a

235
00:07:25.723 --> 00:07:27.300
job property on that person.

236
00:07:27.300 --> 00:07:28.853
And say Web Developer.

237
00:07:30.340 --> 00:07:32.300
Now if we take a look at this.

238
00:07:32.300 --> 00:07:33.133
Open it up.

239
00:07:33.133 --> 00:07:35.760
You see the job property has been added.

240
00:07:35.760 --> 00:07:36.593
Similarly,

241
00:07:36.593 --> 00:07:39.500
if you were to try to over-write a property

242
00:07:39.500 --> 00:07:41.160
you can do that as well.

243
00:07:41.160 --> 00:07:42.460
So we could say

244
00:07:42.460 --> 00:07:45.543
person dot age is equal to 50.

245
00:07:46.420 --> 00:07:48.410
You see that the age property

246
00:07:48.410 --> 00:07:50.453
has been over-written on that.

247
00:07:51.750 --> 00:07:53.317
You might be saying right now

248
00:07:53.317 --> 00:07:55.200
"But hold on Wes,

249
00:07:55.200 --> 00:07:57.290
you created that with a const.

250
00:07:57.290 --> 00:07:59.710
Doesn't const mean it cannot be changed?

251
00:07:59.710 --> 00:08:02.320
And you just went ahead and changed part of it."

252
00:08:02.320 --> 00:08:04.100
Well, that's kind of a gotcha in JavaScript.

253
00:08:04.100 --> 00:08:05.590
Const does not mean

254
00:08:05.590 --> 00:08:09.420
that the value of an object cannot be changed.

255
00:08:09.420 --> 00:08:12.690
Const means that the binding to that person

256
00:08:12.690 --> 00:08:13.870
cannot be changed.

257
00:08:13.870 --> 00:08:15.170
What does that mean?

258
00:08:15.170 --> 00:08:16.350
Well if I,

259
00:08:16.350 --> 00:08:20.250
let's change this variable to Wes.

260
00:08:20.250 --> 00:08:21.083
Right?

261
00:08:21.083 --> 00:08:22.040
I am Wes.

262
00:08:22.040 --> 00:08:23.200
I have been born

263
00:08:23.200 --> 00:08:24.700
this is my object.

264
00:08:24.700 --> 00:08:28.340
Properties about me can change as I grow up.

265
00:08:28.340 --> 00:08:31.299
However, no one can ever replace me.

266
00:08:31.299 --> 00:08:32.450
(laughs)

267
00:08:32.450 --> 00:08:34.352
Not in that way but I'm sure there's

268
00:08:34.352 --> 00:08:36.030
plenty of other people that can

269
00:08:36.030 --> 00:08:38.180
record mediocre screen casts like I do.

270
00:08:38.180 --> 00:08:41.550
But no one can ever over-write

271
00:08:41.550 --> 00:08:42.910
the binding to me.

272
00:08:42.910 --> 00:08:45.120
Meaning that no one can ever come across

273
00:08:45.120 --> 00:08:47.540
and say like "Oh a new Wes was born."

274
00:08:47.540 --> 00:08:49.520
And we're going to say like

275
00:08:49.520 --> 00:08:51.540
the name is Westopher.

276
00:08:51.540 --> 00:08:54.080
And the age is 12.

277
00:08:54.080 --> 00:08:58.020
And the job is a Web Master.

278
00:08:58.020 --> 00:08:58.853
Right.

279
00:08:58.853 --> 00:08:59.720
You can't do that.

280
00:08:59.720 --> 00:09:00.553
Then watch.

281
00:09:00.553 --> 00:09:03.050
Assignment to a constant variable.

282
00:09:03.050 --> 00:09:03.883
Why?

283
00:09:03.883 --> 00:09:05.760
Because I try to make a new const.

284
00:09:05.760 --> 00:09:08.040
Even if I put the const in front of it.

285
00:09:08.040 --> 00:09:08.873
That won't work.

286
00:09:08.873 --> 00:09:10.870
Because the binding to Wes

287
00:09:10.870 --> 00:09:12.660
has already been created.

288
00:09:12.660 --> 00:09:15.470
And even though properties on me can change

289
00:09:15.470 --> 00:09:19.550
the actual object itself can never be over-written entirely.

290
00:09:19.550 --> 00:09:21.680
If you do ever want to

291
00:09:22.840 --> 00:09:23.673
sort of

292
00:09:23.673 --> 00:09:26.020
freeze the values in an object.

293
00:09:26.020 --> 00:09:27.120
What you can do is

294
00:09:27.120 --> 00:09:29.520
you can create a frozen object.

295
00:09:29.520 --> 00:09:32.300
So const Wes froze is equal to,

296
00:09:32.300 --> 00:09:36.180
and you would use capital O object dot freeze.

297
00:09:36.180 --> 00:09:37.310
And you pass it

298
00:09:37.310 --> 00:09:39.500
the object that you wish to freeze.

299
00:09:39.500 --> 00:09:40.760
Now that's not going to freeze

300
00:09:40.760 --> 00:09:42.040
the original Wes.

301
00:09:42.040 --> 00:09:44.850
But what that will do is it will return a new object

302
00:09:44.850 --> 00:09:46.263
called Wes froze.

303
00:09:47.950 --> 00:09:50.300
And that can never be changed.

304
00:09:50.300 --> 00:09:53.080
So age is equal to 100.

305
00:09:53.080 --> 00:09:55.590
And now if I take a look at Wes froze

306
00:09:55.590 --> 00:09:58.660
you see that the age was never actually changed.

307
00:09:58.660 --> 00:10:00.150
So if that's the case

308
00:10:00.150 --> 00:10:02.040
where you wanna make this sort of,

309
00:10:02.040 --> 00:10:04.320
the word that we use is called immutable,

310
00:10:04.320 --> 00:10:06.290
meaning that you cannot change the

311
00:10:07.219 --> 00:10:08.520
mutation is changing a value.

312
00:10:08.520 --> 00:10:10.930
And if you wanna make something immutable,

313
00:10:10.930 --> 00:10:12.830
not changeable,

314
00:10:12.830 --> 00:10:15.050
then you can freeze that entire object

315
00:10:15.050 --> 00:10:17.260
with object dot freeze.

316
00:10:17.260 --> 00:10:19.240
Now talking about accessing properties.

317
00:10:19.240 --> 00:10:20.640
I've shown you one way to

318
00:10:20.640 --> 00:10:21.757
sort of access a property.

319
00:10:21.757 --> 00:10:24.010
And that is with the dot notation.

320
00:10:24.010 --> 00:10:27.562
If you do want to access a property on something

321
00:10:27.562 --> 00:10:29.040
you can just Wes dot job.

322
00:10:29.040 --> 00:10:30.300
Wes dot age.

323
00:10:30.300 --> 00:10:33.010
Wes dot clothing.

324
00:10:33.010 --> 00:10:35.810
And we get access to all of the values.

325
00:10:35.810 --> 00:10:37.690
So just like,

326
00:10:37.690 --> 00:10:40.620
just like we looked at on our DOM elements.

327
00:10:40.620 --> 00:10:42.770
How we have setters and getters.

328
00:10:42.770 --> 00:10:44.500
That is the exact same thing

329
00:10:44.500 --> 00:10:45.333
in an object.

330
00:10:45.333 --> 00:10:48.660
In fact a DOM element is just an object

331
00:10:48.660 --> 00:10:53.210
with a little bit of extra functionality added to it.

332
00:10:53.210 --> 00:10:54.280
So that is the first way.

333
00:10:54.280 --> 00:10:56.560
And that is probably in

334
00:10:56.560 --> 00:10:58.130
almost every use case you will

335
00:10:58.130 --> 00:11:00.150
probably be using dot notation.

336
00:11:00.150 --> 00:11:01.930
However, we have this other notation

337
00:11:01.930 --> 00:11:03.030
to access properties.

338
00:11:03.030 --> 00:11:05.470
And that is with square brackets.

339
00:11:05.470 --> 00:11:07.870
So if you need to access a property

340
00:11:07.870 --> 00:11:09.570
you can also do

341
00:11:09.570 --> 00:11:11.003
let's just console log here.

342
00:11:12.020 --> 00:11:13.703
We can say Wes dot age.

343
00:11:14.720 --> 00:11:15.950
And we can also use

344
00:11:15.950 --> 00:11:16.783
Wes

345
00:11:16.783 --> 00:11:17.810
square bracket.

346
00:11:17.810 --> 00:11:19.390
And then you give it a string

347
00:11:19.390 --> 00:11:22.620
which is the property that we want.

348
00:11:22.620 --> 00:11:23.453
So age.

349
00:11:24.380 --> 00:11:26.530
Now why do we have that?

350
00:11:26.530 --> 00:11:28.430
That seems like a much uglier way

351
00:11:28.430 --> 00:11:30.320
to actually access the properties.

352
00:11:30.320 --> 00:11:32.341
Well, we have that because

353
00:11:32.341 --> 00:11:36.220
if you want to programmatically call up

354
00:11:36.220 --> 00:11:37.400
a property.

355
00:11:37.400 --> 00:11:38.800
Like maybe we were to say

356
00:11:38.800 --> 00:11:39.880
const

357
00:11:39.880 --> 00:11:41.830
property

358
00:11:41.830 --> 00:11:43.160
to check

359
00:11:43.160 --> 00:11:44.630
is equal to.

360
00:11:44.630 --> 00:11:46.270
And we use prompt in this case to say

361
00:11:46.270 --> 00:11:48.723
what do you want to check.

362
00:11:50.030 --> 00:11:51.270
If we were to console log

363
00:11:51.270 --> 00:11:52.683
the property to check.

364
00:11:56.320 --> 00:11:57.540
Now watch this.

365
00:11:57.540 --> 00:11:59.053
If I want to type in age.

366
00:12:00.190 --> 00:12:03.050
It will give us the string of age.

367
00:12:03.050 --> 00:12:04.410
So then what we can do is

368
00:12:04.410 --> 00:12:06.580
we can replace this string

369
00:12:06.580 --> 00:12:09.970
with the variable that has that value.

370
00:12:09.970 --> 00:12:12.160
And that's not going to look

371
00:12:12.160 --> 00:12:13.380
for

372
00:12:13.380 --> 00:12:14.553
a property called

373
00:12:14.553 --> 00:12:16.860
a property to check.

374
00:12:16.860 --> 00:12:17.823
Never.

375
00:12:18.760 --> 00:12:19.780
What it's going to do

376
00:12:19.780 --> 00:12:22.130
is it's going to just use the string

377
00:12:22.130 --> 00:12:23.010
in that variable

378
00:12:23.010 --> 00:12:24.440
as a property look-up.

379
00:12:24.440 --> 00:12:26.040
So if I type in age,

380
00:12:26.040 --> 00:12:27.460
it returns 50.

381
00:12:27.460 --> 00:12:28.637
If I type in dog,

382
00:12:28.637 --> 00:12:30.230
it gives me Snicker.

383
00:12:30.230 --> 00:12:32.370
If I type in clothing,

384
00:12:32.370 --> 00:12:34.730
it gives me the object that is the clothing.

385
00:12:34.730 --> 00:12:36.850
So that's one reason why we have

386
00:12:36.850 --> 00:12:38.250
square bracket notation.

387
00:12:38.250 --> 00:12:40.360
When the property

388
00:12:40.360 --> 00:12:41.270
of

389
00:12:41.270 --> 00:12:42.280
the object

390
00:12:42.280 --> 00:12:45.750
is stored in a variable, because you can't simply just say

391
00:12:45.750 --> 00:12:48.030
Wes dot property to check.

392
00:12:48.030 --> 00:12:52.100
Because then that will literally look for

393
00:12:52.100 --> 00:12:54.410
a property called property to check.

394
00:12:54.410 --> 00:12:55.243
Right?

395
00:12:55.243 --> 00:12:56.310
I feel like that's the reason that I added it there.

396
00:12:56.310 --> 00:12:58.130
To show you that it will literally

397
00:12:58.130 --> 00:13:00.540
look for that property on the object.

398
00:13:00.540 --> 00:13:01.680
So if that's the case

399
00:13:01.680 --> 00:13:04.000
then we need to use square brackets

400
00:13:04.000 --> 00:13:06.050
to reference the name of that.

401
00:13:06.050 --> 00:13:07.370
The other reason is that

402
00:13:07.370 --> 00:13:10.320
sometimes, and this probably isn't a good idea but,

403
00:13:10.320 --> 00:13:15.320
sometimes if the properties of your object are not

404
00:13:15.780 --> 00:13:17.300
referenceable via JavaScript

405
00:13:17.300 --> 00:13:18.830
you have to use a string.

406
00:13:18.830 --> 00:13:20.170
Like I cannot,

407
00:13:20.170 --> 00:13:21.870
let me get this prompt outta here.

408
00:13:23.380 --> 00:13:25.960
Get rid, ah I'll just comment those out.

409
00:13:25.960 --> 00:13:28.570
If I go here I can obviously type Wes dot age.

410
00:13:28.570 --> 00:13:29.940
But I cannot type

411
00:13:29.940 --> 00:13:31.530
Wes dot

412
00:13:31.530 --> 00:13:32.363
cool

413
00:13:32.363 --> 00:13:33.610
dude.

414
00:13:33.610 --> 00:13:36.840
I cannot type Wes dot really cool.

415
00:13:36.840 --> 00:13:39.620
And I cannot type Wes dot seven, seven, seven.

416
00:13:39.620 --> 00:13:41.820
Because those are

417
00:13:41.820 --> 00:13:43.720
invalid property look-ups.

418
00:13:43.720 --> 00:13:46.260
And if that's the case for all three of those,

419
00:13:46.260 --> 00:13:48.620
you would have to use square bracket notation

420
00:13:48.620 --> 00:13:49.940
to be able to access that.

421
00:13:49.940 --> 00:13:51.460
So. Like, why is that there?

422
00:13:51.460 --> 00:13:53.770
That's probably not a really good idea.

423
00:13:53.770 --> 00:13:56.240
Well, sometimes you get data that

424
00:13:56.240 --> 00:13:58.420
comes from maybe from another language,

425
00:13:58.420 --> 00:14:01.020
or you get data that comes from the server side.

426
00:14:01.020 --> 00:14:02.830
And if that's the case

427
00:14:02.830 --> 00:14:04.430
you don't really have a whole lot of options.

428
00:14:04.430 --> 00:14:06.480
So it comes in like this and you need to

429
00:14:06.480 --> 00:14:09.723
use square bracket notation in order to reference it.

430
00:14:11.810 --> 00:14:14.430
If you want to reference multiple levels deep

431
00:14:14.430 --> 00:14:16.040
it's no different than that.

432
00:14:16.040 --> 00:14:17.653
So we say Wes dot clothing.

433
00:14:18.630 --> 00:14:20.156
That's our object.

434
00:14:20.156 --> 00:14:21.930
But we can go one level deep

435
00:14:21.930 --> 00:14:22.763
and find

436
00:14:23.850 --> 00:14:25.170
the nested properties.

437
00:14:25.170 --> 00:14:28.800
So dot notation as deep as we can go.

438
00:14:28.800 --> 00:14:31.540
The only gotcha that we have there is

439
00:14:31.540 --> 00:14:33.480
that we say Wes dot,

440
00:14:33.480 --> 00:14:36.791
let's say we have Wes dot jobs like an object.

441
00:14:36.791 --> 00:14:38.400
That doesn't exist. Right?

442
00:14:38.400 --> 00:14:40.540
And if that's the case it just says "undefined".

443
00:14:40.540 --> 00:14:43.670
There is no jobs property on Wes.

444
00:14:43.670 --> 00:14:48.130
However, if I try to go to Wes dot jobs dot main.

445
00:14:48.130 --> 00:14:49.990
Like what's my main job.

446
00:14:49.990 --> 00:14:53.220
Or Wes dot jobs dot side job.

447
00:14:53.220 --> 00:14:54.640
It will actually "error".

448
00:14:54.640 --> 00:14:55.610
And that's because,

449
00:14:55.610 --> 00:14:56.957
and this is a super common one,

450
00:14:56.957 --> 00:15:00.000
"cannot read property side of undefined".

451
00:15:00.000 --> 00:15:02.760
That's because there is no property

452
00:15:02.760 --> 00:15:05.740
that exists on this undefined value.

453
00:15:05.740 --> 00:15:06.573
Right?

454
00:15:06.573 --> 00:15:07.670
Wes dot jobs is undefined so

455
00:15:07.670 --> 00:15:11.370
there's no properties that live inside of that.

456
00:15:11.370 --> 00:15:12.810
If that's the case.

457
00:15:12.810 --> 00:15:13.740
Then you have to say

458
00:15:13.740 --> 00:15:16.990
Wes dot jobs question mark

459
00:15:16.990 --> 00:15:18.380
Wes dot jobs dot side.

460
00:15:18.380 --> 00:15:21.020
Otherwise, jobs doesn't

461
00:15:22.240 --> 00:15:23.420
exist.

462
00:15:23.420 --> 00:15:26.149
Oh, shoulda used (indistinguishable) there.

463
00:15:26.149 --> 00:15:29.100
And then we get "Wes dot jobs doesn't exist".

464
00:15:29.100 --> 00:15:30.730
There is a proposal

465
00:15:30.730 --> 00:15:33.380
and hopefully this will be out soon.

466
00:15:33.380 --> 00:15:35.380
I'll cut into this video right now

467
00:15:35.380 --> 00:15:37.000
if this now exists.

468
00:15:37.000 --> 00:15:39.090
But there is a proposal where

469
00:15:39.090 --> 00:15:41.023
we'll be able to do what's called a

470
00:15:41.023 --> 00:15:42.700
a deep check.

471
00:15:42.700 --> 00:15:43.900
Where what it will do

472
00:15:43.900 --> 00:15:46.880
is it will check like you can do something like that.

473
00:15:46.880 --> 00:15:48.130
And then that.

474
00:15:48.130 --> 00:15:48.963
And then check for the property.

475
00:15:48.963 --> 00:15:50.410
And what that will do is to say

476
00:15:50.410 --> 00:15:53.440
does Wes exist, if so, check for jobs.

477
00:15:53.440 --> 00:15:54.830
Does jobs exist?

478
00:15:54.830 --> 00:15:55.663
Yes.

479
00:15:55.663 --> 00:15:57.073
If so, then check for side.

480
00:15:57.073 --> 00:16:00.410
And that will allow us to do many levels deep.

481
00:16:00.410 --> 00:16:01.423
Because it's often the case where

482
00:16:01.423 --> 00:16:03.420
we have to say like,

483
00:16:03.420 --> 00:16:05.340
if Wes dot jobs or

484
00:16:05.340 --> 00:16:06.530
if Wes

485
00:16:06.530 --> 00:16:08.852
and Wes dot jobs

486
00:16:08.852 --> 00:16:10.010
and

487
00:16:10.010 --> 00:16:13.050
Wes dot jobs dot first.

488
00:16:13.050 --> 00:16:15.790
Then go ahead and display the first job.

489
00:16:15.790 --> 00:16:18.290
And sometimes we don't know if any of these exist.

490
00:16:18.290 --> 00:16:21.690
So what we have to do is check one, by one, by one.

491
00:16:21.690 --> 00:16:23.430
Otherwise we're gonna run into these errors.

492
00:16:23.430 --> 00:16:24.263
But

493
00:16:24.263 --> 00:16:25.370
hopefully, in,

494
00:16:25.370 --> 00:16:26.203
I don't know,

495
00:16:26.203 --> 00:16:27.610
a year from when I'm recording this,

496
00:16:27.610 --> 00:16:29.020
this will exist in the language

497
00:16:29.020 --> 00:16:32.033
and everything will be great.

498
00:16:36.860 --> 00:16:40.540
We'll often use this if statement for

499
00:16:40.540 --> 00:16:41.780
using on inputs.

500
00:16:41.780 --> 00:16:43.770
So if I go up here.

501
00:16:43.770 --> 00:16:46.000
And right above my scripts

502
00:16:46.000 --> 00:16:47.640
give myself an input

503
00:16:47.640 --> 00:16:49.880
with the name of

504
00:16:51.690 --> 00:16:52.523
let's say

505
00:16:52.523 --> 00:16:53.380
name of first.

506
00:16:53.380 --> 00:16:55.140
Right? We got a little input here.

507
00:16:55.140 --> 00:16:57.183
You can go ahead and type into it.

508
00:16:57.183 --> 00:16:58.690
Often what will happen is

509
00:16:58.690 --> 00:17:00.250
we'll try to select that thing.

510
00:17:00.250 --> 00:17:02.040
So const name input

511
00:17:02.040 --> 00:17:05.620
is equal to document dot query selector.

512
00:17:05.620 --> 00:17:07.810
And we'll say give me where the name

513
00:17:07.810 --> 00:17:09.800
is equal to first.

514
00:17:09.800 --> 00:17:11.600
And then we'll console log.

515
00:17:11.600 --> 00:17:13.520
Name input dot value.

516
00:17:13.520 --> 00:17:15.750
So maybe it'll put that in a variable const.

517
00:17:15.750 --> 00:17:18.093
Name is equal to name input dot value.

518
00:17:19.630 --> 00:17:21.433
And then we'll console log the name.

519
00:17:22.560 --> 00:17:23.810
So nothing's there.

520
00:17:23.810 --> 00:17:25.280
Maybe we should put a value in there

521
00:17:25.280 --> 00:17:27.060
so it runs on page load.

522
00:17:27.060 --> 00:17:28.533
Value is equal to Wes.

523
00:17:29.802 --> 00:17:32.390
Now you see we see Wes on page load.

524
00:17:32.390 --> 00:17:34.660
Now if that didn't exist,

525
00:17:34.660 --> 00:17:36.950
if that input was not on the page,

526
00:17:36.950 --> 00:17:37.783
we get an error

527
00:17:37.783 --> 00:17:40.160
"cannot read property value of null".

528
00:17:40.160 --> 00:17:41.260
What?

529
00:17:41.260 --> 00:17:43.540
Well, well let me show you what happens there.

530
00:17:43.540 --> 00:17:44.373
Name input

531
00:17:45.290 --> 00:17:46.230
console log

532
00:17:46.230 --> 00:17:47.170
name input.

533
00:17:47.170 --> 00:17:48.010
And we get "null".

534
00:17:48.010 --> 00:17:50.620
Why? Because the name input is not on the page.

535
00:17:50.620 --> 00:17:53.562
If it was it would actually give us the input.

536
00:17:53.562 --> 00:17:54.630
There we go.

537
00:17:54.630 --> 00:17:56.130
And then it checks for a property on it

538
00:17:56.130 --> 00:17:56.963
called value.

539
00:17:56.963 --> 00:17:59.730
So if this was the case, and you run into this all the time,

540
00:17:59.730 --> 00:18:00.890
what we have to do is say

541
00:18:00.890 --> 00:18:02.703
if name input.

542
00:18:03.960 --> 00:18:06.213
Then we'll say const name

543
00:18:06.213 --> 00:18:10.010
is equal to name input dot value

544
00:18:10.010 --> 00:18:12.630
or now we've just created a scoped variable

545
00:18:12.630 --> 00:18:13.540
to this if statement

546
00:18:13.540 --> 00:18:15.930
which is not very good cause we can't use it outside.

547
00:18:15.930 --> 00:18:17.640
So we do something like this.

548
00:18:17.640 --> 00:18:19.410
Const name is equal to

549
00:18:19.410 --> 00:18:22.560
and we first check if name input exists.

550
00:18:22.560 --> 00:18:23.630
If that is true

551
00:18:23.630 --> 00:18:26.160
we take the name input and return the value.

552
00:18:26.160 --> 00:18:29.210
Otherwise, we just return it into empty string.

553
00:18:29.210 --> 00:18:31.410
Console log then name.

554
00:18:31.410 --> 00:18:32.770
In this case

555
00:18:32.770 --> 00:18:34.170
it's just an empty string.

556
00:18:34.170 --> 00:18:35.533
But, if this did exist.

557
00:18:38.820 --> 00:18:39.653
You see.

558
00:18:39.653 --> 00:18:40.820
We have the string of Wes.

559
00:18:40.820 --> 00:18:42.500
So that's a pretty common thing to do.

560
00:18:42.500 --> 00:18:44.070
Hopefully, that will be solved

561
00:18:44.070 --> 00:18:45.543
at some point.

562
00:18:46.930 --> 00:18:48.710
To remove a property from an object

563
00:18:48.710 --> 00:18:50.310
you use the delete key.

564
00:18:50.310 --> 00:18:52.500
So not the key on your keyboard, but,

565
00:18:52.500 --> 00:18:54.852
the literal word delete.

566
00:18:54.852 --> 00:18:57.110
You say Wes dot job.

567
00:18:57.110 --> 00:18:59.900
And that will go ahead and delete the actual property.

568
00:18:59.900 --> 00:19:02.240
If you're curious of if it worked or not,

569
00:19:02.240 --> 00:19:05.100
you can save the results in a variable

570
00:19:05.100 --> 00:19:07.400
or simply just console dot log it.

571
00:19:07.400 --> 00:19:10.060
Because a delete will either return true or false

572
00:19:10.060 --> 00:19:12.120
as to if it's deleted or not.

573
00:19:12.120 --> 00:19:14.140
Now if we take a look at Wes dot job

574
00:19:14.140 --> 00:19:16.130
you'll see that it is undefined.

575
00:19:16.130 --> 00:19:18.610
Sometimes you'll also see people setting values

576
00:19:18.610 --> 00:19:20.670
to be null or undefined.

577
00:19:20.670 --> 00:19:23.740
So Wes dot age is undefined

578
00:19:23.740 --> 00:19:26.400
or Wes dot age is equal to null.

579
00:19:26.400 --> 00:19:29.310
Those are not deleting the properties.

580
00:19:29.310 --> 00:19:31.360
They are simply setting them

581
00:19:31.360 --> 00:19:32.350
to be

582
00:19:32.350 --> 00:19:33.280
null

583
00:19:33.280 --> 00:19:34.470
or undefined.

584
00:19:34.470 --> 00:19:35.700
Which in some frameworks,

585
00:19:35.700 --> 00:19:36.670
in some cases

586
00:19:36.670 --> 00:19:40.400
will just allow the thing to skip over it.

587
00:19:40.400 --> 00:19:41.820
Talking about iterating

588
00:19:41.820 --> 00:19:45.040
or looping over an object in each of its properties.

589
00:19:45.040 --> 00:19:47.720
We will talk about the different types of loops

590
00:19:47.720 --> 00:19:50.270
in an upcoming video called "Looping".

591
00:19:50.270 --> 00:19:51.390
It's a pretty common thing

592
00:19:51.390 --> 00:19:54.830
to wanna loop over the data that is inside of an object,

593
00:19:54.830 --> 00:19:56.223
or in an array.

594
00:19:57.100 --> 00:19:58.910
Now let's talk about methods.

595
00:19:58.910 --> 00:20:01.170
We've talked about methods a whole bunch

596
00:20:01.170 --> 00:20:03.030
so probably you already know.

597
00:20:03.030 --> 00:20:03.960
Say it to me now.

598
00:20:03.960 --> 00:20:05.570
What's the difference between a method

599
00:20:05.570 --> 00:20:06.403
and a function?

600
00:20:06.403 --> 00:20:10.350
Well, a method is just a function

601
00:20:10.350 --> 00:20:12.530
that lives inside of an object.

602
00:20:12.530 --> 00:20:14.660
That's as much as we know so far.

603
00:20:14.660 --> 00:20:18.053
But if we go back up to this Wes right here.

604
00:20:19.070 --> 00:20:20.910
And we make a say hello

605
00:20:22.380 --> 00:20:23.360
property.

606
00:20:23.360 --> 00:20:25.313
We can set that to a function.

607
00:20:26.320 --> 00:20:27.473
And

608
00:20:27.473 --> 00:20:29.870
that function could take in a greeting

609
00:20:29.870 --> 00:20:31.030
if we want.

610
00:20:31.030 --> 00:20:32.073
You can set that greeting,

611
00:20:32.073 --> 00:20:35.680
this is the same as any function that you would have,

612
00:20:35.680 --> 00:20:37.107
you could set the default greeting to be

613
00:20:37.107 --> 00:20:37.940
"Hey".

614
00:20:37.940 --> 00:20:40.171
And then from that we return

615
00:20:40.171 --> 00:20:41.713
let's just return.

616
00:20:43.250 --> 00:20:44.103
Greeting.

617
00:20:44.990 --> 00:20:46.382
And then.

618
00:20:46.382 --> 00:20:47.215
Look at this.

619
00:20:47.215 --> 00:20:49.840
Ready? This dot name.

620
00:20:49.840 --> 00:20:50.730
Boom!

621
00:20:50.730 --> 00:20:51.563
Ready?

622
00:20:51.563 --> 00:20:55.230
We're gonna go in here and say Wes dot say hello.

623
00:20:55.230 --> 00:20:57.403
Says "hey Wes" if I pass it.

624
00:20:58.770 --> 00:21:00.000
Hello.

625
00:21:00.000 --> 00:21:01.360
And it will tell me "hello Wes".

626
00:21:01.360 --> 00:21:03.890
Now. What is this?

627
00:21:03.890 --> 00:21:04.723
Literally.

628
00:21:04.723 --> 00:21:06.010
What is this?

629
00:21:06.010 --> 00:21:08.021
I've told you in the past

630
00:21:08.021 --> 00:21:10.460
if we take a look at a method

631
00:21:10.460 --> 00:21:13.260
and if you look to the left of the dot.

632
00:21:13.260 --> 00:21:16.910
This will always be equal to the left of the dot.

633
00:21:16.910 --> 00:21:18.160
So in our case

634
00:21:18.160 --> 00:21:21.010
this is going to be equal to Wes.

635
00:21:21.010 --> 00:21:22.610
And we can reference other properties

636
00:21:22.610 --> 00:21:23.790
on Wes with simply

637
00:21:23.790 --> 00:21:24.930
this dot name.

638
00:21:24.930 --> 00:21:26.780
And the reason why we don't say just like

639
00:21:26.780 --> 00:21:27.780
Wes dot name

640
00:21:27.780 --> 00:21:30.073
is because when we get into prototyping

641
00:21:30.073 --> 00:21:32.730
you're actually gonna see how we can use these methods

642
00:21:32.730 --> 00:21:33.563
on like

643
00:21:33.563 --> 00:21:36.210
multiple people rather than just a person named Wes.

644
00:21:36.210 --> 00:21:38.260
But we could create a

645
00:21:38.260 --> 00:21:40.840
sort of a person object that could be created

646
00:21:40.840 --> 00:21:42.670
in new instance for Wes

647
00:21:42.670 --> 00:21:43.503
and for Scott

648
00:21:43.503 --> 00:21:44.336
and for Kate

649
00:21:44.336 --> 00:21:45.169
and for Snickers.

650
00:21:45.169 --> 00:21:46.410
And then in that case

651
00:21:46.410 --> 00:21:48.130
this method will be on all of them

652
00:21:48.130 --> 00:21:50.560
and we can reference the current person with

653
00:21:50.560 --> 00:21:51.430
this dot name.

654
00:21:51.430 --> 00:21:54.370
So we'll go into that a lot more in the future

655
00:21:54.370 --> 00:21:55.770
once we hit the prototypes.

656
00:21:55.770 --> 00:21:57.060
But just know that you have

657
00:21:57.060 --> 00:21:59.070
when you have a function

658
00:21:59.070 --> 00:22:00.910
that lives on a property

659
00:22:00.910 --> 00:22:01.743
in an object

660
00:22:01.743 --> 00:22:05.394
that is referred to as a method of that object.

661
00:22:05.394 --> 00:22:08.000
Now there also is a method shorthand.

662
00:22:08.000 --> 00:22:09.780
Just like how we looked at the shorthand

663
00:22:09.780 --> 00:22:11.050
right here for age.

664
00:22:11.050 --> 00:22:14.630
We can similarly also do shorthand

665
00:22:14.630 --> 00:22:17.260
where we take the function word away.

666
00:22:17.260 --> 00:22:19.670
We take the colon away.

667
00:22:19.670 --> 00:22:20.950
And that's what we have.

668
00:22:20.950 --> 00:22:22.630
So this is method shorthand.

669
00:22:22.630 --> 00:22:24.250
It is the exact same thing as saying

670
00:22:24.250 --> 00:22:25.773
colon function.

671
00:22:26.700 --> 00:22:29.080
It is not an arrow function.

672
00:22:29.080 --> 00:22:31.610
You can put arrow functions,

673
00:22:31.610 --> 00:22:33.070
make one called sneeze

674
00:22:33.070 --> 00:22:35.020
and set that to be an arrow function.

675
00:22:35.020 --> 00:22:36.765
We'll console log.

676
00:22:36.765 --> 00:22:37.682
Aaachooooo!

677
00:22:39.320 --> 00:22:40.540
And if that's the case

678
00:22:40.540 --> 00:22:42.560
you would say Wes dot sneeze.

679
00:22:42.560 --> 00:22:43.810
That is still a method.

680
00:22:43.810 --> 00:22:46.660
However, because it is an arrow function

681
00:22:46.660 --> 00:22:48.610
as a property

682
00:22:48.610 --> 00:22:49.710
on an object.

683
00:22:49.710 --> 00:22:53.090
We do not have access to the this keyword. Right?

684
00:22:53.090 --> 00:22:54.380
Watch this.

685
00:22:54.380 --> 00:22:55.880
If we run it.

686
00:22:55.880 --> 00:22:57.470
This is equal to window.

687
00:22:57.470 --> 00:22:58.720
Now if I were to change that

688
00:22:58.720 --> 00:23:00.203
to a regular function.

689
00:23:03.940 --> 00:23:05.710
This is equal to

690
00:23:05.710 --> 00:23:06.543
to Wes.

691
00:23:06.543 --> 00:23:07.376
Right?

692
00:23:07.376 --> 00:23:08.209
And look

693
00:23:08.209 --> 00:23:09.080
And I know we keep saying this

694
00:23:09.080 --> 00:23:11.150
but we'll go into why that is.

695
00:23:11.150 --> 00:23:12.010
The short answer here

696
00:23:12.010 --> 00:23:12.990
is that arrow functions

697
00:23:12.990 --> 00:23:14.810
do not scope this

698
00:23:14.810 --> 00:23:16.750
to the thing that they're called against.

699
00:23:16.750 --> 00:23:20.220
And the parent scope will inherit this.

700
00:23:20.220 --> 00:23:21.310
Let's get sneeze outta here.

701
00:23:21.310 --> 00:23:22.370
That's silly.

702
00:23:22.370 --> 00:23:24.810
So that is a high level overview

703
00:23:24.810 --> 00:23:26.150
of what objects are.

704
00:23:26.150 --> 00:23:27.110
In the next coupla videos

705
00:23:27.110 --> 00:23:29.270
we're gonna go into a little bit more deeper things.

706
00:23:29.270 --> 00:23:30.340
Things that you need to know.

707
00:23:30.340 --> 00:23:32.930
A lot o little gotchas about JavaScript.

708
00:23:32.930 --> 00:23:36.363
Before we then dive into arrays.

