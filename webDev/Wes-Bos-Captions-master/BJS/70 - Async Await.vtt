WEBVTT

1
00:00:00.548 --> 00:00:03.131
(upbeat music)

2
00:00:05.010 --> 00:00:05.870
<v ->All right, let's talk about</v>

3
00:00:05.870 --> 00:00:07.940
async await, I've got this promise here and

4
00:00:07.940 --> 00:00:10.060
promises are great but the syntax is

5
00:00:10.060 --> 00:00:13.888
a little bit weird right? This whole .then,

6
00:00:13.888 --> 00:00:16.650
If you need run anything after one of these

7
00:00:16.650 --> 00:00:18.900
you have to put it in the .then and

8
00:00:18.900 --> 00:00:20.840
it's still kind of callback-y like yeah

9
00:00:20.840 --> 00:00:23.930
we got outta callback hell, but we're still

10
00:00:23.930 --> 00:00:27.070
inside of at least one level of callbacks here.

11
00:00:27.070 --> 00:00:31.223
So async await is still 100% promises so

12
00:00:31.223 --> 00:00:34.540
it's not async await vs promises it's just,

13
00:00:34.540 --> 00:00:38.660
async await is a new syntax that will allow us to

14
00:00:38.660 --> 00:00:43.250
use the keyword async and the keyword await

15
00:00:43.250 --> 00:00:47.700
for a much nicer much easier to read looking code

16
00:00:47.700 --> 00:00:50.403
and we'll see how that works in just a second.

17
00:00:52.800 --> 00:00:55.020
So, first thing's first is that your functions

18
00:00:55.020 --> 00:00:58.943
that return promises still stay exactly the same way.

19
00:01:01.520 --> 00:01:03.100
There's nothing that needs to change

20
00:01:03.100 --> 00:01:05.790
about your promise generating functions it's

21
00:01:05.790 --> 00:01:08.475
all in where we actually call the code where

22
00:01:08.475 --> 00:01:12.020
async await comes in handy, so let's go into our

23
00:01:12.020 --> 00:01:13.640
playground here and make a new file, call it

24
00:01:13.640 --> 00:01:17.840
async-await.html and we'll give it our base

25
00:01:19.810 --> 00:01:21.773
and give yourself a script tag.

26
00:01:22.760 --> 00:01:25.563
Now let's make that wait function again so make

27
00:01:25.563 --> 00:01:28.430
a function called wait type standard milliseconds

28
00:01:28.430 --> 00:01:31.280
we'll default that to zero and we will

29
00:01:31.280 --> 00:01:35.140
return a new promise that resolves

30
00:01:36.670 --> 00:01:39.210
after however many seconds we'll say

31
00:01:39.210 --> 00:01:43.903
set timeout resolve after how many milliseconds.

32
00:01:44.980 --> 00:01:47.938
Now if we want to be able to use the

33
00:01:47.938 --> 00:01:50.650
async await syntax there's a couple things that

34
00:01:50.650 --> 00:01:53.750
need to happen. First of all you can only use

35
00:01:53.750 --> 00:01:56.800
async await inside of a function that is marked

36
00:01:56.800 --> 00:01:59.560
as async, so what we have to do

37
00:01:59.560 --> 00:02:02.010
is you have to make a function and say

38
00:02:02.010 --> 00:02:04.010
well lets just make a function called go

39
00:02:06.300 --> 00:02:08.580
and the way it's going to work is we're going to

40
00:02:08.580 --> 00:02:11.330
console log starting and then we're going

41
00:02:11.330 --> 00:02:14.750
to console log ending and if we wanna maybe

42
00:02:14.750 --> 00:02:17.100
wait for two seconds in between there what we're

43
00:02:17.100 --> 00:02:19.820
gonna do is we would say just wait for two

44
00:02:19.820 --> 00:02:23.990
seconds now we all know that if we run this function

45
00:02:23.990 --> 00:02:28.170
on page load lets do it, put it in the browser

46
00:02:30.060 --> 00:02:33.350
we get starting ending immediately. So what async

47
00:02:33.350 --> 00:02:35.700
await allows us to do is we can put the keyword

48
00:02:35.700 --> 00:02:40.370
await in front of a promise based function and it

49
00:02:40.370 --> 00:02:43.810
will sort of temporarily pause that function from

50
00:02:43.810 --> 00:02:47.033
running until that promise is resolved.

51
00:02:48.200 --> 00:02:50.260
Now this isn't going to work as we refresh it

52
00:02:50.260 --> 00:02:54.250
will yell at us, await is only valid in async functions

53
00:02:54.250 --> 00:02:57.120
so what you need to do is you need to mark your

54
00:02:57.120 --> 00:03:00.650
function as async and what that does is it tells

55
00:03:00.650 --> 00:03:04.510
your function hey inside of me i'm going to be doing

56
00:03:04.510 --> 00:03:07.890
some awaiting so you have to first mark your

57
00:03:07.890 --> 00:03:11.630
functions as async you cannot use await anywhere else

58
00:03:11.630 --> 00:03:14.320
except in async functions now if we go ahead and

59
00:03:14.320 --> 00:03:16.530
save this and refresh we get starting

60
00:03:17.640 --> 00:03:20.260
and then two seconds later we get ending

61
00:03:20.260 --> 00:03:23.370
that's beautiful because there's no dot-then-ing

62
00:03:23.370 --> 00:03:27.280
there's no weirdness that is chaining things like

63
00:03:27.280 --> 00:03:29.340
that if I want it to wait for another amount

64
00:03:29.340 --> 00:03:33.608
after that so starting running and we want a

65
00:03:33.608 --> 00:03:35.930
wait maybe another 200 milliseconds and then

66
00:03:35.930 --> 00:03:38.610
console log ending it will work

67
00:03:38.610 --> 00:03:42.500
starting running ending right?

68
00:03:42.500 --> 00:03:45.710
You're able to just stick these in wherever you want

69
00:03:45.710 --> 00:03:48.480
and that function will temporarily pause

70
00:03:48.480 --> 00:03:52.990
until that promise has been resolved

71
00:03:54.490 --> 00:03:57.610
now this marking functions as async you can

72
00:03:57.610 --> 00:03:59.710
do that with any type of function so

73
00:04:00.720 --> 00:04:02.410
what kind of functions do we have well we

74
00:04:02.410 --> 00:04:07.410
have our function declaration which is this so

75
00:04:08.010 --> 00:04:12.510
async function go and lets just name them

76
00:04:12.510 --> 00:04:16.570
all here fd we'll call that and then we could also

77
00:04:16.570 --> 00:04:20.040
have an arrow function so const arrow FN is

78
00:04:20.040 --> 00:04:24.071
equal to something like that and if you want to make

79
00:04:24.071 --> 00:04:26.950
an async function you just put the keyword async in

80
00:04:26.950 --> 00:04:30.552
front of it. What other types do we have? We also have

81
00:04:30.552 --> 00:04:35.552
callback functions so that would look something

82
00:04:36.990 --> 00:04:41.990
like this window dot add event listener click

83
00:04:42.753 --> 00:04:45.310
and we have a function here

84
00:04:46.550 --> 00:04:49.600
and if that is your callback function you put

85
00:04:49.600 --> 00:04:54.600
async, we also have methods, so const person

86
00:04:55.020 --> 00:04:58.350
is equal to an object inside of that we might have

87
00:04:58.350 --> 00:05:02.950
say hi and that is equal to a function, you want to

88
00:05:02.950 --> 00:05:05.791
mark that you just put the async keyword in front

89
00:05:05.791 --> 00:05:10.791
we also have the method shorthand so we'll maybe

90
00:05:11.820 --> 00:05:15.370
have a say hello function looks like that and if

91
00:05:15.370 --> 00:05:17.110
you want to mark it as async you put async

92
00:05:17.110 --> 00:05:20.870
in front of it, we also have function

93
00:05:20.870 --> 00:05:23.570
property maybe we should name these

94
00:05:25.020 --> 00:05:30.020
this is method shorthand and this is method

95
00:05:35.540 --> 00:05:40.110
so function property that would be say hey is

96
00:05:40.110 --> 00:05:43.950
equal to async arrow function like that

97
00:05:46.550 --> 00:05:48.910
and I believe that's all the different

98
00:05:48.910 --> 00:05:52.000
types of ways that we can declare functions.

99
00:05:52.000 --> 00:05:55.310
So essentially whenever you have a function just

100
00:05:55.310 --> 00:05:57.990
put the word async in front of it and that will allow

101
00:05:57.990 --> 00:06:01.220
you to do awaiting inside of it you cannot do what is

102
00:06:01.220 --> 00:06:05.130
referred to as top level await meaning if I would

103
00:06:05.130 --> 00:06:08.690
just open up a script tag here and I were to do

104
00:06:08.690 --> 00:06:12.098
console log one and two and I wanted a two hundred

105
00:06:12.098 --> 00:06:15.690
millisecond in-between that I couldn't do

106
00:06:15.690 --> 00:06:18.370
await wait two hundred milliseconds.

107
00:06:18.370 --> 00:06:21.270
Watch it'll probably say something about top level await.

108
00:06:21.270 --> 00:06:24.030
Await is only valid in async function okay

109
00:06:24.030 --> 00:06:29.030
you can though paste that into dev tools I believe lets see.

110
00:06:30.870 --> 00:06:35.090
Await is not defined why not its because oh it's

111
00:06:35.090 --> 00:06:37.790
probably because I have broken JavaScript on the page.

112
00:06:39.152 --> 00:06:43.340
Invalid shorthand property initializer on line fifty five

113
00:06:43.340 --> 00:06:48.340
what did I do here oh that should

114
00:06:48.460 --> 00:06:51.900
be a colon not an equals sign ah there

115
00:06:51.900 --> 00:06:55.068
we go okay so I should be able to take

116
00:06:55.068 --> 00:06:59.036
do an await inside of here and if I paste that in

117
00:06:59.036 --> 00:07:01.700
say like here it'll give me that you cannot use it

118
00:07:01.700 --> 00:07:05.630
but I think I can paste it into dev tools like this and

119
00:07:05.630 --> 00:07:09.240
so top level await does work in DevTools but doesn't

120
00:07:09.240 --> 00:07:11.270
work anywhere else they're talking about adding it

121
00:07:11.270 --> 00:07:15.281
to node but at the time of recording it is not in

122
00:07:15.281 --> 00:07:18.820
node as well so you must always have an async function

123
00:07:18.820 --> 00:07:22.534
which you can await inside. Lets take a look at some

124
00:07:22.534 --> 00:07:26.520
other examples lets go to that promises dot html file

125
00:07:26.520 --> 00:07:30.125
that we have and lets grab this make pizza function

126
00:07:30.125 --> 00:07:34.070
and move it on over to our async await I'm just

127
00:07:34.070 --> 00:07:36.530
going to comment out all of these here because

128
00:07:36.530 --> 00:07:38.190
it's just showing you how different functions

129
00:07:38.190 --> 00:07:40.550
work I want to have that for you as a reference if

130
00:07:40.550 --> 00:07:42.410
you want to go back to it but it's not

131
00:07:42.410 --> 00:07:45.030
all that useful to use right now so we have our function

132
00:07:45.030 --> 00:07:47.645
wait we have our function make pizza

133
00:07:47.645 --> 00:07:49.840
both of these functions return

134
00:07:49.840 --> 00:07:53.630
a promise and then what we can do is inside of our

135
00:07:53.630 --> 00:07:57.397
async function maybe we'll make another one hold on

136
00:07:57.397 --> 00:08:01.550
yeah so async function make dinner and we'll say

137
00:08:01.550 --> 00:08:06.533
const pizza one is equal to make pizza and

138
00:08:08.023 --> 00:08:10.123
and we want to make a pizza with pepperoni

139
00:08:14.510 --> 00:08:15.570
and if I were to console log

140
00:08:15.570 --> 00:08:17.890
pizza one what are we going to get

141
00:08:19.420 --> 00:08:21.380
so it's an async function we're

142
00:08:21.380 --> 00:08:23.483
sticking make pizza in there.

143
00:08:27.667 --> 00:08:30.700
Why isn't it working? Because I didn't run the function

144
00:08:30.700 --> 00:08:33.450
make dinner here we go let me comment out

145
00:08:33.450 --> 00:08:36.350
go right now because i'm not caring about that

146
00:08:36.350 --> 00:08:39.610
now I get a promise okay well that's not my

147
00:08:39.610 --> 00:08:41.910
pizza why well if you want the

148
00:08:41.910 --> 00:08:46.610
actual data that comes back from a promise you must await

149
00:08:46.610 --> 00:08:49.840
it if you just run the function and store it in a variable

150
00:08:49.840 --> 00:08:52.200
that will store the promise in the variable

151
00:08:52.200 --> 00:08:55.970
but if we take this and put an await in front of it it will

152
00:08:55.970 --> 00:08:59.960
run the make pizza function and then wait and the reason

153
00:08:59.960 --> 00:09:02.585
why its await and not just wait is because it is

154
00:09:02.585 --> 00:09:06.390
asynchronously waiting meaning that its not going to

155
00:09:06.390 --> 00:09:09.410
actually pause all of JavaScript it's not going to block

156
00:09:09.410 --> 00:09:12.160
the rest of this JavaScript on the page from running so if

157
00:09:12.160 --> 00:09:15.690
I were to run both go and make dinner at the same time

158
00:09:15.690 --> 00:09:18.230
these don't interfere with each other it's just this

159
00:09:18.230 --> 00:09:20.880
function that will temporarily pause so we are

160
00:09:20.880 --> 00:09:23.380
asynchronously waiting for the pizza to be done and

161
00:09:23.380 --> 00:09:26.570
when it is done we'll simply console log it. And there

162
00:09:26.570 --> 00:09:29.830
we go now you see after however long it takes we get the

163
00:09:29.830 --> 00:09:33.263
console log of the pizza in our browser.

164
00:09:34.570 --> 00:09:37.880
Similarly we can also do pizza one pizza two if I want

165
00:09:37.880 --> 00:09:40.610
to make another one with mushrooms

166
00:09:43.320 --> 00:09:44.640
console log pizza two

167
00:09:47.820 --> 00:09:51.410
boom boom they each take their own amount of time now

168
00:09:51.410 --> 00:09:55.640
question is how would I wait for both of those to be done

169
00:09:55.640 --> 00:09:58.950
because this could be possibly inefficient and this is

170
00:09:58.950 --> 00:10:03.002
what we refer to as a foot gun in the industry where if

171
00:10:03.002 --> 00:10:07.360
you give somebody the tools to do this its possible that

172
00:10:07.360 --> 00:10:12.020
you could make code that is not performant meaning that

173
00:10:12.020 --> 00:10:16.120
if I'm making a pepperoni pizza and a mushroom pizza

174
00:10:16.120 --> 00:10:19.260
I'm totally waiting for the pepperoni to be

175
00:10:19.260 --> 00:10:24.240
created baked and taken out before I even start making

176
00:10:24.240 --> 00:10:27.050
the next pizza and its likely that you could make

177
00:10:27.050 --> 00:10:29.780
both of those at the same time its likely you could

178
00:10:29.780 --> 00:10:33.871
make pizza concurrently so what we'll do is instead of

179
00:10:33.871 --> 00:10:37.700
running waiting for one and then moving onto the next line

180
00:10:37.700 --> 00:10:42.700
and making the next one we will remove the await from both

181
00:10:43.310 --> 00:10:47.464
of those we will add the word promise to each of these

182
00:10:47.464 --> 00:10:51.315
pizza promise and then we'll make one big promise that

183
00:10:51.315 --> 00:10:55.323
we can await so we'll say const pizzas

184
00:10:55.323 --> 00:10:59.960
is equal to promise dot all and we'll say

185
00:10:59.960 --> 00:11:04.960
pizza promise one pizza promise two, now if we console

186
00:11:06.170 --> 00:11:07.970
log pizzas what are we going to get?

187
00:11:10.320 --> 00:11:14.820
We immediately get the mama promise but that's not

188
00:11:14.820 --> 00:11:17.540
what we want we want to wait for the pizzas

189
00:11:17.540 --> 00:11:21.730
so how do you get the data? You await the mama promise

190
00:11:21.730 --> 00:11:24.640
and instead of returning a promise now it will return

191
00:11:24.640 --> 00:11:28.020
us the pizzas when they are done. And we can go ahead and

192
00:11:28.020 --> 00:11:32.821
de-structure that into pep and mush and now we've got two

193
00:11:32.821 --> 00:11:37.440
variables called pep and mush because this now will

194
00:11:37.440 --> 00:11:39.750
return an array we can take the first item

195
00:11:39.750 --> 00:11:41.840
into pep and the second one into mush

196
00:11:41.840 --> 00:11:44.720
and now we've got both of our values here.

197
00:11:44.720 --> 00:11:48.389
boom So what I want to do now is lets go back to

198
00:11:48.389 --> 00:11:53.389
the code that we wrote early on with the promise chain

199
00:12:01.710 --> 00:12:06.710
and lets rewrite this one more time into async await

200
00:12:07.600 --> 00:12:12.020
so what I'll do here is lets take the animate

201
00:12:13.710 --> 00:12:17.770
copy it and I'm going to paste it again

202
00:12:17.770 --> 00:12:20.080
so now we have two functions called animate

203
00:12:20.080 --> 00:12:23.673
and lets just call this one animate async

204
00:12:23.673 --> 00:12:28.000
ah that's not a good name because their both asynchronous

205
00:12:28.000 --> 00:12:31.368
so that maybe shows that one is asynchronous so

206
00:12:31.368 --> 00:12:36.270
we'll just call it animate two and then we will hook

207
00:12:36.270 --> 00:12:41.270
up the click event to animate two and then will go back up

208
00:12:42.588 --> 00:12:46.200
to our animate two function here and first thing you

209
00:12:46.200 --> 00:12:50.910
need to do is mark that function as async and lets

210
00:12:50.910 --> 00:12:54.780
open it up in the browser make sure it still works

211
00:12:54.780 --> 00:12:59.111
good then oh this is going to be so good and

212
00:12:59.111 --> 00:13:03.300
hopefully this will show you the beauty of async await

213
00:13:03.300 --> 00:13:08.300
is that we simply just need to say await wait then

214
00:13:09.760 --> 00:13:14.760
we can add a class list circle then we can await

215
00:13:17.380 --> 00:13:21.314
another five hundred milliseconds get rid of that

216
00:13:21.314 --> 00:13:26.314
get rid of that get rid of that and add that then

217
00:13:26.780 --> 00:13:30.190
we'll await that get rid of it get rid of it

218
00:13:31.550 --> 00:13:36.200
await that get rid of it get rid of it await that

219
00:13:38.540 --> 00:13:39.910
get rid of it get rid of it

220
00:13:40.970 --> 00:13:43.003
What's this, is that it?

221
00:13:48.480 --> 00:13:52.803
Look at that so now we have async function animate two

222
00:13:52.803 --> 00:13:57.710
and there's no thens there's no callbacks we simply just

223
00:13:57.710 --> 00:14:00.410
paused the function from running with our await

224
00:14:00.410 --> 00:14:04.883
in front of a function that returns to us a promise.

225
00:14:08.392 --> 00:14:09.300
In the next video I'm going to show you a couple

226
00:14:09.300 --> 00:14:12.610
different ways how to handle errors in async await

227
00:14:12.610 --> 00:14:15.010
and then we'll dive into some built in like there's

228
00:14:15.010 --> 00:14:18.070
a lot of browser api's that come with async await and

229
00:14:18.070 --> 00:14:21.393
promises baked in and we'll look at how we can use those.

