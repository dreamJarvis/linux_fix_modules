WEBVTT

1
00:00:00.799 --> 00:00:03.466
(hip-hop music)

2
00:00:05.779 --> 00:00:06.612
<v Instructor>In the last video,</v>

3
00:00:06.612 --> 00:00:08.560
we learned that having a function

4
00:00:08.560 --> 00:00:12.930
and using the new keyword will return an object

5
00:00:12.930 --> 00:00:15.350
that is an instance of that object,

6
00:00:15.350 --> 00:00:18.640
meaning that pepperoni and Canadian pizzas

7
00:00:18.640 --> 00:00:21.560
are both an instance of pizza,

8
00:00:21.560 --> 00:00:25.470
and the way that we attach properties onto that instance

9
00:00:25.470 --> 00:00:29.580
is by saying this.whatever, this.customer at this.id,

10
00:00:29.580 --> 00:00:31.280
these are all instance properties,

11
00:00:31.280 --> 00:00:34.670
meaning each pizza will have their own properties.

12
00:00:34.670 --> 00:00:39.670
Now, when it comes to adding functionality to a class,

13
00:00:39.710 --> 00:00:41.940
in our case, we're gonna look at,

14
00:00:41.940 --> 00:00:44.930
maybe you might wanna do something like this.

15
00:00:44.930 --> 00:00:48.300
If we have to count the number of slices

16
00:00:48.300 --> 00:00:51.370
that are left in that pizza, we can first start

17
00:00:51.370 --> 00:00:53.230
with every pizza having 10 slices,

18
00:00:53.230 --> 00:00:55.640
so we would set a property on that.

19
00:00:55.640 --> 00:00:58.940
We'd say this.slices is equal to 10.

20
00:00:58.940 --> 00:01:02.540
Now, if we go back here and take a look at that pizza,

21
00:01:02.540 --> 00:01:04.270
take at a look at our Canadian pizza,

22
00:01:04.270 --> 00:01:07.860
there are 10 slices in that pizza.

23
00:01:07.860 --> 00:01:10.640
Now, if I wanted to make a method of that pizza,

24
00:01:10.640 --> 00:01:13.030
say, Canadian pizza.eat,

25
00:01:13.030 --> 00:01:14.790
and then take away one of those slices,

26
00:01:14.790 --> 00:01:16.297
you might think, "Okay, we can do this.

27
00:01:16.297 --> 00:01:20.197
"This.eat is equal to function,"

28
00:01:24.190 --> 00:01:28.010
and we will just assume that somebody eats one slice

29
00:01:28.010 --> 00:01:32.620
at a time, we're not weirdos who double up slices,

30
00:01:32.620 --> 00:01:36.310
and then we will say this.slices

31
00:01:36.310 --> 00:01:40.190
is equal to this.slices

32
00:01:40.190 --> 00:01:41.640
minus one.

33
00:01:41.640 --> 00:01:43.100
Is that gonna work?

34
00:01:43.100 --> 00:01:46.500
And then let's just console log "chomp"

35
00:01:46.500 --> 00:01:48.690
so we know that this is actually running.

36
00:01:48.690 --> 00:01:51.460
So now if I go and try to eat,

37
00:01:51.460 --> 00:01:54.040
I get "chomp," and then if I take a look

38
00:01:54.040 --> 00:01:57.760
at how many slices are in that, you get nine.

39
00:01:57.760 --> 00:02:01.900
If I run it again, we have eight.

40
00:02:01.900 --> 00:02:03.430
If I keep running that now,

41
00:02:03.430 --> 00:02:07.430
let's go ahead and modify this a little bit.

42
00:02:07.430 --> 00:02:09.250
Let's go ahead and modify this to make sure

43
00:02:09.250 --> 00:02:12.600
that they don't run out of slices, so we'll say

44
00:02:12.600 --> 00:02:17.073
if this.slices is greater than zero,

45
00:02:17.920 --> 00:02:20.750
then update the number of slices

46
00:02:20.750 --> 00:02:23.947
and in here we'll console log "chomp".

47
00:02:25.913 --> 00:02:27.310
You now have

48
00:02:28.550 --> 00:02:30.610
this.slices

49
00:02:30.610 --> 00:02:31.443
left.

50
00:02:34.860 --> 00:02:36.510
And then we will say else

51
00:02:38.230 --> 00:02:40.433
console log, "Sorry!

52
00:02:41.537 --> 00:02:43.627
"No slices left!"

53
00:02:46.580 --> 00:02:50.043
Let's go ahead and try do it, Canadian pizza.eat.

54
00:02:50.910 --> 00:02:55.663
Nine, eight, seven, six, five, four, three, two, one,

55
00:02:56.710 --> 00:03:01.710
zero, no slices left, good, okay, so that's working.

56
00:03:02.830 --> 00:03:06.620
Now, this works wonderfully, this works really really well,

57
00:03:06.620 --> 00:03:08.600
however, this is a downside to this,

58
00:03:08.600 --> 00:03:12.450
and that is that we're actually creating this function once

59
00:03:12.450 --> 00:03:15.670
for every single pizza that is made,

60
00:03:15.670 --> 00:03:17.830
and I can show you that by saying

61
00:03:17.830 --> 00:03:21.710
Canadian pizza.eat is equal to a function,

62
00:03:21.710 --> 00:03:25.450
and pepperoni pizza.eat

63
00:03:25.450 --> 00:03:28.853
is equal to a function, but are they the same function?

64
00:03:31.310 --> 00:03:32.830
They're not.

65
00:03:32.830 --> 00:03:36.090
What's happening here is that we're duplicating

66
00:03:36.090 --> 00:03:38.410
the functionality of this function

67
00:03:38.410 --> 00:03:43.100
once for every single pizza, and this functionality

68
00:03:43.100 --> 00:03:46.760
looks exactly the same for every single pizza,

69
00:03:46.760 --> 00:03:49.600
so it doesn't need to have its own code for that.

70
00:03:49.600 --> 00:03:51.770
It does need to have its own toppings,

71
00:03:51.770 --> 00:03:53.370
it does need to have its own customer,

72
00:03:53.370 --> 00:03:54.920
it does need to have its own ID,

73
00:03:54.920 --> 00:03:58.060
and it does need to maintain its own slice count,

74
00:03:58.060 --> 00:04:00.580
but the functionality to eat a piece of pizza

75
00:04:00.580 --> 00:04:04.010
is the same for every single pizza that is out there.

76
00:04:04.010 --> 00:04:05.900
You simply open your mouth and you chew it,

77
00:04:05.900 --> 00:04:08.200
and when there's none left, there's none left.

78
00:04:09.430 --> 00:04:13.340
Instead of putting functions on every single instance,

79
00:04:13.340 --> 00:04:16.950
we can put them on what is referred to as the prototype,

80
00:04:16.950 --> 00:04:19.687
and you might be asking, "Wes, what's the big deal?

81
00:04:19.687 --> 00:04:21.070
"This seems to work fine.

82
00:04:21.070 --> 00:04:23.250
You got your pizzas, it's working."

83
00:04:23.250 --> 00:04:27.790
The problem comes when you have 20,000 pizzas,

84
00:04:27.790 --> 00:04:29.180
you have lots of functions,

85
00:04:29.180 --> 00:04:32.870
you have lots of instances of this pizza,

86
00:04:32.870 --> 00:04:35.920
and every time you define a new function,

87
00:04:35.920 --> 00:04:39.130
that takes up memory in your computer,

88
00:04:39.130 --> 00:04:40.750
and that's what causes computers

89
00:04:40.750 --> 00:04:43.980
and websites to go slow in a lot of cases.

90
00:04:43.980 --> 00:04:45.430
So what we could do is, instead of having

91
00:04:45.430 --> 00:04:49.330
20,000 eat functions, we can have one eat function

92
00:04:49.330 --> 00:04:52.390
that is shared amongst all of our pizzas.

93
00:04:52.390 --> 00:04:56.250
Okay, now let's pause on that for a second

94
00:04:56.250 --> 00:05:00.313
and look at some of the built-in prototypes that we have.

95
00:05:03.210 --> 00:05:05.800
If I have my names array which we've already declared,

96
00:05:05.800 --> 00:05:10.310
and I were to make a new array, maybe called "numbers,"

97
00:05:10.310 --> 00:05:13.320
now we have names and we have numbers.

98
00:05:13.320 --> 00:05:14.950
Two arrays, we get that.

99
00:05:14.950 --> 00:05:18.960
In each of those, names will have methods on them,

100
00:05:18.960 --> 00:05:21.223
like something like filter,

101
00:05:22.190 --> 00:05:26.140
and numbers will also have a filter method.

102
00:05:26.140 --> 00:05:29.530
Now, every single time you make an array,

103
00:05:29.530 --> 00:05:31.690
does the browser copy-paste that functionality

104
00:05:31.690 --> 00:05:33.740
and put it inside of each one?

105
00:05:33.740 --> 00:05:36.940
No, it actually lives in something called the prototype

106
00:05:36.940 --> 00:05:41.760
that allows each of the arrays to share that functionality.

107
00:05:41.760 --> 00:05:43.010
Because if we do this,

108
00:05:43.010 --> 00:05:46.280
numbers.filter is equal to names.filter,

109
00:05:46.280 --> 00:05:50.410
it says "true," they are the exact same function.

110
00:05:50.410 --> 00:05:52.510
They don't just have the same functionality,

111
00:05:52.510 --> 00:05:54.500
they are the same function.

112
00:05:54.500 --> 00:05:57.510
Whereas if we take a look at our pizzas,

113
00:05:57.510 --> 00:06:00.130
pepperoni pizza and Canadian pizza,

114
00:06:00.130 --> 00:06:03.520
those are not the same function.

115
00:06:03.520 --> 00:06:06.330
They looked exactly the same, but we are duplicating

116
00:06:06.330 --> 00:06:09.223
that functionality for every single one,

117
00:06:10.220 --> 00:06:14.883
so what we can do is let's comment this out here.

118
00:06:16.010 --> 00:06:18.330
We'll copy it first, comment it out,

119
00:06:18.330 --> 00:06:21.500
and then go below where your pizza is,

120
00:06:21.500 --> 00:06:25.880
and we are going to make this functionality

121
00:06:25.880 --> 00:06:27.440
exist on the prototype.

122
00:06:27.440 --> 00:06:31.963
So we'll say capital P pizza.prototype.eat

123
00:06:33.700 --> 00:06:36.003
is equal to a function,

124
00:06:37.760 --> 00:06:41.860
and then inside of that, you put all the same functionality.

125
00:06:41.860 --> 00:06:44.200
You have to delete the this.eat function

126
00:06:44.200 --> 00:06:47.760
and then the closing bracket, give it a save,

127
00:06:47.760 --> 00:06:49.910
and remove those extra lines here.

128
00:06:49.910 --> 00:06:51.880
Now what will happen is that every single time

129
00:06:51.880 --> 00:06:53.850
that we make a pizza, we're not going

130
00:06:53.850 --> 00:06:57.080
to give it this function, but it will be available

131
00:06:57.080 --> 00:07:00.560
on the prototype, so here's what's gonna happen.

132
00:07:00.560 --> 00:07:01.520
We'll go here.

133
00:07:01.520 --> 00:07:02.740
Let's test this still works,

134
00:07:02.740 --> 00:07:07.740
so Canadian pizza.eat still works exactly the same.

135
00:07:07.870 --> 00:07:12.450
Pepperoni pizza.eat still works exactly the same.

136
00:07:12.450 --> 00:07:16.393
However, if I were to look at a pepperoni pizza,

137
00:07:17.300 --> 00:07:19.920
you'll see that there's toppings,

138
00:07:19.920 --> 00:07:22.490
customer ID, and slices, those are all,

139
00:07:22.490 --> 00:07:25.680
say it with me, instance properties,

140
00:07:25.680 --> 00:07:28.930
but there is no eat functionality,

141
00:07:28.930 --> 00:07:31.660
and if you open up the prototype,

142
00:07:31.660 --> 00:07:34.173
you'll see (exclaims) there it is.

143
00:07:35.620 --> 00:07:39.690
And this is what is referred to as the prototype lookup.

144
00:07:39.690 --> 00:07:42.323
If you put something on the prototype,

145
00:07:43.190 --> 00:07:46.600
and it doesn't exist on the instance,

146
00:07:46.600 --> 00:07:48.890
it will look for it in the mama,

147
00:07:48.890 --> 00:07:53.090
meaning that if we say pepperoni pizza.toppings,

148
00:07:53.090 --> 00:07:55.273
that's an instance, but if we say eat,

149
00:07:56.200 --> 00:07:59.840
what happens is it will first look inside here

150
00:07:59.840 --> 00:08:04.170
for a property called eat, and if it doesn't find it,

151
00:08:04.170 --> 00:08:08.007
it will go to the mama, which is capital P pizza, and say,

152
00:08:08.007 --> 00:08:12.157
"Hey, someone's looking for an eat function,

153
00:08:12.157 --> 00:08:13.847
"but I don't have one.

154
00:08:13.847 --> 00:08:17.410
"Do you by chance have one on your prototype?"

155
00:08:17.410 --> 00:08:19.997
And the mama will say, "Yes, little one.

156
00:08:19.997 --> 00:08:24.047
"Yes, little instance, I do have an eat function,

157
00:08:24.047 --> 00:08:27.547
"and I will let you use it, it's not yours,

158
00:08:27.547 --> 00:08:29.690
"but I'll let you use it," so that means

159
00:08:29.690 --> 00:08:31.780
that every single time that a pizza is made,

160
00:08:31.780 --> 00:08:34.710
we have access to this eat function

161
00:08:34.710 --> 00:08:36.660
and the benefit to that is that you can actually

162
00:08:36.660 --> 00:08:39.110
change these functions, and they will apply

163
00:08:39.110 --> 00:08:41.990
to every single pizza that is there.

164
00:08:41.990 --> 00:08:44.610
Similarily, lemme show you one more example

165
00:08:44.610 --> 00:08:49.083
with just the number, so if I say pizza.protoype.box

166
00:08:52.380 --> 00:08:55.453
or maybe say .size, and we'll just make that a large.

167
00:08:56.930 --> 00:08:59.610
Now, if we go to our pepperoni pizza,

168
00:08:59.610 --> 00:09:03.290
and we look for the size, it will tell us "large,"

169
00:09:03.290 --> 00:09:06.500
but if I were to go into my pizza

170
00:09:06.500 --> 00:09:09.653
and say this.size is equal to medium,

171
00:09:12.890 --> 00:09:14.700
it will then give us medium.

172
00:09:14.700 --> 00:09:17.350
What it does is it first checks for a property

173
00:09:17.350 --> 00:09:19.920
on the instance, and if doesn't exist,

174
00:09:19.920 --> 00:09:24.790
it will go to the prototype and look that on up.

175
00:09:24.790 --> 00:09:26.870
Let's get rid of the size, we don't actually need that,

176
00:09:26.870 --> 00:09:29.100
(slurs words) a simple little example.

177
00:09:29.100 --> 00:09:32.253
Okay, let's bring this back to strings.

178
00:09:33.250 --> 00:09:36.613
Let's make two strings, so const name's equal to wes,

179
00:09:38.350 --> 00:09:41.580
and if we type name., you're gonna see,

180
00:09:41.580 --> 00:09:44.030
there's all of these methods.

181
00:09:44.030 --> 00:09:44.863
What?

182
00:09:44.863 --> 00:09:47.780
Slice small, (chuckles) small,

183
00:09:47.780 --> 00:09:49.410
it would just wrap it in small tag.

184
00:09:49.410 --> 00:09:53.080
There's some old methods from when JavaScript was created

185
00:09:53.080 --> 00:09:56.090
to do interesting thing, I think there's even a blink.

186
00:09:56.090 --> 00:09:56.963
Is there a blink?

187
00:09:57.847 --> 00:09:59.430
(chuckles) It wraps it in a blink tag.

188
00:09:59.430 --> 00:10:00.790
Don't use those, those are just there

189
00:10:00.790 --> 00:10:02.930
'cause they have always been there,

190
00:10:02.930 --> 00:10:06.830
but you get it, I didn't put that on every single string,

191
00:10:06.830 --> 00:10:10.980
but if we take a look at string.prototype

192
00:10:12.550 --> 00:10:17.157
and open it up, you'll see, these are all of the methods

193
00:10:18.330 --> 00:10:20.760
that we've put on the string prototype,

194
00:10:20.760 --> 00:10:22.590
and every single time that you create

195
00:10:22.590 --> 00:10:25.143
a new string, like this,

196
00:10:26.400 --> 00:10:30.373
we'll say const middle is equal to new string,

197
00:10:32.420 --> 00:10:34.893
slam dunk is my middle name,

198
00:10:37.870 --> 00:10:40.640
now middle is a string.

199
00:10:40.640 --> 00:10:43.330
It looks a little different 'cause we used the new keyword,

200
00:10:43.330 --> 00:10:45.970
but it still has all of the methods

201
00:10:45.970 --> 00:10:49.123
that we are used to, to uppercase,

202
00:10:50.580 --> 00:10:52.660
and that is because all of those methods

203
00:10:52.660 --> 00:10:56.930
are defined on the prototype of string.

204
00:10:56.930 --> 00:11:00.280
And what's neat is that you can actually

205
00:11:01.880 --> 00:11:03.910
modify what are called built-ins,

206
00:11:03.910 --> 00:11:06.240
so these ones that come for free,

207
00:11:06.240 --> 00:11:08.730
to uppercase, to lowercase, blink,

208
00:11:08.730 --> 00:11:10.900
all of those, those are what're referred to as built-ins,

209
00:11:10.900 --> 00:11:13.200
meaning they just come with the language,

210
00:11:13.200 --> 00:11:15.870
and you can actually add your own.

211
00:11:15.870 --> 00:11:18.090
Fair warning, you should never do this,

212
00:11:18.090 --> 00:11:21.790
but I'm just showing you because it is helpful

213
00:11:21.790 --> 00:11:25.320
to see how something works.

214
00:11:25.320 --> 00:11:29.571
If I were to take a string.prototype

215
00:11:29.571 --> 00:11:31.820
.to

216
00:11:31.820 --> 00:11:33.710
uppercase,

217
00:11:33.710 --> 00:11:36.053
and we were to make that a new function,

218
00:11:38.450 --> 00:11:39.480
I'll say function

219
00:11:41.340 --> 00:11:44.107
and let's just return "yelling".

220
00:11:46.490 --> 00:11:49.220
Now if I take name

221
00:11:49.220 --> 00:11:51.150
and I run .to

222
00:11:52.400 --> 00:11:56.250
uppercase, it just returns "yelling".

223
00:11:56.250 --> 00:11:57.083
Why?

224
00:11:57.083 --> 00:12:02.083
Because they went back to the mama string and overwrote

225
00:12:02.290 --> 00:12:06.350
the to uppercase functionality on the prototype.

226
00:12:06.350 --> 00:12:10.110
That means any string, now, when it tries to look up

227
00:12:10.110 --> 00:12:12.450
the method to uppercase, it just does

228
00:12:12.450 --> 00:12:14.610
whatever you have overwritten it.

229
00:12:14.610 --> 00:12:17.450
So you could see why that would be a bad idea

230
00:12:17.450 --> 00:12:21.160
because one person might expect to uppercase

231
00:12:21.160 --> 00:12:24.650
to do something one way, and then if you've changed that,

232
00:12:24.650 --> 00:12:27.580
then libraries on the page that're expecting

233
00:12:27.580 --> 00:12:29.590
to uppercase to work will then break,

234
00:12:29.590 --> 00:12:32.500
so you should never modify built-ins.

235
00:12:32.500 --> 00:12:34.963
Why is that useful, why is that allowed?

236
00:12:35.910 --> 00:12:38.360
For new functionality that is added

237
00:12:38.360 --> 00:12:41.633
to the browser like array includes.

238
00:12:43.230 --> 00:12:44.470
We'll look right here.

239
00:12:44.470 --> 00:12:45.680
You see it?

240
00:12:45.680 --> 00:12:48.560
Array.prototype.includes, why?

241
00:12:48.560 --> 00:12:51.150
Because if we take our names array

242
00:12:51.150 --> 00:12:52.460
and we say includes

243
00:12:54.370 --> 00:12:56.430
wes, it says "true,"

244
00:12:56.430 --> 00:12:58.320
and why is that there?

245
00:12:58.320 --> 00:13:01.000
Because every array has a prototype

246
00:13:01.000 --> 00:13:03.200
that has the includes method on it.

247
00:13:03.200 --> 00:13:06.890
Now, some older browsers don't have the includes.

248
00:13:06.890 --> 00:13:08.930
This is new in the last couple years.

249
00:13:08.930 --> 00:13:12.200
So what about older browsers that don't include it?

250
00:13:12.200 --> 00:13:16.830
There's something called a polyfill that is not

251
00:13:16.830 --> 00:13:20.703
on this page, so we have to look it up.

252
00:13:21.560 --> 00:13:23.773
Array prototype includes polyfill,

253
00:13:25.610 --> 00:13:26.930
and

254
00:13:27.831 --> 00:13:31.280
here we go, how to polyfill for IE,

255
00:13:31.280 --> 00:13:34.240
and you see, if someone says

256
00:13:34.240 --> 00:13:39.240
if the array prototype does not have an includes method,

257
00:13:39.920 --> 00:13:41.470
then

258
00:13:41.470 --> 00:13:45.380
the array prototype includes is simply just

259
00:13:45.380 --> 00:13:48.110
they've recreated the functionality

260
00:13:48.110 --> 00:13:52.970
of array.prototype that includes, and then, bam, your IE8

261
00:13:52.970 --> 00:13:55.270
and IE9

262
00:13:55.270 --> 00:13:57.560
will then have access

263
00:13:57.560 --> 00:14:00.070
to array.prototype includes.

264
00:14:00.070 --> 00:14:02.010
That is what is referred to as polyfilling.

265
00:14:02.010 --> 00:14:04.440
When the browser doesn't include it natively,

266
00:14:04.440 --> 00:14:07.680
you can fill it, polyfill it,

267
00:14:07.680 --> 00:14:11.260
by recreating the functionality in just Vanilla JavaScript.

268
00:14:11.260 --> 00:14:14.790
Looks like index of was not supported in IE8, as well,

269
00:14:14.790 --> 00:14:17.810
so somebody has rewritten the entire functionality

270
00:14:17.810 --> 00:14:19.850
of index of and put it in there.

271
00:14:19.850 --> 00:14:21.530
I don't think very many people

272
00:14:21.530 --> 00:14:22.910
support either of these browsers,

273
00:14:22.910 --> 00:14:24.070
so that's maybe a bad example,

274
00:14:24.070 --> 00:14:27.060
but whenever there's new stuff added to the browser,

275
00:14:27.060 --> 00:14:30.010
you can almost always find a polyfill for it

276
00:14:30.010 --> 00:14:31.963
to support older browsers.

277
00:14:33.520 --> 00:14:36.360
You can also add your own methods.

278
00:14:36.360 --> 00:14:38.120
Again, don't do this, but we could go

279
00:14:38.120 --> 00:14:40.210
to string.prototype

280
00:14:42.277 --> 00:14:43.460
.sarcastic

281
00:14:44.460 --> 00:14:46.753
is equal to function.

282
00:14:48.820 --> 00:14:50.050
Let's actually do this in here

283
00:14:50.050 --> 00:14:51.730
so that all of our strings will have it.

284
00:14:51.730 --> 00:14:56.100
Let's go capital S string.prototype.

285
00:14:56.100 --> 00:14:59.173
sarcastic is equal to a function,

286
00:15:00.710 --> 00:15:03.933
and let's just console log this inside of it.

287
00:15:05.520 --> 00:15:07.423
Now when I take a string,

288
00:15:09.266 --> 00:15:13.520
I say name.sarcastic, see, we just made that,

289
00:15:13.520 --> 00:15:17.140
it will log this, which is a string of wes,

290
00:15:17.140 --> 00:15:19.300
so what we could do is we could say

291
00:15:19.300 --> 00:15:21.940
make sarcastic,

292
00:15:21.940 --> 00:15:25.840
const sarcastic is equal to this.

293
00:15:25.840 --> 00:15:29.050
We gotta split it, this.split, this is very similar

294
00:15:29.050 --> 00:15:32.893
to the one we did in our text generator, .map,

295
00:15:34.650 --> 00:15:36.993
the character and the I,

296
00:15:38.060 --> 00:15:39.830
and then, we'll say

297
00:15:42.170 --> 00:15:44.220
if I

298
00:15:44.220 --> 00:15:47.270
divided by two, so if it's an even,

299
00:15:47.270 --> 00:15:50.590
then return this or a character

300
00:15:52.110 --> 00:15:55.420
to uppercase,

301
00:15:55.420 --> 00:15:57.290
else return

302
00:15:58.930 --> 00:16:01.510
character.to, oh, that's not,

303
00:16:01.510 --> 00:16:03.630
to uppercase, that's what we want.

304
00:16:03.630 --> 00:16:06.143
And then this one is to lowercase,

305
00:16:09.320 --> 00:16:13.540
and then we join that back together and return

306
00:16:15.310 --> 00:16:17.673
sarcastic text.

307
00:16:19.640 --> 00:16:20.473
Does that work?

308
00:16:20.473 --> 00:16:21.306
Let's see.

309
00:16:23.000 --> 00:16:25.690
Oh, I gotta make a name variable first,

310
00:16:25.690 --> 00:16:29.990
so we add a name, now we run, (laughs)

311
00:16:29.990 --> 00:16:34.510
so if I were say 'I love to eat pizza'.sarcastic,

312
00:16:36.384 --> 00:16:37.980
(laughs) it will return it to you.

313
00:16:37.980 --> 00:16:41.580
So you see how, by adding a method to the prototype,

314
00:16:41.580 --> 00:16:43.810
you're probably like, "I get it, Wes, I get it."

315
00:16:43.810 --> 00:16:46.940
Whenever you add a method to the prototype of something,

316
00:16:46.940 --> 00:16:50.980
then that will be available on every instance of,

317
00:16:50.980 --> 00:16:53.110
whether that is something that is built-in,

318
00:16:53.110 --> 00:16:55.610
like a string, don't do this, 'cause you shouldn't

319
00:16:55.610 --> 00:16:59.390
modify built-ins, string, number, Boolean,

320
00:16:59.390 --> 00:17:01.820
don't modify any of those, this is just a simple example,

321
00:17:01.820 --> 00:17:05.150
or your own, like pizza, you can add methods

322
00:17:05.150 --> 00:17:06.480
to the prototype of pizza,

323
00:17:06.480 --> 00:17:09.181
and every single pizza will get it.

324
00:17:09.181 --> 00:17:10.123
(exclaims) Okay.

325
00:17:20.090 --> 00:17:23.690
Let's do one more, let's make a little description method,

326
00:17:23.690 --> 00:17:26.980
so when somebody calls pizza.describe,

327
00:17:26.980 --> 00:17:29.357
I want it to tell you: "this pizza is

328
00:17:29.357 --> 00:17:31.417
"for the customer name with the toppings,

329
00:17:31.417 --> 00:17:34.630
"and there are how many slices left".

330
00:17:34.630 --> 00:17:35.530
Maybe try that on your own.

331
00:17:35.530 --> 00:17:38.880
Pause the video for a second, and go ahead and do it.

332
00:17:38.880 --> 00:17:40.387
So it's like pizza

333
00:17:40.387 --> 00:17:41.220
.protoype

334
00:17:42.520 --> 00:17:43.780
.describe

335
00:17:45.410 --> 00:17:46.743
is equal to a function,

336
00:17:49.130 --> 00:17:52.840
and notice how you can always reference the instance

337
00:17:52.840 --> 00:17:54.770
with the keyword "this," and that's why

338
00:17:54.770 --> 00:17:58.060
the "this" is so important, because the "this"

339
00:17:58.060 --> 00:18:00.620
will always tell you how many slices are left

340
00:18:00.620 --> 00:18:03.760
in the pizza that is being called on

341
00:18:03.760 --> 00:18:06.260
and not the mama pizza.

342
00:18:06.260 --> 00:18:10.250
Pizza prototype describe, we will simply return

343
00:18:11.677 --> 00:18:13.100
a string, say: "this

344
00:18:14.027 --> 00:18:16.327
"pizza is for

345
00:18:16.327 --> 00:18:18.160
"this.customer".

346
00:18:18.160 --> 00:18:20.890
Let's just make sure that works first.

347
00:18:20.890 --> 00:18:24.277
We'll say Canadian pizza.describe.

348
00:18:24.277 --> 00:18:26.027
"This pizza is for Kait Bos," good,

349
00:18:27.670 --> 00:18:30.293
with the toppings,

350
00:18:31.310 --> 00:18:33.710
this.toppings.join

351
00:18:33.710 --> 00:18:35.260
with a comma

352
00:18:36.490 --> 00:18:38.000
and there are

353
00:18:39.680 --> 00:18:42.300
this .slices

354
00:18:42.300 --> 00:18:43.133
left.

355
00:18:45.960 --> 00:18:48.227
Take our Canadian pizza and describe it:

356
00:18:48.227 --> 00:18:50.740
"there are 10 left," good.

357
00:18:50.740 --> 00:18:51.720
Now, if I eat

358
00:18:53.500 --> 00:18:56.690
one, two, three, four, five,

359
00:18:56.690 --> 00:19:00.180
now I'd describe it again, there should be five left.

360
00:19:00.180 --> 00:19:01.700
Now, if I take my pepperoni

361
00:19:01.700 --> 00:19:04.113
that is untouched and describe it,

362
00:19:06.117 --> 00:19:07.370
this should be 10 left.

363
00:19:07.370 --> 00:19:09.000
Good, okay!

364
00:19:09.000 --> 00:19:13.090
You see how we can make functionality on the prototype

365
00:19:13.090 --> 00:19:17.450
that will easily be accessible and easily be used

366
00:19:17.450 --> 00:19:19.740
by every single instance of that.

367
00:19:19.740 --> 00:19:21.300
I think you're probably sick of me by now.

368
00:19:21.300 --> 00:19:25.030
That's it for this one, catch me in the next one

369
00:19:25.030 --> 00:19:28.703
which will be about how do we refactor this into classes.

