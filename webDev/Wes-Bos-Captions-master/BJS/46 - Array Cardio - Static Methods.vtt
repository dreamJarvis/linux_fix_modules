WEBVTT

1
00:00:00.800 --> 00:00:03.383
(upbeat music)

2
00:00:05.400 --> 00:00:08.320
<v Instructor>All right, this is Method Cardio.</v>

3
00:00:08.320 --> 00:00:11.270
I like to make this thing up called Array Cardio,

4
00:00:11.270 --> 00:00:14.100
and whatever Cardio, and essentially what it is

5
00:00:14.100 --> 00:00:16.030
is lots of little examples,

6
00:00:16.030 --> 00:00:19.650
that instead of me sitting here and trying to explain all

7
00:00:19.650 --> 00:00:21.790
of the different array methods to you,

8
00:00:21.790 --> 00:00:24.090
we're going to just do lots of examples.

9
00:00:24.090 --> 00:00:25.620
I'll try to get you do it on your own,

10
00:00:25.620 --> 00:00:27.570
and then you come back and watch me do it,

11
00:00:27.570 --> 00:00:29.760
and I'll sorta talk through how they all work.

12
00:00:29.760 --> 00:00:33.960
So, array methods are all of these,

13
00:00:33.960 --> 00:00:36.560
if you just Google Array Methods MDN,

14
00:00:36.560 --> 00:00:37.870
you'll pull up the docs for the Array,

15
00:00:37.870 --> 00:00:41.280
and in the sidebar here you're gonna see all of these here.

16
00:00:41.280 --> 00:00:43.000
Array.from(), is Array.of(),

17
00:00:43.000 --> 00:00:45.370
and then all of these prototype (chirping),

18
00:00:45.370 --> 00:00:46.430
all of those, right?

19
00:00:46.430 --> 00:00:48.780
So I don't wanna sit here and explain all of 'em to you,

20
00:00:48.780 --> 00:00:49.800
'cause that's a little bit boring.

21
00:00:49.800 --> 00:00:52.750
So, what we're gonna do is I've got some data here,

22
00:00:52.750 --> 00:00:53.820
and we're gonna work with it.

23
00:00:53.820 --> 00:00:56.700
We're gonna add things, remove things, sort things,

24
00:00:56.700 --> 00:00:57.690
loop over things.

25
00:00:57.690 --> 00:00:59.770
We're gonna be working with this data

26
00:00:59.770 --> 00:01:01.700
with the hopes that it will start to set in.

27
00:01:01.700 --> 00:01:04.980
Now I have this course the JavaScript30,

28
00:01:04.980 --> 00:01:06.970
you might have taken it already.

29
00:01:06.970 --> 00:01:10.180
And in that we've got two different Array Cardios,

30
00:01:10.180 --> 00:01:13.770
so if this isn't enough, I've got two more days of this,

31
00:01:13.770 --> 00:01:16.420
which is just more and more practice.

32
00:01:16.420 --> 00:01:17.650
I've heard from people that these

33
00:01:17.650 --> 00:01:20.060
are their absolute favorites.

34
00:01:20.060 --> 00:01:22.327
So definitely check those out if you are--

35
00:01:22.327 --> 00:01:25.150
<v ->-it's totally free, you can get a little bit more practice</v>

36
00:01:25.150 --> 00:01:26.590
on your arrays after that.

37
00:01:26.590 --> 00:01:28.360
So, let's get into it.

38
00:01:28.360 --> 00:01:29.790
I've sort of broken this up

39
00:01:29.790 --> 00:01:31.170
into a couple different sections here.

40
00:01:31.170 --> 00:01:33.120
We got Static Methods.

41
00:01:33.120 --> 00:01:36.040
We got Instance Methods, Callback Methods,

42
00:01:36.040 --> 00:01:37.810
and Looping Methods.

43
00:01:37.810 --> 00:01:38.960
We'll do that one in the next,

44
00:01:38.960 --> 00:01:41.530
'cause that's like a map filter reduce,

45
00:01:41.530 --> 00:01:44.260
that's a pretty big one and pretty fundamental,

46
00:01:44.260 --> 00:01:46.170
so we're gonna spend a little bit more time

47
00:01:46.170 --> 00:01:47.450
on that one.

48
00:01:47.450 --> 00:01:49.870
But we're gonna start off with what are referred to

49
00:01:49.870 --> 00:01:51.350
as Static Methods.

50
00:01:51.350 --> 00:01:54.640
Now, you can go to the Arrays Method Start,

51
00:01:54.640 --> 00:01:57.000
and this will just give you a blank version of this,

52
00:01:57.000 --> 00:01:58.970
and you can start to work through that.

53
00:01:58.970 --> 00:02:00.540
Now, if we go to the sidebar here,

54
00:02:00.540 --> 00:02:02.390
you're gonna see there's three methods right here,

55
00:02:02.390 --> 00:02:04.760
from, isArray, and of.

56
00:02:04.760 --> 00:02:08.230
And you see that their Array.of, Array.isArray,

57
00:02:08.230 --> 00:02:09.820
Array.from, and then the rest

58
00:02:09.820 --> 00:02:12.160
of them are Array.prototype.concat.

59
00:02:12.160 --> 00:02:13.700
What's the deal with that?

60
00:02:13.700 --> 00:02:15.027
Well that is what is referred--

61
00:02:15.027 --> 00:02:18.170
<v ->-these are what is referred to as static methods.</v>

62
00:02:18.170 --> 00:02:20.850
And these are what are referred to as instance,

63
00:02:20.850 --> 00:02:22.320
or prototypal methods.

64
00:02:22.320 --> 00:02:25.500
And what that means is when you create a new array,

65
00:02:25.500 --> 00:02:28.610
so if I create like a numbers array here.

66
00:02:28.610 --> 00:02:31.280
And numbers is ready, oh I already have it here.

67
00:02:31.280 --> 00:02:33.940
Numbers is 'cause I recorded this entire video,

68
00:02:33.940 --> 00:02:36.720
and I was recording the wrong screen.

69
00:02:36.720 --> 00:02:39.010
So, we've got this number array here,

70
00:02:39.010 --> 00:02:42.570
and if you take it, you can do things like we can pop,

71
00:02:42.570 --> 00:02:46.870
and you can push more numbers on it again,

72
00:02:46.870 --> 00:02:50.700
and those are methods that sort of just come along.

73
00:02:50.700 --> 00:02:53.890
Whenever you create an array,

74
00:02:53.890 --> 00:02:57.260
you get what is referred to as the array prototype,

75
00:02:57.260 --> 00:02:58.810
and these are all the methods that

76
00:02:58.810 --> 00:03:01.690
are on every single array that are useful

77
00:03:01.690 --> 00:03:03.490
for us to work with that array.

78
00:03:03.490 --> 00:03:06.700
Now there are also these things called static methods,

79
00:03:06.700 --> 00:03:09.300
which aren't available on every single array,

80
00:03:09.300 --> 00:03:12.930
but sort of live on the mama, capital A, Array here,

81
00:03:12.930 --> 00:03:16.100
and those are often what I call utility methods.

82
00:03:16.100 --> 00:03:19.410
They're just sort of handy methods for creating

83
00:03:19.410 --> 00:03:21.010
or working with arrays.

84
00:03:21.010 --> 00:03:21.843
And we're actually gonna look

85
00:03:21.843 --> 00:03:24.580
at some object static methods as well.

86
00:03:24.580 --> 00:03:27.700
So the way that they work is that they're not a method

87
00:03:27.700 --> 00:03:30.750
like .push would be on an array you created,

88
00:03:30.750 --> 00:03:34.030
but they are called with something like Array.from,

89
00:03:34.030 --> 00:03:36.350
and they are accessed exactly like that.

90
00:03:36.350 --> 00:03:37.250
So let's go through it.

91
00:03:37.250 --> 00:03:39.900
First one, Array.of.

92
00:03:39.900 --> 00:03:42.720
Array.of is used for creating an array

93
00:03:42.720 --> 00:03:44.070
from it's arguments.

94
00:03:44.070 --> 00:03:49.070
So if I create Array.of here, and if I pass it wes,

95
00:03:49.220 --> 00:03:51.530
and then I pass it a second argument of kait,

96
00:03:51.530 --> 00:03:53.700
what it will do is it will create an array

97
00:03:53.700 --> 00:03:56.130
from the arguments that you pass it.

98
00:03:56.130 --> 00:03:57.800
Now, that's cool.

99
00:03:57.800 --> 00:04:00.940
I honestly don't use that, ever.

100
00:04:00.940 --> 00:04:02.600
I look through all of the code I've written

101
00:04:02.600 --> 00:04:05.130
on my GitHub, and aside from examples explaining

102
00:04:05.130 --> 00:04:08.760
how Array.of works, I've never used it myself,

103
00:04:08.760 --> 00:04:13.160
because I mostly just use, like if you're typing that,

104
00:04:13.160 --> 00:04:16.320
why not just create an array like this, right?

105
00:04:16.320 --> 00:04:18.360
Why not just create an array literal.

106
00:04:18.360 --> 00:04:21.830
There are a couple little edge case uses for it.

107
00:04:21.830 --> 00:04:24.410
One kind of cool thing is that,

108
00:04:24.410 --> 00:04:26.820
you can spread into a function.

109
00:04:26.820 --> 00:04:28.780
So remember that we talked about

110
00:04:28.780 --> 00:04:33.210
where if you have something, you can spread into an array,

111
00:04:33.210 --> 00:04:35.930
and what this does is it takes an iterable,

112
00:04:35.930 --> 00:04:38.030
meaning something that has a length.

113
00:04:38.030 --> 00:04:40.150
And this is something that has a length,

114
00:04:40.150 --> 00:04:42.500
because strings have a length.

115
00:04:42.500 --> 00:04:44.740
And you can spread each of the items

116
00:04:44.740 --> 00:04:49.100
of that iterable into the surrounding array.

117
00:04:49.100 --> 00:04:52.380
So what I've done there is I've spread the word wes

118
00:04:52.380 --> 00:04:54.140
into an array, and it's taken every letter

119
00:04:54.140 --> 00:04:56.210
and put it as an item of the array.

120
00:04:56.210 --> 00:04:59.270
The same thing works, not just when you're spreading

121
00:04:59.270 --> 00:05:03.950
into an array, but you can also spread into a function.

122
00:05:03.950 --> 00:05:07.040
So if you have a function that takes an unlimited amount

123
00:05:07.040 --> 00:05:09.660
of arguments, or you have something which you want

124
00:05:09.660 --> 00:05:14.010
to spread each item as a argument one, argument two,

125
00:05:14.010 --> 00:05:18.380
argument three, you can spread into a function call,

126
00:05:18.380 --> 00:05:20.590
and in that case you get the exact same thing.

127
00:05:20.590 --> 00:05:21.840
So, that's what it does.

128
00:05:21.840 --> 00:05:23.270
I don't know, keep it in your back pocket.

129
00:05:23.270 --> 00:05:25.790
I doubt you'll use that all that often.

130
00:05:25.790 --> 00:05:27.690
Next one we have here is Array.from,

131
00:05:27.690 --> 00:05:30.870
which is something that I use fairly often.

132
00:05:30.870 --> 00:05:35.010
So, Array.from will take an iterable,

133
00:05:35.010 --> 00:05:37.980
something with a length, and most likely I'll give it

134
00:05:37.980 --> 00:05:40.430
an object with a length property,

135
00:05:40.430 --> 00:05:44.270
and what that will do is it returns to an array

136
00:05:44.270 --> 00:05:48.480
from that iterable, with that many empty slots.

137
00:05:48.480 --> 00:05:51.630
So Array.from, you say I want 10 spots.

138
00:05:51.630 --> 00:05:56.180
It will return to you an array with 10 empty spots.

139
00:05:56.180 --> 00:05:59.580
Now, that's really handy, because I often want

140
00:05:59.580 --> 00:06:03.480
to make an array of like numbers one through 10,

141
00:06:03.480 --> 00:06:05.750
and then loop over them and display

142
00:06:05.750 --> 00:06:07.640
like first, second, third, fourth, something like that.

143
00:06:07.640 --> 00:06:10.530
Sometimes I just wanna loop from one to 10,

144
00:06:10.530 --> 00:06:14.200
or five to eight, and using Array.from will do that.

145
00:06:14.200 --> 00:06:16.730
Now, from also takes a secondary argument,

146
00:06:16.730 --> 00:06:19.403
which is referred to as a map argument.

147
00:06:20.320 --> 00:06:25.320
And the map function will tell us what we can return

148
00:06:25.460 --> 00:06:26.730
to put in those slots.

149
00:06:26.730 --> 00:06:27.920
So let's do that right here.

150
00:06:27.920 --> 00:06:32.920
So if I were to say const range is equal to Array.from.

151
00:06:35.410 --> 00:06:39.290
And let's say I wanna make 10 slots.

152
00:06:39.290 --> 00:06:41.390
I'll give it a length of 10.

153
00:06:41.390 --> 00:06:45.940
And then the second argument from that will be a function

154
00:06:45.940 --> 00:06:49.320
from which you can return anything you want.

155
00:06:49.320 --> 00:06:51.443
So like return 'wes'.

156
00:06:53.880 --> 00:06:57.760
Now we take a look at this right here.

157
00:06:57.760 --> 00:07:01.650
You see, I've got an array of 10 wes', right?

158
00:07:01.650 --> 00:07:03.570
So, create an array with 10 spots,

159
00:07:03.570 --> 00:07:06.830
and then fill it with whatever you return from here.

160
00:07:06.830 --> 00:07:11.620
Now this callback function will give you the actual item,

161
00:07:11.620 --> 00:07:14.197
or the slot, like whatever is in each one,

162
00:07:14.197 --> 00:07:16.930
and in our case, it's always gonna be undefined.

163
00:07:16.930 --> 00:07:18.993
So you can just refer to that as,

164
00:07:20.729 --> 00:07:22.680
a lot of people do an underscore.

165
00:07:22.680 --> 00:07:26.100
Some people do underscore item, just to denote

166
00:07:26.100 --> 00:07:29.210
that the underscore means it doesn't do anything.

167
00:07:29.210 --> 00:07:32.170
Some people also just say item,

168
00:07:32.170 --> 00:07:35.400
and then the second argument is going to be the index,

169
00:07:35.400 --> 00:07:39.050
and then from here, we can return the index.

170
00:07:39.050 --> 00:07:42.790
And now watch, what that will do is it gives us an array,

171
00:07:42.790 --> 00:07:46.000
where each number is the index that we have.

172
00:07:46.000 --> 00:07:48.420
So we can use this to make a little function here.

173
00:07:48.420 --> 00:07:50.973
So we'll make a function called createRange,

174
00:07:53.100 --> 00:07:55.653
and we have a start and an end.

175
00:07:56.490 --> 00:08:01.313
And we'll bring this little range creator inside of it,

176
00:08:02.850 --> 00:08:06.520
and we'll say Array.from, something with a length of,

177
00:08:06.520 --> 00:08:08.700
well what is the length going to be?

178
00:08:08.700 --> 00:08:12.603
It's going to be the end minus the start.

179
00:08:14.060 --> 00:08:16.110
And let's see how that works.

180
00:08:16.110 --> 00:08:21.110
So I said createRange, start at three, go to seven,

181
00:08:22.350 --> 00:08:26.150
and oh (laughs), we forgot to return the range.

182
00:08:26.150 --> 00:08:28.220
Then obviously, that function's not going to do anything.

183
00:08:28.220 --> 00:08:29.360
There we go!

184
00:08:29.360 --> 00:08:31.280
Start at three, go to seven,

185
00:08:31.280 --> 00:08:34.360
that's going to give us four spots.

186
00:08:34.360 --> 00:08:36.860
Then what we can do is return the index,

187
00:08:36.860 --> 00:08:40.433
plus the start number.

188
00:08:41.670 --> 00:08:44.060
And that gives us three, four, five, six.

189
00:08:44.060 --> 00:08:47.260
If you wanted this to be inclusive of seven,

190
00:08:47.260 --> 00:08:51.523
we could add one here.

191
00:08:53.560 --> 00:08:55.920
There we go, three, four, five, six, seven.

192
00:08:55.920 --> 00:08:56.960
That looks good.

193
00:08:56.960 --> 00:08:59.010
So this is a handy little range function

194
00:08:59.010 --> 00:09:02.460
that I've probably written a dozen times in my career,

195
00:09:02.460 --> 00:09:05.070
and I think it's probably a pretty handy thing.

196
00:09:05.070 --> 00:09:06.670
So that's what Array.from does,

197
00:09:06.670 --> 00:09:09.150
it creates an array, given an iterable,

198
00:09:09.150 --> 00:09:12.400
which most likely is always going to be an object

199
00:09:12.400 --> 00:09:14.290
with a length on it.

200
00:09:14.290 --> 00:09:17.280
Next, what we wanna do is, actually let's create a range.

201
00:09:17.280 --> 00:09:21.040
Const myRange is equal to createRange,

202
00:09:21.040 --> 00:09:22.803
start at three, go to seven.

203
00:09:23.790 --> 00:09:27.223
I show you, you can go pretty, oh!

204
00:09:30.350 --> 00:09:31.423
That was too long.

205
00:09:32.380 --> 00:09:35.010
This is a very long array.

206
00:09:35.010 --> 00:09:36.623
Doesn't seem to have worked.

207
00:09:38.270 --> 00:09:39.500
I think I broke it.

208
00:09:39.500 --> 00:09:42.000
Yeah, look it's spinning (laughs).

209
00:09:42.000 --> 00:09:46.020
So, there is a limit to how big your arrays can be.

210
00:09:46.020 --> 00:09:48.710
They are very, very, very large.

211
00:09:48.710 --> 00:09:51.010
There are some additional datatypes in the language

212
00:09:51.010 --> 00:09:52.860
for having big, big arrays.

213
00:09:52.860 --> 00:09:56.190
And more than likely you'll only run into those

214
00:09:56.190 --> 00:09:58.710
when you're dealing with 3D graphics,

215
00:09:58.710 --> 00:10:01.320
and you need to work at a pixel level.

216
00:10:01.320 --> 00:10:02.420
I just broke that.

217
00:10:02.420 --> 00:10:05.020
I'm gonna open it up in a new window here,

218
00:10:05.020 --> 00:10:07.023
and try to run it now.

219
00:10:07.880 --> 00:10:09.460
There we go, with 7,000 items,

220
00:10:09.460 --> 00:10:11.110
you see it runs nice and quickly.

221
00:10:12.470 --> 00:10:14.629
We looked at this isArray before,

222
00:10:14.629 --> 00:10:16.660
but I can show you this right now.

223
00:10:16.660 --> 00:10:21.600
Just console.log the Array.isArray,

224
00:10:23.987 --> 00:10:26.350
myRange, that should console.log true,

225
00:10:26.350 --> 00:10:29.000
because it is a true array, good!

226
00:10:29.000 --> 00:10:30.110
That's a pretty common thing,

227
00:10:30.110 --> 00:10:34.250
just because a typeof, we take myRange,

228
00:10:34.250 --> 00:10:36.110
remember that returns an object.

229
00:10:36.110 --> 00:10:39.080
So if you actually wanna check if it is an array,

230
00:10:39.080 --> 00:10:40.590
you use Array.isArray.

231
00:10:40.590 --> 00:10:43.150
Some other people would sort of cheat it,

232
00:10:43.150 --> 00:10:46.040
and look for things that are arrayish,

233
00:10:46.040 --> 00:10:49.080
like they would check if it has a length property,

234
00:10:49.080 --> 00:10:52.020
but that isn't all that good,

235
00:10:52.020 --> 00:10:54.120
because you could have an object

236
00:10:54.120 --> 00:10:55.350
with a length property as well,

237
00:10:55.350 --> 00:10:56.490
and that wouldn't really work,

238
00:10:56.490 --> 00:10:57.823
so use that.

239
00:10:58.860 --> 00:11:02.480
Next up we have these static methods,

240
00:11:02.480 --> 00:11:05.620
which are on the object instead of on the array.

241
00:11:05.620 --> 00:11:07.180
However, they return arrays,

242
00:11:07.180 --> 00:11:09.920
so that's why I'm including them here.

243
00:11:09.920 --> 00:11:12.860
And the question here is take the meats object,

244
00:11:12.860 --> 00:11:16.890
and make three arrays with entries, keys, and values.

245
00:11:16.890 --> 00:11:20.203
So what this will do is if we console.log,

246
00:11:21.740 --> 00:11:26.290
Object.entries, if you pass it an object,

247
00:11:26.290 --> 00:11:27.610
so let's take a look here.

248
00:11:27.610 --> 00:11:30.430
We've got this meats object here.

249
00:11:30.430 --> 00:11:33.710
Beyond, beef, pork, 10, five, and seven,

250
00:11:33.710 --> 00:11:36.310
if you pass it and you want to turn this object

251
00:11:36.310 --> 00:11:40.810
into an array of the keys, or the values, or both,

252
00:11:40.810 --> 00:11:44.060
that's where we use these static helper methods.

253
00:11:44.060 --> 00:11:49.060
So, entries is going to give us both of them.

254
00:11:49.300 --> 00:11:50.870
Let's just do them all.

255
00:11:50.870 --> 00:11:54.083
Keys, and values.

256
00:11:55.780 --> 00:11:57.040
And you're gonna see that keys

257
00:11:57.040 --> 00:11:59.590
is gonna give us an array of all of the object keys.

258
00:11:59.590 --> 00:12:02.390
Values is gonna give us an array of all of the values.

259
00:12:02.390 --> 00:12:06.260
And entries is going to give us an array,

260
00:12:06.260 --> 00:12:08.310
where each item is then unnested,

261
00:12:08.310 --> 00:12:10.580
if this is a second array, inside of it,

262
00:12:10.580 --> 00:12:13.530
which where the first thing is the key,

263
00:12:13.530 --> 00:12:15.300
and the second thing is the value.

264
00:12:15.300 --> 00:12:17.850
So, pretty common thing to do.

265
00:12:17.850 --> 00:12:21.580
One pretty common way to work with those is our forEach,

266
00:12:21.580 --> 00:12:23.030
I know we're getting a little ahead of ourselves,

267
00:12:23.030 --> 00:12:26.110
'cause we haven't learned about looping all that much,

268
00:12:26.110 --> 00:12:28.560
but I'm gonna show you how to do it anyway.

269
00:12:28.560 --> 00:12:31.603
If we say Object.values,

270
00:12:32.960 --> 00:12:34.280
and we pass it the meats,

271
00:12:34.280 --> 00:12:39.280
we can do dot forEach, and we can just say, meat.

272
00:12:39.410 --> 00:12:42.053
And for each of those we'll console.log the meat.

273
00:12:44.700 --> 00:12:47.070
And, oh, the values is not the meat,

274
00:12:47.070 --> 00:12:48.520
it's the quantity.

275
00:12:48.520 --> 00:12:49.857
So let me say qty.

276
00:12:52.718 --> 00:12:54.760
And we get 10, five, and seven,

277
00:12:54.760 --> 00:12:57.860
those are the values for each of them, right?

278
00:12:57.860 --> 00:12:59.010
That's a pretty common thing to do

279
00:12:59.010 --> 00:13:01.160
if you wanna like loop over and add up

280
00:13:01.160 --> 00:13:02.640
how much inventory you have,

281
00:13:02.640 --> 00:13:04.140
or you wanna add up all the numbers,

282
00:13:04.140 --> 00:13:06.260
then we're gonna look at how we can use reduce

283
00:13:06.260 --> 00:13:07.860
to do that.

284
00:13:07.860 --> 00:13:10.663
So, same thing as if we were to do keys,

285
00:13:11.720 --> 00:13:13.140
we would get the opposite.

286
00:13:13.140 --> 00:13:16.630
And then entries, you will get both.

287
00:13:16.630 --> 00:13:18.670
So we'll just name this entry now,

288
00:13:18.670 --> 00:13:21.490
and console.log the entry to see what we get.

289
00:13:21.490 --> 00:13:23.620
And you see for each one, you get an array

290
00:13:23.620 --> 00:13:24.540
with two items.

291
00:13:24.540 --> 00:13:27.580
The first item is always going to be the key,

292
00:13:27.580 --> 00:13:30.350
and the second item is always going to be the value.

293
00:13:30.350 --> 00:13:33.670
So if you wanted to split those up into their own variables,

294
00:13:33.670 --> 00:13:36.503
you could say const key is equal to,

295
00:13:38.010 --> 00:13:40.310
entry, square bracket zero.

296
00:13:40.310 --> 00:13:45.310
And value is going to be the second thing in it,

297
00:13:45.600 --> 00:13:48.383
and then if we were to console.log key and value,

298
00:13:50.320 --> 00:13:53.420
beyond, beef, pork, 10, five, and seven.

299
00:13:53.420 --> 00:13:56.075
Okay, so that is working,

300
00:13:56.075 --> 00:13:58.980
but another sort of common thing I'll show you

301
00:13:58.980 --> 00:14:01.540
is this thing that is referred to as destructuring.

302
00:14:01.540 --> 00:14:03.220
We've talked about this a lot in this course,

303
00:14:03.220 --> 00:14:05.670
and this is the perfect example.

304
00:14:05.670 --> 00:14:08.760
So, instead of doing this, where you say the first thing

305
00:14:08.760 --> 00:14:11.060
is the key and the second thing is the value,

306
00:14:11.060 --> 00:14:16.060
we can say const key, value is equal to entry.

307
00:14:17.470 --> 00:14:19.230
And we'll comment those out,

308
00:14:19.230 --> 00:14:22.500
and that is the exact same thing but in one line.

309
00:14:22.500 --> 00:14:24.220
What it does is it takes the first item

310
00:14:24.220 --> 00:14:27.420
of our entry array, puts it in a variable called key.

311
00:14:27.420 --> 00:14:30.080
Takes the second item of the entry array,

312
00:14:30.080 --> 00:14:33.580
puts it in a variable called value.

313
00:14:33.580 --> 00:14:37.310
Refresh, still works, just fine, nothing wrong with that.

314
00:14:37.310 --> 00:14:40.080
Then you could even take it one step further,

315
00:14:40.080 --> 00:14:42.620
and destructure this entry variable,

316
00:14:42.620 --> 00:14:45.120
not inside of the body of the function,

317
00:14:45.120 --> 00:14:47.220
but inside of the function definition.

318
00:14:47.220 --> 00:14:50.930
So, let me just say, absolutely nothing wrong with that.

319
00:14:50.930 --> 00:14:52.830
Absolutely nothing wrong with this,

320
00:14:52.830 --> 00:14:54.540
this is just another way to do it.

321
00:14:54.540 --> 00:14:55.930
I find that for a lot of beginners

322
00:14:55.930 --> 00:14:57.410
that might be a little bit confusing,

323
00:14:57.410 --> 00:14:59.530
so feel free to pump the brakes on this

324
00:14:59.530 --> 00:15:01.120
if you're feeling a little bit confused.

325
00:15:01.120 --> 00:15:03.270
So, we'll wrap this entry in parenthesis.

326
00:15:03.270 --> 00:15:04.960
So that's just a regular function,

327
00:15:04.960 --> 00:15:06.270
we did nothing there.

328
00:15:06.270 --> 00:15:07.540
And then I'm going to,

329
00:15:07.540 --> 00:15:10.730
instead of passing one variable called entry,

330
00:15:10.730 --> 00:15:13.050
I'm going to destructure that entry array

331
00:15:13.050 --> 00:15:16.690
into key and value directly,

332
00:15:16.690 --> 00:15:18.850
and now I don't even need to destructure it,

333
00:15:18.850 --> 00:15:22.003
I can just console.log the key and the value directory,

334
00:15:23.190 --> 00:15:24.373
variables directly.

335
00:15:26.820 --> 00:15:29.180
Key and value are not special names here.

336
00:15:29.180 --> 00:15:30.580
You can name them whatever you want.

337
00:15:30.580 --> 00:15:34.280
So we said meat and qty, quantity,

338
00:15:34.280 --> 00:15:36.240
and then we would just change that over here.

339
00:15:36.240 --> 00:15:39.103
Meat and Q-T-Y.

340
00:15:42.740 --> 00:15:45.980
So, Object.entries, values, keys,

341
00:15:45.980 --> 00:15:46.900
I use that all the time.

342
00:15:46.900 --> 00:15:48.003
Very, very handy.

