WEBVTT

1
00:00:04.910 --> 00:00:07.240
<v Instructor>So eventually, the idea with modules</v>

2
00:00:07.240 --> 00:00:09.880
is that we'll be able to ship this script tag

3
00:00:09.880 --> 00:00:11.680
to the browser, meaning that we can just

4
00:00:11.680 --> 00:00:15.090
upload our entire project and the idea is that

5
00:00:15.090 --> 00:00:18.530
we have this thing called http-2 and http-3,

6
00:00:18.530 --> 00:00:21.130
which, even though you're requesting, I don't know,

7
00:00:21.130 --> 00:00:24.270
seven, eight, a hundred different JavaScript files,

8
00:00:24.270 --> 00:00:26.890
they can all be delivered at once,

9
00:00:26.890 --> 00:00:28.675
like your server will know exactly

10
00:00:28.675 --> 00:00:31.603
what JavaScript files to deliver to you.

11
00:00:32.850 --> 00:00:37.070
Now, that currently isn't really the situation,

12
00:00:37.070 --> 00:00:38.900
and most developers will reach

13
00:00:38.900 --> 00:00:40.640
for what is called a bundler.

14
00:00:40.640 --> 00:00:42.870
So why might someone use a bundler

15
00:00:42.870 --> 00:00:45.370
over top of a just regular module?

16
00:00:45.370 --> 00:00:48.750
Well, first of all, you're able to compress

17
00:00:48.750 --> 00:00:49.700
all of your code.

18
00:00:49.700 --> 00:00:53.760
So, all of the code that we have in something like this,

19
00:00:53.760 --> 00:00:56.410
they're able to minify it, so any time

20
00:00:56.410 --> 00:00:58.760
I have a variable called options,

21
00:00:58.760 --> 00:01:01.600
a minifier would take that and just replace it

22
00:01:01.600 --> 00:01:02.900
with just like an "o".

23
00:01:02.900 --> 00:01:06.240
And that is much smaller because it's what?

24
00:01:06.240 --> 00:01:09.270
One, two, three, four, five, six, it's seven times smaller

25
00:01:09.270 --> 00:01:11.390
to use "o" as a variable name than options.

26
00:01:11.390 --> 00:01:13.370
And you shouldn't have to code that way,

27
00:01:13.370 --> 00:01:16.850
but a minifier will do that for you.

28
00:01:16.850 --> 00:01:20.400
It will also make all your code as small as possible,

29
00:01:20.400 --> 00:01:22.570
it will do what's called dead-code elimination.

30
00:01:22.570 --> 00:01:25.200
So if you have a function that's in here

31
00:01:25.200 --> 00:01:27.970
and it's never used, it will detect that

32
00:01:27.970 --> 00:01:30.395
and remove all of that, which is pretty cool.

33
00:01:30.395 --> 00:01:32.650
Other things that bundlers do is,

34
00:01:32.650 --> 00:01:34.710
we talked about what babble is,

35
00:01:34.710 --> 00:01:39.530
babble will transpile your code from all this new stuff

36
00:01:39.530 --> 00:01:42.830
like classes and fact ticks and all of this kind of

37
00:01:42.830 --> 00:01:44.960
neat, new stuff and it will transpile it

38
00:01:44.960 --> 00:01:47.100
if you need to support older browsers.

39
00:01:47.100 --> 00:01:49.820
And then furthermore, it will also handle things

40
00:01:49.820 --> 00:01:54.820
like JavaScript, like SASS or LESS

41
00:01:54.940 --> 00:01:59.940
or if you're using some of the new CSS auto-prefixer stuff,

42
00:02:00.140 --> 00:02:01.780
there's all kinds of like really neat stuff

43
00:02:01.780 --> 00:02:03.010
that sorta does for you.

44
00:02:03.010 --> 00:02:06.300
Now, there's a bunch of different bundlers out there,

45
00:02:06.300 --> 00:02:10.180
and generally, the bundlers will include a bundler [Laughs]

46
00:02:10.180 --> 00:02:12.830
and it will include what's called a Dev server

47
00:02:12.830 --> 00:02:16.580
and that's the, whenever we've been running Parcel start,

48
00:02:16.580 --> 00:02:19.000
that's being the Dev server that we're using.

49
00:02:19.000 --> 00:02:20.470
So Parcel is a good one.

50
00:02:20.470 --> 00:02:23.480
There's a new one called Pika that has been around

51
00:02:23.480 --> 00:02:24.600
for a couple of months yet,

52
00:02:24.600 --> 00:02:28.680
not totally sure what the future of that looks like.

53
00:02:28.680 --> 00:02:31.494
It looks pretty promising, so keep an eye on that.

54
00:02:31.494 --> 00:02:34.910
Webpack is probably the biggest one that's used right now,

55
00:02:34.910 --> 00:02:37.220
very complicated to get up and running,

56
00:02:37.220 --> 00:02:39.450
like it'll, both of these, Parcel and Webpack,

57
00:02:39.450 --> 00:02:40.700
will also do image compression,

58
00:02:40.700 --> 00:02:42.350
by the way, which is pretty cool.

59
00:02:43.280 --> 00:02:45.490
So Webpack is a pretty popular one,

60
00:02:45.490 --> 00:02:48.360
very hard to get up and running, in my opinion,

61
00:02:48.360 --> 00:02:50.130
Rollup is another popular one.

62
00:02:50.130 --> 00:02:52.560
So, essentially, if you want to ship your code

63
00:02:52.560 --> 00:02:54.540
to a browser and have it be as small

64
00:02:54.540 --> 00:02:56.468
and as performant as possible,

65
00:02:56.468 --> 00:02:59.480
right now we're using bundlers to do that.

66
00:02:59.480 --> 00:03:01.610
And I'm going to show you how to use my favorite,

67
00:03:01.610 --> 00:03:03.450
which is called Parcel.

68
00:03:03.450 --> 00:03:06.630
Now, I'm going to be using Parcel One in here,

69
00:03:06.630 --> 00:03:10.030
but Parcel Two will work exactly the same way.

70
00:03:10.030 --> 00:03:11.640
I've talked to the developers behind it,

71
00:03:11.640 --> 00:03:13.460
so nothing will have changed.

72
00:03:13.460 --> 00:03:15.960
If it is, I will cut into this video right now

73
00:03:15.960 --> 00:03:17.520
and show you how to do it.

74
00:03:17.520 --> 00:03:22.170
So let's go and convert both the modules for dad jokes

75
00:03:22.170 --> 00:03:25.320
and the currency converter for modules.

76
00:03:25.320 --> 00:03:27.930
Now I'll show you what the process is for that.

77
00:03:27.930 --> 00:03:32.530
So we'll go into our terminal, and we want to go,

78
00:03:32.530 --> 00:03:37.530
let's do the dad jokes modules first, so into 77.

79
00:03:37.940 --> 00:03:41.150
And the first that you need is a package.json

80
00:03:41.150 --> 00:03:46.150
A package.json is a file that contains

81
00:03:46.590 --> 00:03:49.280
information about your dependencies

82
00:03:49.280 --> 00:03:50.730
and about what scripts you have,

83
00:03:50.730 --> 00:03:51.820
and basically just a bunch

84
00:03:51.820 --> 00:03:53.560
of information about your project.

85
00:03:53.560 --> 00:03:55.700
And if you don't have a package.json,

86
00:03:55.700 --> 00:03:58.470
you can simply get one by typing "npm init"

87
00:03:59.490 --> 00:04:00.890
and we've done this a couple of times,

88
00:04:00.890 --> 00:04:04.240
and it's going to ask you what's the name of your package,

89
00:04:04.240 --> 00:04:06.820
maybe for you, that should say "project name",

90
00:04:06.820 --> 00:04:10.193
but we can type in here, dad jokes.

91
00:04:12.730 --> 00:04:14.430
And then it asks you what version it is,

92
00:04:14.430 --> 00:04:18.400
what description, entry point, test command, git repo,

93
00:04:18.400 --> 00:04:20.400
you just keep hitting enter for all of these.

94
00:04:20.400 --> 00:04:22.210
There's also a little command that will

95
00:04:22.210 --> 00:04:25.266
skip them for you, if you type "npm - - help",

96
00:04:25.266 --> 00:04:28.370
it will give you a list of all the different commands.

97
00:04:28.370 --> 00:04:30.570
Not gonna get into that right now.

98
00:04:30.570 --> 00:04:33.430
Now, if we go to our package.json,

99
00:04:33.430 --> 00:04:37.050
you'll see in here is all the information about our project.

100
00:04:37.050 --> 00:04:40.330
And the we can go ahead and install our Parcel bundler.

101
00:04:40.330 --> 00:04:42.870
Now we want to go ahead and install Parcel,

102
00:04:42.870 --> 00:04:44.880
so I've told you you can globally install it,

103
00:04:44.880 --> 00:04:48.190
which is great for when you need just a quick

104
00:04:48.190 --> 00:04:50.270
server up and running, but any project

105
00:04:50.270 --> 00:04:52.210
that's gonna go on for more than a couple days,

106
00:04:52.210 --> 00:04:55.840
I recommend that you install it to that project as well.

107
00:04:55.840 --> 00:04:59.020
That way, anyone who downloads this thing off of GitHub,

108
00:04:59.020 --> 00:05:00.620
or you send it to a coworker,

109
00:05:00.620 --> 00:05:04.100
they all use the same version of Parcel,

110
00:05:04.100 --> 00:05:06.250
and it's easy for them to get up and running

111
00:05:06.250 --> 00:05:07.620
just by typing in "npm start".

112
00:05:07.620 --> 00:05:11.840
So we want to npm install Parcel-bundler.

113
00:05:11.840 --> 00:05:15.240
And we want to save it as a Dev-dependency,

114
00:05:15.240 --> 00:05:18.180
so you pass the "dash dash" save-dev,

115
00:05:18.180 --> 00:05:21.130
or just dash capital "D" as a short form of that.

116
00:05:21.130 --> 00:05:22.970
And what that will do is it's going to put it

117
00:05:22.970 --> 00:05:26.320
as a dependency in our package.json,

118
00:05:26.320 --> 00:05:28.850
and it will put it under what's called "dev dependencies".

119
00:05:28.850 --> 00:05:31.080
And these are things that are not needed

120
00:05:31.080 --> 00:05:34.120
for the application to run, but they are needed

121
00:05:34.120 --> 00:05:36.870
in order for someone to work on the application.

122
00:05:36.870 --> 00:05:39.820
That's the difference between a dependency,

123
00:05:39.820 --> 00:05:43.680
something like "react" or "view" might be a dependency,

124
00:05:43.680 --> 00:05:46.340
and then a dev dependency might be just the tooling

125
00:05:46.340 --> 00:05:48.855
that is needed in order to work on it.

126
00:05:48.855 --> 00:05:51.390
There we go, after a couple of minutes, it installed.

127
00:05:51.390 --> 00:05:53.750
You'll see that it's listed under dev dependencies

128
00:05:53.750 --> 00:05:56.760
and the version of Parcel, if you see 2.0,

129
00:05:56.760 --> 00:05:59.380
don't freak out, it is totally fine.

130
00:05:59.380 --> 00:06:00.810
I expect that to be the case

131
00:06:00.810 --> 00:06:02.750
pretty soon after recording this.

132
00:06:02.750 --> 00:06:05.320
They've been working on Parcel Two for well over a year

133
00:06:05.320 --> 00:06:08.003
and it should be out sometime soon.

134
00:06:09.200 --> 00:06:11.780
Now, in order to run Parcel, we've done this as well,

135
00:06:11.780 --> 00:06:14.480
is you add a script that will use it.

136
00:06:14.480 --> 00:06:17.352
So we can't just run, well we can run Parcel

137
00:06:17.352 --> 00:06:21.210
right from here, like I could say Parcel index.html

138
00:06:21.210 --> 00:06:22.650
and it goes ahead and runs,

139
00:06:22.650 --> 00:06:25.940
but when you type it into the command line like this,

140
00:06:25.940 --> 00:06:28.170
it uses your global install of Parcel

141
00:06:28.170 --> 00:06:29.520
that's on your computer.

142
00:06:29.520 --> 00:06:32.960
If you want to use the npm-installed version

143
00:06:32.960 --> 00:06:34.520
of Parcel that we just did,

144
00:06:34.520 --> 00:06:38.380
it's better to run it as an npm script instead.

145
00:06:38.380 --> 00:06:41.840
So what we'll do is we'll give it a start

146
00:06:41.840 --> 00:06:45.512
and we'll replace that script with parcel

147
00:06:45.512 --> 00:06:48.430
and then we just give it our entry point,

148
00:06:48.430 --> 00:06:51.330
which is index.html.

149
00:06:51.330 --> 00:06:54.870
Give it a save, and now I just need to type npm start

150
00:06:54.870 --> 00:06:58.400
and that will, in turn, run Parcel index for us.

151
00:06:58.400 --> 00:07:02.050
So that's just a npm whatever the name of the script here,

152
00:07:02.050 --> 00:07:05.250
will in turn run this for us.

153
00:07:05.250 --> 00:07:08.160
And then you see it's running on local host 1234.

154
00:07:08.160 --> 00:07:10.853
Open it up here and check in my dev tools.

155
00:07:12.199 --> 00:07:15.180
Now we get the same issue we had before:

156
00:07:15.180 --> 00:07:19.410
regenerator run time is not defined at handle click.

157
00:07:19.410 --> 00:07:22.560
And that's because we're using async await here.

158
00:07:22.560 --> 00:07:24.540
So the way that we got around that before,

159
00:07:24.540 --> 00:07:26.070
and you're probably gonna have to do this

160
00:07:26.070 --> 00:07:27.355
in every one of your projects,

161
00:07:27.355 --> 00:07:32.355
is you type browserslist, which is an array.

162
00:07:32.470 --> 00:07:35.300
Notice how I put a comma after that one there.

163
00:07:35.300 --> 00:07:38.530
And we just say, in double quotes, not single,

164
00:07:38.530 --> 00:07:41.133
last 1 chrome versions.

165
00:07:42.600 --> 00:07:44.740
And there we go, that gets rid of it.

166
00:07:44.740 --> 00:07:47.340
If you ever have problems with Parcel being weird

167
00:07:47.340 --> 00:07:49.990
or you're like, "I fixed it but it's not actually fixed"

168
00:07:49.990 --> 00:07:54.650
go into your, find your cache, and your dist folders.

169
00:07:54.650 --> 00:07:57.440
Those are two folders that are generated by Parcel,

170
00:07:57.440 --> 00:07:59.900
nothing wrong with ever just deleting them,

171
00:07:59.900 --> 00:08:02.290
and then re-running npm start.

172
00:08:02.290 --> 00:08:03.660
And watch, they'll regenerate

173
00:08:03.660 --> 00:08:07.007
those folders for you, which is great.

174
00:08:07.007 --> 00:08:09.770
So that allows you to just go ahead and work on it,

175
00:08:09.770 --> 00:08:13.847
and it's great because you can work

176
00:08:15.040 --> 00:08:16.880
on all of your JavaScript and it will

177
00:08:16.880 --> 00:08:19.120
automatically reload those for you,

178
00:08:19.120 --> 00:08:22.060
or in most cases, it will try to reload it.

179
00:08:22.060 --> 00:08:24.110
It's not perfect with vanilla JavaScript

180
00:08:24.110 --> 00:08:27.210
but with things like view and react it works really well.

181
00:08:27.210 --> 00:08:29.010
And then the other part of Parcel

182
00:08:29.010 --> 00:08:31.260
is once you're done developing,

183
00:08:31.260 --> 00:08:33.450
it's time to go ahead and build it,

184
00:08:33.450 --> 00:08:38.060
build a compiled version of your JavaScript file.

185
00:08:38.060 --> 00:08:40.766
So when you wanna put this thing online,

186
00:08:40.766 --> 00:08:43.410
what you do is you write

187
00:08:43.410 --> 00:08:45.453
another script in your package.json.

188
00:08:46.524 --> 00:08:47.780
So you put a comma there,

189
00:08:47.780 --> 00:08:50.210
and you make a new one called build.

190
00:08:50.210 --> 00:08:52.800
And that will just run Parcel build.

191
00:08:52.800 --> 00:08:56.830
And I believe that's all we need to do.

192
00:08:56.830 --> 00:08:59.540
Maybe we need to pass index.html, let's see.

193
00:08:59.540 --> 00:09:01.363
Npm run build.

194
00:09:02.440 --> 00:09:04.560
So npm start will always look for a script

195
00:09:04.560 --> 00:09:06.504
called start, but that's it.

196
00:09:06.504 --> 00:09:09.900
The other script names you have to type in "run".

197
00:09:09.900 --> 00:09:12.120
And I just made that up, called build.

198
00:09:12.120 --> 00:09:13.370
That's not a special one.

199
00:09:14.774 --> 00:09:15.990
No entries found.

200
00:09:15.990 --> 00:09:19.243
So I do need to pass index.html to that.

201
00:09:20.410 --> 00:09:22.040
Now let's try it.

202
00:09:22.040 --> 00:09:23.690
Building index.html.

203
00:09:23.690 --> 00:09:26.833
See look, it's building all of our JavaScript files for us.

204
00:09:35.350 --> 00:09:36.183
Boom!

205
00:09:36.183 --> 00:09:37.100
You see what it did here?

206
00:09:37.100 --> 00:09:40.260
Is it created a dist folder for us

207
00:09:40.260 --> 00:09:43.370
and let's go an take a look at what's in there.

208
00:09:43.370 --> 00:09:44.660
Dist folder--woo!

209
00:09:44.660 --> 00:09:45.630
Look at all these!

210
00:09:45.630 --> 00:09:48.750
So we obviously have our index.html if we open that up.

211
00:09:48.750 --> 00:09:53.380
Look, it's taken all of our html

212
00:09:53.380 --> 00:09:56.380
and compressed it as much as it possibly can.

213
00:09:56.380 --> 00:10:01.380
It also has swapped out the jokes.js file for us.

214
00:10:05.330 --> 00:10:09.380
And then each of the different files that we have,

215
00:10:09.380 --> 00:10:11.500
you can see that there's a .js in here.

216
00:10:11.500 --> 00:10:14.419
You see, look at this, this is our code.

217
00:10:14.419 --> 00:10:18.410
You can kind of see, like look at this.

218
00:10:18.410 --> 00:10:22.630
Fetch icanhazdadjoke headers:Accept:json.

219
00:10:22.630 --> 00:10:27.630
But things like s=await t.json, what was that?

220
00:10:29.200 --> 00:10:33.330
Well if we go back to our jokes.js, where was it?

221
00:10:33.330 --> 00:10:37.420
It was in our lib, index, see?

222
00:10:37.420 --> 00:10:41.720
It was const data= await response.json.

223
00:10:41.720 --> 00:10:43.650
In the new, finished version,

224
00:10:43.650 --> 00:10:46.150
it's simply just s=await t.json.

225
00:10:46.150 --> 00:10:48.720
So there's a robot that knows really well

226
00:10:48.720 --> 00:10:50.285
how to make small variables

227
00:10:50.285 --> 00:10:53.400
and rename things, which is pretty cool.

228
00:10:53.400 --> 00:10:56.260
And then you'll also see these .map files.

229
00:10:56.260 --> 00:11:00.090
And what those are, is if I were to open this index.html

230
00:11:00.090 --> 00:11:03.570
in my browser here, oh, it doesn't work

231
00:11:03.570 --> 00:11:05.700
because I'm not on a server.

232
00:11:05.700 --> 00:11:09.650
But what happens is that, if there is an error

233
00:11:09.650 --> 00:11:14.650
somewhere in here, like the await, here were go,

234
00:11:15.350 --> 00:11:18.550
const t=await fetch, it's not going to tell you

235
00:11:18.550 --> 00:11:22.430
that the error is in the jokes.e24dcae1.js

236
00:11:24.920 --> 00:11:29.080
because you could not decipher where that error would be

237
00:11:29.080 --> 00:11:31.370
because this looks nothing like the JavaScript

238
00:11:31.370 --> 00:11:33.070
that you have written yourself.

239
00:11:33.070 --> 00:11:34.960
And it will also tell you that the error's

240
00:11:34.960 --> 00:11:39.569
either on line one, two, three, four, or up to 14.

241
00:11:39.569 --> 00:11:42.540
And that's not great, either.

242
00:11:42.540 --> 00:11:45.080
So what these map files will do

243
00:11:45.080 --> 00:11:49.000
is they map back the compiled, mangled version

244
00:11:49.000 --> 00:11:53.950
back to the lines in your beautifully written one.

245
00:11:53.950 --> 00:11:58.070
And they point to which module they're in,

246
00:11:58.070 --> 00:12:00.190
they point to the original, and your browser

247
00:12:00.190 --> 00:12:02.690
is able to decipher those map files,

248
00:12:02.690 --> 00:12:04.460
and give you good errors, telling you

249
00:12:04.460 --> 00:12:07.049
exactly where those errors has happened.

250
00:12:07.049 --> 00:12:09.680
It will also compile all of your CSS for you,

251
00:12:09.680 --> 00:12:13.890
look at this, and ship it for you.

252
00:12:13.890 --> 00:12:17.640
It doesn't look like it compresses the CSS as well.

253
00:12:17.640 --> 00:12:20.610
One other thing is, I have had issues with Parcel

254
00:12:20.610 --> 00:12:24.524
in the past, I'm not sure if this fixed or not,

255
00:12:24.524 --> 00:12:29.524
but the type of module, because you're using Parcel

256
00:12:33.230 --> 00:12:36.270
instead of just regular modules in the browser,

257
00:12:36.270 --> 00:12:37.370
even though they're the same thing,

258
00:12:37.370 --> 00:12:39.380
I've had to delete this in the past.

259
00:12:39.380 --> 00:12:42.030
So if you run into those problems,

260
00:12:42.030 --> 00:12:44.690
just go ahead and delete that type of module

261
00:12:44.690 --> 00:12:46.330
and then rerun your build command.

262
00:12:46.330 --> 00:12:49.200
So the Parcel build is something that you're going to be

263
00:12:49.200 --> 00:12:50.930
rerunning every single time

264
00:12:50.930 --> 00:12:53.070
that you've changed your application.

265
00:12:53.070 --> 00:12:57.413
The other thing about this is if I rerun this npm run build,

266
00:13:01.060 --> 00:13:03.700
you'll notice that these numbers stay the same:

267
00:13:03.700 --> 00:13:08.197
543 543 543 right there, .css,

268
00:13:10.010 --> 00:13:13.310
but if I were to change some of these,

269
00:13:13.310 --> 00:13:18.163
like if I go into my jokes.js and I add a new line,

270
00:13:20.910 --> 00:13:25.270
and rerun the build, you'll see

271
00:13:25.270 --> 00:13:30.270
jokes used to end in ae1, and now jokes ends in 5ba,

272
00:13:31.320 --> 00:13:33.180
and these ones are still the same.

273
00:13:33.180 --> 00:13:36.310
So it can detect when your files have changed

274
00:13:36.310 --> 00:13:39.620
and it will only rerun the build on those files.

275
00:13:39.620 --> 00:13:42.480
And then, what's cool about that is

276
00:13:42.480 --> 00:13:47.480
it puts this random key into the name of the file

277
00:13:47.580 --> 00:13:49.920
and then that will bust any caches

278
00:13:49.920 --> 00:13:52.580
that your users might have.

279
00:13:52.580 --> 00:13:54.870
Certainly, I've run into situations before

280
00:13:54.870 --> 00:13:56.737
where the client picks up the phone like,

281
00:13:56.737 --> 00:13:57.627
"I don't, did you do any work?"

282
00:13:57.627 --> 00:13:59.920
You're like, "yeah I pushed it, did you refresh?"

283
00:13:59.920 --> 00:14:01.018
They're like, "yeah I refreshed."

284
00:14:01.018 --> 00:14:03.620
And you have to say, "Okay, do a hard refresh.

285
00:14:03.620 --> 00:14:06.730
Right click and click on hard reload."

286
00:14:06.730 --> 00:14:09.330
Those issues are gone when you use

287
00:14:09.330 --> 00:14:11.550
just random identifiers in the name

288
00:14:11.550 --> 00:14:13.810
of your CSS and JavaScript files.

289
00:14:13.810 --> 00:14:15.677
And that's great because then they will just say,

290
00:14:15.677 --> 00:14:17.590
"oh, this is totally different JavaScript file,

291
00:14:17.590 --> 00:14:19.580
I will redownload it and not just

292
00:14:19.580 --> 00:14:21.030
serve it up from the cache."

293
00:14:21.030 --> 00:14:25.020
So that is Parcel, very, very simple to use, very good.

294
00:14:25.020 --> 00:14:27.740
It's quite honestly the only one that I reach for now.

295
00:14:27.740 --> 00:14:31.450
I do use some other stuff like create-react-app

296
00:14:31.450 --> 00:14:33.550
or nextjs or Gatsby.

297
00:14:33.550 --> 00:14:37.700
And all of those do use webpack under the hood,

298
00:14:37.700 --> 00:14:40.020
but I never have to use webpack directly.

299
00:14:40.020 --> 00:14:43.820
And this is not to throw any shade at webpack's direction,

300
00:14:43.820 --> 00:14:45.100
I just think that Parcel,

301
00:14:45.100 --> 00:14:47.150
especially for a beginner, just learning,

302
00:14:47.150 --> 00:14:49.820
and up to someone like me, I'm a professional,

303
00:14:49.820 --> 00:14:51.500
I think it is, by far, the easiest one.

304
00:14:51.500 --> 00:14:53.210
It's got the best defaults on it,

305
00:14:53.210 --> 00:14:55.940
and you very rarely have to fuss with it

306
00:14:55.940 --> 00:14:58.993
past working with that package json file.

307
00:15:01.000 --> 00:15:04.423
Let's get into learning about some npm modules now.

