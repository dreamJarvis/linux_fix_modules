WEBVTT

1
00:00:00.000 --> 00:00:02.583
(upbeat music)

2
00:00:05.013 --> 00:00:08.360
<v ->So let's talk about the opposite of resolving</v>

3
00:00:08.360 --> 00:00:09.900
and that is rejecting.

4
00:00:09.900 --> 00:00:12.880
So, when something, when a promise goes awry,

5
00:00:12.880 --> 00:00:14.600
and you wanna sort of bail on it,

6
00:00:14.600 --> 00:00:16.980
you can call the reject function.

7
00:00:16.980 --> 00:00:19.870
So, let's go back up to our definition

8
00:00:19.870 --> 00:00:21.430
of make a pizza.

9
00:00:21.430 --> 00:00:24.100
And inside of our promise here,

10
00:00:24.100 --> 00:00:27.570
we need to check for something very important

11
00:00:27.570 --> 00:00:28.747
and that is, did somebody try

12
00:00:28.747 --> 00:00:31.060
and put pineapple on their pizza.

13
00:00:31.060 --> 00:00:34.170
And if that is true, then we need to reject this pizza

14
00:00:34.170 --> 00:00:35.003
from happening.

15
00:00:35.003 --> 00:00:37.520
So, what we'll do is, we'll say reject

16
00:00:37.520 --> 00:00:41.693
if people try with pineapple.

17
00:00:42.895 --> 00:00:46.567
So we'll say, if toppings dot includes pineapple,

18
00:00:49.770 --> 00:00:52.080
and right now I'm just gonna do lowercase pineapple,

19
00:00:52.080 --> 00:00:55.410
we're gonna have to try and weed out people who uppercase

20
00:00:55.410 --> 00:00:57.210
pineapple in just a minute.

21
00:00:57.210 --> 00:01:00.190
And if that is the case, we will call reject

22
00:01:00.190 --> 00:01:05.190
and say, "Seriously, get out."

23
00:01:05.370 --> 00:01:06.730
Is there a pineapple emoji?

24
00:01:06.730 --> 00:01:08.203
Absolutely.

25
00:01:09.640 --> 00:01:13.363
Okay, now let's go down here.

26
00:01:15.350 --> 00:01:17.840
And we'll try, let's just comment all this out,

27
00:01:17.840 --> 00:01:19.090
and make a brand new one.

28
00:01:20.090 --> 00:01:24.450
So we'll say, make a pizza.

29
00:01:24.450 --> 00:01:29.450
And we'll try to make a pizza with cheese and pineapple.

30
00:01:33.040 --> 00:01:35.513
Then we'll say then, pizza,

31
00:01:39.460 --> 00:01:44.460
console log, pizza.

32
00:01:44.500 --> 00:01:46.333
So let's try and run this now.

33
00:01:47.624 --> 00:01:49.810
Uncaught in promise.

34
00:01:49.810 --> 00:01:51.559
Seriously, get out.

35
00:01:51.559 --> 00:01:54.140
That just is promise HTML 1.

36
00:01:54.140 --> 00:01:55.180
So, what does that mean?

37
00:01:55.180 --> 00:01:57.230
Well, that means that there was an error

38
00:01:57.230 --> 00:02:00.670
in one of our promises, but we did not write any code

39
00:02:00.670 --> 00:02:03.920
to handle that error, in order to try and catch it.

40
00:02:03.920 --> 00:02:07.840
So, the way that you catch an error, in a promise,

41
00:02:07.840 --> 00:02:12.080
is you chain a dot catch onto the end.

42
00:02:12.080 --> 00:02:14.490
And the catch will give you the error,

43
00:02:14.490 --> 00:02:17.760
and we'll console log, "Oh no!"

44
00:02:17.760 --> 00:02:19.473
and console log the error.

45
00:02:20.560 --> 00:02:25.060
Now, when we run it, we get, "Oh no, seriously, get out."

46
00:02:25.060 --> 00:02:26.440
and a pineapple emoji.

47
00:02:26.440 --> 00:02:27.273
Why?

48
00:02:27.273 --> 00:02:29.383
Because, we'll put these on their own line here.

49
00:02:33.760 --> 00:02:36.730
The then will only happen when the promise resolves

50
00:02:36.730 --> 00:02:39.970
successfully and the catch will only run

51
00:02:39.970 --> 00:02:43.190
when the promise doesn't go successfully.

52
00:02:43.190 --> 00:02:48.190
So, almost always, with your promise built functions,

53
00:02:48.760 --> 00:02:52.050
you must always chain a dot then and a dot catch,

54
00:02:52.050 --> 00:02:54.930
onto the end, so that if anything goes wrong,

55
00:02:54.930 --> 00:02:56.830
you're able to actually go ahead and catch it,

56
00:02:56.830 --> 00:02:58.520
and display to the user.

57
00:02:58.520 --> 00:03:00.840
What I'll usually do, is I'll make a function

58
00:03:00.840 --> 00:03:02.393
called handle promise.

59
00:03:04.990 --> 00:03:07.020
What I'll usually do is I'll make a little function here

60
00:03:07.020 --> 00:03:11.400
called handle error, and that will take in the error.

61
00:03:11.400 --> 00:03:14.527
And then inside of that, we'll console log, "Oh no!"

62
00:03:16.160 --> 00:03:19.480
Console log the error and then what we'll do is,

63
00:03:19.480 --> 00:03:21.860
instead of just having to catch it like that,

64
00:03:21.860 --> 00:03:25.450
I'll just pass it my handle error,

65
00:03:25.450 --> 00:03:27.650
and what that will do is, you can just pass it

66
00:03:27.650 --> 00:03:30.560
reference to a function, which will then handle the error.

67
00:03:30.560 --> 00:03:32.210
Should be able to spell it right,

68
00:03:33.800 --> 00:03:36.190
and it still works, like we want.

69
00:03:36.190 --> 00:03:38.620
Now, it's important to note here, that,

70
00:03:38.620 --> 00:03:42.240
not every single promise needs a catch on the end.

71
00:03:42.240 --> 00:03:45.640
If we were to go back up to this chain of promises

72
00:03:45.640 --> 00:03:46.853
that we did earlier,

73
00:03:50.370 --> 00:03:52.100
and something where,

74
00:03:52.100 --> 00:03:54.980
let's say, this pizza right here.

75
00:03:54.980 --> 00:03:57.110
That one has pineapple.

76
00:03:57.110 --> 00:03:58.060
You see, what happens is,

77
00:03:58.060 --> 00:03:59.770
we go through the promise chain again

78
00:03:59.770 --> 00:04:03.170
and then as soon as we hit that error,

79
00:04:03.170 --> 00:04:06.040
where we try to make the pizza, with the pineapple.

80
00:04:06.040 --> 00:04:08.900
We get the uncaught, in promise error.

81
00:04:08.900 --> 00:04:10.870
So how do we catch that?

82
00:04:10.870 --> 00:04:13.170
Does that mean that we have to put a dot catch

83
00:04:14.340 --> 00:04:17.350
in between every single one?

84
00:04:17.350 --> 00:04:18.330
That's annoying.

85
00:04:18.330 --> 00:04:19.520
And the answer to that is no.

86
00:04:19.520 --> 00:04:23.330
You just need to put one catch, at the very end,

87
00:04:23.330 --> 00:04:26.800
that will be able to handle our error.

88
00:04:26.800 --> 00:04:31.800
Now, when I refresh, it says, "Oh no! Seriously, get out."

89
00:04:32.260 --> 00:04:36.270
The thing about an error happening in a promise chain

90
00:04:36.270 --> 00:04:39.700
is that, where ever the error happens, it will then

91
00:04:39.700 --> 00:04:44.700
bail out of the rest of the entire promise chain.

92
00:04:44.810 --> 00:04:48.970
So, if you have seven or eight steps,

93
00:04:48.970 --> 00:04:51.180
and they're all dependent upon one an another,

94
00:04:51.180 --> 00:04:53.510
then that's good, because if step three breaks,

95
00:04:53.510 --> 00:04:54.920
then you don't want to keep going.

96
00:04:54.920 --> 00:04:58.880
But sometimes you'll be like, okay, that's fine that this

97
00:04:58.880 --> 00:05:01.080
pineapple one got rejected but what about

98
00:05:01.080 --> 00:05:02.650
our garbage pail pizza?

99
00:05:02.650 --> 00:05:04.290
What about the ones that come after it?

100
00:05:04.290 --> 00:05:06.383
I still want those to be made.

101
00:05:06.383 --> 00:05:08.700
And if that's the case then promise chaining

102
00:05:08.700 --> 00:05:11.838
is not what you want and we need to use some of these other

103
00:05:11.838 --> 00:05:14.480
promise dot all, promise dot race,

104
00:05:14.480 --> 00:05:17.423
some of these other promise static methods.

105
00:05:18.260 --> 00:05:19.530
So, what we can do here,

106
00:05:19.530 --> 00:05:20.793
let's make two pizzas.

107
00:05:22.580 --> 00:05:27.580
And say, const, pizza one, is equal to make pizza.

108
00:05:30.200 --> 00:05:32.003
And let's make it a pepperoni.

109
00:05:33.200 --> 00:05:38.023
And we'll make a pizza two, that comes with a pineapple,

110
00:05:39.010 --> 00:05:40.270
then we'll use a new API,

111
00:05:40.270 --> 00:05:42.600
and it's called promise dot all settled.

112
00:05:42.600 --> 00:05:44.260
And we can make a mega promise,

113
00:05:44.260 --> 00:05:49.100
so const, dinner promise two is equal to promise

114
00:05:49.100 --> 00:05:54.100
dot all settled, and we pass it an array of our promises.

115
00:05:54.600 --> 00:05:56.463
Promise one, promise two.

116
00:05:57.810 --> 00:06:01.558
And we'll say dinner, promise two dot then.

117
00:06:01.558 --> 00:06:03.233
We'll just get the results.

118
00:06:04.930 --> 00:06:07.000
Console log the results.

119
00:06:07.000 --> 00:06:08.193
See what we got here.

120
00:06:09.870 --> 00:06:11.200
These are our results.

121
00:06:11.200 --> 00:06:13.680
If you open it up, it will then tell us

122
00:06:15.500 --> 00:06:17.120
the first one was fulfilled,

123
00:06:17.120 --> 00:06:19.310
and the second one was rejected.

124
00:06:19.310 --> 00:06:20.970
Fulfilled is another word that they use

125
00:06:20.970 --> 00:06:22.700
instead of resolved.

126
00:06:22.700 --> 00:06:25.220
So this one is obviously resolved or fulfilled

127
00:06:25.220 --> 00:06:27.526
and it tells me the pizza, and this one is rejected.

128
00:06:27.526 --> 00:06:31.020
So, that's really helpful, because the difference

129
00:06:31.020 --> 00:06:33.440
between promise all and promise all settled

130
00:06:33.440 --> 00:06:35.463
is if I did that with promise dot all,

131
00:06:37.690 --> 00:06:38.523
it would break.

132
00:06:38.523 --> 00:06:40.050
See how this broke right here.

133
00:06:40.050 --> 00:06:44.140
That's because it assumes that promise dot all,

134
00:06:44.140 --> 00:06:46.220
it assumes that all of them will go successfully

135
00:06:46.220 --> 00:06:47.720
and if you want to catch any errors

136
00:06:47.720 --> 00:06:49.480
that happened in promise dot all,

137
00:06:49.480 --> 00:06:52.453
you need to them catch them like that.

138
00:06:56.140 --> 00:06:57.560
And then we get our, "Oh no!"

139
00:06:57.560 --> 00:06:59.930
And that is probably not want you want,

140
00:06:59.930 --> 00:07:01.300
because if one of them breaks

141
00:07:01.300 --> 00:07:03.470
then we maybe still want the other one,

142
00:07:03.470 --> 00:07:04.880
those other pizza's are still good.

143
00:07:04.880 --> 00:07:06.780
So promise dot all settled

144
00:07:07.740 --> 00:07:11.000
will just tell you when all of them are done

145
00:07:11.000 --> 00:07:14.920
regardless of if they were rejected or resolved.

146
00:07:14.920 --> 00:07:16.820
There are a few more error handling techniques

147
00:07:16.820 --> 00:07:19.690
that we need to use, but they do not get introduced

148
00:07:19.690 --> 00:07:21.550
until we learn a async await.

149
00:07:21.550 --> 00:07:22.810
So that's it for this one.

150
00:07:22.810 --> 00:07:26.110
Let's go back and refactor that last exercise

151
00:07:26.110 --> 00:07:29.883
we did, to use promises instead of call back cal.

