WEBVTT

1
00:00:00.783 --> 00:00:03.366
(upbeat music)

2
00:00:05.730 --> 00:00:08.560
<v ->All right let's talk about the last one</v>

3
00:00:08.560 --> 00:00:12.210
which is booleans or boo leans as I always say

4
00:00:12.210 --> 00:00:17.020
the joke of, what diet did the ghost go on? Boolean.

5
00:00:17.020 --> 00:00:20.090
A boolean is true or false, it's like a light switch.

6
00:00:20.090 --> 00:00:23.660
It's either on or off and that's it at the end of the day.

7
00:00:23.660 --> 00:00:27.640
We use booleans for logic such as if statements.

8
00:00:27.640 --> 00:00:29.890
They can be manually set or calculated.

9
00:00:29.890 --> 00:00:31.780
So let's take a look at here.

10
00:00:31.780 --> 00:00:34.960
So we'll say const or probably better as a let.

11
00:00:34.960 --> 00:00:37.360
Is drawing is equal to false.

12
00:00:37.360 --> 00:00:39.250
So I've done this many times, you're working on a

13
00:00:39.250 --> 00:00:42.570
application where you wanna know if the user

14
00:00:42.570 --> 00:00:43.490
is moving their mouse

15
00:00:43.490 --> 00:00:46.600
and if they're currently click down or up.

16
00:00:46.600 --> 00:00:49.840
And to do that we have what's called a flag variable.

17
00:00:49.840 --> 00:00:52.410
A variable that is set to either true or false,

18
00:00:52.410 --> 00:00:54.550
and when they click down we set it to true.

19
00:00:54.550 --> 00:00:56.600
And when they click up we set it to false.

20
00:00:56.600 --> 00:00:58.190
And that's what a boolean is,

21
00:00:58.190 --> 00:01:00.390
it's something that is either true or false.

22
00:01:01.740 --> 00:01:05.890
We can also sort of calculate booleans.

23
00:01:05.890 --> 00:01:10.003
So if we have an age variable here that's set to 18,

24
00:01:10.870 --> 00:01:15.480
and we can make a const of age variable.

25
00:01:15.480 --> 00:01:17.800
And we don't set that to true or false,

26
00:01:17.800 --> 00:01:20.920
we set that to age is greater than 19.

27
00:01:20.920 --> 00:01:23.530
And then we console log age.

28
00:01:23.530 --> 00:01:26.330
This is giving me grief, why is it red?

29
00:01:26.330 --> 00:01:28.563
Identifier age has already been declared.

30
00:01:30.327 --> 00:01:34.023
Oh I forgot to comment out some of this stuff, that's why.

31
00:01:35.320 --> 00:01:38.740
Here we go, now you refresh you see, well not 18

32
00:01:38.740 --> 00:01:42.860
you want to see of age and that will return false.

33
00:01:42.860 --> 00:01:45.460
So sometimes the values are calculated

34
00:01:45.460 --> 00:01:47.610
like this age is greater than 19, we're gonna talk

35
00:01:47.610 --> 00:01:49.400
about what all these different operators are,

36
00:01:49.400 --> 00:01:52.110
greater than, greater than and equal, less than, equal to.

37
00:01:52.110 --> 00:01:54.430
Right now we're just gonna focus on what is equality,

38
00:01:54.430 --> 00:01:56.050
the equal sign, the double equals

39
00:01:56.050 --> 00:01:58.470
and the triple equals sign in JavaScript.

40
00:01:58.470 --> 00:02:00.990
So the first one which is one equals obviously it's

41
00:02:00.990 --> 00:02:02.170
just first setting a value.

42
00:02:02.170 --> 00:02:03.860
If I change that to a let

43
00:02:03.860 --> 00:02:05.910
and I want to update a variable, I simply just say

44
00:02:05.910 --> 00:02:10.820
age is equal to 100 and obviously age will be set to 100.

45
00:02:10.820 --> 00:02:12.980
So one equal sign is used for updating

46
00:02:12.980 --> 00:02:14.430
or setting a variable.

47
00:02:14.430 --> 00:02:17.510
Now we have equals equals and double equals.

48
00:02:17.510 --> 00:02:20.010
Before we get into the differences

49
00:02:20.010 --> 00:02:22.610
between double equals and triple equals,

50
00:02:22.610 --> 00:02:26.330
know that almost always you should use triple equals

51
00:02:26.330 --> 00:02:30.250
and double equals is almost always a bad practice.

52
00:02:30.250 --> 00:02:32.650
It's sort of just like something to keep in your head.

53
00:02:32.650 --> 00:02:36.510
And I say almost always 'cause there are some edge cases,

54
00:02:36.510 --> 00:02:39.420
but triple equals is generally what you should be using.

55
00:02:39.420 --> 00:02:42.860
So if I take this age variable here,

56
00:02:42.860 --> 00:02:47.860
and I say, "age is triple equals to 100",

57
00:02:48.000 --> 00:02:49.360
I'm gonna get true.

58
00:02:49.360 --> 00:02:52.370
If I use something like that, like ten,

59
00:02:52.370 --> 00:02:53.330
it's gonna give me false.

60
00:02:53.330 --> 00:02:54.910
So that's what I mean in that booleans

61
00:02:54.910 --> 00:02:56.630
can be calculated as well.

62
00:02:56.630 --> 00:02:59.710
Where you have one value and that value

63
00:02:59.710 --> 00:03:01.363
can be a straight up value,

64
00:03:02.410 --> 00:03:05.530
or it can a value that is stored in a variable.

65
00:03:05.530 --> 00:03:09.500
Like age is equal to 100, it can be two variables.

66
00:03:09.500 --> 00:03:12.730
So let's make another one let age two

67
00:03:12.730 --> 00:03:14.733
is equal to 100 as well.

68
00:03:19.550 --> 00:03:24.050
Age is equal to age two, so what that does

69
00:03:24.050 --> 00:03:26.190
is it checks the value of the first variable

70
00:03:26.190 --> 00:03:28.190
and it checks the value of the second variable

71
00:03:28.190 --> 00:03:30.970
and it makes sure that the values are exactly the same.

72
00:03:30.970 --> 00:03:33.190
Now, what's the difference between that

73
00:03:33.190 --> 00:03:35.680
and if I were to use a double equals?

74
00:03:35.680 --> 00:03:37.190
Let's just use straight up values so we don't

75
00:03:37.190 --> 00:03:38.920
even have to think about variables here.

76
00:03:38.920 --> 00:03:41.500
10 triple equals 10, that's true.

77
00:03:41.500 --> 00:03:45.350
10 double equals 10, well that is also true.

78
00:03:45.350 --> 00:03:50.270
So like why are there two different ways to do it?

79
00:03:50.270 --> 00:03:53.420
Well the difference is, is that triple equals

80
00:03:53.420 --> 00:03:57.520
will check that the value of the thing on the left hand side

81
00:03:57.520 --> 00:03:58.710
and the value of the thing

82
00:03:58.710 --> 00:04:00.630
on the right hand side are the same.

83
00:04:00.630 --> 00:04:03.800
And check that the type of the thing on the left

84
00:04:03.800 --> 00:04:04.790
and the right are the same.

85
00:04:04.790 --> 00:04:06.990
So tripe equals will always

86
00:04:06.990 --> 00:04:09.150
check for both value and type.

87
00:04:09.150 --> 00:04:11.350
Now you tell me what is the type of this one?

88
00:04:11.350 --> 00:04:13.360
Number, what is the type of this one?

89
00:04:13.360 --> 00:04:14.193
It's also a number.

90
00:04:14.193 --> 00:04:15.026
What is the value?

91
00:04:15.026 --> 00:04:16.550
10, what is the value of 10?

92
00:04:16.550 --> 00:04:19.420
So if I were to do something like this,

93
00:04:19.420 --> 00:04:24.420
10 a string of 10 is equal to a number of ten.

94
00:04:24.820 --> 00:04:27.770
It actually tells me that that is true, why?

95
00:04:27.770 --> 00:04:32.480
Because the value is the same, but the types are not.

96
00:04:32.480 --> 00:04:36.180
So if I triple equals 10 is equal to 10,

97
00:04:36.180 --> 00:04:37.690
then it's gonna tell me that it's false.

98
00:04:37.690 --> 00:04:40.930
So this area right here, remember we talked about

99
00:04:40.930 --> 00:04:45.270
how you can get in hot water by mixing strings and numbers

100
00:04:45.270 --> 00:04:46.760
when you're doing addition,

101
00:04:46.760 --> 00:04:48.350
because they're not the same type.

102
00:04:48.350 --> 00:04:51.490
You should almost always be working with the same type.

103
00:04:51.490 --> 00:04:53.920
The same thing is true here where you can sometimes

104
00:04:53.920 --> 00:04:56.930
get yourself into hot water when you are checking

105
00:04:56.930 --> 00:05:00.403
if a string and a number are the exact same thing.

106
00:05:01.260 --> 00:05:04.360
So again real quick, triple equals will always check

107
00:05:04.360 --> 00:05:07.740
that the value and the type is exactly the same.

108
00:05:07.740 --> 00:05:09.860
Last thing I wanna say is that in a future video

109
00:05:09.860 --> 00:05:12.750
we have a huge one on what's called flow control.

110
00:05:12.750 --> 00:05:17.690
Things like if statements and ternary and switch statements.

111
00:05:17.690 --> 00:05:19.380
And like basically you wanna add

112
00:05:19.380 --> 00:05:20.970
a lot of logic to your program.

113
00:05:20.970 --> 00:05:24.110
And that's when we're gonna be using flow control.

114
00:05:24.110 --> 00:05:27.100
And these booleans are gonna be particularly helpful,

115
00:05:27.100 --> 00:05:29.510
and we're gonna be extending this sort of true or false

116
00:05:29.510 --> 00:05:31.770
a little bit further into things

117
00:05:31.770 --> 00:05:33.710
like truthy and falsy values,

118
00:05:33.710 --> 00:05:35.130
you may have heard of that before.

119
00:05:35.130 --> 00:05:38.230
This thing called coercion where if you have a value

120
00:05:38.230 --> 00:05:42.330
and you wanna force it into a true boolean and what not.

121
00:05:42.330 --> 00:05:45.060
So stay tuned for that, I think that's going to

122
00:05:45.060 --> 00:05:47.990
really give you a lot of aha moments with JavaScript.

