WEBVTT

1
00:00:00.472 --> 00:00:03.055
(upbeat music)

2
00:00:04.790 --> 00:00:06.370
<v Instructor>Let's talk about filter and find.</v>

3
00:00:06.370 --> 00:00:08.460
We've done that a little bit in the last couple of videos.

4
00:00:08.460 --> 00:00:10.330
So feel free to skip this one.

5
00:00:10.330 --> 00:00:13.310
If you're comfortable with how filter and find work,

6
00:00:13.310 --> 00:00:15.267
Just wanna make sure we have our own dedicated video on it.

7
00:00:15.267 --> 00:00:18.060
So you can come back to it when you need

8
00:00:18.060 --> 00:00:19.530
a little bit of help on them.

9
00:00:19.530 --> 00:00:23.130
So let's just go ahead and use these clean people

10
00:00:23.130 --> 00:00:27.850
as an example right here we've got 26 44 and 75.

11
00:00:27.850 --> 00:00:30.110
Very likely is the situation where you're like,

12
00:00:30.110 --> 00:00:32.660
Okay, I either need to find one person

13
00:00:32.660 --> 00:00:35.350
in that or I wanna filter that list down

14
00:00:35.350 --> 00:00:37.170
to be a subset of it.

15
00:00:37.170 --> 00:00:40.230
So let's say we wanna find people who are older

16
00:00:40.230 --> 00:00:44.270
than 40 years old, we could say const over 40

17
00:00:46.150 --> 00:00:50.120
is equal to clean people dot filter.

18
00:00:50.120 --> 00:00:51.440
And the way that filter works

19
00:00:51.440 --> 00:00:56.440
is that you loop over every single item in the array

20
00:00:56.620 --> 00:01:00.440
and you either say yes, true or no false,

21
00:01:00.440 --> 00:01:03.120
I want it, I don't want it, I want it, I don't want it.

22
00:01:03.120 --> 00:01:04.870
So we can go in our filter here,

23
00:01:04.870 --> 00:01:05.940
we'll use a regular function

24
00:01:05.940 --> 00:01:08.340
here just to show you how it works.

25
00:01:08.340 --> 00:01:10.920
And we'll take our person,

26
00:01:10.920 --> 00:01:13.420
and we'll const let's just console log the person.

27
00:01:15.580 --> 00:01:17.200
Good, we've got them each one.

28
00:01:17.200 --> 00:01:20.240
And then what we can do say if the person dot age

29
00:01:20.240 --> 00:01:23.563
is greater than 40, return true.

30
00:01:24.550 --> 00:01:27.310
Else, return false, and of course,

31
00:01:27.310 --> 00:01:29.290
I'm writing this really verbose just

32
00:01:29.290 --> 00:01:31.460
to show you that you loop over each one

33
00:01:31.460 --> 00:01:33.030
you check if they're over 40

34
00:01:33.030 --> 00:01:38.030
and then we can let's console table over 40.

35
00:01:39.200 --> 00:01:42.790
And we have a subset of that original array, right?

36
00:01:42.790 --> 00:01:46.620
Just two people, okay, well, we can make this much smaller.

37
00:01:46.620 --> 00:01:48.260
And I know we've done this over and over

38
00:01:48.260 --> 00:01:49.950
by wanting to get really good at it.

39
00:01:49.950 --> 00:01:52.000
Make this as small as you possibly can.

40
00:01:52.000 --> 00:01:53.740
I'll pause the video right now.

41
00:01:53.740 --> 00:01:55.240
Turn it into an arrow function,

42
00:01:55.240 --> 00:01:57.890
turn it into an implicit return.

43
00:01:57.890 --> 00:01:59.880
Just find a different way to go about it.

44
00:01:59.880 --> 00:02:04.010
So how I would do this is what like, first of all, we said,

45
00:02:04.010 --> 00:02:05.830
I don't really need an else, right?

46
00:02:05.830 --> 00:02:09.630
Like because returning inside of a function

47
00:02:09.630 --> 00:02:11.290
will stop it from running.

48
00:02:11.290 --> 00:02:13.510
If we return true here, that's it.

49
00:02:13.510 --> 00:02:15.060
Otherwise, we're gonna return false.

50
00:02:15.060 --> 00:02:17.400
So the house isn't really all that needed.

51
00:02:17.400 --> 00:02:21.770
But even further, since this is a what is called

52
00:02:21.770 --> 00:02:25.640
a condition, this condition evaluates to true or false,

53
00:02:25.640 --> 00:02:27.030
we can simply just return that.

54
00:02:27.030 --> 00:02:29.570
And that is true or false so let's do that.

55
00:02:29.570 --> 00:02:34.570
So just return that works exactly the same.

56
00:02:35.320 --> 00:02:37.070
We can make this an arrow function.

57
00:02:39.750 --> 00:02:41.910
Good, I can take off these parentheses

58
00:02:41.910 --> 00:02:45.563
if I like the style preference all totally up to you.

59
00:02:46.530 --> 00:02:49.180
We can make it an implicit return, sure why not?

60
00:02:49.180 --> 00:02:54.100
Let's do it, I'll move that, move that and remove this.

61
00:02:55.850 --> 00:02:57.980
I believe you can actually keep it like this.

62
00:02:57.980 --> 00:03:02.980
If you take this off, you can keep it all on one line,

63
00:03:03.500 --> 00:03:06.000
or you can leave them on their own line like this.

64
00:03:06.000 --> 00:03:07.600
See, it works the same way.

65
00:03:07.600 --> 00:03:10.230
If I'm doing an implicit return, it better be small enough

66
00:03:10.230 --> 00:03:12.360
that I can put it on one line though.

67
00:03:12.360 --> 00:03:13.630
So that's what I'm doing there.

68
00:03:13.630 --> 00:03:15.270
So we loop over every single person,

69
00:03:15.270 --> 00:03:16.880
check out the person is greater than 40.

70
00:03:16.880 --> 00:03:18.610
That is true or false.

71
00:03:18.610 --> 00:03:21.060
And that will return to us a subset.

72
00:03:21.060 --> 00:03:24.940
If there ever is a situation where there's no people in it,

73
00:03:24.940 --> 00:03:27.400
it will just give us an empty array.

74
00:03:27.400 --> 00:03:29.750
I got to change that to console log to see.

75
00:03:29.750 --> 00:03:32.680
You see it's an array of zero if you wanted to check

76
00:03:32.680 --> 00:03:34.380
if there were any people in there,

77
00:03:34.380 --> 00:03:39.380
we say if over 40 dot length and console log,

78
00:03:40.940 --> 00:03:45.390
there are some people over 40 in this case,

79
00:03:45.390 --> 00:03:49.130
since it's 400, there will be none but if I change

80
00:03:49.130 --> 00:03:52.740
that to 40 it says there are some people over 40.

81
00:03:52.740 --> 00:03:57.120
So that is what filter is find works the exact same way

82
00:03:57.120 --> 00:04:01.160
except find will only find one item in the array

83
00:04:01.160 --> 00:04:04.080
and return it where filter will always return

84
00:04:04.080 --> 00:04:07.310
to you all of the items that match what you want.

85
00:04:07.310 --> 00:04:09.420
So filter will always return an array,

86
00:04:09.420 --> 00:04:12.500
and find will return the actual item that you want.

87
00:04:12.500 --> 00:04:16.960
So if we (clearing throat) take a look at some,

88
00:04:16.960 --> 00:04:19.660
let's look at some of the data that we've got up here.

89
00:04:21.950 --> 00:04:24.240
Let's, say we wanna find a student

90
00:04:24.240 --> 00:04:27.200
with the ID of five six five A.

91
00:04:27.200 --> 00:04:31.577
Let's do that, so we will go down here,

92
00:04:31.577 --> 00:04:35.290
and say const, student is equal to students

93
00:04:35.290 --> 00:04:38.983
that find will loop over every single student.

94
00:04:41.660 --> 00:04:44.300
And also this is a little bit weird right here.

95
00:04:44.300 --> 00:04:47.160
So like I'm naming the return value student,

96
00:04:47.160 --> 00:04:48.900
but then I'm also naming

97
00:04:48.900 --> 00:04:52.980
the individual loop student, is that okay?

98
00:04:52.980 --> 00:04:56.210
It's allowed it because the that student is gonna be scoped

99
00:04:56.210 --> 00:04:58.300
to this function and this will be scoped

100
00:04:58.300 --> 00:05:01.300
to the outer part is it confusing, absolutely.

101
00:05:01.300 --> 00:05:06.300
So let's change this to something else, comma stud.

102
00:05:08.020 --> 00:05:12.270
And we'll return the stud dot ID

103
00:05:12.270 --> 00:05:17.270
is equal to five six five A console log student.

104
00:05:18.640 --> 00:05:20.310
See, we've got the student we're looking for.

105
00:05:20.310 --> 00:05:23.320
If that didn't match anything, what would we get?

106
00:05:23.320 --> 00:05:25.970
We get undefined, so you always wanna check

107
00:05:25.970 --> 00:05:28.820
if something got found you notice how it's not returning

108
00:05:28.820 --> 00:05:33.820
to us an array of students it's to returning us an object,

109
00:05:33.850 --> 00:05:35.280
which is the student itself.

110
00:05:35.280 --> 00:05:39.140
I gets flipped that over to filter and it would return

111
00:05:39.140 --> 00:05:41.560
to us an array of one item.

112
00:05:41.560 --> 00:05:43.310
So that's the difference between filter

113
00:05:43.310 --> 00:05:47.313
and find everything else is exactly the same.

114
00:05:48.830 --> 00:05:51.700
One kinda neat thing that you could write is like,

115
00:05:51.700 --> 00:05:54.970
okay, like maybe we can make a function here

116
00:05:54.970 --> 00:05:57.060
that let's make this an external function

117
00:05:57.060 --> 00:06:02.060
we'll call it is student that will take in a student,

118
00:06:03.670 --> 00:06:06.920
and we will just return student dot ID

119
00:06:06.920 --> 00:06:10.293
is equal to five six five A,

120
00:06:12.920 --> 00:06:17.423
then we can pass simply pass the function here is student.

121
00:06:18.557 --> 00:06:21.890
This is still work still works exactly the same.

122
00:06:21.890 --> 00:06:23.240
Now, that's a little bit weird, right?

123
00:06:23.240 --> 00:06:25.350
Like, why would we write a function that's hard coded

124
00:06:25.350 --> 00:06:27.910
to just this specific ID.

125
00:06:27.910 --> 00:06:30.610
It's more likely that we are going to be looking

126
00:06:30.610 --> 00:06:33.150
for a student with a specific ID.

127
00:06:33.150 --> 00:06:36.000
So what we could do is wrap

128
00:06:36.000 --> 00:06:40.963
this in another function called find by ID.

129
00:06:44.030 --> 00:06:49.030
And then in here, it will return take in an ID here.

130
00:06:50.470 --> 00:06:52.920
And then we will return another function

131
00:06:52.920 --> 00:06:56.380
that takes in the student and checks if it's the ID, right.

132
00:06:56.380 --> 00:06:58.160
This is called a high order function

133
00:06:58.160 --> 00:06:59.933
or a higher order function.

134
00:06:59.933 --> 00:07:04.860
And it is a function that will return another function.

135
00:07:04.860 --> 00:07:09.260
And then here, we can simply go in here and run find

136
00:07:09.260 --> 00:07:14.260
by ID five six five A.

137
00:07:15.740 --> 00:07:18.710
And what this will do is it will generate a new function

138
00:07:18.710 --> 00:07:21.890
that is coded to the idea that we're looking for,

139
00:07:21.890 --> 00:07:23.280
it still finds the right person.

140
00:07:23.280 --> 00:07:25.330
So that's a little bit more flexible.

141
00:07:25.330 --> 00:07:29.670
And then even further, we could make another function

142
00:07:29.670 --> 00:07:31.760
that is even more flexible because like,

143
00:07:31.760 --> 00:07:33.350
let's look at the students.

144
00:07:33.350 --> 00:07:34.690
What other they have first name

145
00:07:34.690 --> 00:07:38.030
and they have last name in their, right.

146
00:07:38.030 --> 00:07:40.090
So we could make another function called find

147
00:07:40.090 --> 00:07:42.440
by first name and find by last name.

148
00:07:42.440 --> 00:07:43.710
But what happens if the student

149
00:07:43.710 --> 00:07:46.090
has like 15 properties on it?

150
00:07:46.090 --> 00:07:48.630
Are we gonna make 15 different find functions?

151
00:07:48.630 --> 00:07:51.400
Well, we can actually modify this function

152
00:07:51.400 --> 00:07:53.990
to be a little bit more flexible than that.

153
00:07:53.990 --> 00:07:55.900
Let's write a totally separate one.

154
00:07:55.900 --> 00:08:00.490
We have a function called find by prop

155
00:08:00.490 --> 00:08:04.160
and that will take in both the prop

156
00:08:04.160 --> 00:08:08.170
and the prop we are looking for.

157
00:08:08.170 --> 00:08:11.430
And then inside of that we will return a function,

158
00:08:11.430 --> 00:08:15.260
we can call it a student, you don't really have to name

159
00:08:15.260 --> 00:08:17.247
that inner one if you don't want to.

160
00:08:17.247 --> 00:08:18.910
And that will take the student.

161
00:08:18.910 --> 00:08:21.310
So this is our looping function right here.

162
00:08:21.310 --> 00:08:23.530
And then our case not we're not gonna return

163
00:08:23.530 --> 00:08:26.010
if the student ID is equal to the ID,

164
00:08:26.010 --> 00:08:30.960
but we're going to say return if the student property

165
00:08:30.960 --> 00:08:32.850
that the person is looking for.

166
00:08:32.850 --> 00:08:35.780
So we'll use square brackets here.

167
00:08:35.780 --> 00:08:40.420
Prop is equal to the prop we are looking for.

168
00:08:40.420 --> 00:08:42.730
Now this might be a little bit confusing to you,

169
00:08:42.730 --> 00:08:44.600
but let me show you how it works.

170
00:08:44.600 --> 00:08:48.930
We're gonna go in here we're going to find by prop

171
00:08:48.930 --> 00:08:53.000
where the ID is equal to five six five A.

172
00:08:53.000 --> 00:08:55.930
And what this does is it makes it really flexible.

173
00:08:55.930 --> 00:08:59.300
That one still works, but I can make another student

174
00:08:59.300 --> 00:09:02.350
where the first name property

175
00:09:02.350 --> 00:09:05.303
is going to be equal to, Bendicty Micki

176
00:09:14.010 --> 00:09:15.743
and we'll console log student two.

177
00:09:17.300 --> 00:09:19.970
And there is Micki see how nice

178
00:09:19.970 --> 00:09:22.680
of a flexible function that is.

179
00:09:22.680 --> 00:09:25.120
So let's go over that one more time,

180
00:09:25.120 --> 00:09:29.373
we take in a property or a key that we're looking for,

181
00:09:29.373 --> 00:09:32.623
an actual key that they're looking for.

182
00:09:33.900 --> 00:09:36.370
We take in a prop and a prop that they're looking for.

183
00:09:36.370 --> 00:09:39.890
So what I mean by that is you take in a key

184
00:09:39.890 --> 00:09:43.160
and a value or a property and a value on either side

185
00:09:43.160 --> 00:09:45.020
and it's going to look in that object

186
00:09:45.020 --> 00:09:47.580
for whatever property you specified

187
00:09:47.580 --> 00:09:50.980
is equal to whatever value you have specified.

188
00:09:50.980 --> 00:09:54.280
And the reason why we have to use square brackets

189
00:09:54.280 --> 00:09:58.370
here and not the dot notation is because the property

190
00:09:58.370 --> 00:10:01.940
that we're looking for is being passed in as a variable

191
00:10:01.940 --> 00:10:04.290
or as an argument to that function.

192
00:10:04.290 --> 00:10:07.190
So in this case, we're gonna say student dot first name

193
00:10:07.190 --> 00:10:08.840
or student dot ID is equal

194
00:10:08.840 --> 00:10:11.970
to either five six five A or Micki.

195
00:10:11.970 --> 00:10:16.500
this is a little advanced, don't feel too let down.

196
00:10:16.500 --> 00:10:19.240
It take took me years to sort of understand

197
00:10:19.240 --> 00:10:22.100
the benefit of this and I really sort

198
00:10:22.100 --> 00:10:25.440
of like nailed itself home when I did run into problems

199
00:10:25.440 --> 00:10:27.860
where I said oh, this doesn't make sense

200
00:10:27.860 --> 00:10:29.930
to be writing 12 different find functions.

201
00:10:29.930 --> 00:10:32.500
Why don't I just make a function that returns

202
00:10:32.500 --> 00:10:34.290
somewhat of a flexible function,

203
00:10:34.290 --> 00:10:36.300
so don't feel like that will click right away,

204
00:10:36.300 --> 00:10:37.840
it might take a couple of years.

205
00:10:37.840 --> 00:10:39.230
Don't sweat it too too much.

206
00:10:39.230 --> 00:10:42.510
So that is filter and find in the next one,

207
00:10:42.510 --> 00:10:44.270
we are going to go into reduce

