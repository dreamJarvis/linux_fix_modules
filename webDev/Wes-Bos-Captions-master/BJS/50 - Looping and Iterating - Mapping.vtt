WEBVTT

1
00:00:00.621 --> 00:00:03.204
(upbeat music)

2
00:00:05.340 --> 00:00:06.173
<v Teacher>So we learnt about forEach</v>

3
00:00:06.173 --> 00:00:08.350
and forEach is handy for when you wanna

4
00:00:08.350 --> 00:00:10.560
loop over some data and do something

5
00:00:10.560 --> 00:00:11.880
with each piece of data.

6
00:00:11.880 --> 00:00:13.400
Whether that's logging the value,

7
00:00:13.400 --> 00:00:15.950
whether that's attaching an event listener for a click,

8
00:00:15.950 --> 00:00:18.270
whether it's displaying the data on the page,

9
00:00:18.270 --> 00:00:21.800
those are often referred to as things called side effects

10
00:00:21.800 --> 00:00:26.800
and a side effect is when you are inside of a function

11
00:00:27.120 --> 00:00:31.170
and you reach outside of that function to do something else.

12
00:00:31.170 --> 00:00:34.150
So, whether that's attaching an event listener,

13
00:00:34.150 --> 00:00:36.430
maybe putting some data on the page,

14
00:00:36.430 --> 00:00:38.700
and while side effects are totally fine,

15
00:00:38.700 --> 00:00:41.520
because at some point you do need to put these things

16
00:00:41.520 --> 00:00:43.860
on the page or show them in the console

17
00:00:43.860 --> 00:00:45.610
or attach an event listener,

18
00:00:45.610 --> 00:00:48.760
there are a whole slew of other types of loops

19
00:00:48.760 --> 00:00:51.270
that are simply taking in data,

20
00:00:51.270 --> 00:00:53.180
doing something with that data,

21
00:00:53.180 --> 00:00:57.270
and then returning that data that has been modified

22
00:00:57.270 --> 00:01:00.560
massaged or transformed in some way.

23
00:01:00.560 --> 00:01:02.390
So, that is where we're going

24
00:01:02.390 --> 00:01:06.450
to get into Map, Filter and Reduce.

25
00:01:06.450 --> 00:01:08.270
So, we talk about taking in data,

26
00:01:08.270 --> 00:01:09.800
this could be filtering data,

27
00:01:09.800 --> 00:01:11.992
it could be looking for something that you want,

28
00:01:11.992 --> 00:01:13.670
it could be, like we've already done

29
00:01:13.670 --> 00:01:16.060
one example of this and that is find.

30
00:01:16.060 --> 00:01:18.590
You take in an array and you return one thing.

31
00:01:18.590 --> 00:01:21.280
That is a transformation of that data

32
00:01:21.280 --> 00:01:24.520
and those are often referred to as pure functions.

33
00:01:24.520 --> 00:01:26.751
Meaning they take in data, they return data,

34
00:01:26.751 --> 00:01:28.900
they always work exactly the same way

35
00:01:28.900 --> 00:01:30.650
given the data that's inputted,

36
00:01:30.650 --> 00:01:32.330
it returns the exact same thing

37
00:01:32.330 --> 00:01:35.790
and they don't reach outside themselves to do that.

38
00:01:35.790 --> 00:01:37.360
So, let's talk about Map.

39
00:01:37.360 --> 00:01:40.630
Map is like a machine in a factory.

40
00:01:40.630 --> 00:01:43.780
It takes in data, performs an operation

41
00:01:43.780 --> 00:01:46.640
and spits it out on the other side.

42
00:01:46.640 --> 00:01:48.840
Map will always produce the same length

43
00:01:48.840 --> 00:01:50.600
of the array as it starts with.

44
00:01:50.600 --> 00:01:53.790
So let's go into a little simple example right now.

45
00:01:53.790 --> 00:01:54.623
First thing I'm going to do,

46
00:01:54.623 --> 00:01:56.610
I'm just going to console.clear,

47
00:01:56.610 --> 00:01:59.980
to get all these toppings out of my way.

48
00:01:59.980 --> 00:02:01.830
Good, we clear the console out.

49
00:02:01.830 --> 00:02:04.560
Now, I said mapping is kind of like a machine

50
00:02:04.560 --> 00:02:05.990
that takes in some data

51
00:02:05.990 --> 00:02:07.960
and does something with that data

52
00:02:07.960 --> 00:02:09.227
and then spits it out the other end.

53
00:02:09.227 --> 00:02:11.190
And I always love this analogy of just like

54
00:02:11.190 --> 00:02:13.230
a machine that works on toys

55
00:02:13.230 --> 00:02:16.320
and adds a left arm, and the right arm and hand,

56
00:02:16.320 --> 00:02:17.153
and something like that.

57
00:02:17.153 --> 00:02:19.610
So, let's show you a real simple example like that.

58
00:02:19.610 --> 00:02:23.670
So, we've got these faces, array of different faces

59
00:02:23.670 --> 00:02:25.580
and let's create some functions

60
00:02:25.580 --> 00:02:27.480
that we can map over each one.

61
00:02:27.480 --> 00:02:30.430
So if we make a function called addArms,

62
00:02:30.430 --> 00:02:33.700
it takes in a face and from that,

63
00:02:33.700 --> 00:02:38.017
let's just return the emoji of wave

64
00:02:41.220 --> 00:02:45.120
and I'm going to put two of 'em,

65
00:02:45.120 --> 00:02:47.050
space space,and then in the middle of that

66
00:02:47.050 --> 00:02:49.260
I'll put the face.

67
00:02:49.260 --> 00:02:50.830
Okay, so, that, that's just the function,

68
00:02:50.830 --> 00:02:52.450
we've probably written a 100 of 'em.

69
00:02:52.450 --> 00:02:55.060
and if we run it and say addArms,

70
00:02:55.060 --> 00:02:57.043
and run it with a face,

71
00:02:58.930 --> 00:03:00.737
(laughs) that's was sad.

72
00:03:03.117 --> 00:03:04.530
But okay, it works, right.

73
00:03:04.530 --> 00:03:06.870
Like we've just taken in data

74
00:03:06.870 --> 00:03:08.990
and we've returned it with two waving hands

75
00:03:08.990 --> 00:03:09.823
on either side, right.

76
00:03:09.823 --> 00:03:11.320
That's, is a pretty simple thing.

77
00:03:11.320 --> 00:03:12.400
Now what we can do is,

78
00:03:12.400 --> 00:03:15.220
we can take the list of faces

79
00:03:15.220 --> 00:03:17.110
and add arms to all of them.

80
00:03:17.110 --> 00:03:18.040
And this is how it works.

81
00:03:18.040 --> 00:03:21.040
We'll say const toys

82
00:03:21.040 --> 00:03:23.720
is equal to faces.map

83
00:03:25.350 --> 00:03:27.940
and then we addArms.

84
00:03:27.940 --> 00:03:31.143
And then when we console.log the toys,

85
00:03:33.810 --> 00:03:37.710
what it returns to us is an array of the exact same

86
00:03:37.710 --> 00:03:39.169
length as we put it in, like,

87
00:03:39.169 --> 00:03:42.150
anytime you have a map, you put in a eight things,

88
00:03:42.150 --> 00:03:43.460
you always get eight back.

89
00:03:43.460 --> 00:03:45.830
You put in a hundred, you always get a hundred back.

90
00:03:45.830 --> 00:03:48.525
There's no way to return less or more items with the Map.

91
00:03:48.525 --> 00:03:51.520
You simply take in something,

92
00:03:51.520 --> 00:03:53.730
and you return something else.

93
00:03:53.730 --> 00:03:56.980
So, another simple example that we have here could be,

94
00:03:56.980 --> 00:03:59.078
if I have wes and

95
00:03:59.078 --> 00:04:02.773
kait and poppy,

96
00:04:04.540 --> 00:04:07.540
and I want to map over each person

97
00:04:07.540 --> 00:04:08.903
and add bos to it.

98
00:04:08.903 --> 00:04:11.170
I could say const fullNames

99
00:04:11.170 --> 00:04:14.040
is equal to, and we'll map over it

100
00:04:14.040 --> 00:04:17.950
and we'll take a name and we will return the name

101
00:04:17.950 --> 00:04:19.700
with the bos added to the end

102
00:04:19.700 --> 00:04:21.800
so I'm going to use a back tick

103
00:04:21.800 --> 00:04:24.000
and interpolate that variable

104
00:04:24.000 --> 00:04:27.960
add a space, bos, then return it.

105
00:04:27.960 --> 00:04:30.177
Now, if I console.log fullNames,

106
00:04:32.140 --> 00:04:33.830
we have wes bos, kait bos and poppy bos.

107
00:04:33.830 --> 00:04:36.720
So, you see how I'm saying it's a machine

108
00:04:36.720 --> 00:04:39.490
where it takes in three things

109
00:04:39.490 --> 00:04:44.490
and then transforms each piece of that data in some way

110
00:04:44.500 --> 00:04:46.730
and in our case it's just adding on bos.

111
00:04:46.730 --> 00:04:49.940
We could do multiple transforms on it.

112
00:04:49.940 --> 00:04:53.960
So, let's let's make this into a function here.

113
00:04:53.960 --> 00:04:56.157
So, make function bosify.

114
00:04:58.933 --> 00:05:00.120
And it will take in the name

115
00:05:00.120 --> 00:05:02.693
and return back ticks,

116
00:05:03.780 --> 00:05:06.070
the name with Bos on the end,

117
00:05:06.070 --> 00:05:07.690
capital b in this time.

118
00:05:07.690 --> 00:05:11.307
And now I'll return bosify.

119
00:05:16.460 --> 00:05:18.890
So, now we've got wes Bos, kait Bos and poppy Bos.

120
00:05:18.890 --> 00:05:22.130
But now, the first names don't have capitals on them.

121
00:05:22.130 --> 00:05:25.990
So I can make another function called capitalize

122
00:05:27.350 --> 00:05:29.360
and that is going to to take in

123
00:05:29.360 --> 00:05:32.023
a word and we can,

124
00:05:33.110 --> 00:05:34.380
how would we return it?

125
00:05:34.380 --> 00:05:37.950
We can, the first letter of a word

126
00:05:37.950 --> 00:05:40.680
will always, we can access it with zero,

127
00:05:40.680 --> 00:05:43.720
because strings kind of work like arrays do.

128
00:05:43.720 --> 00:05:45.580
If I have a string of wes

129
00:05:45.580 --> 00:05:47.510
and I do square brackets zero,

130
00:05:47.510 --> 00:05:52.510
that gives us W, E and S.

131
00:05:52.750 --> 00:05:55.730
So, if I were to return

132
00:05:58.460 --> 00:06:03.113
the word zero.toUpperCase,

133
00:06:05.350 --> 00:06:06.410
let's try that so far.

134
00:06:06.410 --> 00:06:10.180
So, now before map, we're going to add another map

135
00:06:14.500 --> 00:06:17.470
and I'm going to pass it to capitalize.

136
00:06:17.470 --> 00:06:19.070
So, you see what's happening here is that

137
00:06:19.070 --> 00:06:21.190
you can chain maps on each other

138
00:06:21.190 --> 00:06:23.100
because this is an array

139
00:06:23.100 --> 00:06:25.100
from which you can call map on

140
00:06:25.100 --> 00:06:27.570
and that will return another array,

141
00:06:27.570 --> 00:06:29.560
which you can then chain a map on it,

142
00:06:29.560 --> 00:06:31.710
often we'll write our code like this,

143
00:06:31.710 --> 00:06:34.480
where we just put one on every single line

144
00:06:34.480 --> 00:06:37.350
and you pipe it through three or four different transforms

145
00:06:37.350 --> 00:06:39.640
each with their own little function.

146
00:06:39.640 --> 00:06:42.860
Now,if I refresh this you'll see

147
00:06:42.860 --> 00:06:45.560
W Bos,K Bos and P Bos, so that's good.

148
00:06:45.560 --> 00:06:47.170
We've got the first letter going.

149
00:06:47.170 --> 00:06:50.520
And then I want to return

150
00:06:50.520 --> 00:06:54.457
the rest of it which would be word.slice one.

151
00:06:57.320 --> 00:07:01.010
Because the slice works the same way as an array does

152
00:07:01.010 --> 00:07:05.130
on a string where you can take everything from one to three

153
00:07:05.130 --> 00:07:08.220
but I'm going to just return one to the end.

154
00:07:08.220 --> 00:07:09.660
I'm using plus here

155
00:07:09.660 --> 00:07:12.174
and let's just make sure this works.

156
00:07:12.174 --> 00:07:15.210
here we go, Wes Bos, Kait Bos and Poppy Bos.

157
00:07:15.210 --> 00:07:17.250
let's turn that into back ticks

158
00:07:17.250 --> 00:07:18.860
'cause, remember how we said we don't like

159
00:07:18.860 --> 00:07:20.530
to use the plus operator

160
00:07:20.530 --> 00:07:22.070
because that's for adding,

161
00:07:22.070 --> 00:07:26.140
not for attaching strings together,

162
00:07:26.140 --> 00:07:28.080
what's the word I'm looking for?

163
00:07:28.080 --> 00:07:30.140
Concatenating strings together.

164
00:07:30.140 --> 00:07:32.590
So, I'm going to turn that into one big string

165
00:07:32.590 --> 00:07:37.590
and then we'll just use dollar curly around that one,

166
00:07:37.710 --> 00:07:41.010
get rid of that plus and then dollar curly around that one

167
00:07:43.240 --> 00:07:46.093
let's see if that works, oh!

168
00:07:48.300 --> 00:07:50.240
It didn't, what happened?

169
00:07:50.240 --> 00:07:52.960
Now, oh, there's a space we don't need.

170
00:07:52.960 --> 00:07:54.743
There's space there because,

171
00:07:55.700 --> 00:07:57.940
there we go, that's looking good.

172
00:07:57.940 --> 00:08:02.450
So Map will always take in an item do some work with it

173
00:08:02.450 --> 00:08:06.070
and then return the new value.

174
00:08:06.070 --> 00:08:07.500
Same thing works with numbers.

175
00:08:07.500 --> 00:08:11.000
So if we have, I think we actually up here,

176
00:08:11.000 --> 00:08:13.100
we've got a list of totals.

177
00:08:13.100 --> 00:08:15.730
Let's say we want to add tax to all of them.

178
00:08:15.730 --> 00:08:17.730
So we could say const orderTotalsWithTax

179
00:08:19.440 --> 00:08:21.963
is equal to orderTotals.map,

180
00:08:23.070 --> 00:08:24.830
and then we'll get a total.

181
00:08:24.830 --> 00:08:27.890
And from each, like watch, I could just return one here

182
00:08:27.890 --> 00:08:31.810
and what's going to happen, console.log, orderTotals,

183
00:08:31.810 --> 00:08:34.650
every item has now been turned into one.

184
00:08:34.650 --> 00:08:38.230
Why? Because whatever you return from your map function

185
00:08:38.230 --> 00:08:42.108
will replace whatever was initially in your map function.

186
00:08:42.108 --> 00:08:44.950
It's not mutable, meaning it's not going

187
00:08:44.950 --> 00:08:48.810
to, our order totals are still there, right.

188
00:08:48.810 --> 00:08:52.640
And our full names are still there.

189
00:08:52.640 --> 00:08:57.260
But the new array will have the updated value.

190
00:08:57.260 --> 00:08:59.930
So what we can do is return the total times

191
00:08:59.930 --> 00:09:04.470
one decimal one three, that's what tax is here in Ontario

192
00:09:04.470 --> 00:09:06.390
and now we refresh it.

193
00:09:06.390 --> 00:09:11.390
You'll see we now have our values with the tax added to them

194
00:09:11.682 --> 00:09:13.707
this is how math works in JavaScript

195
00:09:13.707 --> 00:09:16.250
and in a lot of programming languages.

196
00:09:16.250 --> 00:09:19.540
I've talked about that in the numbers one as well.

197
00:09:19.540 --> 00:09:24.140
So, I find Map to be extremely helpful

198
00:09:24.140 --> 00:09:26.700
I even wrote this, I'm just going to paste this in here

199
00:09:26.700 --> 00:09:29.880
'cause I thought this was pretty silly to do.

200
00:09:29.880 --> 00:09:31.980
So there's this kind of thing on Twitter,

201
00:09:31.980 --> 00:09:35.950
where people will make cowboys

202
00:09:35.950 --> 00:09:37.630
out of different emojis.

203
00:09:37.630 --> 00:09:40.862
So, lemme show you how it works first.

204
00:09:40.862 --> 00:09:45.160
(laughs) So, what I have done here

205
00:09:45.160 --> 00:09:49.190
is I've taken our faces array which is all of these emojis,

206
00:09:49.190 --> 00:09:52.310
I have looped over each one,

207
00:09:52.310 --> 00:09:55.260
and for each one I've passed

208
00:09:55.260 --> 00:09:59.470
the face to our attachBody function,

209
00:09:59.470 --> 00:10:02.950
along with whatever I want the body to be made up of.

210
00:10:02.950 --> 00:10:05.690
And then that will return us a new array

211
00:10:05.690 --> 00:10:06.850
and then for each of those

212
00:10:06.850 --> 00:10:08.960
I just console.log them into the console

213
00:10:08.960 --> 00:10:09.880
to see how they work

214
00:10:09.880 --> 00:10:12.000
and in here this is simply just a function

215
00:10:12.000 --> 00:10:13.537
that takes in what is their face

216
00:10:13.537 --> 00:10:15.620
and what is their body made out of,

217
00:10:15.620 --> 00:10:19.600
and it uses back ticks so I can use multiple lines here

218
00:10:19.600 --> 00:10:22.000
and it places their face in there

219
00:10:22.000 --> 00:10:24.770
and then it takes their body which is in this case

220
00:10:24.770 --> 00:10:26.470
it's going to be a string of fries

221
00:10:27.457 --> 00:10:28.430
and repeats it three times.

222
00:10:28.430 --> 00:10:29.860
I'm not sure if I shown you that yet,

223
00:10:29.860 --> 00:10:32.970
but if you take a letter and you type repeat on the end

224
00:10:32.970 --> 00:10:36.240
you can pass it however many you'd like it to repeat

225
00:10:36.240 --> 00:10:38.524
and it will show you that.

226
00:10:38.524 --> 00:10:41.290
This is another kind of a cool thing.

227
00:10:41.290 --> 00:10:43.743
Remember we looked at the Array.from,

228
00:10:44.631 --> 00:10:47.270
this is an Array.fill method.

229
00:10:47.270 --> 00:10:49.993
If you say something like array dot,

230
00:10:51.090 --> 00:10:55.720
Array three, it gives you three empty spots in a ray.

231
00:10:55.720 --> 00:10:58.840
Much like Array.from, but if you want to fill them

232
00:10:58.840 --> 00:11:00.330
with the exact same thing,

233
00:11:00.330 --> 00:11:03.550
this is a bit of a quicker way to do it,

234
00:11:03.550 --> 00:11:06.380
versus the from and map function that we looked at.

235
00:11:06.380 --> 00:11:09.040
So in my case I could fill it with an x,

236
00:11:09.040 --> 00:11:10.450
now I have three spots with an x.

237
00:11:10.450 --> 00:11:15.450
And in our case I'm just filling it with an emoji.

238
00:11:17.140 --> 00:11:21.520
And then calling join with a space separator on it.

239
00:11:21.520 --> 00:11:24.490
And that gives us the actual body of the person.

240
00:11:24.490 --> 00:11:26.540
Then I do that a few more times in there.

241
00:11:28.091 --> 00:11:29.920
(laughs) I'll leave that in there in case it's kinda

242
00:11:29.920 --> 00:11:31.980
interesting to look at, kind of funny.

243
00:11:31.980 --> 00:11:33.440
This is kind of a silly thing

244
00:11:33.440 --> 00:11:35.410
so don't feel like that was a real thing

245
00:11:35.410 --> 00:11:37.340
but I thought I would show it to you

246
00:11:37.340 --> 00:11:40.520
because sometimes, when I want a little bit of a break

247
00:11:40.520 --> 00:11:41.920
this is the kind of stuff that I build

248
00:11:41.920 --> 00:11:43.600
'cause it's kinda interesting to me

249
00:11:43.600 --> 00:11:46.059
and I feel like it makes me a bit

250
00:11:46.059 --> 00:11:48.000
of a better JavaScript evolver.

251
00:11:48.000 --> 00:11:51.210
Now, Map can also be used for any type of data.

252
00:11:51.210 --> 00:11:54.020
We've looked at an example with strings,

253
00:11:54.020 --> 00:11:57.090
we've looked at an example with numbers

254
00:11:57.090 --> 00:11:58.810
where we calculated some money,

255
00:11:58.810 --> 00:12:01.100
but more often than not

256
00:12:01.100 --> 00:12:03.690
you're actually going to have an array of objects

257
00:12:03.690 --> 00:12:06.380
that comes back from an API.

258
00:12:06.380 --> 00:12:08.180
So, let's take a look up here.

259
00:12:08.180 --> 00:12:10.470
I've got this array of people here

260
00:12:10.470 --> 00:12:14.840
and each person is signified by an object

261
00:12:14.840 --> 00:12:18.500
and each person has a birthday, a name object

262
00:12:18.500 --> 00:12:22.140
with a nested first and last property inside of that.

263
00:12:22.140 --> 00:12:25.500
Now, what I want to do is, that data is okay,

264
00:12:25.500 --> 00:12:27.600
but it's not in the format that I need it,

265
00:12:27.600 --> 00:12:29.440
and this happens all the time.

266
00:12:29.440 --> 00:12:31.600
The API comes back with a bunch of data,

267
00:12:31.600 --> 00:12:33.040
your database has a bunch of data

268
00:12:33.040 --> 00:12:34.860
and it's not exactly in the format

269
00:12:34.860 --> 00:12:36.970
that you need it to do your work.

270
00:12:36.970 --> 00:12:39.790
So what you have to do is you have to take in this data,

271
00:12:39.790 --> 00:12:41.500
you have to massage it a little bit,

272
00:12:41.500 --> 00:12:44.220
I got fingers in the air right now massaging that data

273
00:12:44.220 --> 00:12:47.300
and then return the new formatted data that we want.

274
00:12:47.300 --> 00:12:49.450
So, let's go ahead and do that.

275
00:12:49.450 --> 00:12:53.320
Go over down here and we'll say const cleanPeople

276
00:12:54.200 --> 00:12:56.603
is equal to people.map,

277
00:13:00.160 --> 00:13:03.100
and we're going to, let's do it in line here

278
00:13:03.100 --> 00:13:04.890
'cause this is pretty common thing you see as well.

279
00:13:04.890 --> 00:13:07.620
That function is going to give you a person

280
00:13:07.620 --> 00:13:09.200
and you're more than welcome

281
00:13:09.200 --> 00:13:12.600
to console.log the person inside of a map function

282
00:13:12.600 --> 00:13:16.290
just don't ever do things like

283
00:13:16.290 --> 00:13:19.110
go off and update the dom inside of a map function.

284
00:13:19.110 --> 00:13:20.660
that's what a forEach is for.

285
00:13:20.660 --> 00:13:23.423
And we'll do that a lot more in our examples.

286
00:13:24.320 --> 00:13:27.733
Now, first thing we're gonna do is get their birthday,

287
00:13:30.260 --> 00:13:34.890
and then figure out how old they are

288
00:13:36.760 --> 00:13:40.900
and then we want to return their full name

289
00:13:40.900 --> 00:13:44.133
and b-day in an object.

290
00:13:45.000 --> 00:13:47.210
So, first we had to get their birthday.

291
00:13:47.210 --> 00:13:51.400
So, their birthday is stored in a string

292
00:13:51.400 --> 00:13:53.530
and that's not all that helpful to us

293
00:13:53.530 --> 00:13:56.290
because when you want to work with dates in JavaScript

294
00:13:56.290 --> 00:13:59.520
actually has to be changed over

295
00:13:59.520 --> 00:14:01.340
to what's called the JavaScript date.

296
00:14:01.340 --> 00:14:04.290
So, I'm going to show you how we can do that in here.

297
00:14:04.290 --> 00:14:07.890
So we'll say const birthday is equal to new date

298
00:14:09.050 --> 00:14:12.440
and if you don't pass, when you create a date in JavaScript,

299
00:14:12.440 --> 00:14:14.070
if you don't pass it anything,

300
00:14:14.070 --> 00:14:15.690
it's just going to give you the date.

301
00:14:15.690 --> 00:14:18.440
This is the date that I'm recording, that's right now.

302
00:14:18.440 --> 00:14:22.260
and if you don't pass it a string of a date

303
00:14:22.260 --> 00:14:23.580
it's just going to use whatever

304
00:14:23.580 --> 00:14:25.310
the current time is as a date.

305
00:14:25.310 --> 00:14:30.020
But if you do pass it a date like person.birthday,

306
00:14:30.020 --> 00:14:32.303
and you can console.log the birthday,

307
00:14:36.890 --> 00:14:39.790
you'll see that for each person, we log the person

308
00:14:39.790 --> 00:14:43.110
and then it actually logs a true JavaScript date

309
00:14:43.110 --> 00:14:46.426
for us, Thursday, April 22, 1933.

310
00:14:46.426 --> 00:14:48.940
We don't pass it hours or seconds,

311
00:14:48.940 --> 00:14:50.400
if that's not, if that's the case,

312
00:14:50.400 --> 00:14:51.880
it just does that at midnight.

313
00:14:51.880 --> 00:14:54.010
Now we want to figure out how old they are.

314
00:14:54.010 --> 00:14:57.520
So we also need to know what is right now.

315
00:14:57.520 --> 00:15:02.120
So, we could say const now is equal to new date

316
00:15:02.120 --> 00:15:04.200
and now we've got sort of two different

317
00:15:04.200 --> 00:15:06.157
JavaScript date objects

318
00:15:06.157 --> 00:15:09.203
and go ahead and look at them,

319
00:15:10.480 --> 00:15:11.800
let's console.log birthday

320
00:15:11.800 --> 00:15:14.893
and now get rid of this log of person.

321
00:15:16.670 --> 00:15:19.430
You see I've got three different dates showing up.

322
00:15:19.430 --> 00:15:22.640
Now, that's okay and when you log it to the console,

323
00:15:22.640 --> 00:15:23.920
it just gives you the string

324
00:15:23.920 --> 00:15:26.460
but there are a number of methods on a date

325
00:15:26.460 --> 00:15:28.070
that will allow you to work with it.

326
00:15:28.070 --> 00:15:30.620
So what I like to do when I need to compare dates

327
00:15:30.620 --> 00:15:33.390
or figure out how much time is in between two dates

328
00:15:33.390 --> 00:15:37.530
is to, is change them to what I call timestamps,

329
00:15:37.530 --> 00:15:38.530
that's what they are called.

330
00:15:38.530 --> 00:15:40.950
so if you, let's create a date const now

331
00:15:40.950 --> 00:15:43.490
is equal to new date,

332
00:15:43.490 --> 00:15:46.680
and if we take now and we say get time,

333
00:15:46.680 --> 00:15:49.720
it's going to return to us as random number that

334
00:15:49.720 --> 00:15:51.240
is actually not random at all.

335
00:15:51.240 --> 00:15:53.270
But this is the number of milliseconds

336
00:15:53.270 --> 00:15:55.120
since God created the earth.

337
00:15:55.120 --> 00:15:57.880
And it's actually the number of milliseconds since like

338
00:15:57.880 --> 00:16:00.920
January 1, 1970 something like that.

339
00:16:00.920 --> 00:16:03.000
And that's at the time where

340
00:16:03.000 --> 00:16:05.121
they said okay, this is when date starts.

341
00:16:05.121 --> 00:16:08.150
And any dates that are negative go back from that point

342
00:16:08.150 --> 00:16:11.430
in time and any dates that are positive

343
00:16:11.430 --> 00:16:14.490
go forward from that time and there's actually a shortcut

344
00:16:14.490 --> 00:16:16.970
to get that you just say Date.now

345
00:16:16.970 --> 00:16:19.130
and every time you run it's going to change

346
00:16:19.130 --> 00:16:22.580
because time is constantly getting, moving forward

347
00:16:22.580 --> 00:16:25.360
and these will always grow and grow and grow.

348
00:16:25.360 --> 00:16:27.800
So if you ever have one of these timestamps

349
00:16:27.800 --> 00:16:31.780
you can go to this website epoch.now.sh,

350
00:16:31.780 --> 00:16:35.110
it's E-P-O-C-H dot now dot S-H

351
00:16:35.110 --> 00:16:36.630
and it allows you to do both things.

352
00:16:36.630 --> 00:16:40.120
You can convert like any date in the future

353
00:16:40.120 --> 00:16:44.270
or in the past to a timestamp,

354
00:16:44.270 --> 00:16:46.090
JavaScript deals with milliseconds,

355
00:16:46.090 --> 00:16:47.430
so you always want to work with that.

356
00:16:47.430 --> 00:16:49.610
Some other languages just deal in seconds.

357
00:16:49.610 --> 00:16:51.600
JavaScript always deals in milliseconds.

358
00:16:51.600 --> 00:16:53.310
And you can do the opposite,

359
00:16:53.310 --> 00:16:56.150
where if you were to paste in a number of milliseconds,

360
00:16:56.150 --> 00:16:59.130
it will convert it back to a regular date for you.

361
00:16:59.130 --> 00:17:03.453
So if we take this time stamp and paste it in here,

362
00:17:04.610 --> 00:17:06.740
it will tell us that i made that time stamp out

363
00:17:06.740 --> 00:17:11.740
October 25th at 2:39:18 PM, okay.

364
00:17:11.920 --> 00:17:16.640
So we want to convert these not to just date objects

365
00:17:16.640 --> 00:17:20.070
but to full blown timestamps.

366
00:17:20.070 --> 00:17:24.240
So we're just going to call the getTime method on that

367
00:17:24.240 --> 00:17:26.820
and we'll just say timestamp,

368
00:17:26.820 --> 00:17:31.260
and then here, we can say now timestamp,

369
00:17:31.260 --> 00:17:32.425
and we won't do a new date, we'll just say Date.now.

370
00:17:32.425 --> 00:17:36.280
That's just a little convenience method

371
00:17:36.280 --> 00:17:37.430
that is built into it.

372
00:17:37.430 --> 00:17:38.300
Wait, hold on.

373
00:17:38.300 --> 00:17:41.763
What do you call these methods that live on the Mama?

374
00:17:43.300 --> 00:17:45.150
You're right, static methods.

375
00:17:45.150 --> 00:17:47.180
They're called static methods because they don't exist

376
00:17:47.180 --> 00:17:48.630
on every single date.

377
00:17:48.630 --> 00:17:52.750
They only exist on the Mama object that's in there.

378
00:17:52.750 --> 00:17:54.190
So we have the birthday and we have now

379
00:17:54.190 --> 00:17:55.030
and then we're going to find out

380
00:17:55.030 --> 00:17:56.880
what the difference is between the two.

381
00:17:56.880 --> 00:18:01.880
So, we will say const age is equal to now minus birthday,

382
00:18:03.410 --> 00:18:06.073
and let's just console.log the age for each person.

383
00:18:07.910 --> 00:18:11.860
So that's how old each people are in milliseconds.

384
00:18:11.860 --> 00:18:16.860
So this is now needs to be converted into years.

385
00:18:17.390 --> 00:18:22.360
and ask yourself how many milliseconds are in a year.

386
00:18:22.360 --> 00:18:27.280
Well, there's a 1000 milliseconds in a second,

387
00:18:27.280 --> 00:18:28.870
there's 60 seconds in a minute,

388
00:18:28.870 --> 00:18:33.170
there's 60 minutes in an hour,

389
00:18:33.170 --> 00:18:35.940
and there are 24 hours in a day,

390
00:18:35.940 --> 00:18:39.980
and there are 365 days in the year.

391
00:18:39.980 --> 00:18:44.980
That will give us 31 billion 536 million seconds.

392
00:18:45.770 --> 00:18:47.750
and there's other ways to do dates

393
00:18:47.750 --> 00:18:52.420
that will account for leap years and things like that

394
00:18:52.420 --> 00:18:55.370
but this is probably the simplest

395
00:18:55.370 --> 00:18:56.630
way to do it in this tutorial.

396
00:18:56.630 --> 00:18:57.990
There's whole libraries out there,

397
00:18:57.990 --> 00:18:59.510
I highly recommend checking out a library

398
00:18:59.510 --> 00:19:03.336
called date functions, date-fns.

399
00:19:03.336 --> 00:19:05.740
And they give you a whole bunch of robust tools

400
00:19:05.740 --> 00:19:07.010
for actually working with dates

401
00:19:07.010 --> 00:19:09.420
and figuring out time between two different dates.

402
00:19:09.420 --> 00:19:11.610
For now, we're going to deal with that.

403
00:19:11.610 --> 00:19:15.600
So we'll take this now minus birthday,

404
00:19:15.600 --> 00:19:19.590
and we will divide it by that number that we have there

405
00:19:19.590 --> 00:19:21.713
and now we'll see what age somebody is.

406
00:19:22.680 --> 00:19:26.760
So 26, 44 and 75 and then we've got these kind of like, meh,

407
00:19:26.760 --> 00:19:28.550
like how many months is that, right?

408
00:19:28.550 --> 00:19:30.140
So what we'll do is we'll just take

409
00:19:30.140 --> 00:19:32.650
the lower bound of that number

410
00:19:32.650 --> 00:19:35.230
because obviously they haven't hit their next birthday yet

411
00:19:35.230 --> 00:19:37.610
and you would say that you're 26 years old.

412
00:19:37.610 --> 00:19:40.300
so how would we take the lower bound of any number?

413
00:19:40.300 --> 00:19:42.360
It's not round 'cause you don't round up

414
00:19:42.360 --> 00:19:43.920
to say how old you are you.

415
00:19:43.920 --> 00:19:47.260
You take the lower bound and that is with Math.floor,

416
00:19:47.260 --> 00:19:50.860
grab the entire thing in a Math.floor

417
00:19:50.860 --> 00:19:55.860
and then it tells us person is 26, 44 and 75, okay.

418
00:19:56.070 --> 00:19:59.500
Now, we we got their birthday,

419
00:19:59.500 --> 00:20:01.160
figured out how old they are,

420
00:20:01.160 --> 00:20:03.010
and now we wanna return their full name

421
00:20:03.010 --> 00:20:04.380
and b-day in an object.

422
00:20:04.380 --> 00:20:06.920
So we'll just return an object

423
00:20:06.920 --> 00:20:11.170
where their age is going to be the age variable

424
00:20:11.170 --> 00:20:16.170
and then the name is going to be,

425
00:20:16.460 --> 00:20:18.760
or get some back ticks here,

426
00:20:18.760 --> 00:20:23.650
and we'll say the person.named.first, space

427
00:20:27.460 --> 00:20:29.603
person.name.last.

428
00:20:30.710 --> 00:20:34.080
And it's really important that you return this value here.

429
00:20:34.080 --> 00:20:36.260
Also you might be screaming at me,

430
00:20:36.260 --> 00:20:38.450
if the property that you're returning

431
00:20:38.450 --> 00:20:41.380
is the same name as the variable that you're returning,

432
00:20:41.380 --> 00:20:42.443
just do it like that.

433
00:20:43.660 --> 00:20:46.030
So, now we take these cleanPeople

434
00:20:46.030 --> 00:20:50.033
and we can console.table the cleanPeople.

435
00:20:51.180 --> 00:20:52.117
And boom!

436
00:20:52.117 --> 00:20:56.450
"Cannot read first of undefined line 195",

437
00:20:56.450 --> 00:20:58.080
person.name.first,

438
00:20:58.080 --> 00:20:59.810
so what's wrong with my data here,

439
00:20:59.810 --> 00:21:01.730
let's go look at it.

440
00:21:01.730 --> 00:21:03.850
Oh it's names, not name.

441
00:21:03.850 --> 00:21:05.793
So that's a bit of an issue.

442
00:21:05.793 --> 00:21:08.370
I thought the property was called names but it's not.

443
00:21:08.370 --> 00:21:11.493
So we'll go back down there and we'll put an s there.

444
00:21:13.340 --> 00:21:15.623
And oh, okay, I will put one there too.

445
00:21:16.670 --> 00:21:19.430
There we go, so we have our index, our age

446
00:21:19.430 --> 00:21:21.870
and their full name just in a string version.

447
00:21:21.870 --> 00:21:24.180
So again that is what Map does.

448
00:21:24.180 --> 00:21:27.440
Takes in some data that doesn't look exactly how you like it

449
00:21:27.440 --> 00:21:29.940
then you could do a bunch of data massaging

450
00:21:29.940 --> 00:21:32.173
and then spit it out the other end.

