WEBVTT

1
00:00:01.170 --> 00:00:03.753
(upbeat music)

2
00:00:05.080 --> 00:00:06.370
<v ->I hope you're ready to actually</v>

3
00:00:06.370 --> 00:00:07.940
do some stuff with JavaScript.

4
00:00:07.940 --> 00:00:10.120
These videos are going to be about functions

5
00:00:10.120 --> 00:00:11.870
and they're not going to be exhaustive

6
00:00:11.870 --> 00:00:13.610
cause there's so much more we need to learn

7
00:00:13.610 --> 00:00:15.949
in order to actually take advantage of them,

8
00:00:15.949 --> 00:00:18.000
but we are going to get a good primer on

9
00:00:18.000 --> 00:00:20.320
what functions are, the core concepts,

10
00:00:20.320 --> 00:00:21.910
and an overview of the different types

11
00:00:21.910 --> 00:00:24.130
of functions that you can write.

12
00:00:24.130 --> 00:00:25.470
The rest of the entire course

13
00:00:25.470 --> 00:00:28.210
is going to be using functions since they are, like types,

14
00:00:28.210 --> 00:00:30.971
a fundamental building block of Java Script.

15
00:00:30.971 --> 00:00:32.590
That's how we're going to sort of get good with them

16
00:00:32.590 --> 00:00:34.360
is we're going to be writing functions

17
00:00:34.360 --> 00:00:36.350
for the rest of this entire course.

18
00:00:36.350 --> 00:00:38.040
So what are they?

19
00:00:38.040 --> 00:00:40.560
Well, functions allow us to group together

20
00:00:40.560 --> 00:00:41.810
sets of statements.

21
00:00:41.810 --> 00:00:42.643
Remember?

22
00:00:42.643 --> 00:00:44.560
Let's take at some of our code here.

23
00:00:44.560 --> 00:00:45.393
What's a statement?

24
00:00:45.393 --> 00:00:46.930
Well, this is a statement right here

25
00:00:46.930 --> 00:00:48.880
where we maybe set a variable.

26
00:00:48.880 --> 00:00:51.020
This is a statement here where we set a variable

27
00:00:51.020 --> 00:00:53.760
and do like a condition.

28
00:00:53.760 --> 00:00:56.420
This is a statement right here where we actually go off

29
00:00:56.420 --> 00:00:59.770
and run console dot log so we can see the data.

30
00:00:59.770 --> 00:01:03.336
So all of this stuff if you wanna ever group it together,

31
00:01:03.336 --> 00:01:05.330
generally they're related to each other

32
00:01:05.330 --> 00:01:08.020
and generally they produce some sort of output.

33
00:01:08.020 --> 00:01:10.240
So we wanna group those instructions together

34
00:01:10.240 --> 00:01:11.510
inside of a function.

35
00:01:11.510 --> 00:01:14.370
Now, functions can take in data,

36
00:01:14.370 --> 00:01:16.130
and those are known as arguments.

37
00:01:16.130 --> 00:01:18.730
We're gonna talk about difference between

38
00:01:18.730 --> 00:01:21.890
arguments and parameters in a just a second

39
00:01:21.890 --> 00:01:24.480
but know that when you pass in data into a function

40
00:01:24.480 --> 00:01:26.250
that's called an argument.

41
00:01:26.250 --> 00:01:27.517
And then they perform some work

42
00:01:27.517 --> 00:01:30.190
and that is what is referred to as a statement

43
00:01:30.190 --> 00:01:33.120
and then sometimes they also return a value.

44
00:01:33.120 --> 00:01:34.130
Okay, that was a lot there.

45
00:01:34.130 --> 00:01:38.160
So let's take a look at math dot max.

46
00:01:38.160 --> 00:01:38.993
This is a good one.

47
00:01:38.993 --> 00:01:41.160
So math dot max is a function.

48
00:01:41.160 --> 00:01:42.350
It's actually something called a method.

49
00:01:42.350 --> 00:01:43.230
We'll talk about the difference

50
00:01:43.230 --> 00:01:44.510
between a function and a method,

51
00:01:44.510 --> 00:01:46.270
it's not much, in a bit.

52
00:01:46.270 --> 00:01:48.370
But math dot max is the function.

53
00:01:48.370 --> 00:01:51.330
Now if you run it, it gives you negative infinity.

54
00:01:51.330 --> 00:01:54.487
I'm not really sure why because we didn't pass it any data.

55
00:01:54.487 --> 00:01:57.810
But we actually need to pass it some data.

56
00:01:57.810 --> 00:01:59.420
And what math dot max will do is it will

57
00:01:59.420 --> 00:02:00.890
return us the maximum value.

58
00:02:00.890 --> 00:02:04.430
So if we pass it two numbers, ten and twelve,

59
00:02:04.430 --> 00:02:08.070
it's going to return to us the highest number,

60
00:02:08.070 --> 00:02:08.903
which is twelve, right?

61
00:02:08.903 --> 00:02:10.020
Makes sense.

62
00:02:10.020 --> 00:02:11.690
So what's going on here, right?

63
00:02:11.690 --> 00:02:15.969
So this line right here, that is a Java Script statement.

64
00:02:15.969 --> 00:02:20.320
This pieces of data that you pass in to the function,

65
00:02:20.320 --> 00:02:23.569
so if you wanna give a function multiple pieces of data

66
00:02:23.569 --> 00:02:26.210
you simply just put a comma between each of them,

67
00:02:26.210 --> 00:02:27.670
and it's sort of a best practice to put

68
00:02:27.670 --> 00:02:29.460
a space in between each of these.

69
00:02:29.460 --> 00:02:31.670
These things are called arguments.

70
00:02:31.670 --> 00:02:34.110
So the data that you pass to a function,

71
00:02:34.110 --> 00:02:37.180
the data that you give to a function in order for it to run,

72
00:02:37.180 --> 00:02:38.660
is called a argument.

73
00:02:38.660 --> 00:02:42.410
And then sometimes functions will return to you

74
00:02:42.410 --> 00:02:45.000
some data that is generally like the answer

75
00:02:45.000 --> 00:02:48.190
or the computed output based on what you pass in.

76
00:02:48.190 --> 00:02:50.620
In this case it's going to return us twelve.

77
00:02:50.620 --> 00:02:54.500
So similarly we can say like math dot floor,

78
00:02:54.500 --> 00:02:56.860
if we pass it two point four four four

79
00:02:56.860 --> 00:02:58.110
it will return to us two.

80
00:02:58.110 --> 00:03:00.480
It gives us the floor of that actual value.

81
00:03:00.480 --> 00:03:03.490
So in this case, we just pass one argument of

82
00:03:03.490 --> 00:03:07.580
two point four four four and it returns to us two.

83
00:03:07.580 --> 00:03:10.638
So there is a whole bunch of

84
00:03:10.638 --> 00:03:13.750
built in functions in Java Script.

85
00:03:13.750 --> 00:03:17.060
So like the browser and node and

86
00:03:17.060 --> 00:03:18.820
whatever Java Script run time you're using,

87
00:03:18.820 --> 00:03:20.710
they come with all of these built in things.

88
00:03:20.710 --> 00:03:23.020
And we've already been sort of sneakily using them

89
00:03:23.020 --> 00:03:24.700
because like there's no way around it.

90
00:03:24.700 --> 00:03:26.680
And probably the one we've used most

91
00:03:26.680 --> 00:03:29.181
so far is console dot log.

92
00:03:29.181 --> 00:03:31.590
And what console dot log will do is

93
00:03:31.590 --> 00:03:33.920
you just say "hey" and what that will do is

94
00:03:33.920 --> 00:03:37.310
it actually just logs it into the thing.

95
00:03:37.310 --> 00:03:41.870
You'll notice that this thing returned to us undefined.

96
00:03:41.870 --> 00:03:45.630
You know that it's returned because in the console,

97
00:03:45.630 --> 00:03:48.830
the statement is what you write on the arrow pointing in,

98
00:03:48.830 --> 00:03:51.190
and then the arrow pointing back with a dot

99
00:03:51.190 --> 00:03:54.620
is what gets returned to you after you run that function.

100
00:03:54.620 --> 00:03:57.230
So our statement, math dot max ten and twelve,

101
00:03:57.230 --> 00:03:58.563
returned to us twelve.

102
00:04:00.260 --> 00:04:03.330
Statement math dot floor returns to us two.

103
00:04:03.330 --> 00:04:07.570
Console dot log hey, it logs hey

104
00:04:07.570 --> 00:04:09.230
but then it returns to us undefined.

105
00:04:09.230 --> 00:04:10.150
Like why is that?

106
00:04:10.150 --> 00:04:13.610
Well not all functions are meant to

107
00:04:13.610 --> 00:04:15.480
actually return to you values.

108
00:04:15.480 --> 00:04:18.460
Sometimes functions just go off and do a bunch of work,

109
00:04:18.460 --> 00:04:20.570
in this case this function does one thing.

110
00:04:20.570 --> 00:04:23.310
It logs hey to the console and then it's over.

111
00:04:23.310 --> 00:04:25.030
It doesn't have anything to give back to us.

112
00:04:25.030 --> 00:04:26.828
It doesn't say like hey I'm back.

113
00:04:26.828 --> 00:04:29.600
I brought you like this t-shirt or something like that.

114
00:04:29.600 --> 00:04:31.160
It didn't bring us back anything.

115
00:04:31.160 --> 00:04:33.661
So in that case it returns to us undefined

116
00:04:33.661 --> 00:04:37.420
and that's totally fine because not all functions

117
00:04:37.420 --> 00:04:38.470
return to us values.

118
00:04:38.470 --> 00:04:41.300
So let's look at some of the other ones that we've got here.

119
00:04:41.300 --> 00:04:45.190
We've got Parse float that will take in

120
00:04:45.190 --> 00:04:47.100
if we've take twenty point three

121
00:04:47.100 --> 00:04:49.080
it will return to us-

122
00:04:49.080 --> 00:04:49.913
Oh, sorry no.

123
00:04:49.913 --> 00:04:51.463
If you pass it a string,

124
00:04:53.380 --> 00:04:55.140
it will return to us a number.

125
00:04:55.140 --> 00:04:56.720
So this is all about types.

126
00:04:56.720 --> 00:04:59.720
You take in strings and it returns to us a number.

127
00:04:59.720 --> 00:05:01.790
Parse Int does something similar,

128
00:05:01.790 --> 00:05:03.550
we looked at that earlier.

129
00:05:03.550 --> 00:05:08.490
It will take in a string and return a integer,

130
00:05:08.490 --> 00:05:09.500
which is a whole number.

131
00:05:09.500 --> 00:05:11.380
Again they both return numbers,

132
00:05:11.380 --> 00:05:13.040
but it's just telling us whether we

133
00:05:13.040 --> 00:05:15.770
should keep the decimal or not.

134
00:05:15.770 --> 00:05:20.210
We looked at math dot round, math dot seal, math dot floor.

135
00:05:20.210 --> 00:05:21.910
There's a whole bunch of date functions

136
00:05:21.910 --> 00:05:22.830
which we're going to go into

137
00:05:22.830 --> 00:05:26.150
but if you take a look at capital D date dot now

138
00:05:26.150 --> 00:05:29.140
that is a function that takes no arguments,

139
00:05:29.140 --> 00:05:30.720
so you don't need to pass anything to it

140
00:05:30.720 --> 00:05:32.260
cause it doesn't need anything,

141
00:05:32.260 --> 00:05:36.230
and what is actually returns to us is the number of

142
00:05:36.230 --> 00:05:40.900
milliseconds since God created the earth I always say.

143
00:05:40.900 --> 00:05:42.790
But it's the number of milliseconds

144
00:05:42.790 --> 00:05:46.317
since like January 1, 1970 or something like that.

145
00:05:46.317 --> 00:05:49.160
So you see if I run it over and over

146
00:05:49.160 --> 00:05:50.610
it's always changing.

147
00:05:50.610 --> 00:05:53.690
Actually if you go to epoch dot now dot s h,

148
00:05:53.690 --> 00:05:55.917
there's this little tool that I use

149
00:05:55.917 --> 00:05:58.197
and what it does is if you take like,

150
00:05:58.197 --> 00:06:00.733
let's see, I ran this one right here,

151
00:06:02.340 --> 00:06:06.917
paste it in and it says it's June 11th, 2019 at 11:48 a.m.

152
00:06:08.030 --> 00:06:09.390
You can also do the opposite,

153
00:06:09.390 --> 00:06:13.170
so if I were to go and pick some sort of date in the future

154
00:06:14.320 --> 00:06:16.083
and also select a time.

155
00:06:17.010 --> 00:06:19.530
Press okay, it will give us the number of milliseconds.

156
00:06:19.530 --> 00:06:22.290
Some other programing languages use seconds

157
00:06:22.290 --> 00:06:24.826
but Java Script goes down to the millisecond,

158
00:06:24.826 --> 00:06:27.650
which is exactly what we want right here.

159
00:06:27.650 --> 00:06:29.690
So that is dates.

160
00:06:29.690 --> 00:06:31.350
We're going to go much more into dates

161
00:06:31.350 --> 00:06:32.760
and actually working with them

162
00:06:32.760 --> 00:06:34.290
but that's just an example of one of

163
00:06:34.290 --> 00:06:36.380
the built in functions that we have.

164
00:06:36.380 --> 00:06:39.480
We also have functions that will sort of

165
00:06:40.600 --> 00:06:43.380
work with the, what's called the dom,

166
00:06:43.380 --> 00:06:45.530
work with the HTML elements that are on the page.

167
00:06:45.530 --> 00:06:47.180
So let's actually go ahead and

168
00:06:47.180 --> 00:06:51.960
make a new file called functions dot HTML.

169
00:06:51.960 --> 00:06:54.403
And we'll use our HTML base,

170
00:06:55.694 --> 00:06:57.500
and we'll just call it functions.

171
00:06:57.500 --> 00:06:59.403
And then here I'll give a script tag,

172
00:07:01.170 --> 00:07:03.850
and above that script tag let's give ourselves

173
00:07:03.850 --> 00:07:07.523
a paragraph tag that says hey how ya doin?

174
00:07:12.890 --> 00:07:14.603
Open that up in your browser.

175
00:07:18.470 --> 00:07:20.440
Now if we were to do this,

176
00:07:20.440 --> 00:07:25.440
const p is equal to document dot query selector quote p

177
00:07:27.800 --> 00:07:30.240
and then console log p after that.

178
00:07:30.240 --> 00:07:32.090
What we're doing here is we're running a function

179
00:07:32.090 --> 00:07:34.580
called document dot query selector.

180
00:07:34.580 --> 00:07:36.320
We pass it what's called a selector.

181
00:07:36.320 --> 00:07:39.260
Again, we have a entire section of this course on this.

182
00:07:39.260 --> 00:07:40.940
I know that I keep saying that

183
00:07:40.940 --> 00:07:42.660
but this is sort of just a primer.

184
00:07:42.660 --> 00:07:44.200
And then what it does is it

185
00:07:44.200 --> 00:07:46.380
will find something that matches this selector,

186
00:07:46.380 --> 00:07:48.010
much like CSS does,

187
00:07:48.010 --> 00:07:49.700
and puts it into a variable

188
00:07:49.700 --> 00:07:52.330
and then I go ahead and log that variable.

189
00:07:52.330 --> 00:07:55.780
And now we see that there's a paragraph there.

190
00:07:55.780 --> 00:07:57.700
There's all kinds of other functions that are in it.

191
00:07:57.700 --> 00:07:59.190
There's some cool mobile ones.

192
00:07:59.190 --> 00:08:01.330
There's like navigator dot, I think, vibrate.

193
00:08:01.330 --> 00:08:06.140
Yeah, navigator dot vibrate, and uh

194
00:08:06.140 --> 00:08:08.910
Navigator failed to execute vibrate on navigator.

195
00:08:08.910 --> 00:08:12.400
One argument required but only zero present.

196
00:08:12.400 --> 00:08:14.700
So here's another good example is

197
00:08:14.700 --> 00:08:18.006
if you don't know what arguments that a function should take

198
00:08:18.006 --> 00:08:21.810
we like to use the Mozilla developer network docs

199
00:08:21.810 --> 00:08:22.940
in order to see what's going on.

200
00:08:22.940 --> 00:08:24.060
So let's do it.

201
00:08:24.060 --> 00:08:25.720
Navigator vibrate

202
00:08:28.130 --> 00:08:31.300
and usually you'll look for the Mozilla developer.

203
00:08:31.300 --> 00:08:34.570
If you want you can also just put MDN in the search

204
00:08:34.570 --> 00:08:37.030
and what that will do is it will make sure that the

205
00:08:37.030 --> 00:08:40.460
Mozilla docs sort of float to the top which is good.

206
00:08:40.460 --> 00:08:42.110
The Google Chrome stuff is also good,

207
00:08:42.110 --> 00:08:43.450
but let's take a look here.

208
00:08:43.450 --> 00:08:47.190
And this is generally what you find for a function.

209
00:08:47.190 --> 00:08:48.920
It says it's a method, it is.

210
00:08:48.920 --> 00:08:51.120
We'll go into what that is in just a second.

211
00:08:52.030 --> 00:08:52.990
If such hardware exists,

212
00:08:52.990 --> 00:08:54.760
if the device doesn't support vibration

213
00:08:54.760 --> 00:08:56.040
this method has no effect.

214
00:08:56.040 --> 00:08:57.890
If a vibration pattern is already in progress,

215
00:08:57.890 --> 00:08:58.723
blah, blah, blah.

216
00:08:58.723 --> 00:09:00.560
So it kinda talks about what is does

217
00:09:00.560 --> 00:09:04.700
and then it usually will also tell you what it returns.

218
00:09:04.700 --> 00:09:06.480
So if the method is unable to vibrate

219
00:09:06.480 --> 00:09:08.900
because of invalid parameters it will return false.

220
00:09:08.900 --> 00:09:09.773
Did that happen?

221
00:09:10.650 --> 00:09:12.620
Navigator dot - no it didn't return false.

222
00:09:12.620 --> 00:09:14.550
It just returned an error.

223
00:09:14.550 --> 00:09:16.510
It didn't return anything, it just errored out.

224
00:09:16.510 --> 00:09:18.710
That's probably because we didn't pass it anything.

225
00:09:18.710 --> 00:09:19.543
Good.

226
00:09:19.543 --> 00:09:22.120
And then the syntax is going to tell us

227
00:09:22.120 --> 00:09:23.810
what it is that we need to pass it.

228
00:09:23.810 --> 00:09:24.980
So it's telling us that we need

229
00:09:24.980 --> 00:09:26.550
to run navigator dot vibrate,

230
00:09:26.550 --> 00:09:29.730
we'll talk about what this window dot is in a future video,

231
00:09:29.730 --> 00:09:32.600
and then pass it a pattern, that's the one argument.

232
00:09:32.600 --> 00:09:33.580
Well what is a pattern?

233
00:09:33.580 --> 00:09:34.963
Well we'll go down here.

234
00:09:35.800 --> 00:09:38.880
Provides a pattern of vibration and pause intervals.

235
00:09:38.880 --> 00:09:41.410
Each value indicates a number of milliseconds or-

236
00:09:41.410 --> 00:09:43.360
ooh, that's kinda cool.

237
00:09:43.360 --> 00:09:46.520
So you can give it a two hundred milliseconds

238
00:09:46.520 --> 00:09:48.780
or you can pass it what, this is called an array.

239
00:09:48.780 --> 00:09:50.670
We'll go into what those are but, essentially,

240
00:09:50.670 --> 00:09:53.402
it's just a list of multiple values, so.

241
00:09:53.402 --> 00:09:54.360
All right, go here.

242
00:09:54.360 --> 00:09:55.510
Pass it two hundred.

243
00:09:55.510 --> 00:09:57.350
It should return false because I'm on my computer

244
00:09:57.350 --> 00:09:59.013
and it won't work but,

245
00:09:59.013 --> 00:10:00.880
ooh it returned true.

246
00:10:00.880 --> 00:10:03.243
What? Did my laptop vibrate?

247
00:10:06.540 --> 00:10:07.373
No.

248
00:10:09.070 --> 00:10:11.700
Weird, well it (laughs)

249
00:10:11.700 --> 00:10:16.260
It said it should return false if it's inable to vibrate

250
00:10:16.260 --> 00:10:19.020
but maybe it just sorta like gives it to the OS

251
00:10:19.020 --> 00:10:22.920
and it says all right I passed it off to the OS

252
00:10:22.920 --> 00:10:25.510
and the OS should vibrate the device if it's on there.

253
00:10:25.510 --> 00:10:28.160
So, again, obviously it's not going to work on a computer

254
00:10:28.160 --> 00:10:29.890
that doesn't have it but if you were to, I'm sure,

255
00:10:29.890 --> 00:10:31.630
if you pulled that up on an Android phone,

256
00:10:31.630 --> 00:10:33.400
not sure if it's supported on iOS,

257
00:10:33.400 --> 00:10:36.940
but this is just a whole world of possible functions

258
00:10:36.940 --> 00:10:39.010
that are out there that we can use to work.

259
00:10:39.010 --> 00:10:41.110
And really that's how we're going to start to build up

260
00:10:41.110 --> 00:10:42.690
our own library of functions and

261
00:10:42.690 --> 00:10:45.200
we're going to build up custom functionalities.

262
00:10:45.200 --> 00:10:46.870
Soon we'll make our own functions,

263
00:10:46.870 --> 00:10:49.170
which are composed of other functions,

264
00:10:49.170 --> 00:10:51.030
and they sorta group together a bunch.

265
00:10:51.030 --> 00:10:53.730
So maybe we wanna figure out a bunch of math,

266
00:10:53.730 --> 00:10:56.480
select an element on the page and then vibrate the phone.

267
00:10:56.480 --> 00:10:58.560
You can put that all into a single function.

268
00:10:58.560 --> 00:11:00.340
Let's look at a couple more here.

269
00:11:00.340 --> 00:11:01.810
Let's clear it out.

270
00:11:01.810 --> 00:11:04.710
If you have a bunch of text on the page,

271
00:11:04.710 --> 00:11:07.693
so let's go ahead and do that paragraph,

272
00:11:07.693 --> 00:11:11.730
take lorem five hundred, hit tab.

273
00:11:11.730 --> 00:11:13.870
So I'm using the Emmet extension there,

274
00:11:13.870 --> 00:11:16.570
that should give us a bunch of text on the page.

275
00:11:16.570 --> 00:11:17.973
And do that over again.

276
00:11:19.760 --> 00:11:23.862
Paragraph, lorem two hundred, good.

277
00:11:23.862 --> 00:11:25.923
Paragraph, lorem one thousand.

278
00:11:27.910 --> 00:11:29.530
So there we go, lots of things

279
00:11:29.530 --> 00:11:33.090
and we should be able to just type scroll to

280
00:11:33.090 --> 00:11:35.120
and we wanna scroll to two hundred.

281
00:11:37.250 --> 00:11:38.730
Failed to execute scroll to window,

282
00:11:38.730 --> 00:11:40.960
parameter one options is not an object.

283
00:11:40.960 --> 00:11:42.510
Okay so again I don't know how to use it

284
00:11:42.510 --> 00:11:45.183
so we would do MDN scroll to.

285
00:11:46.319 --> 00:11:47.152
Here we go.

286
00:11:48.010 --> 00:11:50.180
Look for it, oh that's not the one we want.

287
00:11:50.180 --> 00:11:51.800
This one is window dot scroll two.

288
00:11:51.800 --> 00:11:53.840
We'll talk about element methods and

289
00:11:53.840 --> 00:11:55.150
window methods in the future,

290
00:11:55.150 --> 00:11:58.250
but it tells us that you need to

291
00:11:58.250 --> 00:12:00.540
pass it an x coordinate and a y coordinate.

292
00:12:00.540 --> 00:12:02.440
So maybe we didn't pass the y coordinate.

293
00:12:02.440 --> 00:12:04.440
Let's try, we don't want to scroll zero.

294
00:12:12.900 --> 00:12:14.630
Oh, I think it's the other way around.

295
00:12:14.630 --> 00:12:16.940
How does x and y, I was terrible at Battle Ship.

296
00:12:16.940 --> 00:12:18.143
Ooh, there we go!

297
00:12:19.080 --> 00:12:22.310
So what that did is it just jumped the window,

298
00:12:22.310 --> 00:12:24.433
maybe I'll jump it down to five hundred,

299
00:12:26.290 --> 00:12:27.540
and it will jump it down.

300
00:12:27.540 --> 00:12:29.520
I believe that there are some options,

301
00:12:29.520 --> 00:12:31.030
yeah it says here parameters.

302
00:12:31.030 --> 00:12:32.970
You can either pass an x and a y,

303
00:12:32.970 --> 00:12:35.780
or you can pass an options object.

304
00:12:35.780 --> 00:12:37.010
So we'll go down here.

305
00:12:37.010 --> 00:12:40.110
Options is a scroll to options dictionary,

306
00:12:40.110 --> 00:12:42.950
that's kind of a word we use in Java Script to represent

307
00:12:42.950 --> 00:12:46.010
an object so that's not a special thing in Java Script

308
00:12:46.010 --> 00:12:48.470
that's just an object that has a

309
00:12:48.470 --> 00:12:50.310
number of set properties on it.

310
00:12:50.310 --> 00:12:53.930
So if we look here, you'll see that we're passing an object.

311
00:12:53.930 --> 00:12:55.500
So this is a great example of how you

312
00:12:55.500 --> 00:12:57.430
can pass any type to a function.

313
00:12:57.430 --> 00:13:00.920
So in this case we're passing two numbers

314
00:13:00.920 --> 00:13:05.920
but it's also an option to pass one object, a type of object

315
00:13:06.190 --> 00:13:08.560
and inside of that object it gives you

316
00:13:08.560 --> 00:13:11.040
a top, a left, and a behavior.

317
00:13:11.040 --> 00:13:12.360
Let's take a look at that.

318
00:13:13.530 --> 00:13:14.373
Clear it out.

319
00:13:15.870 --> 00:13:19.530
Gonna say scroll to some curly brackets,

320
00:13:19.530 --> 00:13:24.530
top five hundred left zero is the behavior.

321
00:13:28.850 --> 00:13:32.490
Smooth, so that is a string.

322
00:13:32.490 --> 00:13:34.713
Ooh, I like it.

323
00:13:35.570 --> 00:13:38.320
Five hundred, six hundred, scrolls down.

324
00:13:38.320 --> 00:13:41.920
Top zero scrolls back to the top.

325
00:13:41.920 --> 00:13:45.060
So you see that's how one of these functions

326
00:13:45.060 --> 00:13:47.790
returns nothing to us, undefined,

327
00:13:47.790 --> 00:13:50.670
but it just goes off and does some work to us.

328
00:13:50.670 --> 00:13:53.220
If you wanna know what all of the options are for that

329
00:13:53.220 --> 00:13:54.690
I think we can click on this one.

330
00:13:54.690 --> 00:13:56.060
Scroll to options

331
00:13:58.485 --> 00:13:59.318
and, I think the-

332
00:13:59.318 --> 00:14:00.963
Let's take a look for behavior.

333
00:14:02.021 --> 00:14:02.859
Here we go.

334
00:14:02.859 --> 00:14:06.640
Scroll to options dot behavior, smooth or auto.

335
00:14:06.640 --> 00:14:08.770
Auto is the default, smooth is the only other option.

336
00:14:08.770 --> 00:14:10.930
There's no other like fun,

337
00:14:10.930 --> 00:14:13.030
fun ones that we could put it there.

338
00:14:13.030 --> 00:14:15.010
So that is our default functions.

339
00:14:15.010 --> 00:14:16.310
Those are functions that are built in.

340
00:14:16.310 --> 00:14:17.900
I'm obviously not going to go through all of them

341
00:14:17.900 --> 00:14:18.733
because there's literally,

342
00:14:18.733 --> 00:14:20.930
there's probably thousands of them in the browser

343
00:14:20.930 --> 00:14:22.700
and we're just going to learn them as we start to

344
00:14:22.700 --> 00:14:24.670
actually build real stuff in the browser and

345
00:14:24.670 --> 00:14:25.710
build some fun examples.

346
00:14:25.710 --> 00:14:27.310
In the next video what we're going to do

347
00:14:27.310 --> 00:14:30.453
is look at how we can create our own functions from scratch.

