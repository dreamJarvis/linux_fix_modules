WEBVTT

1
00:00:01.105 --> 00:00:03.688
(upbeat music)

2
00:00:05.310 --> 00:00:07.700
<v ->Next on the list is a very scary word called</v>

3
00:00:07.700 --> 00:00:11.210
Coercion and it's actually pretty simple to understand.

4
00:00:11.210 --> 00:00:13.480
So we've got a lot going on in our console here.

5
00:00:13.480 --> 00:00:17.450
Let's just console dot clear, just get rid of that

6
00:00:17.450 --> 00:00:19.510
and now I see that our console is clear.

7
00:00:19.510 --> 00:00:23.300
So if I have a bang operator,

8
00:00:23.300 --> 00:00:25.360
we've already look at that as not,

9
00:00:25.360 --> 00:00:27.713
like if we have a variable called isCool

10
00:00:27.713 --> 00:00:29.450
and we set that to true,

11
00:00:29.450 --> 00:00:32.110
and want to check if the person is not cool,

12
00:00:32.110 --> 00:00:33.390
you might think like, okay we have a

13
00:00:33.390 --> 00:00:37.840
if isCool and then we have to open our block up

14
00:00:37.840 --> 00:00:40.220
and then we actually want the else to say

15
00:00:40.220 --> 00:00:42.970
console.log you are not cool.

16
00:00:42.970 --> 00:00:46.730
So if you have a situation where you're only ever using

17
00:00:46.730 --> 00:00:50.250
the else, it's because you want the opposite of a value

18
00:00:50.250 --> 00:00:52.540
and we've learned that we can simply just

19
00:00:52.540 --> 00:00:55.313
put that in the if, get rid of the else,

20
00:00:56.210 --> 00:00:59.940
and then put a bang in front of a Boolean.

21
00:00:59.940 --> 00:01:02.460
A bang in front of a Boolean will always flip it

22
00:01:02.460 --> 00:01:04.530
to the other side of the Boolean.

23
00:01:04.530 --> 00:01:09.290
So if we have isCool, and we have bang isCool,

24
00:01:09.290 --> 00:01:10.709
then that is going to be false.

25
00:01:10.709 --> 00:01:15.450
So the bang operator is for is not, is the opposite, right?

26
00:01:15.450 --> 00:01:18.210
Now the bang operator also does one little cool thing

27
00:01:18.210 --> 00:01:19.660
which is coercion.

28
00:01:19.660 --> 00:01:23.150
And coercion is when we force something

29
00:01:23.150 --> 00:01:27.760
that is of a different type, like a string or a number,

30
00:01:27.760 --> 00:01:29.950
or an object or anything like that,

31
00:01:29.950 --> 00:01:34.950
when we take that and we coerce it into a true Boolean.

32
00:01:35.490 --> 00:01:40.490
So what you can do is if we have a string of,

33
00:01:40.530 --> 00:01:43.183
let's say we have a const name is equal to Wes.

34
00:01:44.390 --> 00:01:45.910
Name is already declared.

35
00:01:45.910 --> 00:01:48.140
Of course, so we already have a name

36
00:01:48.140 --> 00:01:51.350
and if wanna check if there is no name,

37
00:01:51.350 --> 00:01:53.020
we put a bang in front of it.

38
00:01:53.020 --> 00:01:56.140
And you'll notice that that then took it

39
00:01:56.140 --> 00:02:00.550
from a string to a Boolean.

40
00:02:00.550 --> 00:02:02.530
So by putting it a bang in front of it,

41
00:02:02.530 --> 00:02:05.850
it will coerce it into a true Boolean.

42
00:02:05.850 --> 00:02:07.730
Now that's sort of the opposite

43
00:02:07.730 --> 00:02:10.300
because if we wanna check if there is a name

44
00:02:10.300 --> 00:02:13.380
and if we wanna take the fact that there is a name

45
00:02:13.380 --> 00:02:15.800 line:15% 
and make it into a true Boolean,

46
00:02:15.800 --> 00:02:18.040 line:15% 
we can put double bang in front of it.

47
00:02:18.040 --> 00:02:20.360 line:15% 
And what that will do is it will coerce it

48
00:02:20.360 --> 00:02:24.500
into the simple existence into a Boolean

49
00:02:24.500 --> 00:02:26.220
of if it exists or not.

50
00:02:26.220 --> 00:02:29.540
Similarly if we have a const last is equal to

51
00:02:29.540 --> 00:02:30.400
just a string,

52
00:02:30.400 --> 00:02:32.100
oh I already have a last variable as well.

53
00:02:32.100 --> 00:02:35.433
Okay, const middle is equal to an empty string.

54
00:02:36.950 --> 00:02:39.920
We can then take the middle variable and put

55
00:02:39.920 --> 00:02:42.870
a bang in front of it and that will give us the opposite,

56
00:02:42.870 --> 00:02:46.010
which is true and bang bang will give us false.

57
00:02:46.010 --> 00:02:49.970
So if you ever see this bang and bang bang being used

58
00:02:49.970 --> 00:02:53.770
in If statements, it's because somebody is taking

59
00:02:53.770 --> 00:02:57.330
the fact that you have a truthy or falsy value

60
00:02:57.330 --> 00:03:01.940
and you are coercing it into a true Boolean.

61
00:03:01.940 --> 00:03:04.500
So all of the truthy and falsy values

62
00:03:04.500 --> 00:03:07.400
that we said before, you can coerce them

63
00:03:07.400 --> 00:03:09.770
into true true and falses,

64
00:03:09.770 --> 00:03:12.450
by putting a double bang in front if it.

65
00:03:12.450 --> 00:03:13.750
And a single bang will give you

66
00:03:13.750 --> 00:03:15.440
the opposite of what they are.

67
00:03:15.440 --> 00:03:16.670
So that's there.

68
00:03:16.670 --> 00:03:18.390
I used to use this quite a bit,

69
00:03:18.390 --> 00:03:23.390
however now that I really understand truthy and falsy,

70
00:03:23.560 --> 00:03:28.080
it's not something that I use all that often anymore,

71
00:03:28.080 --> 00:03:31.020
and you probably won't see me coercing anything

72
00:03:31.020 --> 00:03:33.220
because I understand how truthy and falsy are used.

73
00:03:33.220 --> 00:03:34.930
So, put that in your pocket.

74
00:03:34.930 --> 00:03:37.970
You might use it, you might not, but it's good to know

75
00:03:37.970 --> 00:03:41.800
coercion is changing a type that is not a Boolean

76
00:03:41.800 --> 00:03:43.150
into a Boolean.

77
00:03:43.150 --> 00:03:45.970
Or I guess coercion in general is you're just changing

78
00:03:45.970 --> 00:03:47.760
one type into another.

79
00:03:47.760 --> 00:03:51.280
Similarly how we can change numbers that are strings

80
00:03:51.280 --> 00:03:52.623
into true numbers.

81
00:03:53.570 --> 00:03:56.770
Next up we have a word that is very hard for me to say,

82
00:03:56.770 --> 00:04:00.210
and it's ternary, ternary.

83
00:04:00.210 --> 00:04:02.680
I don't know why I always look at it, and I'm like

84
00:04:02.680 --> 00:04:06.170
it says Terner-erary, ternerary.

85
00:04:06.170 --> 00:04:11.170
But it's ternary and ternary is what I like to think of as

86
00:04:11.330 --> 00:04:14.520
a shorthand If statement.

87
00:04:14.520 --> 00:04:16.610
They're helpful when you wanna quickly assign

88
00:04:16.610 --> 00:04:21.210
a run functionality based on something being true or false.

89
00:04:21.210 --> 00:04:23.220
So a ternary needs three things.

90
00:04:23.220 --> 00:04:25.990
First it needs a condition, then it needs

91
00:04:25.990 --> 00:04:27.430
what to do if it's true,

92
00:04:27.430 --> 00:04:30.010
and what to do if it's false.

93
00:04:30.010 --> 00:04:32.403
So let's imagine some code right here.

94
00:04:33.510 --> 00:04:36.600
Ternary, ternary, I don't even know if I'm saying it right.

95
00:04:36.600 --> 00:04:39.990
So count is equal to two, and then we have

96
00:04:39.990 --> 00:04:43.190
a word variable here, and we'll say if

97
00:04:44.240 --> 00:04:47.970
the count is equal to one,

98
00:04:47.970 --> 00:04:52.970
then the word is going to be equal to item, and then

99
00:04:53.220 --> 00:04:57.780
otherwise the word is going to be equal to items.

100
00:04:57.780 --> 00:05:00.460
Right, so if we wanna have a sentence on here

101
00:05:00.460 --> 00:05:03.430
that says you have how many items in your cart,

102
00:05:03.430 --> 00:05:06.280
we could do something like this, const sentence

103
00:05:06.280 --> 00:05:07.113
is equal to,

104
00:05:08.380 --> 00:05:10.680
you have count

105
00:05:11.530 --> 00:05:16.373
and then the word in your cart.

106
00:05:17.910 --> 00:05:19.573
Console.log sentence,

107
00:05:22.130 --> 00:05:25.210
and you have two items in your cart.

108
00:05:25.210 --> 00:05:27.980
One item, you have one item.

109
00:05:27.980 --> 00:05:30.700
Zero, you have zero items.

110
00:05:30.700 --> 00:05:32.170
That's a pretty common thing that you do.

111
00:05:32.170 --> 00:05:34.450
Same with comments, zero comments,

112
00:05:34.450 --> 00:05:36.670
one comment, two comments.

113
00:05:36.670 --> 00:05:40.390
Even, I have learned in different languages

114
00:05:40.390 --> 00:05:43.050
that is a big different where different numbers

115
00:05:43.050 --> 00:05:45.220
will give different words and there's actually

116
00:05:45.220 --> 00:05:48.740
an entire international API for working with that.

117
00:05:48.740 --> 00:05:49.890
I'm not gonna go into that now,

118
00:05:49.890 --> 00:05:51.933
but just kind of interesting there.

119
00:05:53.860 --> 00:05:56.490
This whole if statement is a bit verbose.

120
00:05:56.490 --> 00:05:57.820
You have to create an empty variable

121
00:05:57.820 --> 00:06:00.170
and then update that variable, so what you can do

122
00:06:00.170 --> 00:06:04.120
is if it's a simple if-else, for something like this,

123
00:06:04.120 --> 00:06:07.410
what you can do is you can turn it into a shorthand

124
00:06:07.410 --> 00:06:10.220
if statement with something called a ternary.

125
00:06:10.220 --> 00:06:12.670
So we'll do that, we'll comment this out

126
00:06:12.670 --> 00:06:14.960
because we don't actually need it.

127
00:06:14.960 --> 00:06:17.529
And we can go down here and say,

128
00:06:17.529 --> 00:06:21.300
const word is equal to, now we do three things.

129
00:06:21.300 --> 00:06:25.623
I said we need our condition, one condition.

130
00:06:26.690 --> 00:06:30.493
Two, we need what to do if true.

131
00:06:31.860 --> 00:06:35.290
And then we need what to do if false for the third thing.

132
00:06:35.290 --> 00:06:37.330
And that works like this.

133
00:06:37.330 --> 00:06:42.143
We say, count is equal to one, question mark,

134
00:06:43.010 --> 00:06:45.973
and we can return a item,

135
00:06:47.740 --> 00:06:50.353
otherwise we will give items.

136
00:06:51.950 --> 00:06:53.060
Now let's make sure that works

137
00:06:53.060 --> 00:06:54.970
and let's go back and pull it apart.

138
00:06:54.970 --> 00:06:59.770
Item, there it's working.

139
00:06:59.770 --> 00:07:02.810
So what this does is it puts that if statement

140
00:07:02.810 --> 00:07:05.060
where we have our condition,

141
00:07:05.060 --> 00:07:06.380
remember a condition is something

142
00:07:06.380 --> 00:07:08.030
that will be true or false.

143
00:07:08.030 --> 00:07:12.300
Then we have what to return if true

144
00:07:12.300 --> 00:07:15.660
and then we have what to return if false.

145
00:07:15.660 --> 00:07:19.350
And that is very helpful in a lot of use cases

146
00:07:19.350 --> 00:07:24.350
where you just need to do a quick if or else.

147
00:07:24.480 --> 00:07:27.210
And you could even take that a little further and do it

148
00:07:27.210 --> 00:07:30.300
directly inside of the sentence where you could

149
00:07:30.300 --> 00:07:31.450
do something like this.

150
00:07:32.370 --> 00:07:35.950
We could just hard code item, and then we could run

151
00:07:35.950 --> 00:07:38.410
some JavaScript with these curly brackets here,

152
00:07:38.410 --> 00:07:43.050
and we'll say if the count is equal to one,

153
00:07:43.050 --> 00:07:46.460
then we'll do nothing, empty.

154
00:07:46.460 --> 00:07:50.600
Otherwise we will give ourselves an s.

155
00:07:50.600 --> 00:07:53.980
In that case, we're just saying if the count is equal to one

156
00:07:53.980 --> 00:07:57.770
do nothing, otherwise return an s and that works

157
00:07:57.770 --> 00:08:02.730
exactly the same, let's change that to a larger number.

158
00:08:02.730 --> 00:08:05.870
You have 5,000 items in your cart.

159
00:08:05.870 --> 00:08:08.290
We can also use these for running functions.

160
00:08:08.290 --> 00:08:11.230
So if you have a variable like isAdmin,

161
00:08:11.230 --> 00:08:13.550
and that's equal to true or false,

162
00:08:13.550 --> 00:08:16.730
we can just run a function based on if we have it or not.

163
00:08:16.730 --> 00:08:19.853
So we say isAdmin question mark.

164
00:08:20.730 --> 00:08:23.160
If that is true, then we can run a function

165
00:08:23.160 --> 00:08:28.160
like showAdminBar, and I will have to make that function.

166
00:08:30.060 --> 00:08:31.690
Function showAdminBar

167
00:08:35.080 --> 00:08:36.830
and we won't do anything in there for now

168
00:08:36.830 --> 00:08:38.510
but you can see that that is a function.

169
00:08:38.510 --> 00:08:42.850
Otherwise we will do nothing.

170
00:08:42.850 --> 00:08:43.810
How do you do nothing?

171
00:08:43.810 --> 00:08:46.057
Well you could just type in null there.

172
00:08:46.057 --> 00:08:48.367
That tends to be what most people do is,

173
00:08:48.367 --> 00:08:51.010
you could put any empty string, you could put anything...

174
00:08:51.010 --> 00:08:53.810
And there's no downside to putting there

175
00:08:53.810 --> 00:08:55.310
because it's not returning,

176
00:08:55.310 --> 00:08:57.250
it's not saving that variable anywhere.

177
00:08:57.250 --> 00:08:58.860
It's just checking if it's true.

178
00:08:58.860 --> 00:09:00.900
If it's true, it will run a function

179
00:09:00.900 --> 00:09:02.920
and if it's false, it will do nothing.

180
00:09:02.920 --> 00:09:06.450
And when that is run, maybe we should put something in here.

181
00:09:06.450 --> 00:09:11.320
Console.log showing admin bar, there you go.

182
00:09:11.320 --> 00:09:12.683
And if that was false,

183
00:09:14.620 --> 00:09:15.743
nothing will run.

184
00:09:17.830 --> 00:09:21.560
It's important to note that this always has to be here.

185
00:09:21.560 --> 00:09:23.940
Many times I've wanted to just leave that off,

186
00:09:23.940 --> 00:09:25.610
like that, that'd be nice, right?

187
00:09:25.610 --> 00:09:27.250
If it's true then do this, right?

188
00:09:27.250 --> 00:09:29.570
But it will break because that is not the syntax,

189
00:09:29.570 --> 00:09:32.600
so you must always have the false case.

190
00:09:32.600 --> 00:09:36.230
There is one little trick you can do,

191
00:09:36.230 --> 00:09:37.817
and maybe you're screaming at me right now,

192
00:09:37.817 --> 00:09:42.240
you're like Wes, use the and and trick.

193
00:09:42.240 --> 00:09:46.953
So, let me show you the and and trick.

194
00:09:48.240 --> 00:09:53.240
So the kind of cool thing about chaining stuff in conditions

195
00:09:55.310 --> 00:10:00.310
is that it will check along the way to make sure

196
00:10:00.430 --> 00:10:01.410
that things are true.

197
00:10:01.410 --> 00:10:06.410
So let's make a function here called check one.

198
00:10:07.360 --> 00:10:10.983
Then we will return true and let's give ourselves

199
00:10:10.983 --> 00:10:13.673
another function called check two.

200
00:10:14.920 --> 00:10:16.650
And let's give ourselves a third function

201
00:10:16.650 --> 00:10:18.653
called check three.

202
00:10:20.800 --> 00:10:23.660
Now if you want to make sure that all three

203
00:10:23.660 --> 00:10:26.110
of these things are true before we go ahead,

204
00:10:26.110 --> 00:10:27.980
we could run an if statement like this we say

205
00:10:27.980 --> 00:10:29.170
if check one

206
00:10:30.890 --> 00:10:32.380
and check two

207
00:10:34.180 --> 00:10:36.123
and check three,

208
00:10:37.580 --> 00:10:41.020
if all three of those functions return true,

209
00:10:41.020 --> 00:10:46.020
then we will console.log all checks passed.

210
00:10:48.270 --> 00:10:51.220
Okay, go in here, it says all checks passed.

211
00:10:51.220 --> 00:10:55.020
Now what's cool about that is if we can go back into these

212
00:10:55.020 --> 00:11:00.020
and inside of each function console.log running check

213
00:11:00.190 --> 00:11:05.190
and one two x, so running check one, running check two,

214
00:11:05.650 --> 00:11:07.060
running check three.

215
00:11:07.060 --> 00:11:08.433
Now what we'll see is,

216
00:11:09.370 --> 00:11:11.380
running check one, two and three, right?

217
00:11:11.380 --> 00:11:12.670
Those will be run.

218
00:11:12.670 --> 00:11:14.430
This one goes first, that one goes second,

219
00:11:14.430 --> 00:11:16.180
and this one goes third.

220
00:11:16.180 --> 00:11:17.520
Now if we put an else on here,

221
00:11:17.520 --> 00:11:21.293
console.log some checks failed,

222
00:11:23.370 --> 00:11:28.230
and if we make one of these check fail, like this one,

223
00:11:28.230 --> 00:11:29.993
watch what's gonna happen.

224
00:11:32.010 --> 00:11:36.700
Running check one, running check two, some checks failed.

225
00:11:36.700 --> 00:11:39.590
Did this third check never run?

226
00:11:39.590 --> 00:11:43.470
And that is yes, it didn't run because

227
00:11:43.470 --> 00:11:48.320
if you run a condition, the JavaScript will

228
00:11:48.320 --> 00:11:50.590
first check the first one and if that's true,

229
00:11:50.590 --> 00:11:53.110
it'll say good let's go to the next one.

230
00:11:53.110 --> 00:11:54.780
And then it will go on to the next one and say,

231
00:11:54.780 --> 00:11:57.090
huh that's good, and go on to the next one.

232
00:11:57.090 --> 00:12:01.230
But if it at any point, one of these is a false,

233
00:12:01.230 --> 00:12:03.280
remember we talked about poisoning the well,

234
00:12:03.280 --> 00:12:05.260
JavaScript will give up and it'll say,

235
00:12:05.260 --> 00:12:09.200
well that one's false, there's no reason in my mind

236
00:12:09.200 --> 00:12:11.730
that would make sense to keep checking the rest

237
00:12:11.730 --> 00:12:14.140
of the conditions because we already know that

238
00:12:14.140 --> 00:12:15.630
this first one is false.

239
00:12:15.630 --> 00:12:20.040
So because of that, I'm just gonna return this condition

240
00:12:20.040 --> 00:12:22.450
as false and the third check will never run

241
00:12:22.450 --> 00:12:25.210
and it will immediately go to the else.

242
00:12:25.210 --> 00:12:27.730
That's what is sometimes referred to in JavaScript

243
00:12:27.730 --> 00:12:31.970
as short circuiting, meaning that we never finished

244
00:12:31.970 --> 00:12:34.250
what we wanted but we knew that it wasn't gonna

245
00:12:34.250 --> 00:12:37.030
work out anyway, so we short circuited it and

246
00:12:37.030 --> 00:12:38.960
it went directly to else.

247
00:12:38.960 --> 00:12:43.960
Now, so the way that that works can be abused or used.

248
00:12:45.650 --> 00:12:47.960
Some people hate this, some people love it.

249
00:12:47.960 --> 00:12:51.000
I personally, I like it,

250
00:12:51.000 --> 00:12:53.030
and it can look at little bit like this.

251
00:12:53.030 --> 00:12:57.698
We go back to our isAdmin variable where we previously did

252
00:12:57.698 --> 00:13:01.570
showAdminBar and then we had to put this null here

253
00:13:01.570 --> 00:13:03.030
just cause that's how it works.

254
00:13:03.030 --> 00:13:08.030
Well we can abuse this and say isAdmin

255
00:13:08.541 --> 00:13:12.350
and and showAdminBar.

256
00:13:12.350 --> 00:13:14.910
And what will happen is JavaScript will say,

257
00:13:14.910 --> 00:13:18.540
whoa, this is a little condition, so we're gonna check

258
00:13:18.540 --> 00:13:23.130
if this is true and if it is true,

259
00:13:23.130 --> 00:13:25.590
we'll go ahead and do the next one.

260
00:13:25.590 --> 00:13:28.530
And if it is false, it won't actually run this one.

261
00:13:28.530 --> 00:13:32.620
So this is abusing the condition chaining

262
00:13:32.620 --> 00:13:35.520
meaning that if this is ever false, that will never run.

263
00:13:35.520 --> 00:13:38.010
So let's see it now.

264
00:13:38.010 --> 00:13:40.953
Gonna console.log out that other showAdminBar right here.

265
00:13:43.420 --> 00:13:48.213
And now we see showAdminBar, but if isAdmin would be false,

266
00:13:50.280 --> 00:13:53.230
watch how showAdminBar is never run, right?

267
00:13:53.230 --> 00:13:56.490
So that's a little bit of abuse there in JavaScript

268
00:13:56.490 --> 00:13:58.150
but I personally like it.

269
00:13:58.150 --> 00:14:01.660
You do see that in React a lot where someone

270
00:14:01.660 --> 00:14:02.690
will look like is...

271
00:14:02.690 --> 00:14:06.810
Because we don't have, it's a little bit hard to do

272
00:14:06.810 --> 00:14:09.040
if statements in React, so you have something like

273
00:14:09.040 --> 00:14:12.320
isAdmin and and you could like, AdminBar,

274
00:14:12.320 --> 00:14:15.560
like a component in React, and that is a pretty common thing

275
00:14:15.560 --> 00:14:16.700
that you're gonna be seeing.

276
00:14:16.700 --> 00:14:21.170
And that is abusing or using the condition,

277
00:14:21.170 --> 00:14:23.033
which will short-circuit.

278
00:14:25.320 --> 00:14:28.920
Next up we have blockless if statements.

279
00:14:28.920 --> 00:14:32.090
So if something is on the same line,

280
00:14:32.090 --> 00:14:35.070
you don't actually need the block of the statement.

281
00:14:35.070 --> 00:14:37.220
So let's go to this one again.

282
00:14:37.220 --> 00:14:40.920
We could say if isAdmin, open up our block,

283
00:14:40.920 --> 00:14:44.240
and then we say showAdminBar, right?

284
00:14:44.240 --> 00:14:47.530
But because that is on multiple lines,

285
00:14:47.530 --> 00:14:49.720
we need these curly brackets, which are blocks.

286
00:14:49.720 --> 00:14:54.720
However, if you put it all on one line, then you can

287
00:14:55.710 --> 00:14:58.560
very easily do it without putting

288
00:14:58.560 --> 00:15:00.223
the curly brackets in there.

289
00:15:01.120 --> 00:15:05.930
As soon as it goes on to another line, that is broken,

290
00:15:05.930 --> 00:15:07.899
because that is considered an if statement

291
00:15:07.899 --> 00:15:09.630
and this is just considered a regular line

292
00:15:09.630 --> 00:15:10.700
in JavaScript.

293
00:15:10.700 --> 00:15:13.417
So, should you do that?

294
00:15:13.417 --> 00:15:15.220
And you need to do some soul searching,

295
00:15:15.220 --> 00:15:17.260
whether you like that or not.

296
00:15:17.260 --> 00:15:18.530
Do I use it?

297
00:15:18.530 --> 00:15:21.300
Usually not, but I certainly have in the past,

298
00:15:21.300 --> 00:15:23.890
because it's nice to have a quick little one-liner

299
00:15:23.890 --> 00:15:25.670
but I think in most cases, I'll just put

300
00:15:25.670 --> 00:15:27.420
a set of curly brackets in there

301
00:15:27.420 --> 00:15:29.920
just so I can sleep a little bit better at night,

302
00:15:29.920 --> 00:15:32.370
knowing that if some other dev, not me of course

303
00:15:32.370 --> 00:15:33.580
cause I know how JavaScript works.

304
00:15:33.580 --> 00:15:36.010
But some other goofy dev comes along

305
00:15:36.010 --> 00:15:37.950
and puts it on its own line,

306
00:15:37.950 --> 00:15:40.120
they think they're just reformatting it,

307
00:15:40.120 --> 00:15:43.330
then it breaks, so throwing in a set of curly brackets there

308
00:15:43.330 --> 00:15:46.700
is maybe good practice.

309
00:15:46.700 --> 00:15:49.320
That's up to you, that's up to your style choices

310
00:15:49.320 --> 00:15:52.120
in how you like to author JavaScript.

311
00:15:52.120 --> 00:15:53.130
That's enough for this video.

312
00:15:53.130 --> 00:15:54.750
The next one we're gonna go a little bit more

313
00:15:54.750 --> 00:15:58.410
into switch statements as well as looking

314
00:15:58.410 --> 00:15:59.753
at timers and intervals.

