WEBVTT

1
00:00:00.669 --> 00:00:03.252
(upbeat music)

2
00:00:05.931 --> 00:00:08.411
<v ->All right here it is, the video</v>

3
00:00:08.411 --> 00:00:11.861
that is probably one of the scariest words in JavaScript

4
00:00:11.861 --> 00:00:13.956
and this is one of those things that

5
00:00:13.956 --> 00:00:15.121
comes up in interviews all the time

6
00:00:15.121 --> 00:00:17.209
and that is JavaScript closures.

7
00:00:17.209 --> 00:00:19.340
You may have read, I don't know,

8
00:00:19.340 --> 00:00:22.049
400 different articles on closures

9
00:00:22.049 --> 00:00:24.452
and there's a whole lot of like examples

10
00:00:24.452 --> 00:00:25.470
being thrown around

11
00:00:25.470 --> 00:00:29.729
and quite frankly, it's a hard concept to get

12
00:00:29.729 --> 00:00:33.441
but I think that it can be relatively simple

13
00:00:33.441 --> 00:00:34.274
to understand.

14
00:00:34.274 --> 00:00:39.011
So let's try tackle that and help you understand

15
00:00:39.011 --> 00:00:42.432
at least like the basics of what a closure is

16
00:00:42.432 --> 00:00:44.331
and then as we build stuff,

17
00:00:44.331 --> 00:00:46.222
I'm gonna be like "Hey, this is a closure."

18
00:00:46.222 --> 00:00:48.700
"this is why a closure is helpful.".

19
00:00:48.700 --> 00:00:51.089
So let's lay some ground for that.

20
00:00:51.089 --> 00:00:52.370
We're gonna go in our playground

21
00:00:52.370 --> 00:00:56.203
and let's make a new file called closures.html

22
00:01:00.203 --> 00:01:02.453
and we'll use our html base

23
00:01:05.251 --> 00:01:08.834
and we'll just open that up in the browser.

24
00:01:10.203 --> 00:01:12.611
Let's open up a set of script tags

25
00:01:12.611 --> 00:01:13.782
and inside of that,

26
00:01:13.782 --> 00:01:16.121
we are going to start to learn about closures.

27
00:01:16.121 --> 00:01:18.891
So, a closure is the ability to access

28
00:01:18.891 --> 00:01:21.872
a parent level scope from a child scope

29
00:01:21.872 --> 00:01:24.952
even after the parent function has been terminated.

30
00:01:24.952 --> 00:01:27.142
So, I usually don't like examples

31
00:01:27.142 --> 00:01:29.272
that are very simple and not real world

32
00:01:29.272 --> 00:01:31.182
but this is kind of a hard concept to get.

33
00:01:31.182 --> 00:01:34.362
So we're just gonna make a function inside of a function

34
00:01:34.362 --> 00:01:36.180
that's called inner and outer.

35
00:01:36.180 --> 00:01:37.731
Just to illustrate the example

36
00:01:37.731 --> 00:01:39.611
then we'll go into some more fun examples.

37
00:01:39.611 --> 00:01:44.611
So, we've got a function here and let's call it outer

38
00:01:44.686 --> 00:01:46.295
and then inside of that,

39
00:01:46.295 --> 00:01:49.334
we'll make a variable called outer var

40
00:01:49.334 --> 00:01:52.251
is equal to Hey I am the outer Var.

41
00:01:54.463 --> 00:01:56.716
Now, inside of that, make another function.

42
00:01:56.716 --> 00:01:58.299
We'll call it inner

43
00:01:59.255 --> 00:02:01.655
and in here, let's just console.log.

44
00:02:01.655 --> 00:02:03.155
Actually, let's make another variable.

45
00:02:03.155 --> 00:02:07.322
Const inner var is equal to Hey I am an inner var.

46
00:02:09.545 --> 00:02:11.465
Now, we already learned in scope

47
00:02:11.465 --> 00:02:12.994
that I can like do this.

48
00:02:12.994 --> 00:02:16.094
I can console.log, inner var of course

49
00:02:16.094 --> 00:02:19.855
because that variable is inside of this function scope.

50
00:02:19.855 --> 00:02:22.522
But I can also log the outer var

51
00:02:25.461 --> 00:02:28.055
because what happens is the scope lookup chain.

52
00:02:28.055 --> 00:02:30.007
We'll say okay there's no variable called outer var

53
00:02:30.007 --> 00:02:31.127
instead of this function,

54
00:02:31.127 --> 00:02:33.047
so let me go one level up

55
00:02:33.047 --> 00:02:34.935
up the scope chain and we'll look there

56
00:02:34.935 --> 00:02:36.767
and it'll keep going up until it finds

57
00:02:36.767 --> 00:02:38.267
what it's looking for or nothing.

58
00:02:38.267 --> 00:02:40.063
In our case it'll go up one level,

59
00:02:40.063 --> 00:02:44.131
to our outer function here and it'll say

60
00:02:44.131 --> 00:02:46.772
"Oh, the scope here has a variable called outer var."

61
00:02:46.772 --> 00:02:48.829
I found it, I'm gonna go ahead and log it. Right?

62
00:02:48.829 --> 00:02:51.207
So if I go inside of my function

63
00:02:51.207 --> 00:02:53.874
outer function here and run inner

64
00:02:53.874 --> 00:02:55.676
and we open this up in our browser here

65
00:02:55.676 --> 00:02:58.924
and we were to run the outer function,

66
00:02:58.924 --> 00:03:01.247
we see both so we have the inner and the outer variables.

67
00:03:01.247 --> 00:03:04.034
Same thing as if I were to call it right from here

68
00:03:04.034 --> 00:03:05.697
on page load.

69
00:03:05.697 --> 00:03:08.748
When it loads, you see that the inner function

70
00:03:08.748 --> 00:03:11.516
is able to do a scope lookup and see the outer.

71
00:03:11.516 --> 00:03:13.748
Now, the kind of interesting thing,

72
00:03:13.748 --> 00:03:14.937
we've learned about that.

73
00:03:14.937 --> 00:03:17.087
That's not really a closure just yet

74
00:03:17.087 --> 00:03:19.297
but where closures come into play

75
00:03:19.297 --> 00:03:22.668
is where you don't call this function

76
00:03:22.668 --> 00:03:25.487
from inside of the outer function,

77
00:03:25.487 --> 00:03:27.674
but you call it at a later point in time.

78
00:03:27.674 --> 00:03:29.427
So, let's not call that.

79
00:03:29.427 --> 00:03:31.207
Let's get rid of this calling here

80
00:03:31.207 --> 00:03:35.807
and from this function, let's return the inner function.

81
00:03:35.807 --> 00:03:38.287
Right? So we can either do it like that or down here,

82
00:03:38.287 --> 00:03:40.127
we could say return inner.

83
00:03:40.127 --> 00:03:41.294
Let's do that.

84
00:03:42.785 --> 00:03:46.702
Now, we'll go down here and say const inner fn.

85
00:03:48.902 --> 00:03:52.221
We'll call it something else is equal to outer.

86
00:03:52.221 --> 00:03:54.421
Now, what's going on here?

87
00:03:54.421 --> 00:03:56.632
We are running the outer function.

88
00:03:56.632 --> 00:03:58.731
It's creating an outer variable

89
00:03:58.731 --> 00:04:02.100
and then we are returning the inner function.

90
00:04:02.100 --> 00:04:04.043
So that's why I'm sticking it in a variable

91
00:04:04.043 --> 00:04:09.043
and if we were to take a look at what the inner fn is now,

92
00:04:09.062 --> 00:04:11.319
you'll see it's just a function.

93
00:04:11.319 --> 00:04:12.423
Now, here's the question.

94
00:04:12.423 --> 00:04:16.090
If I were to run the inner fn from out here,

95
00:04:17.724 --> 00:04:22.535
is the outer variable still going to be accessible?

96
00:04:22.535 --> 00:04:25.135
Or is it gonna be undefined?

97
00:04:25.135 --> 00:04:25.968
Right?

98
00:04:25.968 --> 00:04:28.359
Because like I ran the outer function up here.

99
00:04:28.359 --> 00:04:30.910
That's where it created the variable

100
00:04:30.910 --> 00:04:34.030
and then it returned this inner function.

101
00:04:34.030 --> 00:04:36.332
Is that going to still be available to us?

102
00:04:36.332 --> 00:04:37.302
Or will it be undefined?

103
00:04:37.302 --> 00:04:39.960
Let's go ahead and try.

104
00:04:39.960 --> 00:04:41.320
They both work.

105
00:04:41.320 --> 00:04:43.350
So, what I could do is

106
00:04:43.350 --> 00:04:47.229
I can stick a function into a variable

107
00:04:47.229 --> 00:04:49.371
and then at a later point in time,

108
00:04:49.371 --> 00:04:52.480
I have access to that inner function

109
00:04:52.480 --> 00:04:55.397
and where a closure comes into play

110
00:04:56.323 --> 00:05:01.317
is the fact that even though this outer function is done,

111
00:05:01.317 --> 00:05:04.098
we're done. It should be cleaned up, right?

112
00:05:04.098 --> 00:05:07.116
We ran it and we learned in scoping

113
00:05:07.116 --> 00:05:08.437
that when a function is done,

114
00:05:08.437 --> 00:05:10.525
anytime there are scoped variables,

115
00:05:10.525 --> 00:05:12.866
that aren't returned from the function,

116
00:05:12.866 --> 00:05:14.488
then they're not accessible.

117
00:05:14.488 --> 00:05:16.178
Now we get this weird thing

118
00:05:16.178 --> 00:05:18.968
where when I run my function outside of it,

119
00:05:18.968 --> 00:05:21.128
it's still able to access it

120
00:05:21.128 --> 00:05:23.957
and that is what is referred to as a closure.

121
00:05:23.957 --> 00:05:26.040
So, JavaScript is able to

122
00:05:27.248 --> 00:05:29.205
create functions inside of functions

123
00:05:29.205 --> 00:05:32.885
and it could still reach outside to the parent scope

124
00:05:32.885 --> 00:05:37.688
and even though the outer function is done running,

125
00:05:37.688 --> 00:05:41.626
it will still maintain that variable in memory

126
00:05:41.626 --> 00:05:45.197
so that we can then access it at a later time, right?

127
00:05:45.197 --> 00:05:48.546
Like here I can just go back here and run it again.

128
00:05:48.546 --> 00:05:50.717
If I were to rerun that function,

129
00:05:50.717 --> 00:05:51.898
I still have access to it.

130
00:05:51.898 --> 00:05:53.057
It's not cleaned up,

131
00:05:53.057 --> 00:05:56.842
it's not you'll probably hear the term "garbage collected"

132
00:05:56.842 --> 00:05:57.675
or anything like that.

133
00:05:57.675 --> 00:05:59.261
It is still available

134
00:05:59.261 --> 00:06:01.950
because we have sort of the secret agent inside

135
00:06:01.950 --> 00:06:04.202
that's able to access it.

136
00:06:04.202 --> 00:06:07.770
Now, why would that ever be helpful to you?

137
00:06:07.770 --> 00:06:09.290
This looks really confusing.

138
00:06:09.290 --> 00:06:11.272
Inner and outer and all kinds of stuff.

139
00:06:11.272 --> 00:06:15.130
So let's look at some actual examples that we have here.

140
00:06:15.130 --> 00:06:19.192
So first thing I wanna do is show you an example

141
00:06:19.192 --> 00:06:21.250
of a closure creating a function.

142
00:06:21.250 --> 00:06:22.581
That's what we did right here.

143
00:06:22.581 --> 00:06:24.490
Second example I'm going to show you

144
00:06:24.490 --> 00:06:27.282
how you can use closures just to create

145
00:06:27.282 --> 00:06:29.512
sort of what are called private variables.

146
00:06:29.512 --> 00:06:32.095
So here, we'll make a function.

147
00:06:32.997 --> 00:06:35.664
We'll call that create greeting.

148
00:06:37.077 --> 00:06:40.410
That will take in a greeting of nothing.

149
00:06:41.536 --> 00:06:44.619
Then we will make a my greet variable

150
00:06:45.917 --> 00:06:47.916
that is simply just we'll just take the greeting

151
00:06:47.916 --> 00:06:52.166
that got passed in and run .toUpperCase against it.

152
00:06:53.525 --> 00:06:57.232
Then from here, well return a function.

153
00:06:57.232 --> 00:06:58.587
We don't really have to name it.

154
00:06:58.587 --> 00:07:00.838
We'll take in the person's name

155
00:07:00.838 --> 00:07:02.518
and then we'll return.

156
00:07:02.518 --> 00:07:04.351
The greeting, my greet

157
00:07:05.836 --> 00:07:07.419
and a persons name.

158
00:07:11.859 --> 00:07:13.859
Now, why is that helpful,

159
00:07:13.859 --> 00:07:16.197
like why did I do this in two separate functions?

160
00:07:16.197 --> 00:07:18.335
Is because you can create functions

161
00:07:18.335 --> 00:07:22.038
that are based off of whichever greeting you like.

162
00:07:22.038 --> 00:07:25.598
So we can make one called const say hello

163
00:07:25.598 --> 00:07:28.737
is equal to create greeting.

164
00:07:28.737 --> 00:07:29.570
Hello.

165
00:07:30.547 --> 00:07:34.047
And we'll make another one that is say hey

166
00:07:37.095 --> 00:07:38.595
and we'll say hey.

167
00:07:39.817 --> 00:07:42.987
Now, what's cool about that is we can console log.

168
00:07:42.987 --> 00:07:44.404
Say hello to Wes.

169
00:07:46.340 --> 00:07:49.270
We can do another say hello to Kait

170
00:07:49.270 --> 00:07:51.478
and then we can do maybe another third one

171
00:07:51.478 --> 00:07:53.645
that says hey also to Kait

172
00:07:55.809 --> 00:07:57.580
and let's refresh. Hello.

173
00:07:57.580 --> 00:07:58.413
Hello.

174
00:07:58.413 --> 00:07:59.246
Hey.

175
00:07:59.246 --> 00:08:00.079
Wes.

176
00:08:00.079 --> 00:08:00.912
Kait.

177
00:08:00.912 --> 00:08:01.745
Kait.

178
00:08:01.745 --> 00:08:02.718
Now, what's happening here is that

179
00:08:02.718 --> 00:08:06.099
when you create this outer function, create greeting,

180
00:08:06.099 --> 00:08:09.630
because we've created a variable inside of that function,

181
00:08:09.630 --> 00:08:12.998
that is then accessed at a lower scope

182
00:08:12.998 --> 00:08:15.910
so we've got inner scope here.

183
00:08:15.910 --> 00:08:17.969
We've got our outer scope here

184
00:08:17.969 --> 00:08:21.808
because our inner scope references a variable

185
00:08:21.808 --> 00:08:24.898
that was created in our outer scope,

186
00:08:24.898 --> 00:08:27.958
that is what is referred to as a closure.

187
00:08:27.958 --> 00:08:32.238
Where we still are able to access our outer variables

188
00:08:32.238 --> 00:08:36.230
inside of this outer function scope, inside of our inner,

189
00:08:36.230 --> 00:08:39.518
even after this function create greeting

190
00:08:39.518 --> 00:08:41.220
has been closed over.

191
00:08:41.220 --> 00:08:43.038
That's the whole idea behind closure.

192
00:08:43.038 --> 00:08:44.648
It's been closed.

193
00:08:44.648 --> 00:08:47.249
After we've run this function, it's closed

194
00:08:47.249 --> 00:08:50.607
but we are still able to access the sort of magic space

195
00:08:50.607 --> 00:08:54.020
in between and access those variables.

196
00:08:54.020 --> 00:08:55.569
So, that's the first one

197
00:08:55.569 --> 00:08:58.558
where you have functions inside of functions

198
00:08:58.558 --> 00:09:01.129
and they are able to access the closure data

199
00:09:01.129 --> 00:09:02.678
inside of that.

200
00:09:02.678 --> 00:09:06.110
The other sort of similar way is to create what are called

201
00:09:06.110 --> 00:09:07.790
private variables.

202
00:09:07.790 --> 00:09:12.120
So, we'll make another one called create game

203
00:09:12.120 --> 00:09:14.298
and we're going to be keeping score

204
00:09:14.298 --> 00:09:16.018
and we'll take in the game name.

205
00:09:16.018 --> 00:09:19.738
Here, we'll say let score is equal to 0

206
00:09:19.738 --> 00:09:23.321
and then we will make a function called win

207
00:09:24.648 --> 00:09:29.048
and inside of that function, we will take the score,

208
00:09:29.048 --> 00:09:31.048
and increment it by 1

209
00:09:31.048 --> 00:09:33.131
and then return your game

210
00:09:36.400 --> 00:09:38.567
we'll input the game name.

211
00:09:41.376 --> 00:09:44.626
Score is, we'll put the score in there.

212
00:09:50.648 --> 00:09:53.279
Now, I can go down here and make a game.

213
00:09:53.279 --> 00:09:56.779
Const hockey game is equal to create game.

214
00:09:58.258 --> 00:10:00.508
We'll call it a hockey game

215
00:10:05.746 --> 00:10:09.913
and now whenever we run that hockey game function,

216
00:10:10.755 --> 00:10:13.551
it says hockey game is not defined.

217
00:10:13.551 --> 00:10:14.718
What did I do?

218
00:10:16.332 --> 00:10:18.652
Hockey game is not a function.

219
00:10:18.652 --> 00:10:22.201
Oh we forgot to actually return the function

220
00:10:22.201 --> 00:10:24.034
from this outer scope.

221
00:10:25.033 --> 00:10:27.622
So let's try it again.

222
00:10:27.622 --> 00:10:28.921
Your hockey score is 1.

223
00:10:28.921 --> 00:10:30.553
Now when I run it a second time,

224
00:10:30.553 --> 00:10:31.386
it's gonna be 2,

225
00:10:31.386 --> 00:10:32.219
3,

226
00:10:32.219 --> 00:10:33.052
4,

227
00:10:33.052 --> 00:10:33.885
5.

228
00:10:33.885 --> 00:10:35.433
Now, what's happening here is that

229
00:10:35.433 --> 00:10:38.372
the function that we create is called win

230
00:10:38.372 --> 00:10:41.205
and we are using a score variable.

231
00:10:42.052 --> 00:10:44.233
So whenever we create the game,

232
00:10:44.233 --> 00:10:46.281
we create an empty score variable

233
00:10:46.281 --> 00:10:49.321
and then this inner function, whenever we actually run it,

234
00:10:49.321 --> 00:10:53.873
will increment the score variable that is of the scope

235
00:10:53.873 --> 00:10:55.223
of the outer scope.

236
00:10:55.223 --> 00:10:57.081
Now, why is that even helpful?

237
00:10:57.081 --> 00:11:00.052
Well you can maintain multiple games at once.

238
00:11:00.052 --> 00:11:03.073
So let's call it a soccer game.

239
00:11:03.073 --> 00:11:05.263
I know you, everybody else calls it football

240
00:11:05.263 --> 00:11:06.680
but that's weird.

241
00:11:08.012 --> 00:11:08.845
Soccer.

242
00:11:12.143 --> 00:11:14.561
Now here, we can go ahead and rerun hockey game

243
00:11:14.561 --> 00:11:15.793
a couple times

244
00:11:15.793 --> 00:11:18.376
and then I can call soccer game

245
00:11:20.121 --> 00:11:21.320
and you see the variable.

246
00:11:21.320 --> 00:11:24.063
Even though this score is the same variable name,

247
00:11:24.063 --> 00:11:28.532
because we have created two separate win functions,

248
00:11:28.532 --> 00:11:30.721
by using this create game function,

249
00:11:30.721 --> 00:11:34.652
they each have their own sort of private variable score.

250
00:11:34.652 --> 00:11:35.782
Like, there's no current,

251
00:11:35.782 --> 00:11:38.252
currently there's no way for us to access that score

252
00:11:38.252 --> 00:11:39.085
variable.

253
00:11:39.085 --> 00:11:40.585
See if I do score,

254
00:11:42.313 --> 00:11:43.721
there is no variable called score.

255
00:11:43.721 --> 00:11:45.431
There's no way for me to access that

256
00:11:45.431 --> 00:11:48.380
unless I were to explicitly return it from this function.

257
00:11:48.380 --> 00:11:50.863
Or in our case, putting it into a string.

258
00:11:50.863 --> 00:11:54.232
So again, that's sort of a high level primer

259
00:11:54.232 --> 00:11:55.839
on what closures are.

260
00:11:55.839 --> 00:12:00.012
Closures are the ability for a child function,

261
00:12:00.012 --> 00:12:01.692
or an inner function,

262
00:12:01.692 --> 00:12:05.491
to access variables from a higher level scope

263
00:12:05.491 --> 00:12:10.401
even after the functions have been called or closed.

264
00:12:10.401 --> 00:12:11.823
Or closed over.

265
00:12:11.823 --> 00:12:14.483
So, that's a bit of a hard concept.

266
00:12:14.483 --> 00:12:16.701
We're gonna be returning to that quite a bit

267
00:12:16.701 --> 00:12:19.393
as we do things like scope and

268
00:12:19.393 --> 00:12:21.421
we're gonna do a more advanced example

269
00:12:21.421 --> 00:12:24.952
of this create game where we can maintain score

270
00:12:24.952 --> 00:12:27.783
and increment and decrement and pull up the score

271
00:12:27.783 --> 00:12:29.073
at any given time

272
00:12:29.073 --> 00:12:32.764
but that's the high level of what closures are for now.

273
00:12:32.764 --> 00:12:36.347
With that, let's jump into some dom stuff.

