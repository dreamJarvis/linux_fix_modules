WEBVTT

1
00:00:00.000 --> 00:00:02.583
(upbeat music)

2
00:00:05.230 --> 00:00:06.440
<v ->All right in this video we're gonna learn</v>

3
00:00:06.440 --> 00:00:07.700
all about debugging.

4
00:00:07.700 --> 00:00:09.290
There's kinda like 2 parts of debugging.

5
00:00:09.290 --> 00:00:12.330
There's tools that you can use to like get some good info

6
00:00:12.330 --> 00:00:14.620
as to what happened and when things go wrong.

7
00:00:14.620 --> 00:00:16.817
And then there's sort of a mindset of like

8
00:00:16.817 --> 00:00:18.047
"How do I tackle this thing?"

9
00:00:18.047 --> 00:00:19.890
"How do I be a good problem solver?"

10
00:00:19.890 --> 00:00:22.260
So, this video's gonna be all about the tools

11
00:00:22.260 --> 00:00:23.940
and then what I hope you're gonna learn

12
00:00:23.940 --> 00:00:25.170
over the next

13
00:00:25.170 --> 00:00:26.520
the rest of the course is

14
00:00:26.520 --> 00:00:28.780
anytime we start to hit a roadblock,

15
00:00:28.780 --> 00:00:30.367
I'm not gonna cut it out of the video.

16
00:00:30.367 --> 00:00:31.300
I'm gonna leave it in

17
00:00:31.300 --> 00:00:33.120
and sort of show you my though process

18
00:00:33.120 --> 00:00:35.050
as to "huh, this doesn't work."

19
00:00:35.050 --> 00:00:38.900
I'm gonna sort of step through what my process would be

20
00:00:38.900 --> 00:00:40.880
to figuring out why it went wrong.

21
00:00:40.880 --> 00:00:42.030
So what I want you to do

22
00:00:42.030 --> 00:00:43.490
is go into your exercise folder.

23
00:00:43.490 --> 00:00:45.392
There's a folder 16 debugging

24
00:00:45.392 --> 00:00:47.670
and then inside of that

25
00:00:47.670 --> 00:00:49.290
there is a debugging start.js

26
00:00:50.310 --> 00:00:53.450
and a debugging.html.

27
00:00:53.450 --> 00:00:55.270
If you look at the debugging html,

28
00:00:55.270 --> 00:00:56.103
pretty simple.

29
00:00:56.103 --> 00:00:57.690
We load up our base css.

30
00:00:57.690 --> 00:00:59.850
I have a button that says Make Me Bigger.

31
00:00:59.850 --> 00:01:02.010
Then I'm loading in this debugging.js.

32
00:01:02.010 --> 00:01:03.360
That doesn't exist yet.

33
00:01:03.360 --> 00:01:06.080
What I need you to do is go ahead and save a copy

34
00:01:06.080 --> 00:01:09.960
of this as just debugging.js.

35
00:01:09.960 --> 00:01:11.730
Now this debugging is gonna contain

36
00:01:11.730 --> 00:01:13.860
a bunch of stuff we haven't learned yet.

37
00:01:13.860 --> 00:01:16.739
This is what's called an array of objects.

38
00:01:16.739 --> 00:01:18.861
This is a loop.

39
00:01:18.861 --> 00:01:21.940
These are some functions, there's doctorize.

40
00:01:21.940 --> 00:01:23.920
You probably know what these do.

41
00:01:23.920 --> 00:01:25.480
This is some button event listener.

42
00:01:25.480 --> 00:01:27.740
It doesn't matter that we don't know what these do yet.

43
00:01:27.740 --> 00:01:30.130
This is a fetch function.

44
00:01:30.130 --> 00:01:31.330
I'll explain what they do,

45
00:01:31.330 --> 00:01:33.200
and then we'll learn about how to build our own.

46
00:01:33.200 --> 00:01:34.280
This is just more so that

47
00:01:34.280 --> 00:01:37.160
we can get into the different types of debugging.

48
00:01:37.160 --> 00:01:39.930
So let's start at the probably the most basic

49
00:01:39.930 --> 00:01:41.760
and that is your console methods

50
00:01:41.760 --> 00:01:45.630
are gonna be helpful for learning how they all work.

51
00:01:45.630 --> 00:01:47.760
So there's obviously console.log.

52
00:01:47.760 --> 00:01:50.040
That's probably the most common one you see.

53
00:01:50.040 --> 00:01:52.040
I'm using console log here.

54
00:01:52.040 --> 00:01:53.680
Let's go into this people.forEach.

55
00:01:53.680 --> 00:01:57.394
Which usually gives you like a little

56
00:01:57.394 --> 00:01:58.750
question mark there.

57
00:01:58.750 --> 00:02:00.780
Looks like it's not there anymore.

58
00:02:00.780 --> 00:02:03.880
Usually it gives you a little eye and a circle.

59
00:02:03.880 --> 00:02:06.680
So that one doesn't do really anything all that different.

60
00:02:06.680 --> 00:02:08.300
There's console.error

61
00:02:08.300 --> 00:02:11.120
now this is not for actually throwing errors

62
00:02:11.120 --> 00:02:12.160
or handling errors.

63
00:02:12.160 --> 00:02:13.392
We're gonna learn about that.

64
00:02:13.392 --> 00:02:15.500
This just changes what it looks like

65
00:02:15.500 --> 00:02:16.333
in the consoles.

66
00:02:16.333 --> 00:02:17.640
So often like,

67
00:02:17.640 --> 00:02:20.821
maybe if you were to tell a person like,

68
00:02:20.821 --> 00:02:25.821
if the person.name is equal to "Wes"

69
00:02:27.150 --> 00:02:31.517
then consoles.error "Dumb name".

70
00:02:34.310 --> 00:02:35.530
Now you just see Dumb name!

71
00:02:35.530 --> 00:02:36.580
And it will...

72
00:02:36.580 --> 00:02:39.520
It will both give you the sorta UI

73
00:02:39.520 --> 00:02:40.740
as well as it tells you,

74
00:02:40.740 --> 00:02:43.110
gives you this which is called a stack trace.

75
00:02:43.110 --> 00:02:45.220
We'll learn about that in just a second.

76
00:02:45.220 --> 00:02:47.720
When we get to this call stack thing here.

77
00:02:47.720 --> 00:02:50.870
There's console.warn which is very similar.

78
00:02:50.870 --> 00:02:52.820
Just gives you the exact same thing but

79
00:02:52.820 --> 00:02:55.260
without the exclamation mark instead of

80
00:02:55.260 --> 00:02:56.571
an actual error UI.

81
00:02:56.571 --> 00:02:59.230
There is console.table

82
00:02:59.230 --> 00:03:00.291
I really like that one so,

83
00:03:00.291 --> 00:03:02.950
let's go down here.

84
00:03:02.950 --> 00:03:05.552
Console.table and we have all these people.

85
00:03:05.552 --> 00:03:08.860
Any time you have a list of objects,

86
00:03:08.860 --> 00:03:10.850
and the objects have the same property,

87
00:03:10.850 --> 00:03:12.540
meaning that this one has a name.

88
00:03:12.540 --> 00:03:14.020
A cool and a country.

89
00:03:14.020 --> 00:03:17.171
Console.table will format it in a nice little table.

90
00:03:17.171 --> 00:03:18.450
That you have there.

91
00:03:18.450 --> 00:03:19.330
I like that a lot.

92
00:03:19.330 --> 00:03:22.170
Be able to peer into the data that you have.

93
00:03:22.170 --> 00:03:23.490
Really easily.

94
00:03:23.490 --> 00:03:26.020
There is console.count so,

95
00:03:26.020 --> 00:03:27.871
if we were to...

96
00:03:27.871 --> 00:03:32.067
Lets go into this doctorize,

97
00:03:32.067 --> 00:03:34.220
and let's just say that console.count

98
00:03:36.427 --> 00:03:38.297
"running Doctorize"

99
00:03:39.891 --> 00:03:41.080
and you wanted to know like how many times

100
00:03:41.080 --> 00:03:42.610
is this function actually being run.

101
00:03:42.610 --> 00:03:45.033
So if I go in here and I run doctorize.

102
00:03:45.910 --> 00:03:46.743
Wes.

103
00:03:48.060 --> 00:03:49.010
Running doctorize,

104
00:03:49.010 --> 00:03:49.843
one,

105
00:03:49.843 --> 00:03:50.676
two,

106
00:03:50.676 --> 00:03:51.509
three,

107
00:03:51.509 --> 00:03:52.342
four.

108
00:03:52.342 --> 00:03:54.270
So every time I run that console.count

109
00:03:54.270 --> 00:03:58.130
what passing at the string of running doctorize.

110
00:03:58.130 --> 00:03:59.720
That will show me the info.

111
00:03:59.720 --> 00:04:02.570
That can be helpful for maybe sometimes you have

112
00:04:02.570 --> 00:04:04.530
a function that's accidentally running twice

113
00:04:04.530 --> 00:04:05.940
or you don't know like,

114
00:04:05.940 --> 00:04:07.670
sometimes you are working with like

115
00:04:07.670 --> 00:04:09.540
hover elements and it's triggering

116
00:04:09.540 --> 00:04:10.940
way to often.

117
00:04:10.940 --> 00:04:13.081
Console.count will show you how many times it's,

118
00:04:13.081 --> 00:04:14.860
it's running.

119
00:04:14.860 --> 00:04:16.374
Similarly I think you can also

120
00:04:16.374 --> 00:04:19.314
pass invariables so,

121
00:04:19.314 --> 00:04:21.314
if we were to change this to back ticks.

122
00:04:22.550 --> 00:04:25.513
Running doctorize for name.

123
00:04:28.083 --> 00:04:29.880
And now if I were to run docterize.

124
00:04:29.880 --> 00:04:32.660
Says running doctorize for wes 1.

125
00:04:32.660 --> 00:04:34.080
Doctorize for wes 2.

126
00:04:34.080 --> 00:04:38.430
Bur if I were to then change that to 'snickers'.

127
00:04:38.430 --> 00:04:39.560
That goes back to 1,

128
00:04:39.560 --> 00:04:42.290
and then if I run wes again it still maintains that.

129
00:04:42.290 --> 00:04:46.995
So it's based on what strings you pass to console.count.

130
00:04:46.995 --> 00:04:50.410
Next one we have is console.group

131
00:04:50.410 --> 00:04:51.530
that can be helpful if you've got

132
00:04:51.530 --> 00:04:54.480
a whole bunch of like stuff to console.logs

133
00:04:54.480 --> 00:04:57.530
so let's get rid of this.

134
00:04:57.530 --> 00:04:59.280
Or I'll comment that out.

135
00:04:59.280 --> 00:05:00.350
Make a function here.

136
00:05:00.350 --> 00:05:02.497
Function 'doalotofstuff'.

137
00:05:04.544 --> 00:05:06.590
And what you can do is say console.group

138
00:05:08.920 --> 00:05:13.030
and you can say 'doing some stuff'.

139
00:05:13.030 --> 00:05:14.990
And then inside of here you can do as many

140
00:05:14.990 --> 00:05:16.580
console logs as you want like,

141
00:05:16.580 --> 00:05:21.580
'hey I'm one' console.warn

142
00:05:21.680 --> 00:05:22.513
'watch out!'

143
00:05:24.970 --> 00:05:27.573
console.log or maybe error.

144
00:05:29.720 --> 00:05:30.955
'hey'

145
00:05:30.955 --> 00:05:32.650
you get the point.

146
00:05:32.650 --> 00:05:34.100
And then we finish it off with

147
00:05:34.100 --> 00:05:35.440
console.groupEnd

148
00:05:36.320 --> 00:05:39.050
and then you pass it the same string

149
00:05:39.050 --> 00:05:41.510
that you've used to open your group.

150
00:05:41.510 --> 00:05:43.070
Which is here.

151
00:05:43.070 --> 00:05:45.300
And now when we run that.

152
00:05:45.300 --> 00:05:47.303
Do a lot of stuff.

153
00:05:49.500 --> 00:05:51.350
What it does is it groups together

154
00:05:51.350 --> 00:05:53.790
all of these console logs into like,

155
00:05:53.790 --> 00:05:56.170
a nice little collapsible thing.

156
00:05:56.170 --> 00:05:58.063
And I find that helpful so it like,

157
00:05:59.315 --> 00:06:02.130
if you were going up to this people.forEach.

158
00:06:02.130 --> 00:06:03.690
Let's go and clear that out.

159
00:06:03.690 --> 00:06:07.610
We could say console.group and say

160
00:06:07.610 --> 00:06:11.047
'starting person.name.'

161
00:06:14.010 --> 00:06:15.070
and then we could-

162
00:06:15.070 --> 00:06:17.493
let's just do groupEnd immediately.

163
00:06:18.380 --> 00:06:19.290
I'll say...

164
00:06:21.430 --> 00:06:23.150
Oh maybe we'll just use the persons name,

165
00:06:23.150 --> 00:06:24.910
we don't need starting cause that will show it.

166
00:06:24.910 --> 00:06:26.650
So console.group,

167
00:06:26.650 --> 00:06:27.483
persons name,

168
00:06:27.483 --> 00:06:28.675
and then inside of that we can

169
00:06:28.675 --> 00:06:31.653
console.log person.country,

170
00:06:34.040 --> 00:06:38.010
console.log the person.cool,

171
00:06:38.010 --> 00:06:40.060
console log. Done.

172
00:06:40.060 --> 00:06:41.850
And now when we refresh that,

173
00:06:41.850 --> 00:06:43.910
what you see is that because we looped over

174
00:06:43.910 --> 00:06:45.690
all three of these people.

175
00:06:45.690 --> 00:06:49.610
We've nicely tied them into wes,

176
00:06:49.610 --> 00:06:50.920
Scott and Snickers,

177
00:06:50.920 --> 00:06:54.423
and you can actually even group collapsed.

178
00:06:56.623 --> 00:06:58.680
And that will by default collapse them.

179
00:06:58.680 --> 00:07:00.130
I find that really helpful when

180
00:07:00.130 --> 00:07:01.740
I'm looping over lots of data.

181
00:07:01.740 --> 00:07:04.630
The console can become a very cluttered space.

182
00:07:04.630 --> 00:07:06.410
And it's nice to just tuck them into

183
00:07:06.410 --> 00:07:07.640
their own little groups.

184
00:07:07.640 --> 00:07:09.710
And let's say I'm having trouble with Scott,

185
00:07:09.710 --> 00:07:11.470
I'm gonna open it up and then you

186
00:07:11.470 --> 00:07:13.060
can actually look at the data.

187
00:07:13.060 --> 00:07:15.435
So I find that one to be particularly helpful

188
00:07:15.435 --> 00:07:17.940
when you're doing lots and lots of logging.

189
00:07:17.940 --> 00:07:20.510
So that's all the different console methods out there.

190
00:07:20.510 --> 00:07:21.740
I think there's a couple other ones,

191
00:07:21.740 --> 00:07:24.080
but those are the ones that I use myself.

192
00:07:24.080 --> 00:07:24.913
Quite a bit.

193
00:07:24.913 --> 00:07:27.183
When I'm trying to debug something.

194
00:07:28.160 --> 00:07:31.630
I'm just gonna console comment these out.

195
00:07:31.630 --> 00:07:32.790
Next thing we need to talk about is

196
00:07:32.790 --> 00:07:34.250
something called the call stack

197
00:07:34.250 --> 00:07:36.130
or the stack trace.

198
00:07:36.130 --> 00:07:38.390
The stack trace will tell you what function called.

199
00:07:38.390 --> 00:07:39.223
What function called.

200
00:07:39.223 --> 00:07:40.310
What function.

201
00:07:40.310 --> 00:07:45.310
So if I have this function down here called Go.

202
00:07:46.123 --> 00:07:48.250
And that function in turn,

203
00:07:48.250 --> 00:07:50.960
we'll call doctorize which will

204
00:07:50.960 --> 00:07:52.440
first call greet.

205
00:07:52.440 --> 00:07:54.740
So there's a kind of a lot going on here.

206
00:07:54.740 --> 00:07:59.220
And you'll notice of greet we have this function

207
00:07:59.220 --> 00:08:00.160
that doesn't exist.

208
00:08:00.160 --> 00:08:02.823
And that will cause an error.

209
00:08:03.887 --> 00:08:06.540
Let's go ahead and run that from our console here.

210
00:08:06.540 --> 00:08:07.584
So go.

211
00:08:07.584 --> 00:08:10.950
You see uncaught reference error 'doesntExist'

212
00:08:10.950 --> 00:08:12.640
is not defined okay.

213
00:08:12.640 --> 00:08:13.947
And then you start to see this.

214
00:08:13.947 --> 00:08:15.650
And I think a lot of new developers

215
00:08:15.650 --> 00:08:18.002
look at this and they go "eugh it's a lot of numbers,

216
00:08:18.002 --> 00:08:21.933
and parenthesis and anonymous 1:1 what does that even mean?

217
00:08:21.933 --> 00:08:23.760
So they sort of just ignore.

218
00:08:23.760 --> 00:08:26.700
But like this is where the good stuff is in an error.

219
00:08:26.700 --> 00:08:28.590
If you wanna know what went wrong.

220
00:08:28.590 --> 00:08:31.140
You have to get good at reading these call stacks.

221
00:08:31.140 --> 00:08:33.210
And it's pretty simple,

222
00:08:33.210 --> 00:08:34.043
it just says,

223
00:08:34.043 --> 00:08:36.420
okay it happened here at greet.

224
00:08:36.420 --> 00:08:38.913
On debugging.js on line 47.

225
00:08:38.913 --> 00:08:42.200
Okay so it happened on line 47.

226
00:08:42.200 --> 00:08:43.500
Okay good.

227
00:08:43.500 --> 00:08:45.340
That's where the actual error happened.

228
00:08:45.340 --> 00:08:48.210
But errors aren't always that easy.

229
00:08:48.210 --> 00:08:49.110
You might say okay,

230
00:08:49.110 --> 00:08:50.470
but like how did that happen,

231
00:08:50.470 --> 00:08:51.784
who called greet.

232
00:08:51.784 --> 00:08:54.080
Well you go into the next piece of the call stack.

233
00:08:54.080 --> 00:08:55.830
Okay at go.

234
00:08:55.830 --> 00:08:59.496
So go ended up calling the greet function.

235
00:08:59.496 --> 00:09:04.050
And that was at line 52 so go to line 52.

236
00:09:04.050 --> 00:09:06.120
And here is the go that's where greet

237
00:09:06.120 --> 00:09:07.520
actually got called.

238
00:09:07.520 --> 00:09:09.440
And then it says at anonymous 1:1

239
00:09:09.440 --> 00:09:10.273
what does that mean?

240
00:09:10.273 --> 00:09:11.720
That means just cause I ran it from

241
00:09:12.570 --> 00:09:13.580
my actual console.

242
00:09:13.580 --> 00:09:15.114
If I were to make another function called

243
00:09:15.114 --> 00:09:17.263
function bootstrap.

244
00:09:19.150 --> 00:09:20.317
And that in turn called go.

245
00:09:20.317 --> 00:09:22.070
Make this console log.

246
00:09:22.070 --> 00:09:23.673
Starting the app.

247
00:09:25.140 --> 00:09:27.073
Now If I were to run bootstrap.

248
00:09:30.780 --> 00:09:32.710
You'll see that the error was in greet,

249
00:09:32.710 --> 00:09:34.020
which was called by go,

250
00:09:34.020 --> 00:09:35.820
which was called by bootstrap.

251
00:09:35.820 --> 00:09:38.400
Which was called by an anonymous function meaning

252
00:09:38.400 --> 00:09:40.210
I ran that from the console here.

253
00:09:40.210 --> 00:09:41.043
Right.

254
00:09:41.043 --> 00:09:43.333
And if I were to just run bootstrap.

255
00:09:44.680 --> 00:09:47.850
On the page load.

256
00:09:47.850 --> 00:09:49.160
You see that when I refresh the

257
00:09:49.160 --> 00:09:51.340
page now that immediately happens.

258
00:09:51.340 --> 00:09:53.990
And then it tells me the error was at greet,

259
00:09:53.990 --> 00:09:55.900
which was called by go,

260
00:09:55.900 --> 00:09:57.730
which was called by bootstrap,

261
00:09:57.730 --> 00:10:00.930
which was run on line 61 on here.

262
00:10:00.930 --> 00:10:04.080
So being able to read your callstacks as they

263
00:10:04.080 --> 00:10:06.990
go from one file to another is

264
00:10:06.990 --> 00:10:08.620
going to be extremely important.

265
00:10:08.620 --> 00:10:10.720
And we're gonna be using that quite abit in this course.

266
00:10:10.720 --> 00:10:15.203
So I'm gonna comment out this running of the bootstrap.

267
00:10:16.270 --> 00:10:18.290
Everything looks good.

268
00:10:18.290 --> 00:10:21.160
Next thing we want to learn about is...

269
00:10:23.160 --> 00:10:25.340
The grabbing of elements.

270
00:10:25.340 --> 00:10:26.460
So this is just like-

271
00:10:26.460 --> 00:10:29.700
kind of a handy little one that I like to use quite abit.

272
00:10:29.700 --> 00:10:33.320
Is if you're on a website and you're like inspecting it,

273
00:10:33.320 --> 00:10:35.670
like lets take this button right here.

274
00:10:35.670 --> 00:10:39.580
Actually let's go to a website that has more buttons.

275
00:10:39.580 --> 00:10:41.350
Lets go to MDN.

276
00:10:41.350 --> 00:10:43.510
Let's take this input for an example right here.

277
00:10:43.510 --> 00:10:45.450
I wanna know what's going on with this input.

278
00:10:45.450 --> 00:10:49.930
So if I were to select that with my dev tools.

279
00:10:49.930 --> 00:10:52.630
So you click on this one and you can hover over them.

280
00:10:52.630 --> 00:10:53.463
You wanna select it,

281
00:10:53.463 --> 00:10:54.980
there's an input and I can just

282
00:10:54.980 --> 00:10:56.787
type in like 'hey' inside of it.

283
00:10:56.787 --> 00:11:00.580
And what is selected right here in my dev tools

284
00:11:00.580 --> 00:11:02.850
is blue and then if I flip over to the

285
00:11:02.850 --> 00:11:04.493
console tab right here.

286
00:11:04.493 --> 00:11:05.880
Just gonna clear it out.

287
00:11:05.880 --> 00:11:09.610
If you type $0 what that will do

288
00:11:09.610 --> 00:11:12.210
is it will return to you whatever you

289
00:11:12.210 --> 00:11:14.740
currently have selected in the elements tab.

290
00:11:14.740 --> 00:11:16.020
And that can be really helpful

291
00:11:16.020 --> 00:11:17.607
because you can do things like call like,

292
00:11:17.607 --> 00:11:19.336
.value against it.

293
00:11:19.336 --> 00:11:22.210
And it will tell you what I've typed inside of it.

294
00:11:22.210 --> 00:11:24.270
So I use that all the time where I'm like,

295
00:11:24.270 --> 00:11:26.140
I don't wanna have to select the thing,

296
00:11:26.140 --> 00:11:27.940
or make a global variable.

297
00:11:27.940 --> 00:11:30.460
I just select the element in the elements tab.

298
00:11:30.460 --> 00:11:33.120
And then go to console and type in $0

299
00:11:33.120 --> 00:11:35.300
and that's going to give you sort of a

300
00:11:35.300 --> 00:11:37.558
Short-cut access to the actual element.

301
00:11:37.558 --> 00:11:40.100
(muffled) You might wondering what does 0 mean?

302
00:11:40.100 --> 00:11:42.020
That means the last element clicked.

303
00:11:42.020 --> 00:11:44.336
So if I were to go back here and

304
00:11:44.336 --> 00:11:47.170
hover other top of this...

305
00:11:47.170 --> 00:11:48.520
Submit button.

306
00:11:48.520 --> 00:11:50.180
Well it's actually offscreen.

307
00:11:50.180 --> 00:11:51.427
They've hidden it but...

308
00:11:51.427 --> 00:11:54.120
If I were to click on it.

309
00:11:54.120 --> 00:11:58.150
And go back to console and type $0 again.

310
00:11:58.150 --> 00:12:01.540
You see that this is the button that we selected.

311
00:12:01.540 --> 00:12:04.360
And if I typed $1 it gives us the input.

312
00:12:04.360 --> 00:12:08.710
So what happens it says $0 is the last element you clicked.

313
00:12:08.710 --> 00:12:09.729
On here.

314
00:12:09.729 --> 00:12:12.370
$1 is the second last element you clicked.

315
00:12:12.370 --> 00:12:13.950
And you can keep going forever.

316
00:12:13.950 --> 00:12:15.060
If I lets,

317
00:12:15.060 --> 00:12:17.190
lets click on another element here.

318
00:12:17.190 --> 00:12:18.430
So this span.

319
00:12:18.430 --> 00:12:21.116
So $0 should now that's span.

320
00:12:21.116 --> 00:12:23.407
$1 should now be the button and

321
00:12:23.407 --> 00:12:25.870
$2 should now be the input.

322
00:12:25.870 --> 00:12:27.296
I'm not sure how far it goes but

323
00:12:27.296 --> 00:12:30.060
that definitely can be handy to sort of

324
00:12:30.060 --> 00:12:31.478
have a little bit of memory of

325
00:12:31.478 --> 00:12:34.820
what elements you ended up clicking.

326
00:12:34.820 --> 00:12:36.120
So those are the $0 $1 $2.

327
00:12:39.270 --> 00:12:40.960
A kinda another cool thing you can do

328
00:12:40.960 --> 00:12:42.363
is we have $ and $$.

329
00:12:45.470 --> 00:12:47.970
And these are only in the console.

330
00:12:47.970 --> 00:12:49.760
You can't use these things in your code.

331
00:12:49.760 --> 00:12:52.040
This is only when you're running in the console.

332
00:12:52.040 --> 00:12:54.349
And what these are are -

333
00:12:54.349 --> 00:12:56.110
oh it looks like this one,

334
00:12:56.110 --> 00:12:58.610
if Jquery is loaded on the page this won't work.

335
00:12:58.610 --> 00:12:59.830
So we need to find a website.

336
00:12:59.830 --> 00:13:01.370
Is Jquery on here?

337
00:13:01.370 --> 00:13:03.230
Yeah this page has Jquery loaded on it.

338
00:13:03.230 --> 00:13:04.390
So we need to go to another.

339
00:13:04.390 --> 00:13:06.830
Maybe let's go to Apple.com

340
00:13:06.830 --> 00:13:08.137
open up at this,

341
00:13:08.137 --> 00:13:09.580
and if you say $,

342
00:13:09.580 --> 00:13:10.413
there we go.

343
00:13:10.413 --> 00:13:11.650
And $$.

344
00:13:11.650 --> 00:13:12.680
So what these are,

345
00:13:12.680 --> 00:13:14.830
are sorta short hand selectors for two things

346
00:13:14.830 --> 00:13:17.280
we're gonna learn about in a coming video,

347
00:13:17.280 --> 00:13:18.360
about the DOM.

348
00:13:18.360 --> 00:13:20.970
And that will allow us to select things,

349
00:13:20.970 --> 00:13:23.370
like based on the selectors.

350
00:13:23.370 --> 00:13:26.358
So $ 'p' will give us document.queryselector

351
00:13:26.358 --> 00:13:28.670
and that will match the first thing

352
00:13:28.670 --> 00:13:30.340
that matches the selector here.

353
00:13:30.340 --> 00:13:32.900
And then $$ will match all of the ones

354
00:13:32.900 --> 00:13:33.970
that match selector so,

355
00:13:33.970 --> 00:13:36.720
in this case it's found the first paragraph tag.

356
00:13:36.720 --> 00:13:39.030
And then in this case it found all of

357
00:13:39.030 --> 00:13:40.870
the paragraph tags on the page.

358
00:13:40.870 --> 00:13:42.820
So I find those to be very helpful.

359
00:13:42.820 --> 00:13:44.510
We'll even look about how can you

360
00:13:44.510 --> 00:13:45.768
replicate this functionality.

361
00:13:45.768 --> 00:13:48.016
This has nothing to do with Jquery.

362
00:13:48.016 --> 00:13:50.190
It's just kind of a little short hand

363
00:13:50.190 --> 00:13:52.320
that's available to you in the console.

364
00:13:52.320 --> 00:13:53.910
Let's talk about break points.

365
00:13:53.910 --> 00:13:54.743
That's the,

366
00:13:54.743 --> 00:13:56.610
sort of the next big one that we have here.

367
00:13:56.610 --> 00:13:59.330
Let's go in to our people.forEach,

368
00:13:59.330 --> 00:14:00.790
get rid of all this console here.

369
00:14:00.790 --> 00:14:04.960
Let's just console.log the person.name

370
00:14:04.960 --> 00:14:07.800
and go back to debugging.

371
00:14:07.800 --> 00:14:09.220
And you see everyone's name.

372
00:14:09.220 --> 00:14:12.470
What you can do is in here if you wanna sort of

373
00:14:12.470 --> 00:14:14.600
pause javascript from running.

374
00:14:14.600 --> 00:14:17.726
Is you can type 'debugger' and then add :

375
00:14:17.726 --> 00:14:21.420
and that is a statement that only when

376
00:14:21.420 --> 00:14:23.170
your dev tools are open,

377
00:14:23.170 --> 00:14:25.667
it will actually pause javascript from running.

378
00:14:25.667 --> 00:14:27.900
And it allows us to sort of peer into

379
00:14:27.900 --> 00:14:29.490
javascript at that very moment.

380
00:14:29.490 --> 00:14:30.918
So now when I refresh.

381
00:14:30.918 --> 00:14:34.500
What happens is we've set what's called a break point.

382
00:14:34.500 --> 00:14:36.650
Break at this certain time and,

383
00:14:36.650 --> 00:14:38.640
it's kinda cool because this will give you

384
00:14:38.640 --> 00:14:41.780
a whole bunch of information as to what happened.

385
00:14:41.780 --> 00:14:43.270
And I'm gonna try to do my best,

386
00:14:43.270 --> 00:14:45.490
I might have to zoom out here a little bit.

387
00:14:45.490 --> 00:14:47.040
So if you hover over it,

388
00:14:47.040 --> 00:14:49.688
it actually shows you what the variables are equal to.

389
00:14:49.688 --> 00:14:52.720
You'll see that the javascript has paused.

390
00:14:52.720 --> 00:14:55.800
If we go to our console nothing is logged just yet.

391
00:14:55.800 --> 00:14:57.850
We'll go back to the sources tab here.

392
00:14:57.850 --> 00:15:00.210
And then on this right hand side,

393
00:15:00.210 --> 00:15:02.110
this is where all of the different tools

394
00:15:02.110 --> 00:15:05.480
for inspecting what's going on is happening here.

395
00:15:05.480 --> 00:15:07.900
So first it gives us our call stack.

396
00:15:07.900 --> 00:15:10.090
We talked about that earlier.

397
00:15:10.090 --> 00:15:13.370
Second it's gonna tell you what our local variables are.

398
00:15:13.370 --> 00:15:15.670
That's coming next in our scope video but,

399
00:15:15.670 --> 00:15:17.190
you can see really quickly here

400
00:15:17.190 --> 00:15:19.360
that we've got two parameters here;

401
00:15:19.360 --> 00:15:20.193
we have person,

402
00:15:20.193 --> 00:15:21.700
and we have index.

403
00:15:21.700 --> 00:15:23.278
And if you either look here,

404
00:15:23.278 --> 00:15:25.620
you can see what they are or you can

405
00:15:25.620 --> 00:15:27.390
either just hover over top of them.

406
00:15:27.390 --> 00:15:30.980
And you can see what the person variable is set to.

407
00:15:30.980 --> 00:15:32.330
There's other stuff for break points,

408
00:15:32.330 --> 00:15:34.700
we'll get into there in just a second.

409
00:15:34.700 --> 00:15:36.330
But what's kinda cool is you can

410
00:15:36.330 --> 00:15:38.650
either click the play button,

411
00:15:38.650 --> 00:15:41.300
and what happened there if we go back to our console.

412
00:15:41.300 --> 00:15:42.133
Look it,

413
00:15:42.133 --> 00:15:45.740
console logged Wes and then it hit the debugger

414
00:15:45.740 --> 00:15:47.550
again because it's a loop.

415
00:15:47.550 --> 00:15:50.330
And now you see the person is equal to Scott.

416
00:15:50.330 --> 00:15:52.610
The index is equal to 1.

417
00:15:52.610 --> 00:15:54.740
There's other information about the 'this' keyword,

418
00:15:54.740 --> 00:15:56.840
we'll learn about that in coming videos.

419
00:15:56.840 --> 00:15:57.930
And we can start of like,

420
00:15:57.930 --> 00:15:58.810
keep going with it.

421
00:15:58.810 --> 00:16:01.118
We can step over into the next function call so,

422
00:16:01.118 --> 00:16:02.980
you see what I did right there is,

423
00:16:02.980 --> 00:16:04.500
when you hit play that will just

424
00:16:04.500 --> 00:16:06.220
keep running javascript until it hits

425
00:16:06.220 --> 00:16:07.290
the next debugger.

426
00:16:07.290 --> 00:16:08.219
If you hit this one,

427
00:16:08.219 --> 00:16:11.133
step over into next function call,

428
00:16:11.133 --> 00:16:13.448
What it will do is allow you to

429
00:16:13.448 --> 00:16:14.350
run the code line by line.

430
00:16:14.350 --> 00:16:15.446
So here I am.

431
00:16:15.446 --> 00:16:17.070
It doesn't say Wes yet.

432
00:16:17.070 --> 00:16:18.720
But if I keep pressing-

433
00:16:18.720 --> 00:16:20.950
you can press the arrow up here too.

434
00:16:20.950 --> 00:16:22.310
Next line...

435
00:16:23.270 --> 00:16:24.350
Did it get console logged?

436
00:16:24.350 --> 00:16:26.240
Yeah Scott got consoled logged.

437
00:16:26.240 --> 00:16:27.430
Next line.

438
00:16:27.430 --> 00:16:28.263
Next line.

439
00:16:28.263 --> 00:16:30.670
You can just sort of like step through the javascript.

440
00:16:30.670 --> 00:16:34.278
And you can see how the browser is actually

441
00:16:34.278 --> 00:16:36.118
gonna go ahead and run it so,

442
00:16:36.118 --> 00:16:40.180
when console log becomes a little bit overwhelming.

443
00:16:40.180 --> 00:16:41.790
When you feel like your console logging

444
00:16:41.790 --> 00:16:43.979
too much data in order to see it,

445
00:16:43.979 --> 00:16:46.080
or if you feel like you're trying to

446
00:16:46.080 --> 00:16:47.290
console log something quickly

447
00:16:47.290 --> 00:16:49.490
just so you could see what happened in the past.

448
00:16:49.490 --> 00:16:51.300
Popping a debugger in there,

449
00:16:51.300 --> 00:16:52.770
and those can go in anywhere,

450
00:16:52.770 --> 00:16:53.970
I could just...

451
00:16:53.970 --> 00:16:55.323
Pop them up right here.

452
00:16:56.600 --> 00:16:58.360
And refresh the page.

453
00:16:58.360 --> 00:16:59.750
And you'll see that there are

454
00:16:59.750 --> 00:17:02.190
no variables available to us.

455
00:17:02.190 --> 00:17:03.598
But I could step into it.

456
00:17:03.598 --> 00:17:05.790
Now you can see there's no variables.

457
00:17:05.790 --> 00:17:08.448
No you can see that I stepped over that creation here.

458
00:17:08.448 --> 00:17:10.540
Now we have this people variable

459
00:17:10.540 --> 00:17:12.470
which has all our data in it.

460
00:17:12.470 --> 00:17:15.210
It's just a handy way to sorta slow things down,

461
00:17:15.210 --> 00:17:17.060
and be able to peer into what

462
00:17:17.060 --> 00:17:19.020
the different pieces of data are.

463
00:17:19.020 --> 00:17:21.590
You can also set break points

464
00:17:21.590 --> 00:17:23.700
from the browser as well,

465
00:17:23.700 --> 00:17:25.443
so if I take that debugger out.

466
00:17:26.790 --> 00:17:28.750
Everything works just fine.

467
00:17:28.750 --> 00:17:32.700
But you can go into your sources tab.

468
00:17:32.700 --> 00:17:35.660
In the side bar here you'll be able to

469
00:17:35.660 --> 00:17:39.350
click on your actual javascript that you have.

470
00:17:39.350 --> 00:17:40.670
This is obviously open,

471
00:17:40.670 --> 00:17:43.240
you can click through to other ones here.

472
00:17:43.240 --> 00:17:44.073
And you can say like,

473
00:17:44.073 --> 00:17:44.906
Okay...

474
00:17:44.906 --> 00:17:49.906
When someone runs this go function,

475
00:17:50.280 --> 00:17:52.480
I wanna put a break point in there.

476
00:17:52.480 --> 00:17:54.699
And what I just did there is I just

477
00:17:54.699 --> 00:17:55.532
clicked on the line number,

478
00:17:55.532 --> 00:17:57.638
and now when I refresh the page.

479
00:17:57.638 --> 00:18:01.423
You'll see that that actually has stopped a break point.

480
00:18:10.688 --> 00:18:11.640
And when I refresh the page,

481
00:18:11.640 --> 00:18:13.560
you see the break point is still there.

482
00:18:13.560 --> 00:18:16.070
Now if I were to go ahead and run that function,

483
00:18:16.070 --> 00:18:18.350
you see that it pauses itself in debugger.

484
00:18:18.350 --> 00:18:19.928
We can see...

485
00:18:19.928 --> 00:18:20.830
Look at this.

486
00:18:20.830 --> 00:18:24.380
The name is not (cough)

487
00:18:24.380 --> 00:18:27.170
you can see it's paused itself in the debugger

488
00:18:27.170 --> 00:18:29.437
and we have all of the exact same info that we were,

489
00:18:29.437 --> 00:18:30.920
were looking at earlier.

490
00:18:30.920 --> 00:18:33.585
So break points you can either click on the line

491
00:18:33.585 --> 00:18:37.320
from the sources tab or,

492
00:18:37.320 --> 00:18:41.790
you can pop the word debugger anywhere in your javascript.

493
00:18:41.790 --> 00:18:43.667
Just make sure you actually remove those

494
00:18:43.667 --> 00:18:44.500
(laughs)

495
00:18:44.500 --> 00:18:46.780
I once forgot a debugger command in,

496
00:18:46.780 --> 00:18:48.680
which is not a big deal because like,

497
00:18:48.680 --> 00:18:50.219
if you refresh the page.

498
00:18:50.219 --> 00:18:53.800
And there's no dev tools open.

499
00:18:53.800 --> 00:18:54.850
It won't do anything.

500
00:18:54.850 --> 00:18:56.670
The browser will just ignore them.

501
00:18:56.670 --> 00:18:58.960
But I was working on a developer focused website,

502
00:18:58.960 --> 00:19:02.080
which many developers have their dev tools open by default.

503
00:19:02.080 --> 00:19:05.140
And that was a bad day so we to quickly take it out.

504
00:19:05.140 --> 00:19:07.323
So make sure you remove all of those.

505
00:19:09.180 --> 00:19:10.750
We talked about scope.

506
00:19:10.750 --> 00:19:13.260
Scope will allow us to sorta peer into what variables are.

507
00:19:13.260 --> 00:19:14.540
We'll look a little bit more into that

508
00:19:14.540 --> 00:19:15.511
in the next video.

509
00:19:15.511 --> 00:19:17.690
Next one is network requests.

510
00:19:17.690 --> 00:19:21.380
If you wanna see like what is being fired off.

511
00:19:21.380 --> 00:19:22.880
If you open up your dev tools.

512
00:19:27.510 --> 00:19:29.710
And you got to your network tab.

513
00:19:29.710 --> 00:19:31.730
And you refresh.

514
00:19:31.730 --> 00:19:33.730
You're gonna see what's happening here is,

515
00:19:33.730 --> 00:19:36.520
you see all of the different files

516
00:19:36.520 --> 00:19:38.860
that were needed in order for this thing to work.

517
00:19:38.860 --> 00:19:41.710
So we have our debugging.html,

518
00:19:41.710 --> 00:19:43.360
we have our base.css,

519
00:19:43.360 --> 00:19:45.320
this is all the CSS that I've made this

520
00:19:45.320 --> 00:19:47.060
blue and pink button.

521
00:19:47.060 --> 00:19:49.100
We've got our debugging.js

522
00:19:49.100 --> 00:19:51.760
and then we have a SVG which is this

523
00:19:51.760 --> 00:19:54.140
little wavy pattern in the background here.

524
00:19:54.140 --> 00:19:56.440
And this can be really helpful because

525
00:19:56.440 --> 00:19:59.220
you can actually see when a website

526
00:19:59.220 --> 00:20:01.810
is sending out data for you so

527
00:20:01.810 --> 00:20:03.780
I've got this little function right here

528
00:20:03.780 --> 00:20:05.750
called fetchDadJoke.

529
00:20:05.750 --> 00:20:07.050
And that's just gonna go off to some

530
00:20:07.050 --> 00:20:08.610
API and grab a dad joke.

531
00:20:08.610 --> 00:20:10.730
We'll worry about what is async and all this,

532
00:20:10.730 --> 00:20:12.000
what does this mean,

533
00:20:12.000 --> 00:20:13.920
in the future we're gonna learn all about that.

534
00:20:13.920 --> 00:20:15.320
But for now just know that it goes

535
00:20:15.320 --> 00:20:17.958
to an external API and grabs a dad joke.

536
00:20:17.958 --> 00:20:20.773
If I were to run that dad joke function here.

537
00:20:23.250 --> 00:20:24.790
IT brings us back a dad joke.

538
00:20:24.790 --> 00:20:26.427
What did the scarf say to the hat?

539
00:20:26.427 --> 00:20:28.000
You go on ahead,

540
00:20:28.000 --> 00:20:30.350
I am going to hang around here a bit longer.

541
00:20:30.350 --> 00:20:31.183
Oh my gosh.

542
00:20:31.183 --> 00:20:33.490
So if we go to our network here

543
00:20:33.490 --> 00:20:35.147
you'll see that there's this new

544
00:20:35.147 --> 00:20:37.360
item that's been logged here.

545
00:20:37.360 --> 00:20:39.560
I can click on that and you can see

546
00:20:39.560 --> 00:20:42.380
information about the actual request.

547
00:20:42.380 --> 00:20:43.420
Like what happened?

548
00:20:43.420 --> 00:20:45.768
It's probably all not that useful to you.

549
00:20:45.768 --> 00:20:49.650
But you can see what the raw response

550
00:20:49.650 --> 00:20:51.190
was and a preview of it.

551
00:20:51.190 --> 00:20:52.270
This is gonna be helpful when we

552
00:20:52.270 --> 00:20:53.290
look at Json.

553
00:20:53.290 --> 00:20:54.707
Also gives you information about like,

554
00:20:54.707 --> 00:20:56.930
how long did this request take?

555
00:20:56.930 --> 00:20:59.220
So if you're like "huh this website is slow".

556
00:20:59.220 --> 00:21:01.950
It'll actually tell you where the time was spent

557
00:21:01.950 --> 00:21:03.180
in fetching that dad joke.

558
00:21:03.180 --> 00:21:04.857
Took a 133 milliseconds.

559
00:21:04.857 --> 00:21:08.830
And most of that was spent in waiting

560
00:21:08.830 --> 00:21:12.480
for the dad joke API to actually return the data to us.

561
00:21:12.480 --> 00:21:14.218
And very little of that was actually

562
00:21:14.218 --> 00:21:17.170
us sending the request out.

563
00:21:17.170 --> 00:21:18.278
So that's helpful.

564
00:21:18.278 --> 00:21:21.530
I really like using that like if you go to Apple.com,

565
00:21:21.530 --> 00:21:24.720
and you go to your network tab and you refresh.

566
00:21:24.720 --> 00:21:26.430
You can see there's like literally

567
00:21:26.430 --> 00:21:28.408
100's of things that get requested here.

568
00:21:28.408 --> 00:21:31.076
Little American flag icon.

569
00:21:31.076 --> 00:21:33.470
Apple arcade.

570
00:21:33.470 --> 00:21:36.330
You can also filter them here for XHR;

571
00:21:36.330 --> 00:21:39.400
That's when their sending data out about you.

572
00:21:39.400 --> 00:21:42.633
So here are there some suggestions.

573
00:21:43.660 --> 00:21:44.890
Find a store.

574
00:21:44.890 --> 00:21:45.723
This is just some data,

575
00:21:45.723 --> 00:21:47.910
somewhere on the website they needed this.

576
00:21:47.910 --> 00:21:49.510
Locale switcher.

577
00:21:49.510 --> 00:21:51.460
Sometimes when you like hover over things

578
00:21:51.460 --> 00:21:53.430
they start sending data off.

579
00:21:53.430 --> 00:21:56.100
Showing that ooh this persons interested in it.

580
00:21:56.100 --> 00:21:57.453
Take a quick search.

581
00:21:59.970 --> 00:22:02.700
Maybe I search for iPad,

582
00:22:02.700 --> 00:22:06.960
yeah you see that these suggestions start popping up.

583
00:22:06.960 --> 00:22:08.680
So I just typed in iPad.

584
00:22:08.680 --> 00:22:11.416
Now it comes back with a list of suggestions.

585
00:22:11.416 --> 00:22:12.950
Here we go.

586
00:22:12.950 --> 00:22:14.780
The results iPad Pro,

587
00:22:14.780 --> 00:22:18.340
iPad Air, regular iPad, iPad mini, iPad accessories.

588
00:22:18.340 --> 00:22:20.170
And you see that's the data that was

589
00:22:20.170 --> 00:22:22.136
actually returned and they displayed it into us so,

590
00:22:22.136 --> 00:22:24.728
being able to use this network tab

591
00:22:24.728 --> 00:22:27.790
and sorta peer into what is happening,

592
00:22:27.790 --> 00:22:31.027
what requests are being sent off to their server.

593
00:22:31.027 --> 00:22:32.400
Is kinda cool.

594
00:22:32.400 --> 00:22:33.233
And you feel like,

595
00:22:33.233 --> 00:22:35.010
alittle bit of a hacker being able to

596
00:22:35.010 --> 00:22:38.271
see the raw data behind everything.

597
00:22:38.271 --> 00:22:40.630
That is network request.

598
00:22:40.630 --> 00:22:43.060
Next one is break on attribute.

599
00:22:43.060 --> 00:22:44.540
I don't use this one all that often,

600
00:22:44.540 --> 00:22:45.810
but it can be helpful.

601
00:22:45.810 --> 00:22:49.080
So right here I've got this button.

602
00:22:49.080 --> 00:22:51.530
That when you click it it gets bigger.

603
00:22:51.530 --> 00:22:53.200
Now if you go to your elements.

604
00:22:53.200 --> 00:22:57.060
You'll see that the font size here is just being bumped up.

605
00:22:57.060 --> 00:22:59.730
Every single time that I click it.

606
00:22:59.730 --> 00:23:01.130
If you don't know like,

607
00:23:01.130 --> 00:23:02.870
if you're just looking at this right now,

608
00:23:02.870 --> 00:23:06.370
and your project has hundreds of javascript files,

609
00:23:06.370 --> 00:23:07.610
and you go like okay,

610
00:23:07.610 --> 00:23:11.370
where is the javascript that is making this button bigger?

611
00:23:11.370 --> 00:23:12.400
You could spend your whole day

612
00:23:12.400 --> 00:23:13.910
just reading through javascript.

613
00:23:13.910 --> 00:23:16.520
Or what you can do is you can go into your

614
00:23:16.520 --> 00:23:17.853
button and right click.

615
00:23:17.853 --> 00:23:19.430
Then you can say break on,

616
00:23:19.430 --> 00:23:22.440
and this is just another way of adding a break point.

617
00:23:22.440 --> 00:23:25.480
But you can say break when somebody

618
00:23:25.480 --> 00:23:27.110
has an attribute modification.

619
00:23:27.110 --> 00:23:30.110
When somebody changes one of these attributes

620
00:23:30.110 --> 00:23:31.736
throw in a breakpoint right there and

621
00:23:31.736 --> 00:23:33.840
pause things from actually running.

622
00:23:33.840 --> 00:23:36.610
So we can go ahead and break on,

623
00:23:36.610 --> 00:23:38.300
there's also sub-tree modifications,

624
00:23:38.300 --> 00:23:39.360
that means when somebody adds,

625
00:23:39.360 --> 00:23:40.897
like a dev will look at that.

626
00:23:40.897 --> 00:23:42.600
And there's also node removal

627
00:23:42.600 --> 00:23:44.827
meaning when somebody removes a-

628
00:23:44.827 --> 00:23:47.680
like an element or some text from something.

629
00:23:47.680 --> 00:23:49.700
Let's just do attribute modification.

630
00:23:49.700 --> 00:23:51.980
Then when I click it you see a pause

631
00:23:51.980 --> 00:23:53.902
in the debugger.

632
00:23:53.902 --> 00:23:56.290
You can see that there's a whole bunch of

633
00:23:56.290 --> 00:23:58.090
information about what's going on here.

634
00:23:58.090 --> 00:23:59.770
It gives me the new font size.

635
00:23:59.770 --> 00:24:01.250
It gives me something called an Event.

636
00:24:01.250 --> 00:24:02.530
We'll learn about all that,

637
00:24:02.530 --> 00:24:05.970
as well as gives us the This keyword.

638
00:24:05.970 --> 00:24:07.544
We'll learn all about that as well so,

639
00:24:07.544 --> 00:24:09.194
I don't use that one all that often but

640
00:24:09.194 --> 00:24:11.410
it's very helpful when you're being thrown

641
00:24:11.410 --> 00:24:14.650
into a random code base that you don't really know...

642
00:24:16.960 --> 00:24:18.710
What's going on.

643
00:24:18.710 --> 00:24:21.203
Finally if you go to your sources tab again.

644
00:24:21.203 --> 00:24:22.340
I'll just refresh this,

645
00:24:22.340 --> 00:24:24.060
get outta the debugger here.

646
00:24:24.060 --> 00:24:25.776
You'll see that there are other things here,

647
00:24:25.776 --> 00:24:27.660
you can throw...

648
00:24:28.600 --> 00:24:30.624
Event listener break points in there so,

649
00:24:30.624 --> 00:24:33.083
is there like a click in here?

650
00:24:36.620 --> 00:24:37.653
Mouse.

651
00:24:38.550 --> 00:24:39.383
Click.

652
00:24:39.383 --> 00:24:40.790
So break on mouse click.

653
00:24:40.790 --> 00:24:41.940
And now if I just like,

654
00:24:41.940 --> 00:24:43.210
I think if I click on there we go.

655
00:24:43.210 --> 00:24:45.690
Clicked on that button right there.

656
00:24:45.690 --> 00:24:49.630
And I just threw in a debugger break point for you.

657
00:24:49.630 --> 00:24:50.930
And then I can just go ahead and take them.

658
00:24:50.930 --> 00:24:53.710
So if you are trying to like,

659
00:24:53.710 --> 00:24:56.256
figure out what's happening when,

660
00:24:56.256 --> 00:24:59.630
you can throw in break points for when somebody clicks.

661
00:24:59.630 --> 00:25:02.120
There's also XHR break points.

662
00:25:02.120 --> 00:25:03.496
Which means that like,

663
00:25:03.496 --> 00:25:04.530
you can-

664
00:25:04.530 --> 00:25:05.910
you can click on this little one.

665
00:25:05.910 --> 00:25:07.740
And just click escape and that will give you

666
00:25:07.740 --> 00:25:09.330
any XHR or fetch.

667
00:25:09.330 --> 00:25:12.170
What that will do is anytime a fetch request is made,

668
00:25:12.170 --> 00:25:14.405
anytime someone goes off to an external API,

669
00:25:14.405 --> 00:25:16.410
it will break.

670
00:25:16.410 --> 00:25:20.253
So here if I fetch a dad joke.

671
00:25:21.530 --> 00:25:23.555
You see that it pauses in the debugger,

672
00:25:23.555 --> 00:25:25.700
and we can actually step through it.

673
00:25:25.700 --> 00:25:27.700
Right now the joke is nothing.

674
00:25:27.700 --> 00:25:28.713
But if I step.

675
00:25:29.780 --> 00:25:30.863
Step again.

676
00:25:33.270 --> 00:25:34.103
Here we go,

677
00:25:34.103 --> 00:25:37.937
now the joke says "how does a dyslexic poet write?"

678
00:25:37.937 --> 00:25:38.948
"Inverse."

679
00:25:38.948 --> 00:25:42.270
So it's kinda cool to be able to do it.

680
00:25:42.270 --> 00:25:44.020
You can do that on Apple.com as well.

681
00:25:44.020 --> 00:25:44.853
Here let me show you.

682
00:25:44.853 --> 00:25:46.880
Lets go to our sources tab.

683
00:25:46.880 --> 00:25:48.783
Go to XHR break points.

684
00:25:49.800 --> 00:25:51.680
Break on any XHR or fetch.

685
00:25:51.680 --> 00:25:53.490
Now if I go ahead and search for something.

686
00:25:53.490 --> 00:25:54.970
Lemme do "I",

687
00:25:54.970 --> 00:25:57.090
you see as soon as I typed in "I",

688
00:25:57.090 --> 00:25:59.515
it sent off that suggestion request to us.

689
00:25:59.515 --> 00:26:01.550
And you'll see that we've now paused

690
00:26:01.550 --> 00:26:02.690
it in debugger.

691
00:26:02.690 --> 00:26:03.870
You can see the call stack.

692
00:26:03.870 --> 00:26:04.703
Like look at this,

693
00:26:04.703 --> 00:26:06.380
this is all of the functions that

694
00:26:06.380 --> 00:26:07.620
Apple had to run in order to

695
00:26:07.620 --> 00:26:08.915
fetch those suggestions for you.

696
00:26:08.915 --> 00:26:12.300
It will also tell you some of the local

697
00:26:12.300 --> 00:26:13.355
variables that are in there.

698
00:26:13.355 --> 00:26:15.350
It'll tell you the closure.

699
00:26:15.350 --> 00:26:16.565
We'll learn about that so,

700
00:26:16.565 --> 00:26:19.100
sometimes this might be a little over your head.

701
00:26:19.100 --> 00:26:21.480
But just know that we can throw in breakpoints

702
00:26:21.480 --> 00:26:22.820
a whole bunch of different ways.

703
00:26:22.820 --> 00:26:24.960
Breakpoints are a great way to pause

704
00:26:24.960 --> 00:26:27.085
the actual value from running.

705
00:26:27.085 --> 00:26:27.918
(phone rings)

706
00:26:27.918 --> 00:26:29.463
I think that is it.

707
00:26:32.770 --> 00:26:33.850
Yep that is it.

708
00:26:33.850 --> 00:26:34.683
That's all the sort of,

709
00:26:34.683 --> 00:26:36.250
the different debugging techniques

710
00:26:36.250 --> 00:26:38.320
and tips that I use through it.

711
00:26:38.320 --> 00:26:42.035
I personally I would say 98% of my debugging

712
00:26:42.035 --> 00:26:44.803
is done both with console log,

713
00:26:44.803 --> 00:26:48.780
breakpoints and network request.

714
00:26:48.780 --> 00:26:50.480
And then the rest of those ones

715
00:26:50.480 --> 00:26:51.900
being able to peer into scope,

716
00:26:51.900 --> 00:26:53.160
attribute removal.

717
00:26:53.160 --> 00:26:55.610
Those are handy in severe edge cases

718
00:26:55.610 --> 00:26:56.443
Where I...

719
00:26:56.443 --> 00:26:58.016
I sound like "huh this is really tough".

720
00:26:58.016 --> 00:27:00.380
You just need to know about them so you can

721
00:27:00.380 --> 00:27:02.107
look em up when you actually need them.

722
00:27:02.107 --> 00:27:02.940
That's it,

723
00:27:02.940 --> 00:27:05.630
let's get in the next one which is understanding scope.

