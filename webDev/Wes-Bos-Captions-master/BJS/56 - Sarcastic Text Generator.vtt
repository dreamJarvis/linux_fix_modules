WEBVTT

1
00:00:00.673 --> 00:00:03.923
(upbeat hip-hop music)

2
00:00:05.311 --> 00:00:06.144
<v ->All right!</v>

3
00:00:06.144 --> 00:00:07.570
Got bit of a quick and fun one for you.

4
00:00:07.570 --> 00:00:09.946
This is one I think you can probably give yourself

5
00:00:09.946 --> 00:00:13.423
try yourself and try to see how you can structure it.

6
00:00:14.300 --> 00:00:17.270
This is just you type into the box here

7
00:00:17.270 --> 00:00:22.150
and it will convert your text into

8
00:00:22.150 --> 00:00:26.510
either sarcastic, funky or unable to structure a sentence.

9
00:00:26.510 --> 00:00:28.440
You know some people don't know how to use periods

10
00:00:28.440 --> 00:00:31.370
and they just dot-dot-dot as they're thinking.

11
00:00:31.370 --> 00:00:33.950
Sarcastic is a bit of a funny SpongeBob case

12
00:00:33.950 --> 00:00:34.783
it's often called.

13
00:00:34.783 --> 00:00:38.370
And funky, I don't even know if this is good or not.

14
00:00:38.370 --> 00:00:40.545
Actually don't ever actually use these.

15
00:00:40.545 --> 00:00:44.020
Sometimes people use these in their twitter names

16
00:00:44.020 --> 00:00:48.050
but they are inaccessible if someone with a screen reader

17
00:00:48.050 --> 00:00:51.110
were to read them back they're just read all funny.

18
00:00:51.110 --> 00:00:52.160
So don't actually use those.

19
00:00:52.160 --> 00:00:54.600
But we're gonna show you how to build it.

20
00:00:54.600 --> 00:00:56.550
Let's open up our Index HTML,

21
00:00:56.550 --> 00:00:59.940
I'm in the 55 sarcastic text folder here.

22
00:00:59.940 --> 00:01:03.252
And I've given you just some base styles here.

23
00:01:03.252 --> 00:01:05.390
Just so I can center it on the page.

24
00:01:05.390 --> 00:01:06.863
Nothing really that exciting.

25
00:01:07.740 --> 00:01:09.430
Then we have the div with a class of typer

26
00:01:09.430 --> 00:01:10.960
that's that white thing here.

27
00:01:10.960 --> 00:01:13.390
And then we have a bunch of inputs.

28
00:01:13.390 --> 00:01:14.820
The only thing you really need to know here

29
00:01:14.820 --> 00:01:17.250
is that they all have the same name.

30
00:01:17.250 --> 00:01:18.610
And what that does is it allows us

31
00:01:18.610 --> 00:01:22.570
to only select one of these radial buttons at a time.

32
00:01:22.570 --> 00:01:25.175
And we are going to be using their value

33
00:01:25.175 --> 00:01:28.040
to pull the different filters.

34
00:01:28.040 --> 00:01:30.480
So sarcastic, funky, and unable.

35
00:01:30.480 --> 00:01:31.920
Okay, so let's get to it.

36
00:01:31.920 --> 00:01:33.340
First thing I want to do is

37
00:01:33.340 --> 00:01:36.040
there's a couple of things we need to select here.

38
00:01:36.040 --> 00:01:40.430
We need to grab the text area that the person types into.

39
00:01:40.430 --> 00:01:43.220
We need to grab the result, which is a paragraph.

40
00:01:43.220 --> 00:01:46.110
And we need to grab all of these inputs.

41
00:01:46.110 --> 00:01:47.080
Like we have here.

42
00:01:47.080 --> 00:01:49.993
So let's just go ahead and grab the text area.

43
00:01:51.810 --> 00:01:54.620
And I probably shouldn't just use a text area

44
00:01:54.620 --> 00:01:55.940
because what if there's more than one.

45
00:01:55.940 --> 00:01:57.720
So let's use the...

46
00:01:57.720 --> 00:01:59.940
Lets take a look at our text area

47
00:01:59.940 --> 00:02:03.370
it has a name of text on it, I'll use that as a selector.

48
00:02:03.370 --> 00:02:06.110
So use an attribute selector, which is square brackets

49
00:02:06.980 --> 00:02:08.450
and we've got our text area.

50
00:02:08.450 --> 00:02:10.590
The other one we need is the result

51
00:02:10.590 --> 00:02:14.870
so we'll say result is equal to the paragraph

52
00:02:14.870 --> 00:02:17.360
with the class of result.

53
00:02:17.360 --> 00:02:19.623
And then we need the filter inputs.

54
00:02:20.930 --> 00:02:24.160
This is going to be queryselectorAll

55
00:02:24.160 --> 00:02:27.410
and inside of that we'll select the inputs

56
00:02:27.410 --> 00:02:31.080
that have a name attribute of filter on them.

57
00:02:31.080 --> 00:02:33.330
Let me just go ahead and select all those

58
00:02:33.330 --> 00:02:35.233
make sure that they're working.

59
00:02:45.340 --> 00:02:46.880
Next up we need

60
00:02:48.220 --> 00:02:53.220
a handler that will handle the outputting of the text.

61
00:02:53.240 --> 00:02:55.010
So we'll make a new function and we'll call

62
00:02:55.010 --> 00:02:57.013
that transform text.

63
00:02:58.080 --> 00:03:00.370
That will take in some text

64
00:03:00.370 --> 00:03:04.230
and it will just update the result.textcontent

65
00:03:05.655 --> 00:03:09.198
is equal to we'll just call it transformed text.

66
00:03:09.198 --> 00:03:12.610
Then we need a listener on this text area here.

67
00:03:12.610 --> 00:03:13.780
Oh, I spelled that wrong.

68
00:03:13.780 --> 00:03:14.930
Text area.

69
00:03:14.930 --> 00:03:17.320
We'll say textarea.addEventListener we'll listen

70
00:03:17.320 --> 00:03:19.920
for the input event and when that happens

71
00:03:19.920 --> 00:03:24.720
we will grab the event and pass the text of it

72
00:03:24.720 --> 00:03:28.380
to our transform text function.

73
00:03:28.380 --> 00:03:32.180
So transform text, and how do you get the text out

74
00:03:32.180 --> 00:03:33.530
of a text area?

75
00:03:33.530 --> 00:03:38.530
Well, e.target that will give us the actual text box.

76
00:03:39.670 --> 00:03:42.180
And then we say .value and that will give us whatever

77
00:03:42.180 --> 00:03:44.210
the user has passed in.

78
00:03:44.210 --> 00:03:46.030
So let's check if that's working

79
00:03:46.030 --> 00:03:48.550
by just simply console.logging the text.

80
00:03:48.550 --> 00:03:51.053
Actually and we can just set the text content to be

81
00:03:51.053 --> 00:03:53.491
what the user has passed in there.

82
00:03:53.491 --> 00:03:55.040
So now when I type in here

83
00:03:55.040 --> 00:03:58.267
there we go, "text area is not defined."

84
00:04:00.010 --> 00:04:00.843
Oh.

85
00:04:00.843 --> 00:04:01.676
That's this one,

86
00:04:01.676 --> 00:04:03.963
get ride of these const logs, we don't even need them.

87
00:04:05.450 --> 00:04:06.520
Now I type in there,

88
00:04:06.520 --> 00:04:08.530
you see whatever I type it's showing up

89
00:04:08.530 --> 00:04:10.030
in the paragraph below it.

90
00:04:10.030 --> 00:04:10.863
Okay.

91
00:04:10.863 --> 00:04:12.074
That is good!

92
00:04:12.074 --> 00:04:15.710
Now what we need to do is to write some filters.

93
00:04:15.710 --> 00:04:20.320
So let's work on the sarcastic text filter first.

94
00:04:20.320 --> 00:04:23.820
Now we are gonna have 3 different kinds of filters.

95
00:04:23.820 --> 00:04:27.300
We have the sarcastic filter, we have the funky filter,

96
00:04:27.300 --> 00:04:30.330
and we have the unable filter.

97
00:04:30.330 --> 00:04:31.690
So what I like to do is

98
00:04:31.690 --> 00:04:34.010
when you have multiple things like that

99
00:04:34.010 --> 00:04:36.356
is I like to stick them in an object

100
00:04:36.356 --> 00:04:39.200
instead of having them all as their own function

101
00:04:39.200 --> 00:04:41.210
and that allows us to group them together.

102
00:04:41.210 --> 00:04:44.470
So I'm going to make a object called filters.

103
00:04:44.470 --> 00:04:49.470
And each property will be the value that is here.

104
00:04:49.510 --> 00:04:52.180
So sarcastic, funky, and unable.

105
00:04:52.180 --> 00:04:54.390
I'll go ahead and paste those in here.

106
00:04:54.390 --> 00:04:58.740
Now these are all going to be functions that are taking

107
00:04:58.740 --> 00:05:01.350
in from a map function

108
00:05:01.350 --> 00:05:03.410
and we'll look into that more in just a second.

109
00:05:03.410 --> 00:05:06.660
But instead of using a property called sarcastic

110
00:05:06.660 --> 00:05:08.140
and setting it to a function

111
00:05:08.140 --> 00:05:09.540
when I give it a save you'll see that

112
00:05:09.540 --> 00:05:11.240
it automatically refactors it.

113
00:05:11.240 --> 00:05:12.790
It refactors it to this.

114
00:05:12.790 --> 00:05:16.175
So that's just a shortcut for saying function like that

115
00:05:16.175 --> 00:05:17.450
and give it a save.

116
00:05:17.450 --> 00:05:19.250
That's not the same thing as an arrow function.

117
00:05:19.250 --> 00:05:20.360
It just makes it shorter.

118
00:05:20.360 --> 00:05:23.400
So let's start with a sarcastic filter right here.

119
00:05:23.400 --> 00:05:25.250
So what we're gonna do is a couple things.

120
00:05:25.250 --> 00:05:28.010
So we need to take the text

121
00:05:28.010 --> 00:05:31.670
and loop over each letter

122
00:05:31.670 --> 00:05:33.510
and in this case of sarcastic

123
00:05:33.510 --> 00:05:35.788
every other letter needs to be upper-cased.

124
00:05:35.788 --> 00:05:37.287
So what we can do here

125
00:05:37.287 --> 00:05:41.300
is we'll say const the modified text,

126
00:05:41.300 --> 00:05:42.940
we'll use the mod variable there.

127
00:05:42.940 --> 00:05:45.590
And we'll say array.from(text)

128
00:05:45.590 --> 00:05:48.597
so let's just console.log(mod).

129
00:05:48.597 --> 00:05:50.450
see what we're working with right now

130
00:05:51.720 --> 00:05:53.210
so, store...

131
00:05:53.210 --> 00:05:56.259
Okay good so every time I type we get an array

132
00:05:56.259 --> 00:05:59.200
of every single letter that the person has in there.

133
00:05:59.200 --> 00:06:01.540
Essentially what we wanna do is loop over this

134
00:06:01.540 --> 00:06:04.330
and every other one we want to uppercase

135
00:06:04.330 --> 00:06:07.160
and every other one we want to lowercase.

136
00:06:07.160 --> 00:06:08.357
So what we could do here

137
00:06:08.357 --> 00:06:10.363
is we could say .map,

138
00:06:11.810 --> 00:06:13.240
well for each one.

139
00:06:13.240 --> 00:06:17.193
And we'll pass it just the filters.sarcastic.

140
00:06:21.660 --> 00:06:24.133
Then what we can do is go back

141
00:06:24.133 --> 00:06:26.520
to our filters here.

142
00:06:26.520 --> 00:06:28.390
And since this is just a map function

143
00:06:28.390 --> 00:06:30.760
our sarcastic method on the filters

144
00:06:30.760 --> 00:06:33.330
can take in all of the arguments that a regular map will do.

145
00:06:33.330 --> 00:06:38.330
So we get letter and we can also grab the index

146
00:06:38.803 --> 00:06:39.800
of that one.

147
00:06:39.800 --> 00:06:42.390
And let's just console.log the letter

148
00:06:43.590 --> 00:06:45.590
and the index for each one.

149
00:06:45.590 --> 00:06:48.790
And then let's return the letter just

150
00:06:48.790 --> 00:06:50.376
so it should work normally.

151
00:06:50.376 --> 00:06:52.747
So now if I type in something here

152
00:06:52.747 --> 00:06:53.624
I'll type in wes.

153
00:06:53.624 --> 00:06:58.380
You'll see that it is logging the letter and the index.

154
00:06:58.380 --> 00:06:59.840
So what we can do is we can say

155
00:06:59.840 --> 00:07:04.550
if it is an even number then lowercase it.

156
00:07:04.550 --> 00:07:09.550
And if it is an odd number than uppercase it.

157
00:07:10.020 --> 00:07:11.636
So we can, in here, we can say

158
00:07:11.636 --> 00:07:16.636
how do you know if a number is even or odd?

159
00:07:17.770 --> 00:07:20.440
Well, there's this kind of neat way of doing it

160
00:07:20.440 --> 00:07:23.130
and it's with the modulo operator.

161
00:07:23.130 --> 00:07:26.140
So let me introduce you to modulo operator outside

162
00:07:26.140 --> 00:07:27.310
of this real quick.

163
00:07:27.310 --> 00:07:29.107
If I have,

164
00:07:29.107 --> 00:07:30.710
I always talk about my kids.

165
00:07:30.710 --> 00:07:31.770
I have three kids

166
00:07:32.735 --> 00:07:33.680
And if I have a pack of Smarties,

167
00:07:33.680 --> 00:07:35.380
Smarties by the way

168
00:07:35.380 --> 00:07:36.811
Smarties, Canada

169
00:07:36.811 --> 00:07:39.130
these are what Smarties are in Canada.

170
00:07:39.130 --> 00:07:39.963
Right?

171
00:07:39.963 --> 00:07:44.490
They're not smarties as you Americans

172
00:07:45.410 --> 00:07:47.450
or whoever else is watching this.

173
00:07:47.450 --> 00:07:50.230
These are Smarties in the US

174
00:07:51.180 --> 00:07:52.013
those are weird.

175
00:07:52.013 --> 00:07:53.890
These are called Rockets in Canada.

176
00:07:53.890 --> 00:07:56.080
Smarties are these things.

177
00:07:56.080 --> 00:07:58.239
They're kind of like M&amp;Ms but not as good.

178
00:07:58.239 --> 00:08:01.853
So if I have a pack of ten Smarties

179
00:08:01.853 --> 00:08:03.891
and I have three kids

180
00:08:03.891 --> 00:08:08.891
then each kid gets 3.3333 Smarties.

181
00:08:09.940 --> 00:08:11.210
Okay.

182
00:08:11.210 --> 00:08:14.150
You can't really split a Smartie into thirds

183
00:08:14.150 --> 00:08:14.983
Right?

184
00:08:14.983 --> 00:08:16.180
So what you might think it's like,

185
00:08:17.026 --> 00:08:18.680
okay we'll math.floor that.

186
00:08:18.680 --> 00:08:21.440
Okay, each kid gets three Smarties.

187
00:08:21.440 --> 00:08:24.350
If there's a pack of 10 and there's three kids

188
00:08:24.350 --> 00:08:25.900
each kid will end up getting three.

189
00:08:25.900 --> 00:08:29.066
If I have a pack of 20, each kid will get six.

190
00:08:29.066 --> 00:08:33.450
Now my question is, how many do I get as the dad?

191
00:08:33.450 --> 00:08:34.950
How many are left over?

192
00:08:34.950 --> 00:08:37.589
Because obviously if I give them three each

193
00:08:37.589 --> 00:08:39.918
and there's 10 then there is one left over.

194
00:08:39.918 --> 00:08:43.070
So how do you figure out how many are left over?

195
00:08:43.070 --> 00:08:48.070
Well you could just do like 10 - math.floor x 3

196
00:08:49.140 --> 00:08:50.500
and you could just, oh there's one left.

197
00:08:50.500 --> 00:08:52.670
But that's no way to live your life.

198
00:08:52.670 --> 00:08:56.670
And what you can do is you can use the modulo operator.

199
00:08:56.670 --> 00:08:58.570
So I have 10 Smarties

200
00:08:58.570 --> 00:09:00.397
and I have three kids.

201
00:09:00.397 --> 00:09:02.932
The modulo operator will tell me

202
00:09:02.932 --> 00:09:07.850
after they are evenly divided, how many are left?

203
00:09:07.850 --> 00:09:09.340
And that's one.

204
00:09:09.340 --> 00:09:13.194
So if I had six Smarties and three kids,

205
00:09:13.194 --> 00:09:15.180
there's none left for dad.

206
00:09:15.180 --> 00:09:18.020
But if I had 10 Smarties and 3 kids there's one left.

207
00:09:18.020 --> 00:09:21.450
If I had 11 Smarties there's obviously 2 left.

208
00:09:21.450 --> 00:09:24.328
If I had 12 Smarties then there's none left

209
00:09:24.328 --> 00:09:27.070
because they are evenly divided.

210
00:09:27.070 --> 00:09:29.812
So the modulo operator is great for knowing

211
00:09:29.812 --> 00:09:34.812
how much is left after you have evenly divided.

212
00:09:34.990 --> 00:09:36.500
Where else is that useful?

213
00:09:36.500 --> 00:09:41.500
Well if I have let's say I have 82 seconds.

214
00:09:41.840 --> 00:09:44.640
And I need to show how many minutes and seconds are left.

215
00:09:44.640 --> 00:09:46.270
What I could do is I could say

216
00:09:46.270 --> 00:09:48.197
82 seconds divided by 60

217
00:09:48.197 --> 00:09:51.540
and math.floor that.

218
00:09:51.540 --> 00:09:53.230
There's one whole minute

219
00:09:59.016 --> 00:10:01.400
and 22 seconds left.

220
00:10:01.400 --> 00:10:03.837
So if you ever need to like know how many

221
00:10:03.837 --> 00:10:05.848
are left after I evenly divide something?

222
00:10:05.848 --> 00:10:08.450
That's what you use the modulo for.

223
00:10:08.450 --> 00:10:09.283
So!

224
00:10:09.283 --> 00:10:12.290
Modulo is great because you can tell

225
00:10:12.290 --> 00:10:15.500
if something is even or not by modulo two-ing it.

226
00:10:15.500 --> 00:10:16.333
Right?

227
00:10:16.333 --> 00:10:21.120
So, 10 mod 2 is 0 because 10 divided by 2 is 5.

228
00:10:21.120 --> 00:10:22.490
It's perfectly even.

229
00:10:22.490 --> 00:10:23.952
Whereas 11 is 1.

230
00:10:23.952 --> 00:10:27.590
So what you can do here is that any time there is 1

231
00:10:27.590 --> 00:10:28.423
it's odd.

232
00:10:28.423 --> 00:10:30.702
And anytime that it's 0, it's even.

233
00:10:30.702 --> 00:10:34.068
So that's just kind of a weird way of saying

234
00:10:34.068 --> 00:10:39.068
we say, if index mod 2, then return letter.to uppercase.

235
00:10:48.417 --> 00:10:52.603
Else, we wanna return the letter.to lowercase.

236
00:10:53.870 --> 00:10:55.010
Let's read that over.

237
00:10:55.010 --> 00:11:00.010
So if it is 0, then we will lowercase it.

238
00:11:00.380 --> 00:11:05.380
So if it is even it will return 0

239
00:11:08.750 --> 00:11:11.350
and we will lowercase it.

240
00:11:11.350 --> 00:11:16.350
And then here is if it is odd it will return 1

241
00:11:19.060 --> 00:11:24.060
and that is truthy, so this if statement will trip.

242
00:11:26.890 --> 00:11:30.800
So it basically say if there is any number at all,

243
00:11:30.800 --> 00:11:32.990
other than 0, then uppercase it.

244
00:11:32.990 --> 00:11:36.733
And if there is 0, then this one actually ends up happening.

245
00:11:37.830 --> 00:11:39.573
Now if we go back up here

246
00:11:39.573 --> 00:11:41.330
we're filtering it.

247
00:11:41.330 --> 00:11:43.380
Oh I've got this red underline here.

248
00:11:43.380 --> 00:11:44.240
Filter was used,

249
00:11:44.240 --> 00:11:49.240
oh I should move this up above it so it stops yelling at me.

250
00:11:49.760 --> 00:11:54.180
Okay so now we are looping over their sarcastic filter.

251
00:11:54.180 --> 00:11:57.026
And then we are giving our mod

252
00:11:57.026 --> 00:12:01.197
so if we refresh this, you'll see every other letter

253
00:12:01.197 --> 00:12:03.269
is upper-cased.

254
00:12:03.269 --> 00:12:07.180
And then what we can do is we can set the result to be

255
00:12:07.180 --> 00:12:12.180
the modified.join on nothing.

256
00:12:12.290 --> 00:12:14.280
I believe that should now

257
00:12:15.840 --> 00:12:16.673
there we go.

258
00:12:16.673 --> 00:12:19.700
Every other letter is being upper and lower-cased.

259
00:12:19.700 --> 00:12:21.290
So that's our first filter.

260
00:12:21.290 --> 00:12:24.051
And I'm just sort of hard-coding that here.

261
00:12:24.051 --> 00:12:25.750
But what would be cool is

262
00:12:25.750 --> 00:12:30.750
if we could use it based on the selection that we have.

263
00:12:31.080 --> 00:12:32.660
So how could we do that?

264
00:12:32.660 --> 00:12:35.060
Well first line of our transform text

265
00:12:35.060 --> 00:12:37.083
could just be grabbing the filter.

266
00:12:37.083 --> 00:12:41.000
So const filter is equal to document.querySelector

267
00:12:42.190 --> 00:12:47.190
and we will grab the name is equal to filter.

268
00:12:47.670 --> 00:12:50.176
And we will find the one that is checked.

269
00:12:50.176 --> 00:12:54.513
And then we grab a .value from the end of that.

270
00:12:55.840 --> 00:12:58.193
Then console.log the filter.

271
00:13:02.360 --> 00:13:07.170
Now when I type in it it says funky, sarcastic, and unable.

272
00:13:07.170 --> 00:13:08.080
Why does that work?

273
00:13:08.080 --> 00:13:09.560
Well this little thing right here,

274
00:13:09.560 --> 00:13:12.370
every time it runs it's gonna queryselector

275
00:13:12.370 --> 00:13:15.914
for the thing that is selected.

276
00:13:15.914 --> 00:13:18.920
And then a .value on the end

277
00:13:18.920 --> 00:13:21.639
will give you the value of the input,

278
00:13:21.639 --> 00:13:23.757
which is this right here.

279
00:13:23.757 --> 00:13:27.000
Another way we could have done it is a filter.

280
00:13:27.000 --> 00:13:29.737
Since we already have these inputs here

281
00:13:29.737 --> 00:13:32.935
we could do something like this.

282
00:13:32.935 --> 00:13:34.130
What do we got?

283
00:13:34.130 --> 00:13:35.810
Our filter inputs

284
00:13:35.810 --> 00:13:39.650
and we could just find the input

285
00:13:39.650 --> 00:13:43.883
where the input.checked is true.

286
00:13:45.930 --> 00:13:48.060
Oh it's not, find is not a function.

287
00:13:48.060 --> 00:13:48.893
Why not?

288
00:13:48.893 --> 00:13:52.690
Well filter inputs is nodelist, not an array.

289
00:13:52.690 --> 00:13:56.083
So we could wrap that in array.from.

290
00:13:59.369 --> 00:14:00.360
There we go.

291
00:14:00.360 --> 00:14:05.360
And I think if I change that, yeah it changes it.

292
00:14:06.090 --> 00:14:07.500
That's probably better.

293
00:14:07.500 --> 00:14:08.770
I think that's better because like

294
00:14:08.770 --> 00:14:11.008
why rerun the queryselector?

295
00:14:11.008 --> 00:14:12.540
Like why search for it

296
00:14:12.540 --> 00:14:14.440
if you already have them.

297
00:14:14.440 --> 00:14:17.785
I think probably a filter would be faster.

298
00:14:17.785 --> 00:14:21.315
Not that this app needs performance.

299
00:14:21.315 --> 00:14:22.800
But I dunno.

300
00:14:22.800 --> 00:14:24.050
It's good to think about.

301
00:14:24.050 --> 00:14:26.346
So let's actually change that now.

302
00:14:26.346 --> 00:14:27.750
We'll comment that one out.

303
00:14:27.750 --> 00:14:29.696
Just leave it in there for you.

304
00:14:29.696 --> 00:14:33.100
But we'll say const filter is equal to array.from

305
00:14:33.100 --> 00:14:35.880
we convert the filterinputs nodelist to an array

306
00:14:35.880 --> 00:14:40.880
and then we find it and we loop over each input.

307
00:14:42.010 --> 00:14:45.470
And check for the one that has a checked attribute.

308
00:14:45.470 --> 00:14:47.190
And then we grab the value out of that.

309
00:14:47.190 --> 00:14:48.370
Because we don't want the dumb node

310
00:14:48.370 --> 00:14:51.650
we want simply the value out of it.

311
00:14:51.650 --> 00:14:55.577
Also, let's change this filter input to an array once.

312
00:14:55.577 --> 00:14:58.660
Because this would also be turning it into an array

313
00:14:58.660 --> 00:15:01.180
every time the person types.

314
00:15:01.180 --> 00:15:03.336
So why don't we take that off

315
00:15:03.336 --> 00:15:08.120
and go up here and turn it into an array just once

316
00:15:08.120 --> 00:15:09.290
on pageload?

317
00:15:09.290 --> 00:15:12.420
Because it's unnecessary to have to keep doing that.

318
00:15:12.420 --> 00:15:14.333
So let's see if that still works.

319
00:15:16.480 --> 00:15:17.767
Okay.

320
00:15:17.767 --> 00:15:18.753
That seems to still be working.

321
00:15:20.290 --> 00:15:22.390
We'll get rid of this console.log filter

322
00:15:22.390 --> 00:15:23.700
and the modified,

323
00:15:23.700 --> 00:15:25.890
make sure everything is still good.

324
00:15:25.890 --> 00:15:26.723
Good!

325
00:15:26.723 --> 00:15:30.150
And then what we can do is take this filter variable

326
00:15:30.150 --> 00:15:32.860
and use it as a property lookup instead

327
00:15:32.860 --> 00:15:34.520
of hard-coding sarcastic here.

328
00:15:34.520 --> 00:15:35.444
So delete that,

329
00:15:35.444 --> 00:15:39.536
and now we wanna say filters.the filter they selected

330
00:15:39.536 --> 00:15:42.816
but in our case because this is a variable

331
00:15:42.816 --> 00:15:45.580
and not a property we need to use square-brackets

332
00:15:45.580 --> 00:15:47.233
to lookup the property.

333
00:15:48.660 --> 00:15:52.030
And now the sarcastic should still work.

334
00:15:52.030 --> 00:15:54.530
And then funky doesn't work and unable doesn't work

335
00:15:54.530 --> 00:15:56.573
because we haven't done those just yet.

336
00:15:57.410 --> 00:15:58.280
All right.

337
00:15:58.280 --> 00:16:00.193
Let's do funky now.

338
00:16:02.550 --> 00:16:04.530
Grab a letter.

339
00:16:04.530 --> 00:16:06.440
Now we need some sort of like dictionary

340
00:16:06.440 --> 00:16:08.110
or lookup of funky letters.

341
00:16:08.110 --> 00:16:11.010
And if you go into the demo or the finished version

342
00:16:11.010 --> 00:16:12.240
you'll see this.

343
00:16:12.240 --> 00:16:14.600
I want you to go ahead and copy-paste this.

344
00:16:14.600 --> 00:16:18.192
Along with the eslint-disable and enable comments.

345
00:16:18.192 --> 00:16:19.750
So if we go up here,

346
00:16:19.750 --> 00:16:21.357
I'm just gonna paste it in.

347
00:16:21.357 --> 00:16:23.600
What this is is an object,

348
00:16:23.600 --> 00:16:25.359
if I take off this eslint here

349
00:16:25.359 --> 00:16:27.804
you'll see it puts it all on its own line.

350
00:16:27.804 --> 00:16:30.400
And that's probably easy for us to look at it.

351
00:16:30.400 --> 00:16:34.090
And this is just a lookup of different,

352
00:16:34.090 --> 00:16:35.795
like f is this weird f.

353
00:16:35.795 --> 00:16:38.004
G is this uppercase g.

354
00:16:38.004 --> 00:16:39.650
I don't know just a bunch

355
00:16:39.650 --> 00:16:42.150
of kind of funky letters that we have.

356
00:16:42.150 --> 00:16:44.660
The reason why I have eslint disable and enable

357
00:16:44.660 --> 00:16:47.210
is because I don't want it to format one-per-line.

358
00:16:47.210 --> 00:16:49.760
That's gonna make my file way too long.

359
00:16:49.760 --> 00:16:52.717
So you can temporarily turn off eslint

360
00:16:52.717 --> 00:16:54.878
and temporarily turn it back on

361
00:16:54.878 --> 00:16:57.933
with these little comments here and that will stop it.

362
00:16:58.840 --> 00:17:00.820
So we'll go into our funky here.

363
00:17:00.820 --> 00:17:04.550
And what we need to do is to first check

364
00:17:04.550 --> 00:17:07.463
if there is a letter.

365
00:17:09.337 --> 00:17:13.093
A funky letter for this case.

366
00:17:14.522 --> 00:17:19.000
And then if there is not, check if there

367
00:17:19.000 --> 00:17:21.423
is a lowercase version.

368
00:17:23.580 --> 00:17:28.580
Then if there is nothing, return the regular letter.

369
00:17:31.750 --> 00:17:34.080
So first one, first check if there is a funky letter

370
00:17:34.080 --> 00:17:35.410
for this one.

371
00:17:35.410 --> 00:17:37.440
So we have our letter and we can use the letter

372
00:17:37.440 --> 00:17:40.339
to look it up inside of our funkyletters.

373
00:17:40.339 --> 00:17:41.810
So if somebody types uppercase T

374
00:17:41.810 --> 00:17:45.170
we'll know that there is a t for us.

375
00:17:45.170 --> 00:17:46.543
So we'll go here.

376
00:17:49.043 --> 00:17:52.510
We'll say let funkyletter is equal

377
00:17:52.510 --> 00:17:54.580
to funkyletters, square-bracket,

378
00:17:54.580 --> 00:17:56.303
the letter that we're looking for.

379
00:17:59.913 --> 00:18:02.470
And we'll say if there is a funkyletter,

380
00:18:04.360 --> 00:18:08.793
return the funkyletter.

381
00:18:12.150 --> 00:18:15.400
And then at the end here we'll simply just return

382
00:18:15.400 --> 00:18:17.360
the original letter

383
00:18:17.360 --> 00:18:19.840
because there's nothing there.

384
00:18:19.840 --> 00:18:21.210
So let's try that.

385
00:18:21.210 --> 00:18:22.313
Go to funky,

386
00:18:23.280 --> 00:18:25.420
Okay, so that's working okay.

387
00:18:25.420 --> 00:18:29.310
So okay, I am trying this.

388
00:18:29.310 --> 00:18:32.000
Now there are some of them where we want to

389
00:18:32.000 --> 00:18:33.670
if there isn't one, we'll check

390
00:18:33.670 --> 00:18:35.130
for the lowercase version of it.

391
00:18:35.130 --> 00:18:39.530
Because some of them like f have a lowercase

392
00:18:39.530 --> 00:18:40.670
and an uppercase version.

393
00:18:40.670 --> 00:18:42.550
So if I just type in f right now

394
00:18:44.380 --> 00:18:45.810
it's giving me that.

395
00:18:45.810 --> 00:18:49.150
And if I type in uppercase F it gives me a different one.

396
00:18:49.150 --> 00:18:51.550
So some of them only have an uppercase

397
00:18:51.550 --> 00:18:52.820
or a lowercase version.

398
00:18:52.820 --> 00:18:55.890
So we'll check for that next.

399
00:18:55.890 --> 00:19:00.890
So say let, and we'll have to change this back

400
00:19:01.960 --> 00:19:02.860
to a let here.

401
00:19:02.860 --> 00:19:07.860
And we'll say funkyletter is equal to funkyletters letter

402
00:19:11.720 --> 00:19:14.290
but we put the to.lowercase on the end

403
00:19:14.290 --> 00:19:15.460
so we check there.

404
00:19:15.460 --> 00:19:17.410
And we'll do the same thing,

405
00:19:17.410 --> 00:19:18.270
duplicate this.

406
00:19:18.270 --> 00:19:20.380
If there's a funkyletter then return it.

407
00:19:20.380 --> 00:19:23.441
And then we have our last little return letter.

408
00:19:23.441 --> 00:19:25.163
Let's try funky.

409
00:19:27.750 --> 00:19:29.000
Looking good!

410
00:19:29.000 --> 00:19:31.750
Last one is unable.

411
00:19:31.750 --> 00:19:35.524
And this will take in a letter

412
00:19:35.524 --> 00:19:40.510
and what we're gonna do is one-in-three spaces

413
00:19:40.510 --> 00:19:42.230
we'll use dot-dot-dot.

414
00:19:42.230 --> 00:19:46.840
So we need a random number between zero and two.

415
00:19:46.840 --> 00:19:50.170
So we need like one, two, or three or zero, one, and two.

416
00:19:50.170 --> 00:19:54.140
And the way that we can do that is if we have math.random

417
00:19:55.456 --> 00:19:58.360
and multiply that by three.

418
00:19:58.360 --> 00:20:02.200
We're going to get a random number.

419
00:20:02.200 --> 00:20:04.793
And we can wrap that in a math.floor.

420
00:20:06.710 --> 00:20:11.060
And get two, zero, two, two, one, zero

421
00:20:11.060 --> 00:20:13.140
so we either get zero, one, or two.

422
00:20:13.140 --> 00:20:14.680
So we'll do that here.

423
00:20:14.680 --> 00:20:16.720
Say const random is equal

424
00:20:16.720 --> 00:20:21.047
to math.floor, math.random times three.

425
00:20:30.980 --> 00:20:35.674
And here I'll say if the letter is equal to a space

426
00:20:35.674 --> 00:20:40.674
and the random is equal to a two,

427
00:20:41.520 --> 00:20:42.910
so one and three.

428
00:20:42.910 --> 00:20:46.013
Then return dot-dot-dot

429
00:20:47.500 --> 00:20:49.420
else... we don't even really need the else

430
00:20:49.420 --> 00:20:52.430
we'll just simply return the letter otherwise.

431
00:20:52.430 --> 00:20:55.530
So what that should do now is...

432
00:20:57.040 --> 00:21:00.490
I am getting some tacos...

433
00:21:00.490 --> 00:21:05.450
So that every space there's a one and three chance that

434
00:21:05.450 --> 00:21:08.500
that space is going to turn into a dot-dot-dot

435
00:21:08.500 --> 00:21:11.270
rather than a regular space

436
00:21:11.270 --> 00:21:14.678
which is how for some reason some people type.

437
00:21:14.678 --> 00:21:16.170
(laughs)

438
00:21:16.170 --> 00:21:18.741
Last thing we wanna do here is that when I click

439
00:21:18.741 --> 00:21:21.210
on each of these it should trigger that filter

440
00:21:21.210 --> 00:21:23.444
and show me exactly what there is.

441
00:21:23.444 --> 00:21:26.687
So what we can do is we can take our filterinputs

442
00:21:26.687 --> 00:21:29.363
and we can loop over each one of them.

443
00:21:30.400 --> 00:21:34.680
And we'll take the input, the input.addeventListener

444
00:21:34.680 --> 00:21:38.023
and listen for a, not a click, an input event.

445
00:21:39.460 --> 00:21:41.557
And when there is an input event

446
00:21:41.557 --> 00:21:45.030
I will do another function here.

447
00:21:45.030 --> 00:21:47.520
Which is going to be the event

448
00:21:51.530 --> 00:21:52.900
and we don't actually need the event

449
00:21:52.900 --> 00:21:55.600
so I'm just going to use the regular parenthesis here.

450
00:21:57.860 --> 00:22:00.012
And what we'll do here is

451
00:22:00.012 --> 00:22:04.510
we will trigger the transform text

452
00:22:05.390 --> 00:22:09.063
and pass it the textarea.value.

453
00:22:13.370 --> 00:22:14.410
So what do we do?

454
00:22:14.410 --> 00:22:16.090
We loop over the inputs,

455
00:22:16.090 --> 00:22:18.260
each input has an eventlistener

456
00:22:18.260 --> 00:22:22.440
for an inputevent and then when that inputevent triggers

457
00:22:22.440 --> 00:22:25.820
we run another function that simply runs our transform text

458
00:22:25.820 --> 00:22:29.850
and passes it the value of the text.

459
00:22:29.850 --> 00:22:31.923
So looking good!

460
00:22:32.830 --> 00:22:34.520
I like it!

461
00:22:34.520 --> 00:22:36.510
So hopefully you learned a thing or two.

462
00:22:36.510 --> 00:22:39.355
The real thing I wanted to get across here

463
00:22:39.355 --> 00:22:43.470
is that you can store methods inside of an object

464
00:22:43.470 --> 00:22:45.100
to sort of keep them together

465
00:22:45.100 --> 00:22:48.680
as well as look them up on that object

466
00:22:48.680 --> 00:22:52.893
with a variable that is populated from some external input.

