WEBVTT

1
00:00:00.000 --> 00:00:02.583
(Upbeat music)

2
00:00:04.420 --> 00:00:05.620
<v ->All right, now we're going to learn</v>

3
00:00:05.620 --> 00:00:07.330
about creating elements.

4
00:00:07.330 --> 00:00:10.770
Let's make a new JavaScript file,

5
00:00:10.770 --> 00:00:13.500
let's just call it Creating.js.

6
00:00:13.500 --> 00:00:15.070
If it's already there for you,

7
00:00:15.070 --> 00:00:17.140
I'm not sure if I'll give you a starter or not,

8
00:00:17.140 --> 00:00:19.307
but if it's already there for you just open it on up,

9
00:00:19.307 --> 00:00:22.682
and then we want to, let's switch it,

10
00:00:22.682 --> 00:00:27.322
so we'll get rid of the-dom.js and we'll call it creating.js

11
00:00:27.322 --> 00:00:30.360
and let's just, console log.

12
00:00:30.360 --> 00:00:33.023
It works, make sure that everything is working fine.

13
00:00:34.900 --> 00:00:35.733
There we go.

14
00:00:35.733 --> 00:00:36.620
Cool.

15
00:00:36.620 --> 00:00:37.870
So if you wanna create elements,

16
00:00:37.870 --> 00:00:40.470
you wanna create HTML in JavaScript,

17
00:00:40.470 --> 00:00:42.410
it can be done a few different ways.

18
00:00:42.410 --> 00:00:44.973
The main way is with the Document.createElement.

19
00:00:46.000 --> 00:00:49.110
So let's just go look that up.

20
00:00:49.110 --> 00:00:52.650
Document create element, MDN, and you can see,

21
00:00:52.650 --> 00:00:55.390
like everything, there are good docs for it

22
00:00:55.390 --> 00:00:56.330
and we can look it up.

23
00:00:56.330 --> 00:00:58.470
So Document.createElement.

24
00:00:58.470 --> 00:01:03.220
You give it a tagName, and then there are optional, options.

25
00:01:03.220 --> 00:01:08.090
So this square brackets here, means that it is optional

26
00:01:08.090 --> 00:01:10.865
when we're looking at the syntax of it and in here it says

27
00:01:10.865 --> 00:01:15.180
an optional create, ElementCreationOptions which contains

28
00:01:15.180 --> 00:01:19.910
a property named is, whose value is the tag name for

29
00:01:19.910 --> 00:01:23.290
a custom element previously defined by customElements.

30
00:01:23.290 --> 00:01:25.340
Oh this is part of Web components.

31
00:01:25.340 --> 00:01:29.140
So unless you are doing anything with Web components,

32
00:01:29.140 --> 00:01:32.260
which we are not, you don't really need that option.

33
00:01:32.260 --> 00:01:35.380
So basically createElement takes a tagName and that's it.

34
00:01:35.380 --> 00:01:38.270
So let's go ahead and make a paragraph tag.

35
00:01:38.270 --> 00:01:42.482
So const myParagraph is equal to,

36
00:01:42.482 --> 00:01:44.200
lets get rid of the sidebar here,

37
00:01:44.200 --> 00:01:47.820
document.create element and then you pass set

38
00:01:47.820 --> 00:01:49.230
what element you want.

39
00:01:49.230 --> 00:01:54.230
So if we go to our thing and refresh, nothing is new there.

40
00:01:55.220 --> 00:01:57.205
Let's consle.log it.

41
00:01:57.205 --> 00:01:59.533
Consle.log, myParagraph.

42
00:02:01.455 --> 00:02:02.440
There it is.

43
00:02:02.440 --> 00:02:04.180
That's an actual paragraph element,

44
00:02:04.180 --> 00:02:06.330
but its not on the page

45
00:02:06.330 --> 00:02:07.630
and that's cause we actually haven't put it

46
00:02:07.630 --> 00:02:08.720
on to the page yet.

47
00:02:08.720 --> 00:02:10.660
We've just created it and it's in,

48
00:02:10.660 --> 00:02:12.390
it's in what we call memory right now.

49
00:02:12.390 --> 00:02:14.120
It's in JavaScript's memory.

50
00:02:14.120 --> 00:02:18.470
So there is no sort of short cut to do something like,

51
00:02:18.470 --> 00:02:21.520
I would love if you could do p.special,

52
00:02:21.520 --> 00:02:23.180
if you wanted to give it a class

53
00:02:23.180 --> 00:02:25.650
or maybe if you wanted to give it like an attribute,

54
00:02:25.650 --> 00:02:28.020
of like title equals hey.

55
00:02:28.020 --> 00:02:31.070
That is not possible via Document.createElement.

56
00:02:31.070 --> 00:02:33.740
So if you want to add or remove,

57
00:02:33.740 --> 00:02:36.830
or do anything with the attributes of it we must do it

58
00:02:36.830 --> 00:02:37.690
the way that we've learned.

59
00:02:37.690 --> 00:02:39.880
So we'll take myparagraph and

60
00:02:39.880 --> 00:02:44.123
I'll just put textcontent is equal to I am a P,

61
00:02:45.010 --> 00:02:47.230
and let's add a class to it.

62
00:02:47.230 --> 00:02:51.123
So myparagraph.classlist, .add,

63
00:02:52.436 --> 00:02:53.953
and we'll say special.

64
00:02:55.900 --> 00:02:57.835
Now if we refresh, you see now

65
00:02:57.835 --> 00:03:00.840
we've got that entire paragraph of class special and

66
00:03:00.840 --> 00:03:01.673
I am a P.

67
00:03:01.673 --> 00:03:03.670
So any of the attributes that we just learned

68
00:03:03.670 --> 00:03:07.160
about in the last couple videos can be done exactly this way

69
00:03:07.160 --> 00:03:10.152
because that is a bonafide element after using

70
00:03:10.152 --> 00:03:12.920
Document.createElement.

71
00:03:12.920 --> 00:03:14.568
Let's go ahead and make a couple more elements

72
00:03:14.568 --> 00:03:16.270
and then we figure out how do we actually

73
00:03:16.270 --> 00:03:18.503
put them in to the dom ourselves.

74
00:03:18.503 --> 00:03:21.360
So lets make an image.

75
00:03:21.360 --> 00:03:26.360
So const myImage is equal to document.createElement, image.

76
00:03:30.560 --> 00:03:35.560
Image.source is equal to, let's grab this picsum.photos URL,

77
00:03:44.310 --> 00:03:46.320
and let's console log.

78
00:03:46.320 --> 00:03:47.433
Oh it's not img, its myImage.

79
00:03:50.090 --> 00:03:51.290
Let's see how its going.

80
00:03:52.160 --> 00:03:52.993
Beautiful.

81
00:03:52.993 --> 00:03:55.060
We'll have to put an alt on there as well.

82
00:03:58.830 --> 00:03:59.963
Nice photo,

83
00:04:03.320 --> 00:04:04.153
there we go,

84
00:04:07.470 --> 00:04:09.780
and then lets make a div.

85
00:04:09.780 --> 00:04:13.973
So we just duplicate this and imma call it myDiv.

86
00:04:15.637 --> 00:04:16.470
Div.

87
00:04:17.453 --> 00:04:18.653
We'll give it a class.

88
00:04:20.741 --> 00:04:22.680
We could maybe call it wrapper

89
00:04:26.140 --> 00:04:27.803
and let's console log it,

90
00:04:30.983 --> 00:04:31.816
myDiv.

91
00:04:33.732 --> 00:04:34.565
All right good.

92
00:04:34.565 --> 00:04:36.010
So we've got a paragraph, we've got an image,

93
00:04:36.010 --> 00:04:37.490
and we have a wrapper.

94
00:04:37.490 --> 00:04:42.130
Now the question is how do we add it to the page?

95
00:04:42.130 --> 00:04:47.130
Well we use another API called appendChild,

96
00:04:47.300 --> 00:04:50.571
so you actually need to go off and grab some sort of element

97
00:04:50.571 --> 00:04:52.770
and call.appendChild against it.

98
00:04:52.770 --> 00:04:55.960
So if you just want to dump it straight into the body,

99
00:04:55.960 --> 00:05:00.960
like at the very bottom, right underneath here.

100
00:05:01.020 --> 00:05:04.490
You can just grab the document.body,

101
00:05:04.490 --> 00:05:06.050
so if you wanna grab the body tag

102
00:05:06.050 --> 00:05:07.470
it's readily available to us.

103
00:05:07.470 --> 00:05:10.080
You'll notice that I'm not saying const body

104
00:05:10.080 --> 00:05:14.470
is equal to document.querySelector body,

105
00:05:14.470 --> 00:05:18.200
and that is totally valid, nothing wrong with doing that,

106
00:05:18.200 --> 00:05:21.210
it's just that the document actually gives us reference

107
00:05:21.210 --> 00:05:23.790
to the body element quickly via a property.

108
00:05:23.790 --> 00:05:26.572
It's not every element is accessible that way but

109
00:05:26.572 --> 00:05:30.330
some of the popular ones like body are available to us

110
00:05:30.330 --> 00:05:32.840
directly on the document so there's no need to actually

111
00:05:32.840 --> 00:05:34.330
select the body element.

112
00:05:34.330 --> 00:05:38.648
So document.body and then we'll call that appendChild

113
00:05:38.648 --> 00:05:41.343
and appendChild, oh let's look it up.

114
00:05:42.923 --> 00:05:45.043
AppendChild mdn.

115
00:05:49.320 --> 00:05:51.670
The method to add a node,

116
00:05:51.670 --> 00:05:54.380
so again a node can be either an element

117
00:05:54.380 --> 00:05:59.380
or just a plain piece of text, which is the node.

118
00:05:59.450 --> 00:06:01.920
By the specified, let's take a look.

119
00:06:01.920 --> 00:06:03.974
The parameters it takes aChild,

120
00:06:03.974 --> 00:06:04.807
(chuckles)

121
00:06:04.807 --> 00:06:05.640
and that's it.

122
00:06:05.640 --> 00:06:06.473
(chuckles)

123
00:06:06.473 --> 00:06:09.240
So let's go ahead and try that .appendChild,

124
00:06:09.240 --> 00:06:10.710
let's try the

125
00:06:11.800 --> 00:06:12.717
myParagraph

126
00:06:17.621 --> 00:06:18.454
there it is.

127
00:06:18.454 --> 00:06:21.580
I am a P, and if we inspect it you'll see

128
00:06:21.580 --> 00:06:25.233
that it has injected it into the dom for us.

129
00:06:26.340 --> 00:06:30.123
Now we could maybe say like myDiv,

130
00:06:32.470 --> 00:06:34.470
and you'll see that the div is being popped

131
00:06:34.470 --> 00:06:36.160
in there, oh its gotta class a wrapper,

132
00:06:36.160 --> 00:06:38.810
so it's picking up that white text that I have

133
00:06:38.810 --> 00:06:40.950
and then we can actually go a little bit further

134
00:06:40.950 --> 00:06:42.663
and say myDiv.appendChild.

135
00:06:43.570 --> 00:06:46.335
So appendChild can be called against any node,

136
00:06:46.335 --> 00:06:48.040
so we can say appendChild,

137
00:06:48.040 --> 00:06:52.023
we'll put the myParagraph inside of that.

138
00:06:54.470 --> 00:06:56.930
Now I see, look at, it's showing up inside of there,

139
00:06:56.930 --> 00:06:59.010
and the same thing can go for myImage,

140
00:07:01.383 --> 00:07:03.010
and now we see that the image and the paragraph

141
00:07:03.010 --> 00:07:03.843
is showing up.

142
00:07:03.843 --> 00:07:08.580
Now its probably better to do that in a reverse order.

143
00:07:08.580 --> 00:07:09.413
Why?

144
00:07:09.413 --> 00:07:12.690
Because every single time that you use appendChild,

145
00:07:12.690 --> 00:07:13.730
what you're doing is,

146
00:07:13.730 --> 00:07:17.210
you're modifying the dom and that causes, in the browser,

147
00:07:17.210 --> 00:07:19.897
what is called a reflow, meaning the browser goes,

148
00:07:19.897 --> 00:07:22.860
"Oh, there's something new on the page, something changed,"

149
00:07:22.860 --> 00:07:25.160
whether it's a piece of text change or whether it's a bunch

150
00:07:25.160 --> 00:07:27.830
of, new elements have been added.

151
00:07:27.830 --> 00:07:31.070
It says I need to repaint what is on the actual page

152
00:07:31.070 --> 00:07:33.690
cause the browser is trying to convert this HTML

153
00:07:33.690 --> 00:07:38.070
and CSS into what we see in the browser, right.

154
00:07:38.070 --> 00:07:42.060
So if you're doing this three times really quickly,

155
00:07:42.060 --> 00:07:46.330
you are triggering three concurrent, or not concurrent.

156
00:07:46.330 --> 00:07:48.720
What is it when it comes one after another?

157
00:07:48.720 --> 00:07:51.460
It's like a waterfall of reflows on the page.

158
00:07:51.460 --> 00:07:55.890
So it does it one, two, three, and if you do that a lot

159
00:07:55.890 --> 00:07:59.170
it can start to eat into other things on your page

160
00:07:59.170 --> 00:08:01.400
and cause the experience to go down.

161
00:08:01.400 --> 00:08:05.760
Most notably if you have animations or the user is scrolling

162
00:08:05.760 --> 00:08:08.240
as this is happening it can start to cause

163
00:08:08.240 --> 00:08:10.960
sort of a janky feeling for the user.

164
00:08:10.960 --> 00:08:15.783
So what you can do is instead, you take myDiv.

165
00:08:17.760 --> 00:08:20.173
You append the paragraph and you take myDiv

166
00:08:20.173 --> 00:08:21.240
and you append the child,

167
00:08:21.240 --> 00:08:25.150
and then before we've done anything, let's take a look,

168
00:08:25.150 --> 00:08:27.810
so it's not on the page anywhere but if you take a look at

169
00:08:27.810 --> 00:08:30.720
myDiv, you'll see that we have our wrapper,

170
00:08:30.720 --> 00:08:32.980
and there's our paragraph and there's our images,

171
00:08:32.980 --> 00:08:35.730
all inside of that and then we simply just do

172
00:08:35.730 --> 00:08:37.760
one touch of the dom.

173
00:08:37.760 --> 00:08:41.160
We dump it into the dom once and that will only cause

174
00:08:41.160 --> 00:08:44.104
a reflower repaint once, which is great.

175
00:08:44.104 --> 00:08:46.565
So there we go, look.

176
00:08:46.565 --> 00:08:48.300
Looks great to us.

177
00:08:48.300 --> 00:08:50.680
It actually, technically does two repaints.

178
00:08:50.680 --> 00:08:53.320
Once when you dump the div in and

179
00:08:53.320 --> 00:08:55.500
a second time once the image loads, so.

180
00:08:55.500 --> 00:08:56.560
Its not the end of the world.

181
00:08:56.560 --> 00:08:58.100
That's how the browser works,

182
00:08:58.100 --> 00:09:00.380
you can do stuff to load it before it goes in,

183
00:09:00.380 --> 00:09:04.950
but it's generally a little bit more work than it's worth.

184
00:09:04.950 --> 00:09:06.190
So that is how,

185
00:09:06.190 --> 00:09:09.600
that's one way to actually go ahead and create elements.

186
00:09:09.600 --> 00:09:12.680
It's with the createElement API.

187
00:09:12.680 --> 00:09:16.662
You may also find in your searches that there is just,

188
00:09:16.662 --> 00:09:19.503
like element.append,

189
00:09:21.830 --> 00:09:26.485
and let's look at the, here we go ParentNode.append.

190
00:09:26.485 --> 00:09:30.300
You might find this where append allows you to inject

191
00:09:30.300 --> 00:09:33.380
a node or a dom string into it,

192
00:09:33.380 --> 00:09:36.470
and this is gonna work pretty similar.

193
00:09:36.470 --> 00:09:39.000
You can see here there's still creating element

194
00:09:39.000 --> 00:09:40.880
but they are just appending,

195
00:09:40.880 --> 00:09:45.070
instead of appending a child and the,

196
00:09:45.070 --> 00:09:46.280
there's some kind of nice stuff

197
00:09:46.280 --> 00:09:47.670
that's coming up around that.

198
00:09:47.670 --> 00:09:51.880
However it does not currently work in Internet Explorer

199
00:09:51.880 --> 00:09:55.530
and it just, as I'm recording this, got into Edge.

200
00:09:55.530 --> 00:09:59.274
So I would probably pump the breaks on that for,

201
00:09:59.274 --> 00:10:04.274
maybe until September 2021.

202
00:10:06.180 --> 00:10:09.400
So (chuckles) if you're listening to this after then,

203
00:10:09.400 --> 00:10:12.750
go ahead and use it, but for now there's no sweat

204
00:10:12.750 --> 00:10:14.683
in using appendChild.

205
00:10:16.840 --> 00:10:20.960
There's also another API that I'm a big fan of,

206
00:10:20.960 --> 00:10:23.680
and we've sort of looked at it's sibling,

207
00:10:23.680 --> 00:10:25.373
and that is insertAdjacentElement.

208
00:10:26.320 --> 00:10:29.870
So we looked at insertAdjacentText in order to add

209
00:10:29.870 --> 00:10:34.193
text before and after elements and inside of it.

210
00:10:34.193 --> 00:10:37.770
Pretty much the same API works with elements,

211
00:10:37.770 --> 00:10:39.674
and this is really handy because,

212
00:10:39.674 --> 00:10:44.674
let's say we have this div with the paragraph here,

213
00:10:46.120 --> 00:10:46.953
and then you go, "Oh shoot!

214
00:10:46.953 --> 00:10:50.270
"I need to add something to the front of that," right?

215
00:10:50.270 --> 00:10:54.697
Like right here, so like, "Oh shoot! We need to

216
00:10:54.697 --> 00:10:58.750
"add something to the top, like a heading!"

217
00:10:58.750 --> 00:10:59.583
Let's do that.

218
00:10:59.583 --> 00:11:02.470
So we'll say const heading is equal to

219
00:11:02.470 --> 00:11:05.803
document.createElement, h1 probably h2,

220
00:11:09.565 --> 00:11:11.465
and we'll take the heading.textcontent

221
00:11:14.030 --> 00:11:17.793
we'll set that to Cool Things.

222
00:11:19.760 --> 00:11:24.360
Now I wanna put the heading before this I am a P,

223
00:11:24.360 --> 00:11:26.980
and if we were to take myDiv.appendChild

224
00:11:29.250 --> 00:11:30.400
and append the heading.

225
00:11:34.090 --> 00:11:36.550
It gets added after the fact, so that's where,

226
00:11:36.550 --> 00:11:38.437
this really slick API,

227
00:11:38.437 --> 00:11:42.060
and this is somewhat new but it is very well supported.

228
00:11:42.060 --> 00:11:43.070
Look at that.

229
00:11:43.070 --> 00:11:43.903
(making a prrrt sound)

230
00:11:43.903 --> 00:11:46.580
Green all over the place, it works super well.

231
00:11:46.580 --> 00:11:48.930
So it works like appendChild

232
00:11:48.930 --> 00:11:51.927
but it's just insertAdjacentElement.

233
00:11:52.860 --> 00:11:56.600
It takes two arguments, first where do you want it to go,

234
00:11:56.600 --> 00:11:58.913
so we'll say, after begin,

235
00:12:00.250 --> 00:12:03.300
and theN second what element do you wanna to append in

236
00:12:03.300 --> 00:12:04.920
or what element do you wanna insert,

237
00:12:04.920 --> 00:12:07.530
and we just pass a reference to our heading and

238
00:12:07.530 --> 00:12:10.440
that will then pop it before the things

239
00:12:10.440 --> 00:12:11.560
that we actually want.

240
00:12:11.560 --> 00:12:13.460
We might say like what's the difference between that

241
00:12:13.460 --> 00:12:16.090
and before begin, we looked at this kind of already

242
00:12:16.090 --> 00:12:17.410
but what that will do is,

243
00:12:17.410 --> 00:12:20.090
it will, it will insert it as sort of

244
00:12:20.090 --> 00:12:24.410
a sibling to the actual wrapper, instead of inside of it.

245
00:12:24.410 --> 00:12:28.730
So that's something that you may also need to use

246
00:12:28.730 --> 00:12:30.750
if you have a list of cards,

247
00:12:30.750 --> 00:12:33.490
and you need to put a card in between things,

248
00:12:33.490 --> 00:12:35.520
you could like grab the second card and

249
00:12:35.520 --> 00:12:37.190
then put it in right before the second card

250
00:12:37.190 --> 00:12:39.370
and it'll slot itself right in the middle.

251
00:12:39.370 --> 00:12:42.770
So insertAdjacentElement is pretty popular.

252
00:12:42.770 --> 00:12:44.200
I like that one a lot.

253
00:12:44.200 --> 00:12:46.050
Let's see one more example.

254
00:12:46.050 --> 00:12:49.830
So I want you to create an unordered list

255
00:12:49.830 --> 00:12:53.310
with five items in it, and I want you to do that,

256
00:12:53.310 --> 00:12:55.410
all entirely with the APIs

257
00:12:55.410 --> 00:12:57.290
that we have just learned ourselves.

258
00:12:57.290 --> 00:13:00.410
So it should look a little bit something like this

259
00:13:02.130 --> 00:13:03.770
and then inside of it,

260
00:13:03.770 --> 00:13:08.770
I want like a li that says one, two, three, four, five,

261
00:13:12.460 --> 00:13:15.670
and I want you to maybe start with the middle one

262
00:13:15.670 --> 00:13:16.780
and then add one before.

263
00:13:16.780 --> 00:13:19.160
Just make sure, try to use all of the APIs that we have.

264
00:13:19.160 --> 00:13:22.220
So go ahead and pause it here and try to create that.

265
00:13:22.220 --> 00:13:25.830
Inject it into the dom and then come back in just a second

266
00:13:25.830 --> 00:13:28.120
and we will do that one together.

267
00:13:28.120 --> 00:13:29.470
Welcome back.

268
00:13:29.470 --> 00:13:31.350
Okay so let's make a list,

269
00:13:31.350 --> 00:13:34.100
const list equals document.createElement.

270
00:13:35.350 --> 00:13:36.603
Make an unordered list,

271
00:13:37.710 --> 00:13:41.653
and we will then make some list items.

272
00:13:43.570 --> 00:13:46.483
So const li is equal to,

273
00:13:46.483 --> 00:13:49.420
okay I know we can do this a couple times over.

274
00:13:49.420 --> 00:13:53.410
If this seems like a lot of code to write

275
00:13:53.410 --> 00:13:57.490
just to make an unordered list it's because it kinda is

276
00:13:57.490 --> 00:14:00.060
and in the next action I'm gonna show you how

277
00:14:00.060 --> 00:14:02.680
we can actually write a little bit of HTML in a string

278
00:14:02.680 --> 00:14:04.200
and inject it in,

279
00:14:04.200 --> 00:14:06.220
but for now let's get comfortable with these.

280
00:14:06.220 --> 00:14:09.880
We'll say li.textcontent is equal to one,

281
00:14:09.880 --> 00:14:12.540
actually let's start in the middle, three.

282
00:14:12.540 --> 00:14:14.890
Then we'll take our list and we'll appendChild,

283
00:14:18.143 --> 00:14:18.976
li,

284
00:14:21.680 --> 00:14:26.680
and then we'll say document.body.insertAdjacentElement.

285
00:14:28.800 --> 00:14:30.220
Let's put it at the top.

286
00:14:30.220 --> 00:14:33.453
So after begin,

287
00:14:35.220 --> 00:14:36.053
my,

288
00:14:37.840 --> 00:14:38.823
we'll call it list.

289
00:14:41.967 --> 00:14:42.800
There we go.

290
00:14:42.800 --> 00:14:46.843
So we got our unordered list being piped into the top here.

291
00:14:48.850 --> 00:14:49.683
Looks good.

292
00:14:51.500 --> 00:14:55.280
Let's go ahead and make a couple more, so li.

293
00:14:55.280 --> 00:14:57.620
Let's do the fifth one we'll create an element,

294
00:14:57.620 --> 00:15:01.473
li5.textcontent is equal to five.

295
00:15:03.900 --> 00:15:05.530
Let's use the append API here.

296
00:15:05.530 --> 00:15:08.600
So we'll take our list and we'll call append and

297
00:15:08.600 --> 00:15:10.870
just pass it li5.

298
00:15:10.870 --> 00:15:14.020
That should work just fine cause I'm not using IE or Edge.

299
00:15:14.020 --> 00:15:17.730
Good, now (chuckles) this is like so much work,

300
00:15:17.730 --> 00:15:19.660
and we don't know about loops and mapping yet

301
00:15:19.660 --> 00:15:21.960
so we can't really make that faster.

302
00:15:21.960 --> 00:15:24.650
There is something that I find myself needing to do

303
00:15:24.650 --> 00:15:27.650
every now and then and that is the ability to clone a node.

304
00:15:27.650 --> 00:15:31.780
So lets do li, li1 is equal to,

305
00:15:31.780 --> 00:15:35.907
we'll take li5 and we'll call that clone node against it,

306
00:15:35.907 --> 00:15:37.220
and what that will do is it will take

307
00:15:37.220 --> 00:15:41.130
a copy of the actual element, and then we can append it.

308
00:15:41.130 --> 00:15:45.470
So list.append, actually no we're gonna have to use

309
00:15:45.470 --> 00:15:47.800
insertAdjacent if we wanna put it at the top,

310
00:15:47.800 --> 00:15:52.800
so insertAdjacentElement and we will put it after begin

311
00:15:53.926 --> 00:15:55.790
and we wanna put the li1 in there.

312
00:15:55.790 --> 00:15:59.063
So I don't know if this is gonna work just yet, we'll see.

313
00:15:59.063 --> 00:16:03.940
Well we got an element but it is empty,

314
00:16:03.940 --> 00:16:05.670
and that is because we take a look

315
00:16:05.670 --> 00:16:07.533
at the docs for cloneNode.

316
00:16:09.115 --> 00:16:13.570
You'll see that it returns a duplicate of the node,

317
00:16:13.570 --> 00:16:15.460
which this method is called,

318
00:16:15.460 --> 00:16:17.910
so we take the node that we want, li5,

319
00:16:17.910 --> 00:16:21.366
and we call cloneNode against it and the one argument that

320
00:16:21.366 --> 00:16:22.790
we have is should it be deep.

321
00:16:22.790 --> 00:16:25.510
So does that mean that the children

322
00:16:25.510 --> 00:16:27.530
should also come along for the ride?

323
00:16:27.530 --> 00:16:32.530
In our case the only child that we have of this element is

324
00:16:33.310 --> 00:16:35.577
the actual text, and you might be thinking like,

325
00:16:35.577 --> 00:16:38.080
"Wes isn't the text part of the element?"

326
00:16:38.080 --> 00:16:41.540
And no it's a child of the element and even though,

327
00:16:41.540 --> 00:16:45.750
so the fact that it's not wrapped in an element

328
00:16:45.750 --> 00:16:48.270
like a span or a paragraph or something like that,

329
00:16:48.270 --> 00:16:50.620
makes it just a regular node.

330
00:16:50.620 --> 00:16:54.573
So what we have to do is pass true to this.

331
00:16:57.574 --> 00:17:00.380
There we go but it still says five

332
00:17:00.380 --> 00:17:05.380
so we could do li1.textcontent is equal to one.

333
00:17:08.940 --> 00:17:09.830
There we go.

334
00:17:09.830 --> 00:17:13.390
That wasn't any (chuckles) any shorter but you could see,

335
00:17:13.390 --> 00:17:15.940
is if we had like a bunch of classes

336
00:17:15.940 --> 00:17:17.710
and a bunch of child elements,

337
00:17:17.710 --> 00:17:21.040
and a bunch of attributes added to that thing,

338
00:17:21.040 --> 00:17:23.980
that might be very, very long to do and by cloning it

339
00:17:23.980 --> 00:17:27.010
all of that will sort of come along with us.

340
00:17:27.010 --> 00:17:31.110
I believe we can also tac .textcontent

341
00:17:31.110 --> 00:17:32.653
on to the end of here.

342
00:17:33.490 --> 00:17:36.890
No, no that's not gonna work, that's not gonna work.

343
00:17:36.890 --> 00:17:38.963
Let's try, no see it's all red.

344
00:17:39.800 --> 00:17:40.810
No that doesn't work.

345
00:17:40.810 --> 00:17:41.660
Forget it.

346
00:17:41.660 --> 00:17:43.000
That was a, that's a bad mistake.

347
00:17:43.000 --> 00:17:46.630
You have to do it on its own line, in order to go ahead.

348
00:17:46.630 --> 00:17:49.230
So we've got one, three, and five.

349
00:17:49.230 --> 00:17:54.120
Now the question is how do I inject two and four,

350
00:17:54.120 --> 00:17:58.395
well let's just go, I'm gonna copy this one here,

351
00:17:58.395 --> 00:18:01.145
(computer beeps)

352
00:18:02.174 --> 00:18:03.007
li4.

353
00:18:06.240 --> 00:18:10.440
Call it four, and then we'll take our li5 and

354
00:18:10.440 --> 00:18:15.230
call insertAdjacentElement and we will use

355
00:18:15.230 --> 00:18:17.900
before begin because we want this to go beside

356
00:18:17.900 --> 00:18:20.723
the fifth one, we'll use li5.

357
00:18:23.900 --> 00:18:24.973
It didn't work.

358
00:18:25.980 --> 00:18:26.813
Why not?

359
00:18:26.813 --> 00:18:28.773
Do I have any errors here?

360
00:18:33.610 --> 00:18:35.670
Oh we don't wanna, we wanna insert li,

361
00:18:35.670 --> 00:18:38.370
we can't put an element into itself.

362
00:18:38.370 --> 00:18:41.810
There we go, and then we just duplicate that real quick.

363
00:18:41.810 --> 00:18:42.840
I think you get the point.

364
00:18:42.840 --> 00:18:44.970
Feel free to end this video now if it's getting

365
00:18:44.970 --> 00:18:46.200
a little bit boring for you.

366
00:18:46.200 --> 00:18:48.933
So we'll take our li3, no two.

367
00:18:56.312 --> 00:18:57.373
Li2,

368
00:19:04.130 --> 00:19:07.687
and let's just take our first one li1

369
00:19:07.687 --> 00:19:10.153
and we'll say after end, li2.

370
00:19:14.930 --> 00:19:16.170
One, two, three, four, five,

371
00:19:16.170 --> 00:19:18.000
so that is the worlds longest

372
00:19:18.000 --> 00:19:21.490
way to create an unordered list.

373
00:19:21.490 --> 00:19:23.040
Obviously that's not what you're gonna,

374
00:19:23.040 --> 00:19:23.873
you're gonna be doing

375
00:19:23.873 --> 00:19:26.170
if you need to create something so simple like that

376
00:19:26.170 --> 00:19:29.560
but that was just a good practice in using

377
00:19:29.560 --> 00:19:32.220
all of the different APIs that are available to us

378
00:19:32.220 --> 00:19:35.160
to create elements, to set the content, to copy them,

379
00:19:35.160 --> 00:19:36.367
to clone them, and to,

380
00:19:36.367 --> 00:19:39.670
and to finally to insert them into different,

381
00:19:39.670 --> 00:19:40.900
different ways.

382
00:19:40.900 --> 00:19:42.200
In the next video we're gonna look at how

383
00:19:42.200 --> 00:19:47.200
we can actually use back text and strings that actually

384
00:19:47.430 --> 00:19:50.823
generate the HTML on a whim for us.

