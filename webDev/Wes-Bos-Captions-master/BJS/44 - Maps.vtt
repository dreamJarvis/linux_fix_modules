WEBVTT

1
00:00:01.167 --> 00:00:03.750
(upbeat music)

2
00:00:05.620 --> 00:00:07.460
<v Wes>So I'm in maps.html here,</v>

3
00:00:07.460 --> 00:00:09.820
in the playground folder, and we're gonna learn

4
00:00:09.820 --> 00:00:11.160
about this thing called a map.

5
00:00:11.160 --> 00:00:13.740
It's very similar to an object,

6
00:00:13.740 --> 00:00:16.010
however there are a couple of key differences.

7
00:00:16.010 --> 00:00:18.500
So let's learn first, how does it work,

8
00:00:18.500 --> 00:00:21.610
second, what does it do, third, why would you want

9
00:00:21.610 --> 00:00:24.610
to use one over an object, or how do you decide

10
00:00:24.610 --> 00:00:26.700
whether to use a map or an object?

11
00:00:26.700 --> 00:00:28.440
So the way that you create a map

12
00:00:28.440 --> 00:00:31.480
is you say const myMap is equal to new,

13
00:00:31.480 --> 00:00:34.260
and then we create a capital M map.

14
00:00:34.260 --> 00:00:38.130
Now in order to add items to a map, we have the set API,

15
00:00:38.130 --> 00:00:42.640
we have the .has API, and we have the .delete API.

16
00:00:42.640 --> 00:00:44.830
So let's go through all three of those real quick.

17
00:00:44.830 --> 00:00:46.940
So firstly, you take your myMap,

18
00:00:46.940 --> 00:00:49.940
and you set it, and you pass it two arguments,

19
00:00:49.940 --> 00:00:53.200
so the first one is going to be what the key

20
00:00:53.200 --> 00:00:56.020
of the map will be, so let's call it a name,

21
00:00:56.020 --> 00:01:00.000
and then you set the value of it, so I'll say Wes.

22
00:01:00.000 --> 00:01:01.840
Now that's probably not all that interesting,

23
00:01:01.840 --> 00:01:05.820
so just console log myMap, refresh, you see

24
00:01:05.820 --> 00:01:08.690
we have our map here, it gives us our entries,

25
00:01:08.690 --> 00:01:11.720
entries are the actual values in the map.

26
00:01:11.720 --> 00:01:14.440
Now if you were to use the object notation

27
00:01:14.440 --> 00:01:17.340
that we are used to, something like age is equal to 100,

28
00:01:17.340 --> 00:01:20.740
you'll see that it's actually not added in the same spot.

29
00:01:20.740 --> 00:01:23.280
It is in here, but that is a property

30
00:01:23.280 --> 00:01:27.836
on this map, and not an actual entry in our map.

31
00:01:27.836 --> 00:01:30.040
And you see you open it up, we have our key,

32
00:01:30.040 --> 00:01:32.410
which is name, and our value, which is Wes.

33
00:01:32.410 --> 00:01:34.370
So why would that be useful?

34
00:01:34.370 --> 00:01:37.360
Well, there's a couple nice things

35
00:01:37.360 --> 00:01:40.500
about this API other than it's got this nice

36
00:01:40.500 --> 00:01:42.510
set method, and we have a has method

37
00:01:42.510 --> 00:01:44.990
and a delete method we'll go into in just a second,

38
00:01:44.990 --> 00:01:47.550
but one sort of big benefit of a map

39
00:01:47.550 --> 00:01:50.910
is that the keys can be any type

40
00:01:50.910 --> 00:01:54.550
other than just, like we've talking about using

41
00:01:54.550 --> 00:01:56.810
strings or a loud variable name.

42
00:01:56.810 --> 00:02:01.440
So I could say, myMap.set, and the key could be any type.

43
00:02:01.440 --> 00:02:05.260
So it could be a number, this is a number,

44
00:02:05.260 --> 00:02:07.000
take a look at that, and you see

45
00:02:07.000 --> 00:02:12.000
that the entry has a key of 100.

46
00:02:12.070 --> 00:02:15.480
So whereas previously we've only had the ability

47
00:02:15.480 --> 00:02:19.490
to put different types in the value portion of an object,

48
00:02:19.490 --> 00:02:21.740
a map allows us to put any value

49
00:02:21.740 --> 00:02:24.170
into the key, and into the value.

50
00:02:24.170 --> 00:02:26.510
Now, why would that ever be useful?

51
00:02:26.510 --> 00:02:29.950
Well, what sometimes happens in JavaScript

52
00:02:29.950 --> 00:02:32.080
is we have these things called dictionaries.

53
00:02:32.080 --> 00:02:35.530
And a dictionary is just a way to store

54
00:02:35.530 --> 00:02:39.433
additional metadata about something else.

55
00:02:41.393 --> 00:02:43.310
What is a dictionary, if you have a word,

56
00:02:43.310 --> 00:02:46.460
you have that word, but that word doesn't include

57
00:02:46.460 --> 00:02:48.380
the whole description of what it does,

58
00:02:48.380 --> 00:02:51.680
and maybe how to pronounce it, and all that information

59
00:02:51.680 --> 00:02:55.080
about that word is not stored in the word, it's stored

60
00:02:55.080 --> 00:02:57.900
somewhere else, which is a dictionary, and if we wanna

61
00:02:57.900 --> 00:03:01.110
look that information up, we use a dictionary.

62
00:03:01.110 --> 00:03:06.110
So if I had a person, we'll say person1,

63
00:03:06.490 --> 00:03:08.770
and on that we'll have a name of Wes,

64
00:03:08.770 --> 00:03:12.150
and an age of 200, that's all the information

65
00:03:12.150 --> 00:03:16.110
I wanna store about Wes in that object.

66
00:03:16.110 --> 00:03:19.270
However, what you can do is you can use that reference

67
00:03:19.270 --> 00:03:21.950
to that object as a key in your map

68
00:03:21.950 --> 00:03:26.010
to store additional information inside of your map.

69
00:03:26.010 --> 00:03:30.730
So I could go down here and say, myMap.set,

70
00:03:30.730 --> 00:03:35.240
and now the key of that is going to be a reference

71
00:03:35.240 --> 00:03:38.100
to an object, and then the value

72
00:03:38.100 --> 00:03:41.280
could be really anything, like maybe we could store

73
00:03:41.280 --> 00:03:45.290
a string of how cool the person was.

74
00:03:45.290 --> 00:03:48.160
Now, when we take a look here, open up our map,

75
00:03:48.160 --> 00:03:52.720
you'll see that the key is actually an object,

76
00:03:52.720 --> 00:03:54.300
and the value is really cool.

77
00:03:54.300 --> 00:03:56.150
Now why would that be useful?

78
00:03:56.150 --> 00:03:58.900
Well, if at a later point in time,

79
00:03:58.900 --> 00:04:01.070
you wanted to reference that, or you wanted

80
00:04:01.070 --> 00:04:03.360
to look it up in your dictionary,

81
00:04:03.360 --> 00:04:06.690
what we can do is we can say, myMap.get,

82
00:04:09.260 --> 00:04:12.560
and we can just use the reference to person1.

83
00:04:12.560 --> 00:04:14.673
If we want to console.log that,

84
00:04:15.715 --> 00:04:17.040
you see that we see really cool.

85
00:04:17.040 --> 00:04:19.930
So what we've done there, is instead of having

86
00:04:19.930 --> 00:04:24.450
to put a unique string, or an ID, or something else,

87
00:04:24.450 --> 00:04:26.140
we've simply just used the reference

88
00:04:26.140 --> 00:04:28.680
of the object as the key in the map

89
00:04:28.680 --> 00:04:30.970
to store some additional information.

90
00:04:30.970 --> 00:04:33.840
Similarly, all of the values can be any type as well.

91
00:04:33.840 --> 00:04:36.850
Could be an object, could be another number,

92
00:04:36.850 --> 00:04:39.430
could be an array, could be a boolean,

93
00:04:39.430 --> 00:04:42.150
I think you get the point in terms of

94
00:04:42.150 --> 00:04:44.210
what you can store inside of it.

95
00:04:44.210 --> 00:04:46.510
Maybe another example that we could have here

96
00:04:46.510 --> 00:04:49.360
is if somebody has some scores

97
00:04:49.360 --> 00:04:52.180
that they want to store additional information about it.

98
00:04:52.180 --> 00:04:55.000
So we have a score variable, and the score

99
00:04:55.000 --> 00:04:58.400
is equal to 100, and then on the map

100
00:04:58.400 --> 00:05:00.160
we wanna set additional information

101
00:05:00.160 --> 00:05:04.240
about what prize they win at that score.

102
00:05:04.240 --> 00:05:07.650
So let's create a new map, so const prizes

103
00:05:09.910 --> 00:05:14.600
is equal to new map, and we'll say prizes.set,

104
00:05:14.600 --> 00:05:17.630
and then we're gonna say a score of 100 is going to get

105
00:05:17.630 --> 00:05:22.630
a bear, a score of 200 is going to get a duck,

106
00:05:23.810 --> 00:05:28.810
a score of 300 is going to get a cat.

107
00:05:28.910 --> 00:05:31.540
A car, ah, that's even better, they get a car.

108
00:05:31.540 --> 00:05:33.550
Now previously, if this was an object,

109
00:05:33.550 --> 00:05:36.440
we would have had to use a string

110
00:05:36.440 --> 00:05:38.920
of the number in order to look it up.

111
00:05:38.920 --> 00:05:40.530
But in this case we can simply use

112
00:05:40.530 --> 00:05:44.889
a number to look up what the corresponding prize is.

113
00:05:44.889 --> 00:05:47.240
So we can just do something like this, console.log,

114
00:05:47.240 --> 00:05:52.240
back ticks, you win a, we'll use our brackets here,

115
00:05:53.680 --> 00:05:58.680
we'll say prizes.get, and we just pass the score in there.

116
00:06:01.050 --> 00:06:03.350
Now when we run it, it says you win a bear,

117
00:06:03.350 --> 00:06:07.630
we change that to 200, you get you win a duck.

118
00:06:07.630 --> 00:06:09.180
So in a lot of the real world things

119
00:06:09.180 --> 00:06:10.820
that we're gonna build, a lot of the exercise

120
00:06:10.820 --> 00:06:14.060
that we're gonna build, whenever we create an object

121
00:06:14.060 --> 00:06:17.100
we'll sort of stop and say, could we use a map

122
00:06:17.100 --> 00:06:19.680
in this situation, or would it make sense

123
00:06:19.680 --> 00:06:21.860
to keep going with an object.

124
00:06:21.860 --> 00:06:25.040
Now, other things about maps, we talked about

125
00:06:25.040 --> 00:06:26.910
being able to set, we talked about

126
00:06:26.910 --> 00:06:28.400
being able to get, we talked about

127
00:06:28.400 --> 00:06:33.030
being able to see the size of a map, so we say myMap.size,

128
00:06:33.030 --> 00:06:36.290
very similar to the length of something.

129
00:06:36.290 --> 00:06:40.260
The other thing about a map is that order is guaranteed.

130
00:06:40.260 --> 00:06:42.840
Remember how I told you that with an object,

131
00:06:42.840 --> 00:06:44.550
order is not guaranteed?

132
00:06:44.550 --> 00:06:46.510
Well with a map, the order at which

133
00:06:46.510 --> 00:06:50.020
you put things into your map is the order at which

134
00:06:50.020 --> 00:06:52.660
they will always stay, so that's really important

135
00:06:52.660 --> 00:06:54.930
if you ever want to maintain the order.

136
00:06:54.930 --> 00:06:56.933
Even something very similar,

137
00:06:58.530 --> 00:07:00.970
even something very simple like prizes.

138
00:07:00.970 --> 00:07:03.320
Like if you wanted to display these prizes

139
00:07:03.320 --> 00:07:05.960
on the page, let's go ahead and do it.

140
00:07:05.960 --> 00:07:10.500
Let's go into our maps here, and let's give ourself

141
00:07:10.500 --> 00:07:15.500
a ul with the class of prizes.

142
00:07:16.220 --> 00:07:19.460
Now if I wanted to loop over those prizes

143
00:07:19.460 --> 00:07:21.110
and display for 100 points you get a bear,

144
00:07:21.110 --> 00:07:23.670
200 you get a duck, 300 for a car,

145
00:07:23.670 --> 00:07:26.440
it's important that they sort of go in that order,

146
00:07:26.440 --> 00:07:28.950
and with an object, they could be jumbled, right?

147
00:07:28.950 --> 00:07:33.950
And that would be weird to display like 200, 100,

148
00:07:34.000 --> 00:07:37.020
then 300, so it's nice and guaranteed.

149
00:07:37.020 --> 00:07:39.980
So what we can do here is we can,

150
00:07:39.980 --> 00:07:43.620
let's maybe select that ul, const ul

151
00:07:43.620 --> 00:07:45.513
is equal to document.querySelector,

152
00:07:46.540 --> 00:07:49.620
we'll grab the .prizes, and then we will loop over

153
00:07:49.620 --> 00:07:51.130
all of the entries in our map.

154
00:07:51.130 --> 00:07:52.430
Now there's a couple different ways

155
00:07:52.430 --> 00:07:54.290
that we can do this, we're gonna go over that

156
00:07:54.290 --> 00:07:56.330
in the looping and iterating, but for now

157
00:07:56.330 --> 00:07:58.300
I can tell you we can use the for of

158
00:07:58.300 --> 00:08:00.740
or the dot for each method on it.

159
00:08:00.740 --> 00:08:04.740
Take our prizes, and we call forEach on it,

160
00:08:04.740 --> 00:08:07.900
and in this case we're going to get an entry,

161
00:08:07.900 --> 00:08:10.440
and let's just console.log the entry

162
00:08:10.440 --> 00:08:12.790
to see what we get for each of them.

163
00:08:12.790 --> 00:08:17.180
Refresh, you win, you get bear, duck, car,

164
00:08:17.180 --> 00:08:18.700
but that just gives us the values,

165
00:08:18.700 --> 00:08:22.020
so if we want both of them, what we can do

166
00:08:22.020 --> 00:08:25.560
is we can use the for of loop, so we say for,

167
00:08:25.560 --> 00:08:29.450
and open up your block, and we can say const prize

168
00:08:32.810 --> 00:08:37.810
of prizes, and then here, we just console.log prize.

169
00:08:37.890 --> 00:08:39.620
This is a little bit getting ahead of ourselves

170
00:08:39.620 --> 00:08:42.210
for how to do looping, but just know what we're gonna do

171
00:08:42.210 --> 00:08:44.680
is we're gonna loop over all of the entries

172
00:08:44.680 --> 00:08:47.090
in our prizes map, and for each one

173
00:08:47.090 --> 00:08:49.150
we're gonna create sort of a temporary variable

174
00:08:49.150 --> 00:08:51.750
called prize, and we're going to log it.

175
00:08:51.750 --> 00:08:54.600
And now what you see here is that we get this.

176
00:08:54.600 --> 00:08:57.057
This is what is referred to as an array,

177
00:08:57.057 --> 00:08:58.970
and that array will give us the first item

178
00:08:58.970 --> 00:09:01.260
is going to be the key, and the second item

179
00:09:01.260 --> 00:09:02.880
is going to be the value.

180
00:09:02.880 --> 00:09:06.510
So we can console log the first item with a zero,

181
00:09:06.510 --> 00:09:08.853
and the second item with a one.

182
00:09:12.280 --> 00:09:14.430
And you see that that gives us individual one,

183
00:09:14.430 --> 00:09:16.330
we can also go a little bit further

184
00:09:16.330 --> 00:09:18.110
and take this array and use something

185
00:09:18.110 --> 00:09:21.050
called destructuring, and what destructuring

186
00:09:21.050 --> 00:09:23.620
will allow us to do is instead of referencing it

187
00:09:23.620 --> 00:09:26.920
by it's index, we can create variables

188
00:09:26.920 --> 00:09:29.600
of the items in that by their index.

189
00:09:29.600 --> 00:09:33.140
So we can remove prize, and just replace it

190
00:09:33.140 --> 00:09:38.140
with a key and a val, or a points and a prize,

191
00:09:40.990 --> 00:09:43.170
and then we have two separate variables,

192
00:09:43.170 --> 00:09:45.550
because the first item in that array

193
00:09:45.550 --> 00:09:48.360
will be a points variable, and the second item

194
00:09:48.360 --> 00:09:50.330
will be a prize, and I believe now

195
00:09:50.330 --> 00:09:52.283
we can have a points and a prize.

196
00:09:54.542 --> 00:09:55.730
And you see it works just exactly the same.

197
00:09:55.730 --> 00:09:59.410
So now what we can do is we can make a list item,

198
00:09:59.410 --> 00:10:02.913
so const li is equal to,

199
00:10:08.680 --> 00:10:13.680
and we can put the points, dash prize,

200
00:10:18.290 --> 00:10:21.343
and then we take our ul and we say insertAdjacentHTML,

201
00:10:25.360 --> 00:10:30.360
and say before, no, afterbegin, I think is what we want.

202
00:10:32.010 --> 00:10:34.940
I'll append the li in there, refresh, there we go,

203
00:10:34.940 --> 00:10:37.480
oh, that's the opposite that we want.

204
00:10:37.480 --> 00:10:40.980
So what was the other option?

205
00:10:40.980 --> 00:10:42.723
Gotta look it up, I forgot it.

206
00:10:43.800 --> 00:10:47.290
Here we go, the options are afterbegin,

207
00:10:48.610 --> 00:10:51.230
beforeend, that's what we want.

208
00:10:51.230 --> 00:10:54.690
There we go, 100 bear, 200 duck, 300 car.

209
00:10:54.690 --> 00:10:56.560
We've looped over and added in there.

210
00:10:56.560 --> 00:11:00.320
So, questions are now, when do you use

211
00:11:00.320 --> 00:11:02.960
a map over an object and vice versa?

212
00:11:02.960 --> 00:11:04.940
So first of all, you should use a map

213
00:11:04.940 --> 00:11:09.940
if you do need to maintain the order of your items.

214
00:11:10.110 --> 00:11:13.180
The other sort of downside to a map

215
00:11:13.180 --> 00:11:16.120
is that there is no literal, meaning that

216
00:11:16.120 --> 00:11:18.300
we have to create a new map this way

217
00:11:18.300 --> 00:11:20.680
and then go ahead and set the items in it.

218
00:11:20.680 --> 00:11:24.370
You can also pass items into your map

219
00:11:25.240 --> 00:11:27.820
with an array of arrays, it's kinda weird, lemme show you.

220
00:11:27.820 --> 00:11:32.820
We have a new map, lemme see, do I even have an example, no.

221
00:11:33.250 --> 00:11:36.340
You pass an array of items, and then each item

222
00:11:36.340 --> 00:11:39.790
will have another array, so, one, two,

223
00:11:39.790 --> 00:11:43.440
and then another array here, three, four.

224
00:11:43.440 --> 00:11:45.180
And you see what we've done here is

225
00:11:45.180 --> 00:11:48.050
we've created a map, that's a bad example,

226
00:11:48.050 --> 00:11:53.050
let's do something, say, name is Wes, and age is 49.

227
00:11:59.280 --> 00:12:00.130
There we go, and so now we have a map.

228
00:12:00.130 --> 00:12:03.300
So you can pass an array of multiple arrays

229
00:12:03.300 --> 00:12:04.397
where the first item is the key

230
00:12:04.397 --> 00:12:06.870
and the second item is the value,

231
00:12:06.870 --> 00:12:08.640
however the object literal syntax

232
00:12:08.640 --> 00:12:11.070
is a little bit nicer than that,

233
00:12:11.070 --> 00:12:14.850
but then again, the set, the get, and the delete again,

234
00:12:14.850 --> 00:12:15.970
or actually, I didn't show you delete.

235
00:12:15.970 --> 00:12:17.670
If we wanted to delete something,

236
00:12:17.670 --> 00:12:22.150
we just take the myMap.delete name.

237
00:12:22.150 --> 00:12:24.310
And then we say myMap, you see

238
00:12:24.310 --> 00:12:27.410
that has been removed from it.

239
00:12:27.410 --> 00:12:28.950
The other thing about an object

240
00:12:28.950 --> 00:12:30.740
is that you can put functions inside

241
00:12:30.740 --> 00:12:33.740
of an object, and we call those methods,

242
00:12:33.740 --> 00:12:36.320
you cannot do that with a map, that's not what maps are for,

243
00:12:36.320 --> 00:12:38.410
they're simply for storing data.

244
00:12:38.410 --> 00:12:41.720
And then finally, sort of the last thing here

245
00:12:41.720 --> 00:12:43.860
is that we have this thing called JSON,

246
00:12:43.860 --> 00:12:46.400
and I haven't really explained JSON to you yet,

247
00:12:46.400 --> 00:12:49.920
but real quick is if you have an object,

248
00:12:49.920 --> 00:12:53.957
like person, here we go, is equal to Wes,

249
00:12:55.210 --> 00:12:58.240
and the age of 100, if I wanted to send that object

250
00:12:58.240 --> 00:12:59.900
to somebody, what we actually do

251
00:12:59.900 --> 00:13:02.730
is we turn it into text, because text

252
00:13:02.730 --> 00:13:05.890
is easily sendable to other servers,

253
00:13:05.890 --> 00:13:08.180
from one website to another website,

254
00:13:08.180 --> 00:13:11.090
any time you wanna transfer an object

255
00:13:11.090 --> 00:13:13.800
or an array, you have to first

256
00:13:13.800 --> 00:13:16.430
convert that thing to a portable format.

257
00:13:16.430 --> 00:13:19.790
And this one way that all programming languages understand

258
00:13:19.790 --> 00:13:24.210
is called JSON, and we can do that with JSON.stringify,

259
00:13:24.210 --> 00:13:26.400
and then you pass it your object,

260
00:13:26.400 --> 00:13:31.030
and what it does is it actually converts your object

261
00:13:31.030 --> 00:13:32.940
into a string, and then you can

262
00:13:32.940 --> 00:13:34.750
send that string very easily.

263
00:13:34.750 --> 00:13:37.060
You could even email that string to somebody,

264
00:13:37.060 --> 00:13:39.020
and then the person on the other end

265
00:13:39.020 --> 00:13:41.990
will say, okay, thanks for the string of JSON,

266
00:13:41.990 --> 00:13:44.220
lemme turn it back into an object.

267
00:13:44.220 --> 00:13:46.740
And they do something like the JSON.parse,

268
00:13:46.740 --> 00:13:50.010
and they pass it a string.

269
00:13:50.010 --> 00:13:52.060
What did I do, I have single quotes here.

270
00:13:52.950 --> 00:13:55.240
And that will convert it back into an object.

271
00:13:55.240 --> 00:13:58.810
So that's just a way that we make JavaScript objects,

272
00:13:58.810 --> 00:14:02.030
it stands for JavaScript Object Notation,

273
00:14:02.030 --> 00:14:03.730
however it has been implemented

274
00:14:03.730 --> 00:14:05.850
by every single language out there,

275
00:14:05.850 --> 00:14:07.890
so it is sort of the universal way to

276
00:14:09.703 --> 00:14:12.310
move objects from one place, like the browser

277
00:14:12.310 --> 00:14:14.670
to another, which is your server side,

278
00:14:14.670 --> 00:14:16.490
and then you can turn it back into an object.

279
00:14:16.490 --> 00:14:20.030
So JSON is amazing, however, if you have a map,

280
00:14:20.030 --> 00:14:23.450
currently JSON does not handle maps.

281
00:14:23.450 --> 00:14:26.060
So if we take a look at myMap,

282
00:14:26.060 --> 00:14:28.910
you see we have this, but if we say JSON.stringify,

283
00:14:28.910 --> 00:14:33.340
or JSON.stringify myMap, you'll see it just gives us

284
00:14:33.340 --> 00:14:35.520
an empty object, 'cause it is not aware

285
00:14:35.520 --> 00:14:38.560
of maps yet, I imagine that will change very soon.

286
00:14:38.560 --> 00:14:40.530
There's this thing called JSON five,

287
00:14:40.530 --> 00:14:43.610
which sort of tries to improve upon JSON,

288
00:14:43.610 --> 00:14:46.550
but until then, if you have a map,

289
00:14:46.550 --> 00:14:48.650
and you wanna send it to somebody,

290
00:14:48.650 --> 00:14:52.460
you currently have to convert it to an object,

291
00:14:52.460 --> 00:14:54.540
and the way that we would do that is

292
00:14:55.410 --> 00:14:59.663
object.fromEntries, you pass it your myMap,

293
00:15:01.950 --> 00:15:04.920
and what that does is it tries it's best

294
00:15:04.920 --> 00:15:08.470
to convert it to a regular object.

295
00:15:08.470 --> 00:15:11.380
However you'll see that if you use any of the benefits

296
00:15:11.380 --> 00:15:14.660
of a map, like using an object as a key,

297
00:15:14.660 --> 00:15:16.390
then it kinda falls apart.

298
00:15:16.390 --> 00:15:18.880
So that's a bit of a bummer right there,

299
00:15:18.880 --> 00:15:21.500
that may or may not be an issue to you,

300
00:15:21.500 --> 00:15:23.730
but that's sort of the benefits and upsides.

301
00:15:23.730 --> 00:15:25.630
We'll try to use a little bit of both of them,

302
00:15:25.630 --> 00:15:28.630
I personally use objects much more frequently,

303
00:15:28.630 --> 00:15:31.560
but I can see why this will probably start

304
00:15:31.560 --> 00:15:33.873
to catch on in the next couple years.

