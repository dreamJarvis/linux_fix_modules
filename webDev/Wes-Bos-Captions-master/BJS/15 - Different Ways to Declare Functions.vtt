WEBVTT

1
00:00:00.000 --> 00:00:02.583
(gentle music)

2
00:00:05.790 --> 00:00:07.780
<v Instructor>One thing you're gonna hear thrown around</v>

3
00:00:07.780 --> 00:00:09.900
a lot when you're getting into JavaScript

4
00:00:09.900 --> 00:00:12.350
is people are gonna say JavaScript functions

5
00:00:12.350 --> 00:00:14.690
are first class citizens,

6
00:00:14.690 --> 00:00:18.270
first class citizens, what does that even mean?

7
00:00:18.270 --> 00:00:21.330
Well, what it means is that JavaScript functions

8
00:00:21.330 --> 00:00:23.240
are values in themselves

9
00:00:23.240 --> 00:00:25.100
they can be stored in variables

10
00:00:25.100 --> 00:00:27.390
and they can be passed in to other functions,

11
00:00:27.390 --> 00:00:29.690
so what is it, what's the value in JavaScript?

12
00:00:29.690 --> 00:00:32.280
Well, a value in JavaScript is like age equals a hundred.

13
00:00:32.280 --> 00:00:33.840
Right, the value is a hundred,

14
00:00:33.840 --> 00:00:36.260
or const cool is equal to true.

15
00:00:36.260 --> 00:00:40.740
These are values that are numbers, or objects, or strings,

16
00:00:40.740 --> 00:00:44.810
or booleans, and the cool thing about JavaScript

17
00:00:44.810 --> 00:00:49.120
is that functions can be passed into other functions,

18
00:00:49.120 --> 00:00:51.980
functions can be stored in variables,

19
00:00:51.980 --> 00:00:54.350
functions can be handled and moved around

20
00:00:54.350 --> 00:00:57.100
just like any other piece of data in JavaScript.

21
00:00:57.100 --> 00:01:00.090
And that's not true for every other language

22
00:01:00.090 --> 00:01:02.910
and it's pretty neat and it actually allows us

23
00:01:02.910 --> 00:01:05.860
to do some pretty nifty things with JavaScript.

24
00:01:05.860 --> 00:01:08.030
So we're gonna delve into passing functions

25
00:01:08.030 --> 00:01:10.160
into other functions in the future.

26
00:01:10.160 --> 00:01:11.870
But for now, let's talk about

27
00:01:11.870 --> 00:01:14.900
the ability to put functions into variables.

28
00:01:14.900 --> 00:01:18.090
And this video is gonna dive into all the different ways

29
00:01:18.090 --> 00:01:21.540
to declare function, so let's talk about that now,

30
00:01:21.540 --> 00:01:25.770
let's make a new file in our custom functions folder

31
00:01:25.770 --> 00:01:27.020
we'll make a new file,

32
00:01:27.020 --> 00:01:31.970
let's call it ways to make a function.js

33
00:01:33.260 --> 00:01:36.460
and let's console log, it works.

34
00:01:36.460 --> 00:01:39.210
And let's go back into that index, the HTML

35
00:01:39.210 --> 00:01:44.210
and we'll just change the cf to ways to make a function.js

36
00:01:45.470 --> 00:01:48.570
open that sucker up in the browser,

37
00:01:48.570 --> 00:01:51.130
and we'll check that it works, it does work good.

38
00:01:51.130 --> 00:01:53.350
The one way that we know how to declare function right now

39
00:01:53.350 --> 00:01:56.250
is with the function keyword, so we say function doctorize

40
00:01:57.840 --> 00:02:02.840
and we take in a first name and we'll return Dr. firstName.

41
00:02:09.870 --> 00:02:12.250
Now let's see how we can actually declare that

42
00:02:12.250 --> 00:02:14.000
in other ways, we'll comment that out

43
00:02:14.000 --> 00:02:15.710
'cause we're gonna be redoing this function

44
00:02:15.710 --> 00:02:17.680
in all of the different ways.

45
00:02:17.680 --> 00:02:20.890
The next way is what's called an anonymous function,

46
00:02:20.890 --> 00:02:24.380
a function without a name is called an anonymous function.

47
00:02:24.380 --> 00:02:26.970
So if we actually just take this function right here

48
00:02:26.970 --> 00:02:28.310
and duplicate it.

49
00:02:28.310 --> 00:02:30.160
So I might go ahead and remove the name

50
00:02:30.160 --> 00:02:31.600
from this function doctorize

51
00:02:31.600 --> 00:02:34.720
that actually gives us what's called an anonymous function,

52
00:02:34.720 --> 00:02:37.210
a function without a name is an anonymous function.

53
00:02:37.210 --> 00:02:39.810
And it's actually not valid JavaScript in this case

54
00:02:39.810 --> 00:02:41.530
right here it says function statements

55
00:02:41.530 --> 00:02:43.710
require a function name,

56
00:02:43.710 --> 00:02:46.650
however they are valid in very many other use cases

57
00:02:46.650 --> 00:02:48.230
which we're gonna into this video

58
00:02:48.230 --> 00:02:51.470
specifically using them as callbacks we'll learn about that,

59
00:02:51.470 --> 00:02:53.240
as well as using them in an iffy

60
00:02:53.240 --> 00:02:56.500
and in immediately invoked function expression

61
00:02:56.500 --> 00:02:57.940
but you'll see right here,

62
00:02:57.940 --> 00:03:00.560
just defining this function statement here

63
00:03:00.560 --> 00:03:02.450
it's actually not valid JavaScript.

64
00:03:02.450 --> 00:03:04.930
So like, why would you ever want that?

65
00:03:04.930 --> 00:03:09.140
Well, that gets us to the next sort of way

66
00:03:09.140 --> 00:03:11.660
to define a function, maybe let's just say,

67
00:03:11.660 --> 00:03:14.860
a non function here, and we'll comment that out.

68
00:03:14.860 --> 00:03:17.870
Let's duplicate it and then comment out the first one

69
00:03:17.870 --> 00:03:21.700
and then the next one is called a function expression.

70
00:03:21.700 --> 00:03:25.595
And a function expression is where you store a function

71
00:03:25.595 --> 00:03:28.190
as a value in a variable.

72
00:03:28.190 --> 00:03:29.500
So what we're gonna do here is we're gonna say

73
00:03:29.500 --> 00:03:33.090
const doctorize and what we just did there

74
00:03:33.090 --> 00:03:35.480
is we took an anonymous function,

75
00:03:35.480 --> 00:03:38.030
and we stuck it into a variable

76
00:03:38.030 --> 00:03:40.430
and now if we refresh our page here,

77
00:03:40.430 --> 00:03:44.290
you'll see that we actually have doctorize available to us

78
00:03:44.290 --> 00:03:48.610
and it will run just like we normally were Dr. Wes.

79
00:03:50.520 --> 00:03:54.020
So that's pretty cool and this is what people mean

80
00:03:54.020 --> 00:03:57.000
when they say functions are first class citizens,

81
00:03:57.000 --> 00:03:58.000
because what we're doing here

82
00:03:58.000 --> 00:03:59.930
is we're actually just creating a variable

83
00:03:59.930 --> 00:04:02.640
like we're gonna store a number or a string or a boolean

84
00:04:02.640 --> 00:04:06.740
except we're storing as a value the actual function name.

85
00:04:06.740 --> 00:04:09.100
Now, you may sometimes run across developers

86
00:04:09.100 --> 00:04:12.100
and that they'll say don't use that it gives you bad errors

87
00:04:12.100 --> 00:04:14.630
and what they mean by that is if you have like an error

88
00:04:14.630 --> 00:04:18.223
inside of here and you say like, doesn't exist,

89
00:04:19.440 --> 00:04:22.230
you try to call a function that doesn't exist

90
00:04:22.230 --> 00:04:24.220
and we go ahead and try to run that

91
00:04:24.220 --> 00:04:26.940
what you see is uncaught reference error

92
00:04:28.010 --> 00:04:30.550
doesn't exist is not defined

93
00:04:30.550 --> 00:04:32.600
and those errors used to be really tricky

94
00:04:32.600 --> 00:04:35.840
to be able to find out where did this specifically happen,

95
00:04:35.840 --> 00:04:38.390
obviously it tells you the line number which is helpful,

96
00:04:38.390 --> 00:04:41.720
but it actually used to just tell you that

97
00:04:41.720 --> 00:04:43.930
this happened in an anonymous function,

98
00:04:43.930 --> 00:04:46.000
and you'd be sitting there saying,

99
00:04:46.000 --> 00:04:50.500
thanks for the good info as to to what happened here

100
00:04:50.500 --> 00:04:55.140
I have no idea where this function is actually going array

101
00:04:55.140 --> 00:04:57.680
but in our case it does now tell you

102
00:04:57.680 --> 00:05:01.530
that it happened inside of doctorize on line 12.

103
00:05:01.530 --> 00:05:04.830
So while this function is technically an anonymous function,

104
00:05:04.830 --> 00:05:06.870
a function without a name,

105
00:05:06.870 --> 00:05:10.910
the browsers will now sort of infer the name of the function

106
00:05:11.900 --> 00:05:15.440
from the variable name and sort of use that

107
00:05:15.440 --> 00:05:18.130
in the errors here as the function name.

108
00:05:18.130 --> 00:05:20.630
So it still tells you it's an anonymous function

109
00:05:20.630 --> 00:05:22.550
but it also is gonna tell you that it happened

110
00:05:22.550 --> 00:05:24.110
in our doctorize function.

111
00:05:24.110 --> 00:05:27.687
So this is a way to define a function inside of a variable

112
00:05:27.687 --> 00:05:30.230
that's called a function expression.

113
00:05:30.230 --> 00:05:33.023
So what's the difference between doing this,

114
00:05:33.023 --> 00:05:35.000
a regular function declaration

115
00:05:35.000 --> 00:05:38.658
and this our function expression declaration?

116
00:05:38.658 --> 00:05:42.360
Why would you wanna do one over the other?

117
00:05:42.360 --> 00:05:45.040
Well, there are only one real difference

118
00:05:45.040 --> 00:05:47.020
past this error handling

119
00:05:47.020 --> 00:05:49.360
which isn't really much of an issue anymore,

120
00:05:49.360 --> 00:05:52.570
the other difference is how they operate in something called

121
00:05:52.570 --> 00:05:55.900
hoisting and not hosting, hoisting

122
00:05:55.900 --> 00:05:58.360
we're gonna cover this topic in a future video

123
00:05:58.360 --> 00:06:02.480
but essentially, I'll just show you real quick

124
00:06:02.480 --> 00:06:04.760
don't tell anybody I'm showing you this here.

125
00:06:04.760 --> 00:06:08.530
So let's say we've got this function doctorize2

126
00:06:08.530 --> 00:06:10.510
and we have regular doctorize.

127
00:06:10.510 --> 00:06:14.330
If I go up to the top here and I run these things

128
00:06:14.330 --> 00:06:19.330
before doctorize and I say doctorize Wes,

129
00:06:21.790 --> 00:06:23.810
do you think that this is gonna run?

130
00:06:23.810 --> 00:06:27.750
Like if you run a function before you define it,

131
00:06:27.750 --> 00:06:28.700
does it work?

132
00:06:28.700 --> 00:06:32.710
No, let's see, Uncaught ReferenceEror

133
00:06:32.710 --> 00:06:36.070
Cannot Access doctorize before initialization, okay,

134
00:06:36.070 --> 00:06:38.873
what about doctorize two, is that gonna work?

135
00:06:39.950 --> 00:06:43.690
Seems to, I guess we have to console that log, the output

136
00:06:43.690 --> 00:06:46.950
to see if it will work, it does work.

137
00:06:46.950 --> 00:06:51.950
So doctorize2 works, doctorize gives me an error, why?

138
00:06:53.000 --> 00:06:55.400
Well, that's because even though

139
00:06:55.400 --> 00:06:59.900
these are the exact same functions that we've created here

140
00:06:59.900 --> 00:07:02.630
because you define a regular function

141
00:07:02.630 --> 00:07:07.360
with a function keyword, and this one with a variable

142
00:07:07.360 --> 00:07:09.610
functions that are declared with the function keyword

143
00:07:09.610 --> 00:07:11.000
are called hoisted,

144
00:07:11.000 --> 00:07:14.510
meaning that JavaScript takes all functions

145
00:07:14.510 --> 00:07:18.274
and hoists them up, up, up and it says

146
00:07:18.274 --> 00:07:19.800
okay, you're a function,

147
00:07:19.800 --> 00:07:22.600
I'm going to actually put you at the top of the file,

148
00:07:22.600 --> 00:07:25.600
so that anywhere that you call the function,

149
00:07:25.600 --> 00:07:27.420
it will then be available to you.

150
00:07:27.420 --> 00:07:32.420
JavaScript does not hoist variable functions,

151
00:07:32.850 --> 00:07:35.880
it does hoist the declaration of the variable,

152
00:07:35.880 --> 00:07:37.880
we'll go into that, that's a little bit in the winds,

153
00:07:37.880 --> 00:07:39.990
but it does not do it with this type of function.

154
00:07:39.990 --> 00:07:41.508
So why is that useful?

155
00:07:41.508 --> 00:07:44.900
Very rarely do I actually ever use

156
00:07:44.900 --> 00:07:47.540
I'm gonna go as far to say as I never use that

157
00:07:47.540 --> 00:07:50.170
in my entire career, there are some like little use cases

158
00:07:50.170 --> 00:07:51.860
that some developers like to have.

159
00:07:51.860 --> 00:07:54.150
I'll go into that at a later point

160
00:07:54.150 --> 00:07:56.060
but that's really I have to know

161
00:07:56.060 --> 00:07:58.150
hoisting is more of one of these sort of like

162
00:07:58.150 --> 00:08:00.530
interview questions that someone's gonna sling at you

163
00:08:00.530 --> 00:08:04.000
and essentially means that JavaScript will take functions

164
00:08:04.000 --> 00:08:06.490
and bring them up to the before the call log

165
00:08:06.490 --> 00:08:10.510
and you can technically run a function before it's defined

166
00:08:10.510 --> 00:08:14.410
with that ability, so that's how it works.

167
00:08:14.410 --> 00:08:16.390
So let's go back to what we have here,

168
00:08:16.390 --> 00:08:18.670
I'm gonna bring this back to just regular doctorize

169
00:08:18.670 --> 00:08:21.570
so that is the function expression

170
00:08:21.570 --> 00:08:23.812
it's a way that we can,

171
00:08:23.812 --> 00:08:26.190
that's the one we wanna keep not this one

172
00:08:26.190 --> 00:08:28.020
this is the function expression

173
00:08:28.020 --> 00:08:30.090
that you can put a function in a variable.

174
00:08:30.090 --> 00:08:31.640
So let's go on to the next type

175
00:08:31.640 --> 00:08:33.910
which is called an arrow function,

176
00:08:33.910 --> 00:08:37.960
now arrow functions themselves have like three or four

177
00:08:37.960 --> 00:08:40.420
different like nuanced ways to declare them

178
00:08:40.420 --> 00:08:43.780
so let's sit tight and figure out how we can do them.

179
00:08:43.780 --> 00:08:45.987
Arrow functions are an addition to JavaScript

180
00:08:45.987 --> 00:08:49.090
in the last couple years, they offer a couple things,

181
00:08:49.090 --> 00:08:52.130
first, they offer a concise syntax and they're shorter.

182
00:08:52.130 --> 00:08:54.350
So if you got a lot of functions, or you have these little

183
00:08:54.350 --> 00:08:56.570
what are called callback functions, we'll go into that

184
00:08:56.570 --> 00:08:58.480
it's often handy to just write a quick little

185
00:08:58.480 --> 00:09:02.120
one liner function, so that's one benefit.

186
00:09:02.120 --> 00:09:04.470
The other benefit that they have

187
00:09:04.470 --> 00:09:07.880
is that they don't have their own scope

188
00:09:07.880 --> 00:09:09.890
in referred to this keyword.

189
00:09:09.890 --> 00:09:12.280
So we haven't gone into this keyword yet

190
00:09:12.280 --> 00:09:15.740
but we will in a future video and I'll show you exactly

191
00:09:15.740 --> 00:09:18.520
the difference between a regular function like this

192
00:09:18.520 --> 00:09:21.517
or even this, and a arrow function

193
00:09:21.517 --> 00:09:24.420
and how it scopes the keyword this.

194
00:09:24.420 --> 00:09:27.650
First thing, arrow functions are anonymous function

195
00:09:27.650 --> 00:09:31.170
so what it means is that there's no way to declare

196
00:09:31.170 --> 00:09:32.790
an arrow function like this,

197
00:09:32.790 --> 00:09:36.090
you always have to declare it and stick it into a variable

198
00:09:36.090 --> 00:09:37.260
if that's what you need.

199
00:09:37.260 --> 00:09:38.330
So to illustrate this,

200
00:09:38.330 --> 00:09:40.700
let's start writing a regular function

201
00:09:40.700 --> 00:09:43.893
so we'll have a function and let's call it inchToCM.

202
00:09:45.760 --> 00:09:48.160
So I know a lot of y'all are from America

203
00:09:48.160 --> 00:09:49.910
and you you give inches

204
00:09:49.910 --> 00:09:53.100
so what we wanna do is have a function that takes in inches

205
00:09:53.100 --> 00:09:55.580
and it's going to return centimeters.

206
00:09:55.580 --> 00:10:00.330
So we'll say const cn is equal to the inches times 2.54

207
00:10:02.980 --> 00:10:07.517
and then we will return this cn from this function.

208
00:10:07.517 --> 00:10:11.460
Now let's go ahead and try it out inchesToCM

209
00:10:11.460 --> 00:10:15.240
So if I've got three inches, we have 7.62 centimeters

210
00:10:15.240 --> 00:10:19.170
okay, that works that's our regular old function

211
00:10:19.170 --> 00:10:22.050
that we have, now this is pretty simple,

212
00:10:22.050 --> 00:10:23.410
it's a pretty simple function

213
00:10:23.410 --> 00:10:27.240
but it still takes up like 1, 2, 3, 4 lines of code

214
00:10:27.240 --> 00:10:29.830
and you might think like, all we're doing here

215
00:10:29.830 --> 00:10:32.820
is multiplying a number by 2.54

216
00:10:32.820 --> 00:10:35.720
why do we need such a big function in order to do that,

217
00:10:35.720 --> 00:10:37.300
so we can make that a little bit shorter

218
00:10:37.300 --> 00:10:38.940
by instead of like creating a variable

219
00:10:38.940 --> 00:10:40.460
and then just returning that variable,

220
00:10:40.460 --> 00:10:45.460
you can actually just return the calculation itself.

221
00:10:46.090 --> 00:10:48.070
So you see, actually look what happened there

222
00:10:48.070 --> 00:10:52.670
my editor made that sort of a darker shade

223
00:10:52.670 --> 00:10:54.940
of what it used to be and if you hover over top of it

224
00:10:54.940 --> 00:10:57.330
it says unreachable code detected

225
00:10:57.330 --> 00:10:59.750
that's because anytime like we talked about

226
00:10:59.750 --> 00:11:02.110
anytime you have a return inside of a function

227
00:11:02.110 --> 00:11:04.630
anything after that is unreachable, it will never run

228
00:11:04.630 --> 00:11:06.930
'cause as soon as a return happens in a function,

229
00:11:06.930 --> 00:11:09.500
that function is complete, it's done.

230
00:11:09.500 --> 00:11:12.010
It's done running and any code below that will never run

231
00:11:12.010 --> 00:11:13.330
so obviously we'll get rid of that.

232
00:11:13.330 --> 00:11:16.730
So that's one way to make our function a little bit smaller,

233
00:11:16.730 --> 00:11:18.380
where instead of making a variable

234
00:11:18.380 --> 00:11:19.300
and then return that variable,

235
00:11:19.300 --> 00:11:22.570
we can just return the output of this multiplication

236
00:11:22.570 --> 00:11:24.130
in one single line.

237
00:11:24.130 --> 00:11:27.100
Good, now we can actually convert that

238
00:11:27.100 --> 00:11:30.830
to an anonymous function in preparation for the arrow

239
00:11:30.830 --> 00:11:34.060
so instead of making a function with inchToCM,

240
00:11:34.060 --> 00:11:36.150
let's make it an anonymous function

241
00:11:36.150 --> 00:11:40.840
and we'll say const inchToCM equals a function

242
00:11:40.840 --> 00:11:43.210
that takes in inches, so that's exactly the same

243
00:11:43.210 --> 00:11:45.430
right, and let's just make sure it still works.

244
00:11:45.430 --> 00:11:47.980
Good it still works exactly the same way

245
00:11:47.980 --> 00:11:50.120
we've just made it an anonymous function

246
00:11:50.120 --> 00:11:52.200
and stored it in a variable.

247
00:11:52.200 --> 00:11:55.200
Now what we can do is we wanna convert this sucker

248
00:11:55.200 --> 00:11:57.620
over to what's called an arrow function

249
00:11:57.620 --> 00:11:59.330
with a little bit more concise syntax.

250
00:11:59.330 --> 00:12:03.370
Now, there's a couple of different ways

251
00:12:03.370 --> 00:12:05.280
we can make a arrow function

252
00:12:05.280 --> 00:12:07.040
I'm gonna step you through that right now.

253
00:12:07.040 --> 00:12:09.480
So the first thing is, instead of writing this,

254
00:12:09.480 --> 00:12:10.710
this is a big word,

255
00:12:10.710 --> 00:12:13.410
instead of writing this big word called function

256
00:12:13.410 --> 00:12:15.010
we'll delete it,

257
00:12:15.010 --> 00:12:17.970
and we'll go to the right of the parentheses

258
00:12:17.970 --> 00:12:21.120
and give ourselves what's called a fat arrow.

259
00:12:21.120 --> 00:12:24.630
So in programming we call this a fat arrow,

260
00:12:24.630 --> 00:12:28.820
meaning that this is a skinny arrow, this is a fat arrow.

261
00:12:28.820 --> 00:12:33.820
So the fat one is with the equals and an angle bracket.

262
00:12:34.440 --> 00:12:36.540
So you have that there, I haven't saved yet

263
00:12:36.540 --> 00:12:38.060
I'm worried that my prettier

264
00:12:38.060 --> 00:12:41.360
is actually going to remove this parentheses if I save,

265
00:12:41.360 --> 00:12:43.260
you see it just put it on one line.

266
00:12:43.260 --> 00:12:44.700
I'm trying to teach you the steps here

267
00:12:44.700 --> 00:12:46.840
but prettier is just doing all the steps for me.

268
00:12:46.840 --> 00:12:51.370
So I'm going to disable that, eslint-disabled

269
00:12:53.720 --> 00:12:57.730
disable, there we go, okay I just disabled eslint there

270
00:12:57.730 --> 00:12:59.230
so it wouldn't actually fix it for me

271
00:12:59.230 --> 00:13:00.600
so I'm trying to teach you to you.

272
00:13:00.600 --> 00:13:02.790
So there's the first thing that we did

273
00:13:02.790 --> 00:13:05.780
is we took the word function and we removed it

274
00:13:05.780 --> 00:13:08.060
and then we went to the other side of the parentheses

275
00:13:08.060 --> 00:13:09.170
and put an arrow there.

276
00:13:09.170 --> 00:13:12.010
So the space could be like that if you like

277
00:13:12.880 --> 00:13:14.190
and you see it still works,

278
00:13:14.190 --> 00:13:16.810
but my prettier will put spaces in between

279
00:13:16.810 --> 00:13:20.370
just for readability, okay that works, is it still work?

280
00:13:20.370 --> 00:13:22.430
Good, still works just as as planned

281
00:13:22.430 --> 00:13:24.670
so it's a little bit more concise.

282
00:13:24.670 --> 00:13:28.280
The next thing we can do is what's called an implicit return

283
00:13:28.280 --> 00:13:30.810
typing the return key word right here

284
00:13:30.810 --> 00:13:32.490
that's an explicit return

285
00:13:32.490 --> 00:13:36.470
meaning that we explicitly return this value here

286
00:13:36.470 --> 00:13:39.630
and an implicit return is returning it

287
00:13:39.630 --> 00:13:41.970
without actually having to type this keyword

288
00:13:41.970 --> 00:13:43.810
right, remember I said arrow functions

289
00:13:43.810 --> 00:13:45.640
are all about being concise

290
00:13:45.640 --> 00:13:48.630
so they allow us to actually return a value

291
00:13:48.630 --> 00:13:51.010
without having to type the keyword return.

292
00:13:51.010 --> 00:13:52.770
So the way that that works

293
00:13:52.770 --> 00:13:55.260
is let's first put it all on one line

294
00:13:56.640 --> 00:13:58.270
functions can go on one line,

295
00:13:58.270 --> 00:14:01.220
just usually don't just forget readability sake

296
00:14:01.220 --> 00:14:04.040
so let's put this all on one line there

297
00:14:04.040 --> 00:14:06.470
good, and then what we wanna do

298
00:14:06.470 --> 00:14:09.730
to get rid of the explicit return

299
00:14:09.730 --> 00:14:13.790
is first you delete the curly brackets,

300
00:14:13.790 --> 00:14:17.080
you put it all on one line, delete the curly brackets,

301
00:14:17.080 --> 00:14:19.713
and then delete the key word return,

302
00:14:21.850 --> 00:14:24.010
and obviously, there's one more semicolon there

303
00:14:24.010 --> 00:14:25.260
we'll get rid of that as well.

304
00:14:25.260 --> 00:14:26.550
So what we just did there

305
00:14:26.550 --> 00:14:29.290
is we made a function called inchToCM,

306
00:14:29.290 --> 00:14:34.290
we set it to this is the arrow function still right here,

307
00:14:34.290 --> 00:14:37.330
it takes in one argument which is called inches,

308
00:14:37.330 --> 00:14:40.980
and then it will return and the way we can tell this

309
00:14:40.980 --> 00:14:45.030
is an implicit return is because first it's all on one line,

310
00:14:45.030 --> 00:14:47.670
and second, there's no return keyword,

311
00:14:47.670 --> 00:14:50.090
and third, there's no curly brackets.

312
00:14:50.090 --> 00:14:52.550
So inches times let's see if it still works,

313
00:14:52.550 --> 00:14:55.250
still works just great for us.

314
00:14:55.250 --> 00:14:58.620
So what we did there is we remove the function block

315
00:14:58.620 --> 00:15:02.270
because often your functions are just gonna be quick little

316
00:15:02.270 --> 00:15:06.540
one liners, that it's unnecessary to have the block,

317
00:15:06.540 --> 00:15:08.150
you totally can have the block

318
00:15:08.150 --> 00:15:09.970
look, I could bring this back here

319
00:15:09.970 --> 00:15:12.460
and I could give myself the block curly brackets

320
00:15:12.460 --> 00:15:14.750
and I could still make my cm

321
00:15:14.750 --> 00:15:17.720
and then I could return the CM value,

322
00:15:17.720 --> 00:15:20.540
but then we're back to four lines again.

323
00:15:20.540 --> 00:15:25.540
So what's easier is we can first just return inches to cm

324
00:15:25.700 --> 00:15:28.743
get rid of that, then we can put it all on one line,

325
00:15:29.960 --> 00:15:32.900
then we can get rid of the block of the function

326
00:15:32.900 --> 00:15:35.430
so remove that, remove that

327
00:15:35.430 --> 00:15:38.070
and then finally we can get rid of that return function

328
00:15:38.070 --> 00:15:39.053
that we have there.

329
00:15:40.120 --> 00:15:44.430
Finally, and this is more of a stylistic choice,

330
00:15:44.430 --> 00:15:49.240
but if there is only ever one argument for your function,

331
00:15:49.240 --> 00:15:52.940
you can actually get rid of the these parentheses as well.

332
00:15:52.940 --> 00:15:56.690
Now this is a bit of a thing to look at

333
00:15:56.690 --> 00:15:59.630
so let's just see if that works here, yeah, still works.

334
00:15:59.630 --> 00:16:02.590
Now what happened here is that this is still

335
00:16:02.590 --> 00:16:04.550
your arrow function here

336
00:16:04.550 --> 00:16:06.880
but we've taken the parentheses off

337
00:16:06.880 --> 00:16:09.440
because if there is only ever one argument

338
00:16:09.440 --> 00:16:10.500
to your arrow function,

339
00:16:10.500 --> 00:16:13.940
you can actually remove them no problem.

340
00:16:13.940 --> 00:16:15.730
So let's do another example

341
00:16:15.730 --> 00:16:17.020
'cause I know that was a whole bunch

342
00:16:17.020 --> 00:16:19.507
and often people can sort of look look at arrow function

343
00:16:19.507 --> 00:16:22.070
and say like, "Bruh, what's going on there,"

344
00:16:22.070 --> 00:16:24.100
there's a whole lot that's unsaid

345
00:16:24.100 --> 00:16:26.270
and I prefer the actual functions

346
00:16:26.270 --> 00:16:27.440
that are a little bit more explicit.

347
00:16:27.440 --> 00:16:30.110
So let's make a function called add

348
00:16:30.110 --> 00:16:32.350
and we'll set it to a and b,

349
00:16:32.350 --> 00:16:35.240
and we'll set b to three by default,

350
00:16:35.240 --> 00:16:38.670
and we'll say const total is equal to a plus b

351
00:16:38.670 --> 00:16:40.390
and we will return the total.

352
00:16:40.390 --> 00:16:41.620
So what's going on here

353
00:16:41.620 --> 00:16:44.230
we declared a regular function called add,

354
00:16:44.230 --> 00:16:48.550
which takes in two parameters, first one a, second one b,

355
00:16:48.550 --> 00:16:53.200
we've set it to a default value of three in b

356
00:16:53.200 --> 00:16:55.840
then we make a temporary variable called total

357
00:16:55.840 --> 00:16:56.740
add the two together

358
00:16:56.740 --> 00:16:59.090
and then return the total at the end of the day.

359
00:16:59.090 --> 00:17:02.410
So pause, try to convert the sucker

360
00:17:02.410 --> 00:17:05.150
to an arrow function yourself,

361
00:17:05.150 --> 00:17:07.303
and then come back and it will do together.

362
00:17:08.810 --> 00:17:10.950
Welcome back, hopefully you had a great time.

363
00:17:10.950 --> 00:17:14.450
So let's first we'll see if it works.

364
00:17:14.450 --> 00:17:19.450
Add one and two, it works beautiful

365
00:17:20.890 --> 00:17:23.640
does it work if we just pass one,

366
00:17:23.640 --> 00:17:25.250
you see that, its like dev tools here

367
00:17:25.250 --> 00:17:28.500
is actually giving you this little annotation here.

368
00:17:28.500 --> 00:17:31.000
That little question mark in front of b

369
00:17:31.000 --> 00:17:35.460
is telling us that the b argument is optional.

370
00:17:35.460 --> 00:17:37.410
That's pretty cool actually, why is it optional?

371
00:17:37.410 --> 00:17:39.550
Because if we don't pass it, it will fall back to three.

372
00:17:39.550 --> 00:17:42.410
So if I just add one, it returns four

373
00:17:42.410 --> 00:17:44.810
because b falls back to three.

374
00:17:44.810 --> 00:17:49.810
So let's convert this, maybe I'll just duplicate it

375
00:17:51.130 --> 00:17:52.620
and then I'll comment this one out

376
00:17:52.620 --> 00:17:54.120
just so we don't have duplicate.

377
00:17:54.120 --> 00:17:55.830
So first thing we wanna do

378
00:17:55.830 --> 00:17:59.050
is let's stick it in a variable called add

379
00:17:59.050 --> 00:18:01.180
and we'll remove the name of the function

380
00:18:02.090 --> 00:18:04.063
let's see if it still work, good.

381
00:18:05.030 --> 00:18:07.590
Next thing we'll do is we'll convert it to an arrow

382
00:18:07.590 --> 00:18:09.940
so get rid of the function keyword

383
00:18:09.940 --> 00:18:12.530
and we'll go to the right of the parentheses

384
00:18:12.530 --> 00:18:14.940
and give ourselves a fat arrow.

385
00:18:14.940 --> 00:18:17.187
Next thing we'll do is we'll just return a and b

386
00:18:17.187 --> 00:18:19.313
and get rid of that total variable,

387
00:18:20.360 --> 00:18:23.243
and the next thing we'll do is we'll put it on its own line,

388
00:18:24.280 --> 00:18:27.313
get rid of that parenthesis is not necessarily in that case,

389
00:18:30.520 --> 00:18:32.980
then we can get rid of the function block

390
00:18:32.980 --> 00:18:34.370
in the return keyword

391
00:18:36.720 --> 00:18:40.490
and we have a very short arrow function.

392
00:18:40.490 --> 00:18:42.980
The one thing you'll notice that we didn't do in this case

393
00:18:42.980 --> 00:18:45.560
is we did not get rid of the parentheses

394
00:18:45.560 --> 00:18:48.330
because look at that, is that gonna work

395
00:18:48.330 --> 00:18:52.780
it Malformed arrow function and the parameter list

396
00:18:52.780 --> 00:18:55.740
so that's not allowed and the reason why is that

397
00:18:55.740 --> 00:18:59.430
if you have more than one parameter in your function,

398
00:18:59.430 --> 00:19:03.490
then you must must give yourself the parentheses.

399
00:19:03.490 --> 00:19:05.010
So that is arrow functions

400
00:19:05.010 --> 00:19:06.820
there's a couple other sort of gotchas

401
00:19:06.820 --> 00:19:08.593
that we need to know about

402
00:19:08.593 --> 00:19:10.310
let's go over them right now.

403
00:19:10.310 --> 00:19:13.340
There is returning an object

404
00:19:13.340 --> 00:19:16.573
so let's make a function called makeABaby

405
00:19:18.110 --> 00:19:23.110
and we will take in the baby's first name and last name

406
00:19:27.790 --> 00:19:32.270
and in here we'll say const baby is equal to

407
00:19:32.270 --> 00:19:35.160
and we'll have an object

408
00:19:35.160 --> 00:19:39.170
and we'll say the baby's first name

409
00:19:39.170 --> 00:19:43.363
or we'll just say the baby's name is equal to first, last,

410
00:19:48.790 --> 00:19:51.490
and the baby's age is zero, they were just born.

411
00:19:51.490 --> 00:19:54.613
So that's our makeABaby function, let's see if it works.

412
00:19:54.613 --> 00:19:59.613
MakeABaby, kit, bos, I just have my baby a couple days ago.

413
00:20:02.790 --> 00:20:07.200
Returns undefined oh, we didn't return the baby

414
00:20:07.200 --> 00:20:09.203
always return your baby folks.

415
00:20:11.200 --> 00:20:14.320
Aah, beautiful okay, we pass in tWo arguments

416
00:20:14.320 --> 00:20:17.350
it returns the name and the age of zero.

417
00:20:17.350 --> 00:20:20.960
Good, so how would we convert this sucker to an object?

418
00:20:20.960 --> 00:20:23.023
Well, let's first will duplicate that.

419
00:20:24.380 --> 00:20:26.100
Comment this one out so we can reference

420
00:20:26.100 --> 00:20:28.260
what it used to look like.

421
00:20:28.260 --> 00:20:31.020
First thing we'll do is we'll stick it in a variable const

422
00:20:31.020 --> 00:20:34.483
makeABaby, should we make sure it still works, good.

423
00:20:35.570 --> 00:20:38.663
Next thing we're gonna do is convert it to an arrow.

424
00:20:45.550 --> 00:20:48.010
Good, and by the way if your function

425
00:20:48.010 --> 00:20:51.900
needs to do some stuff inside of the block,

426
00:20:51.900 --> 00:20:52.930
you can leave it at this

427
00:20:52.930 --> 00:20:55.540
this is a perfectly valid arrow function

428
00:20:55.540 --> 00:20:58.060
if the only thing you're doing is just using the arrow,

429
00:20:58.060 --> 00:20:59.910
both for the ability to type less

430
00:20:59.910 --> 00:21:03.130
as well as some of the benefits of not scoping this

431
00:21:03.130 --> 00:21:06.280
we'll go into at a later video, this is totally valid

432
00:21:06.280 --> 00:21:07.820
you can absolutely just stop here

433
00:21:07.820 --> 00:21:09.710
and that's a great function

434
00:21:09.710 --> 00:21:11.210
you should be proud of that function,

435
00:21:11.210 --> 00:21:14.070
however, we can take it a little bit further.

436
00:21:14.070 --> 00:21:18.610
So we could instead of making a baby variable

437
00:21:18.610 --> 00:21:20.150
and returning the baby,

438
00:21:20.150 --> 00:21:25.150
we could just return this right here.

439
00:21:29.120 --> 00:21:31.690
Good, so now the question is like,

440
00:21:31.690 --> 00:21:34.550
how would I do the implicit return?

441
00:21:34.550 --> 00:21:37.780
So we can put this on its own line

442
00:21:37.780 --> 00:21:40.400
objects can be put on one line no problem,

443
00:21:40.400 --> 00:21:41.840
that's a pretty common thing to do

444
00:21:41.840 --> 00:21:44.250
if you just wanna make it a quick little one liner

445
00:21:44.250 --> 00:21:48.480
that's still works, but how would I return it?

446
00:21:48.480 --> 00:21:50.520
Let's try, let's get rid of the return.

447
00:21:50.520 --> 00:21:53.183
Oh, wait, let put it all on one line at first.

448
00:21:55.410 --> 00:21:58.950
All right, this is getting a bit hairy

449
00:21:58.950 --> 00:22:00.070
what's going on here?

450
00:22:00.070 --> 00:22:03.030
So then if we wanna make it in implicit return,

451
00:22:03.030 --> 00:22:05.920
we get rid of the curly bracket and the return

452
00:22:07.345 --> 00:22:08.450
and get rid of that

453
00:22:09.320 --> 00:22:13.410
but what's happened here, Unexpected token

454
00:22:15.030 --> 00:22:17.410
what's happening here is that it thinks

455
00:22:17.410 --> 00:22:21.740
that the curly bracket from making the baby object

456
00:22:21.740 --> 00:22:24.400
is actually the curly bracket

457
00:22:24.400 --> 00:22:26.980
from the block of the function, right?

458
00:22:26.980 --> 00:22:29.720
'Cause curly brackets in JavaScript can be creation

459
00:22:29.720 --> 00:22:33.010
of an object, or they can be a block of code

460
00:22:33.010 --> 00:22:35.010
which in this case, it's the block of the function,

461
00:22:35.010 --> 00:22:36.370
the body of the function.

462
00:22:36.370 --> 00:22:40.930
So how do you implicitly return an object

463
00:22:40.930 --> 00:22:43.530
when it gets confused about what the curly bracket

464
00:22:43.530 --> 00:22:45.780
actually is, and if that's the case

465
00:22:45.780 --> 00:22:48.150
if you implicitly returning an object

466
00:22:48.150 --> 00:22:51.500
you just pop a set of parentheses around the thing

467
00:22:51.500 --> 00:22:55.950
that you are returning and that will sort of contain it

468
00:22:55.950 --> 00:22:59.180
inside of a parenthese and it will won't think

469
00:22:59.180 --> 00:23:02.080
that it's actually the blocker of the function,

470
00:23:02.080 --> 00:23:03.870
then we can put a semicolon on the end there

471
00:23:03.870 --> 00:23:07.570
for good measure, and the baby still works.

472
00:23:07.570 --> 00:23:09.813
So is that a better function

473
00:23:09.813 --> 00:23:12.107
than the one we built right here?

474
00:23:12.107 --> 00:23:14.010
I don't think so probably not,

475
00:23:14.010 --> 00:23:16.350
you're not really having all that much benefit,

476
00:23:16.350 --> 00:23:19.310
I think that this is probably a little bit more readable.

477
00:23:19.310 --> 00:23:23.050
So there's sort of this when arrow functions came out

478
00:23:23.050 --> 00:23:24.350
and people sort of thought

479
00:23:25.230 --> 00:23:26.800
everything must be an arrow function

480
00:23:26.800 --> 00:23:27.980
'cause it's new and it's better

481
00:23:27.980 --> 00:23:30.390
and of course, it has a couple of benefits

482
00:23:30.390 --> 00:23:31.760
but there's absolutely nothing wrong

483
00:23:31.760 --> 00:23:33.900
with doing a regular function

484
00:23:33.900 --> 00:23:36.880
especially you wanna think about your future self,

485
00:23:36.880 --> 00:23:39.840
you come back in six months, and you want to know

486
00:23:39.840 --> 00:23:42.490
what does makeABaby do, like what's a little bit easier

487
00:23:42.490 --> 00:23:46.420
this is probably a bit easier to actually to read

488
00:23:46.420 --> 00:23:47.850
than something like this.

489
00:23:47.850 --> 00:23:51.870
So don't always just go for an arrow function by default

490
00:23:51.870 --> 00:23:54.050
and I think it will become a little bit more clear

491
00:23:54.050 --> 00:23:57.480
as to when you should reach for an arrow function

492
00:23:57.480 --> 00:24:00.060
in the future once especially once we get into argument

493
00:24:00.060 --> 00:24:03.180
with arrays and doing map and reduce and filter

494
00:24:03.180 --> 00:24:04.420
and things like that.

495
00:24:04.420 --> 00:24:07.130
So that is arrow functions, we'll be going over those

496
00:24:07.130 --> 00:24:09.160
we'll be using them a whole lot more

497
00:24:09.160 --> 00:24:10.880
over the next little bit,

498
00:24:10.880 --> 00:24:13.030
lemme get rid of this makeABaby right here.

499
00:24:13.880 --> 00:24:16.950
The next sort of like way to define a function

500
00:24:16.950 --> 00:24:20.860
is called an IIFE, I-I-F-E

501
00:24:20.860 --> 00:24:25.660
and this is an immediately invoked function expression

502
00:24:25.660 --> 00:24:27.900
this is an I-I-F-E

503
00:24:27.900 --> 00:24:31.170
and the way that it works is if we create a function

504
00:24:31.170 --> 00:24:34.653
that isn't woow SVG component transfer function element,

505
00:24:35.550 --> 00:24:40.550
function and let's just return you are cool.

506
00:24:44.840 --> 00:24:49.790
And let's just console log 'Running the Anon function.'

507
00:24:49.790 --> 00:24:51.890
So this is just a regular anonymous function

508
00:24:51.890 --> 00:24:53.590
if we try to refresh it, it doesn't work

509
00:24:53.590 --> 00:24:55.160
because it's not allowed.

510
00:24:55.160 --> 00:24:57.870
In we talked about you can put these in a variable

511
00:24:57.870 --> 00:25:00.760
if you want, right, you can just stick these in a variable

512
00:25:00.760 --> 00:25:02.690
and everything will be okay.

513
00:25:02.690 --> 00:25:05.380
But another way to sort of run these functions

514
00:25:05.380 --> 00:25:07.760
is what's called an immediately invoked functional

515
00:25:07.760 --> 00:25:09.450
expression, so what you can do

516
00:25:09.450 --> 00:25:12.330
is you can wrap this function in a parentheses

517
00:25:13.600 --> 00:25:16.610
and what that will do is parentheses always run first

518
00:25:16.610 --> 00:25:18.210
in JavaScript and what this will do

519
00:25:18.210 --> 00:25:20.320
is it will return a function value

520
00:25:20.320 --> 00:25:22.340
and then you can immediately run that function

521
00:25:22.340 --> 00:25:24.860
by putting parentheses on the end.

522
00:25:24.860 --> 00:25:27.600
Wow, and if we refresh the page

523
00:25:27.600 --> 00:25:31.320
you'll see that our function expression

524
00:25:31.320 --> 00:25:35.190
was immediately invoked, it was immediately run.

525
00:25:35.190 --> 00:25:38.800
So immediately run function expression

526
00:25:38.800 --> 00:25:40.430
would be another way to say it.

527
00:25:40.430 --> 00:25:44.770
So like, what's the benefit of doing something like that?

528
00:25:44.770 --> 00:25:49.770
Well, it used to be very popular before we had modules

529
00:25:49.780 --> 00:25:52.740
and before we actually had what's called block scope,

530
00:25:52.740 --> 00:25:54.850
because when we get into scoping,

531
00:25:54.850 --> 00:25:58.670
you're gonna realize that a function declares its own scope,

532
00:25:58.670 --> 00:26:02.490
and it's often handy to even declare functions

533
00:26:02.490 --> 00:26:04.060
inside of this thing

534
00:26:04.060 --> 00:26:06.660
and it will sort of provide us our own little sheltered

535
00:26:06.660 --> 00:26:09.930
space where variables can't leak inside,

536
00:26:09.930 --> 00:26:10.990
and something like that.

537
00:26:10.990 --> 00:26:14.310
So I'm not gonna go super deep into that just yet

538
00:26:14.310 --> 00:26:17.010
because I think it's a bit more of an advanced topic

539
00:26:17.010 --> 00:26:19.080
and we will be using it

540
00:26:19.080 --> 00:26:21.350
but for now we're going to just know

541
00:26:21.350 --> 00:26:23.610
that this is the immediately invoked function expression.

542
00:26:23.610 --> 00:26:27.690
Last thing is like, what if this function took an age,

543
00:26:27.690 --> 00:26:32.690
You are cool and age, age to the back text.

544
00:26:36.130 --> 00:26:37.260
How would that work?

545
00:26:37.260 --> 00:26:39.730
Well, if you want to pass an age, you pass it like that.

546
00:26:39.730 --> 00:26:42.250
So this will probably look a little bit funky to you

547
00:26:42.250 --> 00:26:43.960
and again, it's probably not something

548
00:26:43.960 --> 00:26:46.920
you're gonna be using all that often

549
00:26:46.920 --> 00:26:49.100
but it does come up every now and then

550
00:26:49.100 --> 00:26:51.760
where I need to create what's called a closure

551
00:26:51.760 --> 00:26:54.030
we've got a video coming up on those,

552
00:26:54.030 --> 00:26:58.150
I need to have my own scope so stay tuned for that.

553
00:26:58.150 --> 00:27:01.650
Next type of function that we have is called a,

554
00:27:01.650 --> 00:27:02.890
let's get rid of this console log.

555
00:27:02.890 --> 00:27:05.510
The next one we have is called methods,

556
00:27:05.510 --> 00:27:08.310
methods I've been sort of like,

557
00:27:08.310 --> 00:27:12.380
just like saying methods and functions are the same thing

558
00:27:12.380 --> 00:27:16.080
and we have an entire video on creating your own methods

559
00:27:16.080 --> 00:27:18.720
coming out, but for now we can we can understand

560
00:27:18.720 --> 00:27:19.553
what a method is.

561
00:27:19.553 --> 00:27:23.150
So a method is simply a function

562
00:27:23.150 --> 00:27:25.150
that lives inside of an object.

563
00:27:25.150 --> 00:27:28.500
So if we take a look at our function here,

564
00:27:28.500 --> 00:27:33.220
which is console.log, I say hey,

565
00:27:33.220 --> 00:27:35.720
I've been telling you that console log is a function now

566
00:27:35.720 --> 00:27:39.830
I've been lying to you, log is actually the function

567
00:27:39.830 --> 00:27:43.480
that lives inside of console, console is actually an object

568
00:27:43.480 --> 00:27:46.420
if you just type in console and you open it up

569
00:27:46.420 --> 00:27:49.060
you'll see that there's there's all kinds of stuff in here

570
00:27:49.060 --> 00:27:51.830
right, if you hover over where's log, let's look for it

571
00:27:51.830 --> 00:27:54.550
here we go log, you hover over top of it,

572
00:27:54.550 --> 00:27:56.540
you see there's a little f there

573
00:27:56.540 --> 00:27:58.190
and that means that it's actually a function

574
00:27:58.190 --> 00:28:01.410
so log is the function, info is the function,

575
00:28:01.410 --> 00:28:03.750
console.count is the function

576
00:28:03.750 --> 00:28:07.320
and console is an object and that we use a special word

577
00:28:07.320 --> 00:28:10.290
to describe functions that live inside of an object

578
00:28:10.290 --> 00:28:12.420
and we call those methods.

579
00:28:12.420 --> 00:28:15.870
So we can actually do something like this where we say

580
00:28:15.870 --> 00:28:19.960
const wes is equal to an object

581
00:28:19.960 --> 00:28:22.370
and we can say the name is Wes bus

582
00:28:24.180 --> 00:28:29.180
and we'll saHi, is equal to a function.

583
00:28:32.162 --> 00:28:36.410
And inside of that we can say console.log ('Hey Wes')

584
00:28:38.235 --> 00:28:41.553
or we could return 'Hey Wes' let's try it.

585
00:28:43.990 --> 00:28:47.510
We got Wes and Wes.sayHi is a method

586
00:28:49.190 --> 00:28:51.730
so that's one way to declare a method

587
00:28:51.730 --> 00:28:54.410
you just create a property on your object

588
00:28:54.410 --> 00:28:56.690
and you set it to a function.

589
00:28:56.690 --> 00:28:59.060
These functions can also have names

590
00:28:59.060 --> 00:29:00.400
sometimes you'll see this

591
00:29:00.400 --> 00:29:02.950
It doesn't make a whole lot of sense to me to do this

592
00:29:02.950 --> 00:29:04.590
but it's technically allowed,

593
00:29:04.590 --> 00:29:08.060
the property or the variable is called sayHi

594
00:29:08.060 --> 00:29:11.640
and the function name is also called sayHi

595
00:29:11.640 --> 00:29:13.790
it's not necessary to do that anymore

596
00:29:13.790 --> 00:29:17.160
because the browsers will infer the name of the function

597
00:29:17.160 --> 00:29:20.560
from the property name, just like when we stuck

598
00:29:20.560 --> 00:29:24.350
a function into a variable, there's no need to name it

599
00:29:24.350 --> 00:29:26.530
because it will infer the name of the function

600
00:29:26.530 --> 00:29:29.900
from the prop, the variable that it's in.

601
00:29:29.900 --> 00:29:32.410
So that's one way to define a function.

602
00:29:32.410 --> 00:29:34.850
There is also a new shorthand method

603
00:29:34.850 --> 00:29:39.547
so we'll just say, we'll put a comment here, method

604
00:29:41.260 --> 00:29:45.600
and then we'll just say, short hand method,

605
00:29:45.600 --> 00:29:49.077
we'll make one called yellHi and from that

606
00:29:51.420 --> 00:29:54.988
we'll just console log('HEY WESSSSS')

607
00:29:54.988 --> 00:29:56.060
and you'll see what I did there

608
00:29:56.060 --> 00:29:59.180
is instead of saying yellHi:function

609
00:29:59.180 --> 00:30:03.083
which will work let's try it wes.YellHi,

610
00:30:04.230 --> 00:30:07.530
we can actually get rid of the function keyword

611
00:30:07.530 --> 00:30:10.550
and get rid of the parenthese and what this will do

612
00:30:10.550 --> 00:30:13.530
is that it will make a property called yellHi

613
00:30:13.530 --> 00:30:16.490
set to a function called yellHi.

614
00:30:16.490 --> 00:30:20.170
So this is just a shorthand way to write methods

615
00:30:20.170 --> 00:30:25.170
inside of an object where you just write yelHi parentheses

616
00:30:25.550 --> 00:30:28.720
and then the function block, again it's exact same thing

617
00:30:28.720 --> 00:30:31.690
as doing this yellHi is equal to a function

618
00:30:33.010 --> 00:30:36.750
that is console log in WESSS, something I goofed up there,

619
00:30:36.750 --> 00:30:41.750
what did I, i spelt function wrong, there we go.

620
00:30:42.040 --> 00:30:44.240
So again, we'll bring that back

621
00:30:44.240 --> 00:30:48.320
there also is another way of an arrow function

622
00:30:48.320 --> 00:30:53.320
where we could say wisperHi and that will be equal to

623
00:30:54.530 --> 00:30:58.684
an arrow function, we just console log

624
00:30:58.684 --> 00:31:02.920
('hii wesss I'm a mouse')

625
00:31:02.920 --> 00:31:05.730
do mouses whisper, I think they do.

626
00:31:05.730 --> 00:31:06.730
So that's just another way,

627
00:31:06.730 --> 00:31:10.690
this is an arrow function that takes no arguments.

628
00:31:10.690 --> 00:31:13.200
In this case you could take in somebody's name

629
00:31:13.200 --> 00:31:16.410
or something like that if you want and that shows us

630
00:31:16.410 --> 00:31:18.900
so these are three different ways to do methods,

631
00:31:18.900 --> 00:31:22.020
I would say that this going to be the most common way,

632
00:31:22.020 --> 00:31:24.250
the only reason you would do an arrow function

633
00:31:24.250 --> 00:31:27.630
is because you don't wanna access this.

634
00:31:27.630 --> 00:31:29.300
We're gonna go into that once we hit object,

635
00:31:29.300 --> 00:31:31.090
but I'll show you real quick in here is,

636
00:31:31.090 --> 00:31:33.280
if you were to console log this,

637
00:31:33.280 --> 00:31:36.420
the keyword this inside of a method,

638
00:31:36.420 --> 00:31:39.030
if I were to console log wes.sayHi

639
00:31:40.770 --> 00:31:45.230
you'll see that line 50 I console log this

640
00:31:45.230 --> 00:31:47.110
so that's this one right here

641
00:31:47.110 --> 00:31:50.170
and you open it up, this is gonna be equal to the object

642
00:31:50.170 --> 00:31:51.890
that it was called against.

643
00:31:51.890 --> 00:31:55.260
And that's kinda cool because you could actually just do

644
00:31:55.260 --> 00:31:59.840
something like this console log('Hey ${this.name}')

645
00:32:03.270 --> 00:32:04.870
again, we're getting a little ahead of ourselves

646
00:32:04.870 --> 00:32:06.490
but I just wanna show you real quick.

647
00:32:06.490 --> 00:32:09.580
So if I say, sayHi, says Hey Wes Bos,

648
00:32:09.580 --> 00:32:11.523
if I changed my name to Westopher

649
00:32:14.290 --> 00:32:15.940
you see that it automatically just pulls it

650
00:32:15.940 --> 00:32:18.260
from the actual object itself

651
00:32:18.260 --> 00:32:21.390
the thing about that will work in this one as well,

652
00:32:21.390 --> 00:32:24.530
it will not work in this one because arrow functions

653
00:32:24.530 --> 00:32:26.428
do not have a scope of this or sorry,

654
00:32:26.428 --> 00:32:29.180
they take the parent scope of this.

655
00:32:29.180 --> 00:32:31.820
So again, a little bit ahead will go much more into that

656
00:32:31.820 --> 00:32:34.470
in the future, that is what methods are.

657
00:32:34.470 --> 00:32:37.310
The final thing I wanna talk to you about functions

658
00:32:37.310 --> 00:32:40.820
and ways to declare them, they are called callback function

659
00:32:40.820 --> 00:32:44.370
so let's make a callback functions.

660
00:32:44.370 --> 00:32:47.370
So callback function is just a regular function

661
00:32:47.370 --> 00:32:50.040
but we sort of use that name for something

662
00:32:50.040 --> 00:32:52.950
that will happen when something is done

663
00:32:52.950 --> 00:32:55.720
and the easiest way to define a callback function

664
00:32:55.720 --> 00:32:59.230
is either when somebody clicks something, run this

665
00:32:59.230 --> 00:33:02.080
or when this amount of time has passed, run this.

666
00:33:02.080 --> 00:33:04.420
So let's look at both of those examples right now.

667
00:33:04.420 --> 00:33:07.143
So first one, let's do a quick call back.

668
00:33:09.150 --> 00:33:11.860
We'll go into our index HTML

669
00:33:11.860 --> 00:33:16.630
and we'll give ourselves a button and say click me

670
00:33:17.860 --> 00:33:21.533
and give that a class of click me,

671
00:33:22.420 --> 00:33:24.880
then I'll go down here and we'll select that element

672
00:33:24.880 --> 00:33:26.120
will go much more into the dom

673
00:33:26.120 --> 00:33:29.530
but in order to select the element will say const button

674
00:33:29.530 --> 00:33:33.690
is equal to document.query selector say .clickMe

675
00:33:34.910 --> 00:33:36.590
and console log the button.

676
00:33:36.590 --> 00:33:38.370
Let's see if that works, good

677
00:33:38.370 --> 00:33:39.970
we've got this button showing up

678
00:33:40.830 --> 00:33:43.740
then we're going to listen for a click on that button,

679
00:33:43.740 --> 00:33:47.983
say button.addEvent listener and when that click happens,

680
00:33:49.583 --> 00:33:53.134
we pass it reference to any function that we want to to run.

681
00:33:53.134 --> 00:33:55.051
So let's say wes.yellHi

682
00:34:02.009 --> 00:34:05.441
now every time you click it, it just says, HEY WESSSS right.

683
00:34:05.441 --> 00:34:08.910
So what's happening here, is this is an event listener

684
00:34:08.910 --> 00:34:11.930
that we're listening for a click on and the callback

685
00:34:11.930 --> 00:34:14.560
is sort of a function that we give it access to

686
00:34:14.560 --> 00:34:16.410
you'll notice that we're not running in here

687
00:34:16.410 --> 00:34:19.020
we're just saying, here's the function,

688
00:34:19.020 --> 00:34:23.270
the browser, could you be a dear and call that function

689
00:34:23.270 --> 00:34:24.980
when somebody clicks that button

690
00:34:24.980 --> 00:34:27.640
and that is what is referred to as a callback function.

691
00:34:27.640 --> 00:34:30.530
Now, callback functions can be declared outside

692
00:34:30.530 --> 00:34:35.110
of the handler, so I'll make a function called handleClick

693
00:34:36.407 --> 00:34:39.610
and you can call that anything you want and console log

694
00:34:39.610 --> 00:34:44.363
Great Clicking!! in here we'll say handleClick.

695
00:34:45.420 --> 00:34:48.040
So what we've done here is we've defined a function called

696
00:34:48.040 --> 00:34:51.040
handleclick, and then we said when somebody clicks it,

697
00:34:51.040 --> 00:34:53.580
here's the function that you should run browser

698
00:34:53.580 --> 00:34:55.710
and click it says great clicking.

699
00:34:55.710 --> 00:35:00.096
The other option and this is probably about half as common

700
00:35:00.096 --> 00:35:03.230
I'd say myself half the time I do it like this

701
00:35:03.230 --> 00:35:05.150
where I defined the function outside

702
00:35:05.150 --> 00:35:08.130
and then I just pass in reference to the function.

703
00:35:08.130 --> 00:35:11.210
The other way to do it is you can actually just pass it

704
00:35:11.210 --> 00:35:12.790
in anonymous function in here

705
00:35:12.790 --> 00:35:15.190
so we can actually do this, we just say function

706
00:35:18.420 --> 00:35:22.980
and inside of that, we can console log ('Nice Job!!!')

707
00:35:27.200 --> 00:35:29.740
And it works just fine, so what we've done here

708
00:35:29.740 --> 00:35:33.230
is we've just passed it and anonymous function

709
00:35:33.230 --> 00:35:37.840
as a value directly and the browser will know

710
00:35:37.840 --> 00:35:39.680
to call this function itself.

711
00:35:39.680 --> 00:35:42.350
So there's some upsides and downsides to doing it this way,

712
00:35:42.350 --> 00:35:44.920
we'll get into it and we hit event listeners but just know

713
00:35:44.920 --> 00:35:48.130
that this is what's referred to as a callback function,

714
00:35:48.130 --> 00:35:51.380
a function that gets passed into another function

715
00:35:51.380 --> 00:35:53.590
and then it is called by the browser

716
00:35:53.590 --> 00:35:55.510
at a later point in time.

717
00:35:55.510 --> 00:35:57.780
And the other example that we have there

718
00:35:57.780 --> 00:36:00.110
is a like a timer callback.

719
00:36:00.110 --> 00:36:03.150
So, in the browser we have a couple ways to do timers

720
00:36:03.150 --> 00:36:04.940
and we'll look at all of those in the future

721
00:36:04.940 --> 00:36:09.170
and probably the simplest one is with a set timeout

722
00:36:09.170 --> 00:36:11.290
and a set timeout takes two things.

723
00:36:11.290 --> 00:36:13.910
First, it takes a function to call

724
00:36:14.850 --> 00:36:17.220
that you want to run after a certain amount of time.

725
00:36:17.220 --> 00:36:21.600
So we could say, wes.yellHi and then second,

726
00:36:21.600 --> 00:36:24.130
it asks for a duration in milliseconds

727
00:36:24.130 --> 00:36:26.380
so after how long should I run this.

728
00:36:26.380 --> 00:36:29.400
So let's do 1000 that's one second later.

729
00:36:29.400 --> 00:36:33.110
Now we run this page and after one second,

730
00:36:33.110 --> 00:36:35.640
it will run HEY WESSSS.

731
00:36:35.640 --> 00:36:38.590
So that's cool but you can also like we've done before

732
00:36:38.590 --> 00:36:40.953
is you can pass it an anonymous function.

733
00:36:43.760 --> 00:36:46.650
And in here, console log done, time to eat

734
00:36:51.118 --> 00:36:53.570
Time to eat, so this is where its referred to

735
00:36:53.570 --> 00:36:55.400
as a callback function.

736
00:36:55.400 --> 00:36:57.830
You can pass those as arrow functions as well

737
00:36:59.320 --> 00:37:02.840
that will work just exactly the same beautiful

738
00:37:02.840 --> 00:37:05.980
in any of the other ways that we've looked at it.

739
00:37:05.980 --> 00:37:07.120
So callback functions,

740
00:37:07.120 --> 00:37:08.960
we're gonna use this a lot in our examples.

741
00:37:08.960 --> 00:37:10.270
So that is all the different ways

742
00:37:10.270 --> 00:37:11.820
that you can declare a function.

743
00:37:11.820 --> 00:37:13.500
We got a couple more things to learn

744
00:37:13.500 --> 00:37:15.510
before we can get into writing

745
00:37:15.510 --> 00:37:17.153
a whole bunch of cool examples.

