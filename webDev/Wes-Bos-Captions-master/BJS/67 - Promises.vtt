WEBVTT

1
00:00:00.661 --> 00:00:03.328
(hip-hop music)

2
00:00:05.470 --> 00:00:08.120
<v Wes>The solution to callback hell is to use a promise.</v>

3
00:00:08.120 --> 00:00:10.530
Now, a promise is a new idea

4
00:00:10.530 --> 00:00:12.580
that we're learning here in this course.

5
00:00:12.580 --> 00:00:16.550
And a promise is this idea of an IOU

6
00:00:16.550 --> 00:00:19.500
for something that will happen in the future.

7
00:00:19.500 --> 00:00:21.740
So if you think of our timer,

8
00:00:21.740 --> 00:00:25.280
or you think of some data being returned from an API,

9
00:00:25.280 --> 00:00:27.370
or you think of someone giving access

10
00:00:27.370 --> 00:00:29.700
to a webcam or a microphone,

11
00:00:29.700 --> 00:00:31.800
when we request those things,

12
00:00:31.800 --> 00:00:36.800
when we request a timer to start a data to be requested

13
00:00:36.840 --> 00:00:40.910
or a microphone to give access to,

14
00:00:40.910 --> 00:00:44.340
what we often get as when we request those things

15
00:00:44.340 --> 00:00:47.900
is not the immediate data back,

16
00:00:47.900 --> 00:00:49.410
'cause those things take time,

17
00:00:49.410 --> 00:00:52.000
but instead of getting the immediate data return,

18
00:00:52.000 --> 00:00:53.790
we would get a promise.

19
00:00:53.790 --> 00:00:55.980
And you can sort of think of, like me,

20
00:00:55.980 --> 00:00:58.530
I'm holding in my hand right now a little promise

21
00:00:58.530 --> 00:01:01.730
and it's a little ticket that says, whoo,

22
00:01:01.730 --> 00:01:04.500
I might get a timer at some point

23
00:01:04.500 --> 00:01:07.690
or I have this ticket for some data,

24
00:01:07.690 --> 00:01:09.290
and eventually, at some point,

25
00:01:09.290 --> 00:01:11.220
I'll probably get some data back.

26
00:01:11.220 --> 00:01:13.360
It could also fail, which is called rejecting.

27
00:01:13.360 --> 00:01:15.210
We'll talk about that in just a second.

28
00:01:15.210 --> 00:01:18.750
Or if you're asking for a user's webcam,

29
00:01:18.750 --> 00:01:22.853
if we take a look at the, what do we call that?

30
00:01:24.010 --> 00:01:25.690
The exercise

31
00:01:25.690 --> 00:01:28.543
with the face detection.

32
00:01:30.853 --> 00:01:35.290
You see that we asked for the user's microphone

33
00:01:35.290 --> 00:01:37.270
and then went ahead and played it,

34
00:01:37.270 --> 00:01:39.580
but we did this little await thing here,

35
00:01:39.580 --> 00:01:41.910
meaning that we had to wait for the user

36
00:01:41.910 --> 00:01:44.600
to click the Accept button in the browser

37
00:01:44.600 --> 00:01:47.360
before they gave us access to their webcam.

38
00:01:47.360 --> 00:01:48.690
So that happens all the time.

39
00:01:48.690 --> 00:01:51.490
You need to wait for something to happen

40
00:01:51.490 --> 00:01:53.530
before you can run the rest of the code.

41
00:01:53.530 --> 00:01:55.610
And that is what a promise is.

42
00:01:55.610 --> 00:01:58.660
So let's go ahead and make a little playground file here

43
00:01:58.660 --> 00:02:00.120
in the playground folder.

44
00:02:00.120 --> 00:02:02.620
We'll make a promises.html.

45
00:02:02.620 --> 00:02:06.270
We'll give ourselves a little base here, call it Promises,

46
00:02:06.270 --> 00:02:08.550
and we'll give ourselves a script tag.

47
00:02:08.550 --> 00:02:09.492
Now, inside of that,

48
00:02:09.492 --> 00:02:11.807
I want you to make a function called makePizza.

49
00:02:14.110 --> 00:02:17.240
And inside of that, what we're gonna do

50
00:02:17.240 --> 00:02:19.860
is we're going to make a pizza promise

51
00:02:19.860 --> 00:02:23.070
because you can't just make a pizza instantly.

52
00:02:23.070 --> 00:02:25.570
A pizza's, gotta eat that, you put the toppings on,

53
00:02:25.570 --> 00:02:28.260
you gotta put your pepperoni on, you gotta bake the thing.

54
00:02:28.260 --> 00:02:30.120
That takes time.

55
00:02:30.120 --> 00:02:34.130
So what you can do is if you were to order a pizza

56
00:02:34.130 --> 00:02:36.260
by phoning them or doing it online,

57
00:02:36.260 --> 00:02:37.810
they will immediately give you

58
00:02:37.810 --> 00:02:39.280
some sort of like order number,

59
00:02:39.280 --> 00:02:40.530
and that's not the pizza.

60
00:02:40.530 --> 00:02:41.970
You can't eat the order number,

61
00:02:41.970 --> 00:02:44.780
but you know that that order number

62
00:02:44.780 --> 00:02:46.540
or that receipt is a promise

63
00:02:46.540 --> 00:02:49.860
that they will give it to you when it's finished.

64
00:02:49.860 --> 00:02:51.460
So what we do here

65
00:02:51.460 --> 00:02:55.620
is we make a promise, we'll say const pizzaPromise

66
00:02:55.620 --> 00:02:58.483
is equal to new, capital P, Promise,

67
00:02:59.320 --> 00:03:02.210
and then you return that pizzaPromise

68
00:03:02.210 --> 00:03:04.790
from your function immediately.

69
00:03:04.790 --> 00:03:07.390
So this is sort of the key point,

70
00:03:07.390 --> 00:03:10.760
is that promises are made immediately,

71
00:03:10.760 --> 00:03:13.630
but they do not resolve

72
00:03:13.630 --> 00:03:15.310
until they are ready,

73
00:03:15.310 --> 00:03:18.310
until the data comes back, until the timer is finished,

74
00:03:18.310 --> 00:03:19.170
something like that.

75
00:03:19.170 --> 00:03:20.830
So this idea

76
00:03:20.830 --> 00:03:22.020
of

77
00:03:22.020 --> 00:03:24.290
returning happening immediately

78
00:03:24.290 --> 00:03:26.960
and resolving happening when it's done

79
00:03:26.960 --> 00:03:28.400
is really important.

80
00:03:28.400 --> 00:03:30.973
Now, a promise takes a callback function,

81
00:03:32.610 --> 00:03:36.120
and that callback function is gonna give us two arguments.

82
00:03:36.120 --> 00:03:40.370
We get the resolve function and we get the reject function.

83
00:03:40.370 --> 00:03:42.070
The first one is always gonna be resolve,

84
00:03:42.070 --> 00:03:44.180
the second one will be the reject.

85
00:03:44.180 --> 00:03:46.090
And then what you can do

86
00:03:46.090 --> 00:03:49.270
is when you are ready,

87
00:03:49.270 --> 00:03:52.840
you can resolve this promise

88
00:03:52.840 --> 00:03:56.730
and then if something went wrong,

89
00:03:56.730 --> 00:03:59.763
we can reject this promise.

90
00:04:00.690 --> 00:04:02.070
So what we get here

91
00:04:02.070 --> 00:04:05.170
is, let's just immediately resolve the pizza,

92
00:04:05.170 --> 00:04:07.423
let's use a little pizza emoji,

93
00:04:08.600 --> 00:04:11.770
and we'll go down here and start using this function.

94
00:04:11.770 --> 00:04:13.500
So if we do this const

95
00:04:14.950 --> 00:04:17.627
pizza is equal to makePizza,

96
00:04:20.810 --> 00:04:23.510
and we were to console.log the pizza,

97
00:04:23.510 --> 00:04:25.840
what do you think we were gonna get?

98
00:04:25.840 --> 00:04:28.610
This function returns a promise,

99
00:04:28.610 --> 00:04:29.960
but that it's also resolved,

100
00:04:29.960 --> 00:04:32.330
like do you think we're gonna get the pizza

101
00:04:32.330 --> 00:04:34.440
or something else like a promise?

102
00:04:34.440 --> 00:04:35.803
Let's open it up and see.

103
00:04:37.940 --> 00:04:39.400
Ahh, you see what we get here?

104
00:04:39.400 --> 00:04:41.470
We get a Promise.

105
00:04:41.470 --> 00:04:44.550
It does show the status marked as resolved,

106
00:04:44.550 --> 00:04:47.010
but that's not important just yet.

107
00:04:47.010 --> 00:04:50.550
What's important here is that this function

108
00:04:50.550 --> 00:04:52.170
doesn't give us the pizza,

109
00:04:52.170 --> 00:04:54.520
it gives us a promise of pizza,

110
00:04:54.520 --> 00:04:56.720
that at some point in the future,

111
00:04:56.720 --> 00:04:59.980
I will either resolve to you a slice of pizza

112
00:04:59.980 --> 00:05:04.210
or I will reject because something went wrong.

113
00:05:04.210 --> 00:05:08.200
So let's make this function a little bit more robust.

114
00:05:08.200 --> 00:05:12.070
We'll take in some toppings and we will resolve,

115
00:05:12.070 --> 00:05:16.500
let's resolve, backticks, so Here is your pizza,

116
00:05:16.500 --> 00:05:18.040
put a pizza emoji in there,

117
00:05:18.040 --> 00:05:20.960
keep it interesting, with the toppings,

118
00:05:20.960 --> 00:05:24.613
and then let's just interpolate the toppings.join,

119
00:05:25.680 --> 00:05:27.423
and do that on a space.

120
00:05:28.280 --> 00:05:30.503
Now, if I were to make a pepperoni,

121
00:05:32.190 --> 00:05:35.053
we'll make that a pepperoniPromise,

122
00:05:35.053 --> 00:05:36.464
we will make it

123
00:05:36.464 --> 00:05:37.297
with

124
00:05:41.029 --> 00:05:41.862
pepperoni,

125
00:05:44.090 --> 00:05:47.107
and then we'll also do a canadianPromise,

126
00:05:49.770 --> 00:05:51.773
and that is pepperoni,

127
00:05:53.260 --> 00:05:55.463
mushrooms, onions.

128
00:05:57.270 --> 00:05:59.220
Now, let's console.log both of those

129
00:06:04.930 --> 00:06:06.140
and refresh.

130
00:06:06.140 --> 00:06:08.270
You see we get two of our promises.

131
00:06:08.270 --> 00:06:11.020
Now, how do I actually get the actual pizza itself?

132
00:06:11.020 --> 00:06:12.660
And this is a little bit confusing

133
00:06:12.660 --> 00:06:15.430
'cause the DevTools will show you the value

134
00:06:15.430 --> 00:06:18.340
when it is resolved, but in JavaScript,

135
00:06:18.340 --> 00:06:22.260
if you actually wanna access the value of the pizza,

136
00:06:22.260 --> 00:06:26.820
it's not like you can say pepperoniPromise.value in here

137
00:06:26.820 --> 00:06:29.170
and like, that's not gonna work.

138
00:06:29.170 --> 00:06:30.550
See, it just says undefined.

139
00:06:30.550 --> 00:06:33.410
There's no way to actually access it like that.

140
00:06:33.410 --> 00:06:36.630
There will be when we hit async await.

141
00:06:36.630 --> 00:06:38.530
But the way that we can access it

142
00:06:38.530 --> 00:06:41.720
is we say pepperoniPromise.then

143
00:06:41.720 --> 00:06:45.244
and you give it a callback function,

144
00:06:45.244 --> 00:06:48.990
and that callback will pass you a pizza

145
00:06:48.990 --> 00:06:51.603
and then we'll console.log Ahh, go it!

146
00:06:53.590 --> 00:06:56.320
And then console.log the pizza that was passed back.

147
00:06:56.320 --> 00:06:58.003
So now, when I refresh this,

148
00:06:58.867 --> 00:06:59.900
it'd say Ahh, go it!

149
00:06:59.900 --> 00:07:03.000
Here's your pizza with the toppings of pepperoni.

150
00:07:03.000 --> 00:07:07.250
Now, this might seem like, why are you doing this, Wes?

151
00:07:07.250 --> 00:07:10.140
This seems like a way harder way just to return data.

152
00:07:10.140 --> 00:07:12.780
And it's because we haven't introduced

153
00:07:12.780 --> 00:07:15.423
any sort of time delays into this.

154
00:07:16.410 --> 00:07:19.020
So let's introduce

155
00:07:19.020 --> 00:07:21.680
maybe a one second delay

156
00:07:23.090 --> 00:07:25.340
for that the pizza needed to be cooked.

157
00:07:25.340 --> 00:07:27.070
So what we'll do is inside of here,

158
00:07:27.070 --> 00:07:30.823
we'll say wait one second for the pizza to cook,

159
00:07:33.004 --> 00:07:35.843
and we'll say setTimeout function,

160
00:07:37.550 --> 00:07:40.420
this setTimeout will take one second,

161
00:07:40.420 --> 00:07:43.090
and then we will resolve

162
00:07:43.090 --> 00:07:45.830
inside of the timeout.

163
00:07:45.830 --> 00:07:47.680
Now, what's gonna happen

164
00:07:48.600 --> 00:07:50.400
is, let's just take this pepperoni,

165
00:07:50.400 --> 00:07:52.700
console.log pepperoniPromise,

166
00:07:54.600 --> 00:07:58.990
you see immediately we get the Promise, which is pending,

167
00:07:58.990 --> 00:08:00.430
and then one second later,

168
00:08:00.430 --> 00:08:03.130
we actually get access to our pizza.

169
00:08:03.130 --> 00:08:04.990
And that is a great example

170
00:08:04.990 --> 00:08:07.740
of how we have to sometimes wait.

171
00:08:07.740 --> 00:08:09.230
So let's go through this one more time.

172
00:08:09.230 --> 00:08:12.447
We have a regular function that makes a Promise

173
00:08:12.447 --> 00:08:15.150
and then immediately, that Promise is returned.

174
00:08:15.150 --> 00:08:18.430
Often, what you'll see is instead of people

175
00:08:18.430 --> 00:08:20.550
making a Promise and then returning it,

176
00:08:20.550 --> 00:08:23.510
they will just skip the variable altogether

177
00:08:23.510 --> 00:08:27.280
and then just return a new Promise immediately.

178
00:08:27.280 --> 00:08:28.300
So that is a function

179
00:08:28.300 --> 00:08:30.430
that immediately returns a new Promise.

180
00:08:30.430 --> 00:08:34.010
Now, the logic to how the Promise gets resolved

181
00:08:34.010 --> 00:08:37.680
is always inside of the Promise body,

182
00:08:37.680 --> 00:08:41.180
and now that function will either resolve or reject

183
00:08:41.180 --> 00:08:43.700
whenever it feels like it is ready.

184
00:08:43.700 --> 00:08:45.770
In our case, we feel like the pizza

185
00:08:45.770 --> 00:08:47.680
is ready after one second.

186
00:08:47.680 --> 00:08:49.430
Then what you need to do

187
00:08:49.430 --> 00:08:53.180
is to go ahead and run that function

188
00:08:53.180 --> 00:08:55.260
and that will return what?

189
00:08:55.260 --> 00:08:57.390
Returns a promise of pizza.

190
00:08:57.390 --> 00:09:00.100
And then, (laughs) no pun intended,

191
00:09:00.100 --> 00:09:01.880
in order to get the pizza,

192
00:09:01.880 --> 00:09:05.210
the way that you access the resolved value

193
00:09:05.210 --> 00:09:08.600
is by chaining a .then onto it.

194
00:09:08.600 --> 00:09:10.620
So that will look a little bit something like this.

195
00:09:10.620 --> 00:09:12.580
If I say console.log Starting

196
00:09:13.500 --> 00:09:16.013
and console.log finishing,

197
00:09:19.990 --> 00:09:21.900
Starting, finishing immediately,

198
00:09:21.900 --> 00:09:25.690
and then this promise will only run when it's like.

199
00:09:25.690 --> 00:09:27.420
We're gonna look at how we can use async await

200
00:09:27.420 --> 00:09:30.250
to actually do that sequentially if we like to,

201
00:09:30.250 --> 00:09:33.950
but right now, we know that we can chain a .then onto it.

202
00:09:33.950 --> 00:09:37.100
So why is that anymore useful than a regular callback?

203
00:09:37.100 --> 00:09:38.220
'Cause maybe to you,

204
00:09:38.220 --> 00:09:40.400
that just looks like a regular old callback.

205
00:09:40.400 --> 00:09:45.010
Well, if I wanted to make multiple pizzas one after another,

206
00:09:45.010 --> 00:09:47.230
and let's say I have an oven

207
00:09:47.230 --> 00:09:49.133
that can only cook one pizza at a time,

208
00:09:49.133 --> 00:09:52.410
what we could do is, let's back this up here,

209
00:09:52.410 --> 00:09:54.540
I'm just gonna delete this entirely,

210
00:09:54.540 --> 00:09:56.790
let's delete the Canadian pizza,

211
00:09:56.790 --> 00:10:00.430
and we can even just delete this,

212
00:10:00.430 --> 00:10:02.810
so we've got makePizza pepperoni,

213
00:10:02.810 --> 00:10:06.200
we could chain a .then immediately onto that function.

214
00:10:06.200 --> 00:10:07.033
Why?

215
00:10:07.033 --> 00:10:09.480
Because makePizza returns a Promise

216
00:10:09.480 --> 00:10:13.430
which allows us to chain a .then onto it,

217
00:10:13.430 --> 00:10:16.763
which will give a function that has a pizza,

218
00:10:17.623 --> 00:10:20.510
and then we can just console.log the pizza.

219
00:10:20.510 --> 00:10:21.910
Let's see if it still works.

220
00:10:22.880 --> 00:10:24.530
After one second, Here's your pizza

221
00:10:24.530 --> 00:10:26.210
with the toppings of pepperoni.

222
00:10:26.210 --> 00:10:27.500
Now, the cool thing about that

223
00:10:27.500 --> 00:10:32.500
is, is from this then, if you return another makePizza

224
00:10:33.420 --> 00:10:34.253
with,

225
00:10:35.220 --> 00:10:37.703
let's say ham and cheese,

226
00:10:40.250 --> 00:10:41.090
what's cool about that

227
00:10:41.090 --> 00:10:45.370
is you can chain another .then onto that,

228
00:10:45.370 --> 00:10:50.283
say function, console.log, again, we can say the pizza,

229
00:10:51.717 --> 00:10:53.617
and we'll console.log the pizza again.

230
00:10:57.790 --> 00:11:00.880
One second, one second later, you get the second one.

231
00:11:00.880 --> 00:11:02.450
And you can go as long as you want.

232
00:11:02.450 --> 00:11:04.200
Often, people will like to do this.

233
00:11:07.360 --> 00:11:08.700
Indent it like that.

234
00:11:08.700 --> 00:11:10.040
It's a little bit more readable

235
00:11:10.040 --> 00:11:12.610
because it puts them each onto their own line.

236
00:11:12.610 --> 00:11:15.070
You can put the then on its own line as well.

237
00:11:15.070 --> 00:11:16.340
See if it still works.

238
00:11:16.340 --> 00:11:18.490
You notice that it didn't put any semicolons here

239
00:11:18.490 --> 00:11:19.900
because these are chained.

240
00:11:19.900 --> 00:11:21.727
They're just on their own line.

241
00:11:21.727 --> 00:11:23.690
But we can go,

242
00:11:23.690 --> 00:11:26.243
and from this one, return another makePizza,

243
00:11:29.220 --> 00:11:30.680
which looks a little something like this.

244
00:11:30.680 --> 00:11:32.450
I don't know, what do you put on your pizza?

245
00:11:32.450 --> 00:11:33.460
Hot peppers

246
00:11:34.350 --> 00:11:35.790
and onion

247
00:11:40.550 --> 00:11:41.383
and feta.

248
00:11:42.870 --> 00:11:44.230
How do you get access to that?

249
00:11:44.230 --> 00:11:46.390
Well, .then,

250
00:11:46.390 --> 00:11:47.223
function,

251
00:11:49.570 --> 00:11:51.030
pizza,

252
00:11:51.030 --> 00:11:52.017
console.log pizza.

253
00:11:52.017 --> 00:11:53.890
And you see how we can go on and on.

254
00:11:53.890 --> 00:11:55.260
One,

255
00:11:55.260 --> 00:11:56.510
two,

256
00:11:56.510 --> 00:11:57.343
three.

257
00:11:58.660 --> 00:11:59.870
We're allowed to chain it.

258
00:11:59.870 --> 00:12:03.160
Now, this, previously, when we're looking at the one

259
00:12:03.160 --> 00:12:05.270
where we were adding and removing the classes,

260
00:12:05.270 --> 00:12:08.140
that was all nested and we were in callback hell.

261
00:12:08.140 --> 00:12:09.830
This is the promise land

262
00:12:09.830 --> 00:12:13.610
which allows us to keep all of this one level deep.

263
00:12:13.610 --> 00:12:17.290
The downside to that is that this will still run first

264
00:12:17.290 --> 00:12:21.173
and then this will then run right after.

265
00:12:22.830 --> 00:12:25.110
See, First, Right after?

266
00:12:25.110 --> 00:12:26.880
We're gonna look at how we can use async await

267
00:12:26.880 --> 00:12:27.920
to get around that.

268
00:12:27.920 --> 00:12:31.230
But you'll know that, again, if we'd look at the call stack,

269
00:12:31.230 --> 00:12:35.290
what happens is it runs that, then it runs this function

270
00:12:36.510 --> 00:12:41.400
which immediately returns a Promise, then it runs this one,

271
00:12:41.400 --> 00:12:43.950
and then it goes back here when that Promise is resolved

272
00:12:43.950 --> 00:12:46.533
and keeps going down that Promise chain.

273
00:12:49.240 --> 00:12:50.730
Let's make this makePizza function

274
00:12:50.730 --> 00:12:52.240
a little bit more resilient as well.

275
00:12:52.240 --> 00:12:53.300
We'll take in the toppings

276
00:12:53.300 --> 00:12:55.520
and we'll assume that's an array.

277
00:12:55.520 --> 00:12:59.150
Sometimes, people might order a pizza with nothing on it.

278
00:12:59.150 --> 00:13:02.160
So why don't we default that to an empty array.

279
00:13:02.160 --> 00:13:03.860
And then what we wanna do

280
00:13:03.860 --> 00:13:08.860
is for every single topping they have, add 200 milliseconds

281
00:13:09.500 --> 00:13:12.550
to an initial bake time of 500.

282
00:13:12.550 --> 00:13:14.840
So we'll go down here, let's just say const

283
00:13:16.649 --> 00:13:18.149
amountOfTimeToBake

284
00:13:19.370 --> 00:13:22.820
is equal to, we'll take 500 milliseconds to bake the pizza,

285
00:13:22.820 --> 00:13:27.000
and then for every topping that they have, toppings.length,

286
00:13:27.000 --> 00:13:29.550
we'll multiply that by 200 milliseconds,

287
00:13:29.550 --> 00:13:32.107
then we'll take the amountOfTimeToBake

288
00:13:33.070 --> 00:13:35.270
and pass that to our timeout.

289
00:13:35.270 --> 00:13:38.670
Now, what should happen is that ham and cheese

290
00:13:38.670 --> 00:13:40.410
should be much faster than this one.

291
00:13:40.410 --> 00:13:42.210
Let's just make sure it still works.

292
00:13:44.890 --> 00:13:45.810
Good.

293
00:13:45.810 --> 00:13:49.423
And then let's go a little further.

294
00:13:51.530 --> 00:13:52.833
Return another one here.

295
00:13:55.160 --> 00:13:57.113
Let's give it nothing.

296
00:13:59.060 --> 00:14:00.260
Do another one

297
00:14:03.850 --> 00:14:07.874
where we have a very long amount of toppings,

298
00:14:07.874 --> 00:14:10.080
one, two, three, four, okay, tons of 'em in here.

299
00:14:10.080 --> 00:14:11.543
That should take a very long time.

300
00:14:11.543 --> 00:14:12.563
It's ready.

301
00:14:16.280 --> 00:14:18.190
You see that that one went really quickly

302
00:14:18.190 --> 00:14:19.610
'cause there were no toppings

303
00:14:19.610 --> 00:14:23.110
and then this last one will take a couple seconds.

304
00:14:23.110 --> 00:14:24.630
Oh, it's never gonna,

305
00:14:24.630 --> 00:14:26.920
it will resolve, but we're never console.logging it

306
00:14:26.920 --> 00:14:31.640
so we need a final .then at the end where we have our pizza

307
00:14:31.640 --> 00:14:33.370
and look, I'm gonna use an arrow function here

308
00:14:33.370 --> 00:14:35.440
just to show you that you can do that as well,

309
00:14:35.440 --> 00:14:37.710
and we'll console.log All done!

310
00:14:37.710 --> 00:14:40.730
Here is your last pizza.

311
00:14:40.730 --> 00:14:42.133
Console.log pizza.

312
00:14:48.170 --> 00:14:49.003
Beautiful.

313
00:14:49.003 --> 00:14:50.970
Now, let's say

314
00:14:50.970 --> 00:14:53.040
we have a huge oven

315
00:14:53.040 --> 00:14:56.960
and we're able to make all of the pizzas at once.

316
00:14:56.960 --> 00:14:59.340
Well, what you can do is you can actually run them

317
00:14:59.340 --> 00:15:02.240
concurrently instead of one after another.

318
00:15:02.240 --> 00:15:04.830
This is referred to as sequentially,

319
00:15:04.830 --> 00:15:06.310
where you do one and then the next

320
00:15:06.310 --> 00:15:07.540
and then the next and then the next.

321
00:15:07.540 --> 00:15:08.650
But

322
00:15:08.650 --> 00:15:11.530
if you had maybe 10 employees

323
00:15:11.530 --> 00:15:14.130
and a huge oven where you could cook 'em all at once,

324
00:15:14.130 --> 00:15:16.160
then we can actually do that with JavaScript.

325
00:15:16.160 --> 00:15:17.800
It looks a little bit something like this.

326
00:15:17.800 --> 00:15:20.510
Run them concurrently.

327
00:15:20.510 --> 00:15:21.990
So we'll say const pizzaPromise

328
00:15:26.440 --> 00:15:29.320
is equal to, pizzaPromise1 is equal

329
00:15:29.320 --> 00:15:30.153
to

330
00:15:31.378 --> 00:15:32.211
makePizza.

331
00:15:32.211 --> 00:15:33.820
Actually, we'll just take a few of these out of here.

332
00:15:33.820 --> 00:15:35.773
We'll say we'll take this one,

333
00:15:40.180 --> 00:15:41.900
and we'll get pizzaPromise2,

334
00:15:44.300 --> 00:15:45.133
that,

335
00:15:46.040 --> 00:15:47.640
let's put this big one in there,

336
00:15:50.200 --> 00:15:52.683
and we'll do ham and cheese as well.

337
00:15:56.140 --> 00:15:58.481
We don't need the return there.

338
00:15:58.481 --> 00:16:00.783
pizzaPromise3, makePizza,

339
00:16:02.118 --> 00:16:02.951
ham

340
00:16:03.826 --> 00:16:05.300
and cheese,

341
00:16:05.300 --> 00:16:06.240
okay.

342
00:16:06.240 --> 00:16:07.270
Now,

343
00:16:07.270 --> 00:16:12.270
what I want to know is how do I know when they are all done?

344
00:16:12.512 --> 00:16:14.723
I'm just gonna comment out these right here.

345
00:16:19.160 --> 00:16:21.810
How do I know when all three of these promises are done?

346
00:16:21.810 --> 00:16:24.066
Well, I could say

347
00:16:24.066 --> 00:16:27.123
pizzaPromise1.then pizza,

348
00:16:28.000 --> 00:16:28.930
console.log

349
00:16:29.870 --> 00:16:31.420
pizza,

350
00:16:31.420 --> 00:16:34.430
and I could duplicate that two more times

351
00:16:34.430 --> 00:16:38.360
'cause you can chain the then on either one,

352
00:16:38.360 --> 00:16:39.920
but

353
00:16:39.920 --> 00:16:42.800
these are just gonna pop into my console

354
00:16:42.800 --> 00:16:46.800
whenever they're done in whichever order they are done.

355
00:16:46.800 --> 00:16:48.470
That's not really what we want.

356
00:16:48.470 --> 00:16:52.660
But we can make these into a mega promise

357
00:16:52.660 --> 00:16:54.380
that we can then wait upon.

358
00:16:54.380 --> 00:16:57.070
Because if you've got three different promises

359
00:16:57.070 --> 00:16:58.280
and all you care about

360
00:16:58.280 --> 00:17:01.890
is when all three of them are finished,

361
00:17:01.890 --> 00:17:05.330
what you can do is you can make a mega promise.

362
00:17:05.330 --> 00:17:06.830
We'll call it a dinnerPromise.

363
00:17:07.772 --> 00:17:08.605
Const

364
00:17:09.808 --> 00:17:11.460
dinnerPromise

365
00:17:11.460 --> 00:17:12.453
is equal to,

366
00:17:13.840 --> 00:17:15.800
capital P, Promise.all,

367
00:17:15.800 --> 00:17:18.050
so Promise.all is a, what do you call

368
00:17:18.050 --> 00:17:21.750
these types of methods that live on the mama directly?

369
00:17:21.750 --> 00:17:24.040
That's right, static methods.

370
00:17:24.040 --> 00:17:26.080
Promise.all is a static method,

371
00:17:26.080 --> 00:17:27.630
sort of like a little helper,

372
00:17:27.630 --> 00:17:32.144
and it takes an array of promises, baby promises,

373
00:17:32.144 --> 00:17:33.843
pizzaPromise1, pizzaPromise2,

374
00:17:35.720 --> 00:17:38.210
and pizzaPromise3,

375
00:17:38.210 --> 00:17:40.723
and that makes one big promise,

376
00:17:40.723 --> 00:17:43.200
and then we can say dinnerPromise.then,

377
00:17:43.200 --> 00:17:45.230
and I'm not sure, like what do we get?

378
00:17:45.230 --> 00:17:46.063
Pizzas,

379
00:17:48.325 --> 00:17:49.975
and we'll console.log the pizzas.

380
00:17:52.780 --> 00:17:55.170
Now, we wait for all three to be finished.

381
00:17:55.170 --> 00:17:57.110
And boom, what do we get?

382
00:17:57.110 --> 00:18:00.240
We get an array of all three of them.

383
00:18:00.240 --> 00:18:02.410
So if you wanted the first pizza,

384
00:18:02.410 --> 00:18:05.730
it would be the zero, one, and two.

385
00:18:05.730 --> 00:18:08.500
What is pretty common way to do this

386
00:18:08.500 --> 00:18:11.320
is to destructure these pizzas.

387
00:18:11.320 --> 00:18:13.530
So let's make it into a regular function

388
00:18:13.530 --> 00:18:15.780
so we're not getting too crazy here.

389
00:18:15.780 --> 00:18:16.623
Function,

390
00:18:17.780 --> 00:18:19.231
and

391
00:18:19.231 --> 00:18:20.233
we say const,

392
00:18:21.170 --> 00:18:22.910
we'll use an array destructuring,

393
00:18:22.910 --> 00:18:26.313
so we'll say, what do we call this first one?

394
00:18:27.200 --> 00:18:29.763
We'll call that hottie,

395
00:18:30.810 --> 00:18:33.973
and we'll call the second one garbagePail,

396
00:18:38.820 --> 00:18:40.830
and we'll call the third one

397
00:18:43.337 --> 00:18:44.420
hamAndCheese,

398
00:18:45.260 --> 00:18:47.530
is equal to pizzas.

399
00:18:47.530 --> 00:18:49.440
Now, I have three variables,

400
00:18:49.440 --> 00:18:52.393
and I can log them or use them however I want,

401
00:18:53.290 --> 00:18:56.843
so console.log hottie, garbagePail, and hamAndCheese.

402
00:18:58.850 --> 00:19:00.220
Boom!

403
00:19:00.220 --> 00:19:03.320
It's not a very good console.log, but they're all there.

404
00:19:03.320 --> 00:19:04.820
Similarly, what people will do

405
00:19:04.820 --> 00:19:06.630
is you don't have to destructure these

406
00:19:06.630 --> 00:19:08.360
in the body of the function.

407
00:19:08.360 --> 00:19:13.040
You can actually destructure this argument directly

408
00:19:13.040 --> 00:19:16.220
with square brackets like that,

409
00:19:16.220 --> 00:19:18.560
and we can get rid of that.

410
00:19:18.560 --> 00:19:21.510
What that is saying is take the first argument

411
00:19:21.510 --> 00:19:24.530
and destructure into, the first item into hotties,

412
00:19:24.530 --> 00:19:25.647
second item into garbagePail,

413
00:19:25.647 --> 00:19:27.600
and the third one into hamAndCheese.

414
00:19:27.600 --> 00:19:29.250
Let's make sure that still works.

415
00:19:31.620 --> 00:19:32.560
Boom!

416
00:19:32.560 --> 00:19:34.410
It's still working good.

417
00:19:34.410 --> 00:19:36.390
So Promise.all

418
00:19:36.390 --> 00:19:39.150
will take all of your promises

419
00:19:39.150 --> 00:19:42.260
and will only resolve

420
00:19:42.260 --> 00:19:45.750
when all three of the sub-promises

421
00:19:45.750 --> 00:19:48.090
have been resolved themselves.

422
00:19:48.090 --> 00:19:50.003
Similarly, there's also Promise.race,

423
00:19:50.980 --> 00:19:55.053
so you could take this dinnerPromise and listen to it again.

424
00:20:00.360 --> 00:20:01.820
So we could make another one.

425
00:20:01.820 --> 00:20:03.460
Say const firstPizza,

426
00:20:03.460 --> 00:20:05.410
so like maybe someone is super hungry

427
00:20:05.410 --> 00:20:07.580
and I just wanna know whatever the first pizza is,

428
00:20:07.580 --> 00:20:09.000
give it to me and I'll eat it.

429
00:20:09.000 --> 00:20:12.490
So, firstPizza, and we'll just copy this,

430
00:20:12.490 --> 00:20:17.490
we'll say Promise dot, not all, but Promise.race,

431
00:20:17.840 --> 00:20:19.890
and we can take the firstPizza,

432
00:20:19.890 --> 00:20:23.647
say firstPizza, maybe it's firstPizzaPromise

433
00:20:26.963 --> 00:20:31.410
.then, and then we'll just say pizza,

434
00:20:31.410 --> 00:20:34.493
say You must be hungry,

435
00:20:35.700 --> 00:20:39.203
here is the first one ready.

436
00:20:40.810 --> 00:20:42.043
That's a lot of pizza.

437
00:20:45.300 --> 00:20:46.133
There we go.

438
00:20:46.133 --> 00:20:48.020
You must be hungry, here is the first one ready.

439
00:20:48.020 --> 00:20:50.150
The ham and cheese one was done before anything else.

440
00:20:50.150 --> 00:20:54.020
You can see our other one resolved couple seconds later.

441
00:20:54.020 --> 00:20:54.960
See?

442
00:20:54.960 --> 00:20:56.003
Boom, ready.

443
00:20:56.850 --> 00:20:57.683
Couple seconds later,

444
00:20:57.683 --> 00:21:00.120
you see that all three of them are finished.

445
00:21:00.120 --> 00:21:02.590
So Promise.all will wait for all of them,

446
00:21:02.590 --> 00:21:05.520
Promise.race will wait for the first one

447
00:21:05.520 --> 00:21:08.090
to finish rendering,

448
00:21:08.090 --> 00:21:12.120
and then there is also a couple other ones

449
00:21:12.120 --> 00:21:15.233
which we'll talk about when we get into error handling.

450
00:21:16.450 --> 00:21:18.300
So that is a very high level of promises.

451
00:21:18.300 --> 00:21:19.650
We've got a bunch more videos

452
00:21:19.650 --> 00:21:21.610
on that error handling, async await.

453
00:21:21.610 --> 00:21:22.810
Let's get into that now.

