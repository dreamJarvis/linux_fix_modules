WEBVTT

1
00:00:00.916 --> 00:00:03.499
(upbeat music)

2
00:00:04.550 --> 00:00:06.540
<v Instructor>Let's get into writing some of our own</v>

3
00:00:06.540 --> 00:00:07.510
custom functions.

4
00:00:07.510 --> 00:00:09.570
I wanna make a new folder in our playground,

5
00:00:09.570 --> 00:00:12.023
and we'll call that custom dash functions.

6
00:00:12.870 --> 00:00:16.460
And inside of that, we'll give ourselves an index HTML,

7
00:00:17.460 --> 00:00:19.220
and a,

8
00:00:19.220 --> 00:00:21.880
CS dot JS.

9
00:00:21.880 --> 00:00:24.170
Custom CS,

10
00:00:24.170 --> 00:00:25.560
not CS,

11
00:00:25.560 --> 00:00:28.900
cf.js.

12
00:00:28.900 --> 00:00:29.963
Console log,

13
00:00:32.043 --> 00:00:33.020
it works,

14
00:00:33.020 --> 00:00:37.050
go under HTML and give ourselves a HTML base.

15
00:00:37.050 --> 00:00:40.170
We will need to modify this base.css,

16
00:00:40.170 --> 00:00:41.640
because I made a folder.

17
00:00:41.640 --> 00:00:44.120
So we'll go up two levels,

18
00:00:44.120 --> 00:00:46.030
in order to get to it.

19
00:00:46.030 --> 00:00:48.360
And then right before the closing body tag,

20
00:00:48.360 --> 00:00:50.253
I'll get myself a script source,

21
00:00:51.090 --> 00:00:54.390
to cf.js.

22
00:00:54.390 --> 00:00:56.493
Open that sucker up,

23
00:00:57.530 --> 00:00:58.630
and it should work,

24
00:00:58.630 --> 00:00:59.463
it does.

25
00:00:59.463 --> 00:01:01.600
The real power of JavaScript comes from,

26
00:01:01.600 --> 00:01:03.470
when you wanna define your own functions.

27
00:01:03.470 --> 00:01:04.590
Functions can do anything.

28
00:01:04.590 --> 00:01:06.900
They're grouped together set of instructions,

29
00:01:06.900 --> 00:01:09.030
often taking in values,

30
00:01:09.030 --> 00:01:11.460
remember we talked about arguments earlier,

31
00:01:11.460 --> 00:01:12.420
doing some work,

32
00:01:12.420 --> 00:01:15.700
and then returning a new value or set of values,

33
00:01:15.700 --> 00:01:17.050
to the person that requested it.

34
00:01:17.050 --> 00:01:19.880
So we're going to be making a function called:

35
00:01:19.880 --> 00:01:21.210
calculate Bill!

36
00:01:21.210 --> 00:01:23.260
So calculateBill is this,

37
00:01:23.260 --> 00:01:26.060
Western gentleman that I imagined,

38
00:01:26.060 --> 00:01:29.730
that is very good at going to restaurants,

39
00:01:29.730 --> 00:01:33.360
and calculating what the bill would be,

40
00:01:33.360 --> 00:01:35.280
regarding how much the bill was,

41
00:01:35.280 --> 00:01:37.680
how much tip was and how much tax is.

42
00:01:37.680 --> 00:01:38.933
So, calculateBill,

43
00:01:40.670 --> 00:01:43.218
what's that guy from Looney Tunes,

44
00:01:43.218 --> 00:01:45.770
(sing song voice) looney tunes

45
00:01:50.170 --> 00:01:51.580
this guy,

46
00:01:51.580 --> 00:01:55.210
Yosemite Sam, that's what I imagine calculateBill to be.

47
00:01:55.210 --> 00:01:58.840
Anyways, that's what we are going to be doing,

48
00:01:58.840 --> 00:02:01.800
there's gonna be a few set of buzzwords

49
00:02:01.800 --> 00:02:03.667
that will come through,

50
00:02:03.667 --> 00:02:06.200
so sit tight and we'll explain that as we go through it.

51
00:02:06.200 --> 00:02:11.200
So first one is functions are created or defined,

52
00:02:11.400 --> 00:02:12.920
and then they are later called.

53
00:02:12.920 --> 00:02:14.393
So there's two big,

54
00:02:15.670 --> 00:02:17.780
this is a little bit distracting.

55
00:02:17.780 --> 00:02:19.920
Functions are defined and called.

56
00:02:19.920 --> 00:02:21.120
So when they're created,

57
00:02:21.120 --> 00:02:24.320
when you make a function, when you author what it does,

58
00:02:24.320 --> 00:02:26.960
that's called function definition.

59
00:02:26.960 --> 00:02:28.530
And then later on,

60
00:02:28.530 --> 00:02:30.580
when you wanna run that function,

61
00:02:30.580 --> 00:02:33.860
that's called calling or running a function.

62
00:02:33.860 --> 00:02:37.060
There are few different ways of ways to define a function,

63
00:02:37.060 --> 00:02:39.000
we're gonna get into all of the different approaches

64
00:02:39.000 --> 00:02:40.990
in the next couple of videos.

65
00:02:40.990 --> 00:02:43.710
For now, let's show how like sort of the basic ways

66
00:02:43.710 --> 00:02:44.910
to do it in JavaScript.

67
00:02:44.910 --> 00:02:47.600
So the way that you define a function in JavaScript,

68
00:02:47.600 --> 00:02:49.470
is you type: function,

69
00:02:49.470 --> 00:02:51.450
and then you type the name of the function,

70
00:02:51.450 --> 00:02:52.690
that you'd like to call it.

71
00:02:52.690 --> 00:02:55.510
And this follows the exact same rules as variables,

72
00:02:55.510 --> 00:02:57.170
so we don't need to cover that again.

73
00:02:57.170 --> 00:02:59.370
And we're gonna call it calculateBill.

74
00:03:03.190 --> 00:03:05.610
Now you'll see right here what I've done is,

75
00:03:05.610 --> 00:03:07.190
I've defined it,

76
00:03:07.190 --> 00:03:09.930
I've given it parenthesis, that's not calling it,

77
00:03:09.930 --> 00:03:11.150
this is defining it,

78
00:03:11.150 --> 00:03:13.110
and then you open and close what's called

79
00:03:13.110 --> 00:03:14.610
a function block.

80
00:03:14.610 --> 00:03:17.240
Now anything inside of here,

81
00:03:17.240 --> 00:03:20.313
this is the function body,

82
00:03:22.090 --> 00:03:25.110
and anything that goes inside of the actual function body,

83
00:03:25.110 --> 00:03:27.450
is going to be part of the function.

84
00:03:27.450 --> 00:03:30.090
So again, this is the definition of a function.

85
00:03:30.090 --> 00:03:31.690
This is the name of the function,

86
00:03:31.690 --> 00:03:36.480
and this is the block or the body of the function.

87
00:03:36.480 --> 00:03:38.280
Now inside of a function,

88
00:03:38.280 --> 00:03:40.600
we can obviously do things like,

89
00:03:40.600 --> 00:03:42.533
console log, running,

90
00:03:43.380 --> 00:03:44.963
calculate Bill.

91
00:03:46.470 --> 00:03:49.850
Then to go ahead and run a function,

92
00:03:49.850 --> 00:03:52.100
we simply just take the name of it,

93
00:03:52.100 --> 00:03:53.520
actually look at this,

94
00:03:53.520 --> 00:03:55.600
if I refresh it, and we see,

95
00:03:55.600 --> 00:03:57.180
that we have calculateBill there,

96
00:03:57.180 --> 00:03:58.660
it works just like a variable,

97
00:03:58.660 --> 00:04:01.160
in that you can just call them by the name of it,

98
00:04:01.160 --> 00:04:04.210
it's almost the exact same thing as a variable.

99
00:04:04.210 --> 00:04:06.713
However, when you hit enter,

100
00:04:07.837 --> 00:04:10.730
you actually see the code that is behind the function,

101
00:04:10.730 --> 00:04:12.920
rather than the the actual the value in it.

102
00:04:12.920 --> 00:04:14.800
Now if we're to go ahead and run that,

103
00:04:14.800 --> 00:04:16.310
we could run it from the terminal here,

104
00:04:16.310 --> 00:04:17.173
calculate,

105
00:04:18.410 --> 00:04:20.000
Bill,

106
00:04:20.000 --> 00:04:21.900
it says running Calculate Bill!

107
00:04:21.900 --> 00:04:23.800
And then you see it's returned undefined.

108
00:04:23.800 --> 00:04:25.410
We'll talk about that in just a second,

109
00:04:25.410 --> 00:04:28.950
or we can go ahead and run it right from our JavaScript.

110
00:04:28.950 --> 00:04:30.093
So, calculateBill,

111
00:04:31.380 --> 00:04:32.530
right here,

112
00:04:32.530 --> 00:04:34.280
and then when you refresh the page,

113
00:04:34.280 --> 00:04:36.530
you see that it's immediately being run.

114
00:04:36.530 --> 00:04:38.400
So, lets do some comments here,

115
00:04:38.400 --> 00:04:40.573
this is a function definition,

116
00:04:42.810 --> 00:04:44.530
and this is a,

117
00:04:44.530 --> 00:04:46.393
function call,

118
00:04:48.100 --> 00:04:52.070
or we often call it a Run of the function.

119
00:04:52.070 --> 00:04:54.483
So we're running the function here.

120
00:04:55.850 --> 00:04:56.683
Good.

121
00:04:56.683 --> 00:04:58.670
Now let's talk about returning values,

122
00:04:58.670 --> 00:05:01.340
so you notice that when we call calculateBill,

123
00:05:01.340 --> 00:05:04.040
it does the work that we asked it to do,

124
00:05:04.040 --> 00:05:06.110
and then it returns undefined,

125
00:05:06.110 --> 00:05:07.580
and that's because often,

126
00:05:07.580 --> 00:05:10.450
functions will do a bunch of work,

127
00:05:10.450 --> 00:05:12.130
and then return to you,

128
00:05:12.130 --> 00:05:12.963
the result.

129
00:05:12.963 --> 00:05:13.796
Like in our case,

130
00:05:13.796 --> 00:05:14.960
obviously what we're gonna do is,

131
00:05:14.960 --> 00:05:16.660
we're gonna take in some arguments,

132
00:05:16.660 --> 00:05:19.250
that is how much was the dinner,

133
00:05:19.250 --> 00:05:20.780
what is the tax rate,

134
00:05:20.780 --> 00:05:22.820
and how much do you feel like tipping on this meal,

135
00:05:22.820 --> 00:05:24.670
and it's going to return to us,

136
00:05:24.670 --> 00:05:26.510
the total value of that,

137
00:05:26.510 --> 00:05:29.180
and that's exactly what we're looking for.

138
00:05:29.180 --> 00:05:31.000
So the way that that works here,

139
00:05:31.000 --> 00:05:32.930
is we'll say something like this:

140
00:05:32.930 --> 00:05:36.270
const total, is equal to and we're going to assume

141
00:05:36.270 --> 00:05:37.920
that the meal was a hundred dollars,

142
00:05:37.920 --> 00:05:40.460
and we're going to multiply that by 1.13,

143
00:05:40.460 --> 00:05:41.670
'cause where I live,

144
00:05:41.670 --> 00:05:42.870
in Ontario,

145
00:05:42.870 --> 00:05:44.900
the tax rate is 13 percent.

146
00:05:44.900 --> 00:05:48.100
Then, if I were to,

147
00:05:48.100 --> 00:05:49.013
like run this,

148
00:05:49.013 --> 00:05:51.780
this is running calculate bill,

149
00:05:51.780 --> 00:05:54.750
and I can console log total,

150
00:05:54.750 --> 00:05:56.360
not total string,

151
00:05:56.360 --> 00:05:58.170
total variable here,

152
00:05:58.170 --> 00:05:59.470
and you can see that it's,

153
00:06:00.694 --> 00:06:01.527
(laughter)

154
00:06:01.527 --> 00:06:02.777
there we go again

155
00:06:02.777 --> 00:06:05.119
with our floating issues,

156
00:06:05.119 --> 00:06:08.190
we'll venture into that at a future time.

157
00:06:08.190 --> 00:06:09.023
Ain't that funny,

158
00:06:09.023 --> 00:06:10.830
100 dollars,

159
00:06:10.830 --> 00:06:12.740
times 1.13,

160
00:06:12.740 --> 00:06:14.223
is equal to,

161
00:06:16.652 --> 00:06:17.950
112.9999,

162
00:06:17.950 --> 00:06:20.640
that's just a perfect example of the issue

163
00:06:20.640 --> 00:06:22.260
that we talked about earlier.

164
00:06:22.260 --> 00:06:23.910
Anyways, we see this value here,

165
00:06:23.910 --> 00:06:26.670
we see a 112, and you might be thinking,

166
00:06:26.670 --> 00:06:27.830
like oh like oh,

167
00:06:27.830 --> 00:06:29.480
now I have this nice total variable,

168
00:06:29.480 --> 00:06:30.920
I can just quickly access it.

169
00:06:30.920 --> 00:06:32.420
Total.

170
00:06:32.420 --> 00:06:33.990
Total is not defined.

171
00:06:33.990 --> 00:06:35.050
All right, maybe I can say

172
00:06:35.050 --> 00:06:37.923
console log the total variable here.

173
00:06:39.878 --> 00:06:40.711
And no,

174
00:06:40.711 --> 00:06:41.544
total is not defined,

175
00:06:41.544 --> 00:06:43.550
you see cf js is yelling at us,

176
00:06:43.550 --> 00:06:45.090
total is not defined,

177
00:06:45.090 --> 00:06:46.100
and this is something

178
00:06:46.100 --> 00:06:47.900
that we're gonna get into called scope,

179
00:06:47.900 --> 00:06:50.520
meaning that inside of a function,

180
00:06:50.520 --> 00:06:52.170
the variable is only available,

181
00:06:52.170 --> 00:06:54.150
variables that are created inside of a function,

182
00:06:54.150 --> 00:06:56.620
this is what is called block scoping,

183
00:06:56.620 --> 00:06:59.970
and again we'll get much more into that in the future,

184
00:06:59.970 --> 00:07:02.500
but it's not available outside of the function.

185
00:07:02.500 --> 00:07:03.870
So the question is like okay,

186
00:07:03.870 --> 00:07:06.880
like handy little function, but like how do I,

187
00:07:06.880 --> 00:07:10.120
how do I store the result of this calculation,

188
00:07:10.120 --> 00:07:11.010
in a variable,

189
00:07:11.010 --> 00:07:13.680
so that I can access it either from my console,

190
00:07:13.680 --> 00:07:15.570
or from somewhere out here,

191
00:07:15.570 --> 00:07:17.390
and that is with returning.

192
00:07:17.390 --> 00:07:20.860
So you'll remember that when we called calculateBill,

193
00:07:20.860 --> 00:07:24.743
we see that there is undefined returned,

194
00:07:25.780 --> 00:07:26.890
okay.

195
00:07:26.890 --> 00:07:27.900
But,

196
00:07:27.900 --> 00:07:29.560
I can't access it,

197
00:07:29.560 --> 00:07:31.430
so what we actually need to do,

198
00:07:31.430 --> 00:07:32.940
is from the function,

199
00:07:32.940 --> 00:07:35.790
we will return, so this is a keyword in JavaScript,

200
00:07:35.790 --> 00:07:37.560
it's just the word return

201
00:07:37.560 --> 00:07:40.030
and then you return the actual variable that you want,

202
00:07:40.030 --> 00:07:41.193
so we'll say total.

203
00:07:42.869 --> 00:07:46.123
Now, when I run this function here,

204
00:07:47.228 --> 00:07:48.395
calculateBill,

205
00:07:49.770 --> 00:07:52.310
you'll see that it does console log it,

206
00:07:52.310 --> 00:07:54.360
that's because I'm console logging it here,

207
00:07:54.360 --> 00:07:55.920
maybe get rid of that,

208
00:07:55.920 --> 00:07:58.660
but it also does return the actual value.

209
00:07:58.660 --> 00:08:00.630
So this is a handy little function,

210
00:08:00.630 --> 00:08:01.463
that

211
00:08:01.463 --> 00:08:02.310
when you run it,

212
00:08:02.310 --> 00:08:03.950
will do some calculation,

213
00:08:03.950 --> 00:08:05.383
and return a value.

214
00:08:09.330 --> 00:08:12.070
Now the question is: how do I store this value,

215
00:08:12.070 --> 00:08:15.980
again my total variable is still not available to me,

216
00:08:15.980 --> 00:08:19.120
so I console log total variable here,

217
00:08:19.120 --> 00:08:20.660
it's still not available to me,

218
00:08:20.660 --> 00:08:21.720
and that's because,

219
00:08:21.720 --> 00:08:23.870
we have to capture,

220
00:08:23.870 --> 00:08:25.660
so it's another sort of,

221
00:08:25.660 --> 00:08:27.480
buzzword that we'll have here.

222
00:08:27.480 --> 00:08:29.020
We need to capture the result,

223
00:08:29.020 --> 00:08:29.853
of a function,

224
00:08:29.853 --> 00:08:33.630
or we need to capture the returned value of the function,

225
00:08:33.630 --> 00:08:34.600
into a variable.

226
00:08:34.600 --> 00:08:36.310
So in front of this calculateBill,

227
00:08:36.310 --> 00:08:39.560
we'll say const my total,

228
00:08:39.560 --> 00:08:41.810
is equal to calculateBill,

229
00:08:41.810 --> 00:08:44.490
and then we'll console log my total.

230
00:08:44.490 --> 00:08:45.630
And take a look,

231
00:08:45.630 --> 00:08:47.323
for my total,

232
00:08:48.310 --> 00:08:52.050
you'll see that we actually now have access to the my total,

233
00:08:52.050 --> 00:08:54.560
and we can do something like this:

234
00:08:54.560 --> 00:08:56.230
your total is,

235
00:08:56.230 --> 00:08:58.010
dollar sign,

236
00:08:58.010 --> 00:09:00.000
and we're gonna interpolate my total,

237
00:09:00.000 --> 00:09:02.853
obviously we're gonna have this right here,

238
00:09:04.970 --> 00:09:07.540
and it's 112 dollars,

239
00:09:07.540 --> 00:09:09.560
and 999999 cents.

240
00:09:09.560 --> 00:09:12.480
We'll go into how to actually fix that in the future.

241
00:09:12.480 --> 00:09:15.960
So couple of things we need to review here real quick.

242
00:09:15.960 --> 00:09:19.090
This variable right here, total,

243
00:09:19.090 --> 00:09:20.480
and this variable right here,

244
00:09:20.480 --> 00:09:21.490
you might be asking like,

245
00:09:21.490 --> 00:09:24.690
like why do we have two variables for the exact same value?

246
00:09:24.690 --> 00:09:26.580
And that's because this is what is referred to,

247
00:09:26.580 --> 00:09:27.880
as a temporary variable.

248
00:09:27.880 --> 00:09:29.690
Meaning that this variable,

249
00:09:29.690 --> 00:09:32.940
because it has been created inside of this function,

250
00:09:32.940 --> 00:09:34.810
it is only ever available,

251
00:09:34.810 --> 00:09:36.040
inside of this function,

252
00:09:36.040 --> 00:09:38.220
and when the function is done running,

253
00:09:38.220 --> 00:09:39.710
that variable is cleaned up,

254
00:09:39.710 --> 00:09:42.380
or what is called garbage collected in JavaScript,

255
00:09:42.380 --> 00:09:44.080
and it's no longer needed.

256
00:09:44.080 --> 00:09:46.110
So that's just a variable that's only ever

257
00:09:46.110 --> 00:09:47.510
inside of this one function,

258
00:09:47.510 --> 00:09:48.440
when it's run,

259
00:09:48.440 --> 00:09:50.250
and then it is gone.

260
00:09:50.250 --> 00:09:52.270
So if you ever want to capture

261
00:09:52.270 --> 00:09:54.620
the value of this calculateBill,

262
00:09:54.620 --> 00:09:56.900
you have to stick it into a variable,

263
00:09:56.900 --> 00:09:57.840
before you can go ahead,

264
00:09:57.840 --> 00:09:59.220
and display it.

265
00:09:59.220 --> 00:10:01.252
Or you could do something like this,

266
00:10:01.252 --> 00:10:04.560
we would do another console.log and we say:

267
00:10:04.560 --> 00:10:06.580
your total is,

268
00:10:06.580 --> 00:10:10.880
and what is kind of cool about this interpolation strings,

269
00:10:10.880 --> 00:10:11.940
with back text,

270
00:10:11.940 --> 00:10:13.353
is you can actually run,

271
00:10:19.710 --> 00:10:21.460
functions right inside of it.

272
00:10:21.460 --> 00:10:25.150
So, since calculateBill will return a value,

273
00:10:25.150 --> 00:10:27.810
JavaScript is actually gonna run that function first,

274
00:10:27.810 --> 00:10:29.330
and then whatever the return result,

275
00:10:29.330 --> 00:10:31.010
it's gonna immediately get interpolated

276
00:10:31.010 --> 00:10:32.280
into this string.

277
00:10:32.280 --> 00:10:33.960
Now I comment that one out,

278
00:10:33.960 --> 00:10:34.793
and it should give us,

279
00:10:34.793 --> 00:10:37.030
yeah it gives us the exact same,

280
00:10:37.030 --> 00:10:39.400
little run that we have here,

281
00:10:39.400 --> 00:10:42.753
and it interpolates that right into the value.

