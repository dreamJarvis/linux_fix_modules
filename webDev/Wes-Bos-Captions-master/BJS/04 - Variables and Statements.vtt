WEBVTT

1
00:00:00.735 --> 00:00:03.235
(jazzy music)

2
00:00:05.670 --> 00:00:07.070
<v Instructor>This video's going to teach you</v>

3
00:00:07.070 --> 00:00:09.460
a sort of an introduction to variables.

4
00:00:09.460 --> 00:00:12.750
Variables are a building block of JavaScript

5
00:00:12.750 --> 00:00:15.930
and you can't use JavaScript without knowing variables

6
00:00:15.930 --> 00:00:19.180
so we're gonna get a primer on what they are

7
00:00:19.180 --> 00:00:21.160
and what the different types of them

8
00:00:21.160 --> 00:00:22.890
and what declaration means

9
00:00:22.890 --> 00:00:25.970
as well as what a statement is in JavaScript.

10
00:00:25.970 --> 00:00:28.380
So, if some of the topics in this video

11
00:00:28.380 --> 00:00:31.070
seem a little bit deep-endy for you, don't sweat it.

12
00:00:31.070 --> 00:00:33.820
We're gonna be using these in absolutely every example

13
00:00:33.820 --> 00:00:37.010
from here on out, and I will come back to these concepts

14
00:00:37.010 --> 00:00:39.350
and make sure that I solidify them.

15
00:00:39.350 --> 00:00:41.430
So, go into your Playground folder

16
00:00:41.430 --> 00:00:43.990
and make a new file called Variables.

17
00:00:43.990 --> 00:00:45.940
And I'm gonna call that variables.html,

18
00:00:46.820 --> 00:00:49.683
I'm going to use my HTML base snippet here,

19
00:00:50.640 --> 00:00:52.270
and I'm just going to give myself

20
00:00:52.270 --> 00:00:55.570
a script tag in there, good.

21
00:00:55.570 --> 00:00:57.730
And just to make sure that everything is working,

22
00:00:57.730 --> 00:01:01.820
I'm going to console.log, "hey" and put a semi-colon on.

23
00:01:01.820 --> 00:01:05.130
I will talk about that semi-colon in just a second.

24
00:01:05.130 --> 00:01:07.103
If I open this up in my browser,

25
00:01:08.150 --> 00:01:11.240
and look at my console, we see "hey" there, good.

26
00:01:11.240 --> 00:01:14.540
So there's three different ways to make a variable

27
00:01:14.540 --> 00:01:16.510
or the word we use in JavaScript is called

28
00:01:16.510 --> 00:01:21.150
declaring a variable, and they are var, let, and const.

29
00:01:21.150 --> 00:01:23.170
So let's start with the first one which is var.

30
00:01:23.170 --> 00:01:25.440
So to make a variable you say "var"

31
00:01:25.440 --> 00:01:27.730
and then you make a name of the variable

32
00:01:27.730 --> 00:01:31.280
and you can use almost anything for a variable name.

33
00:01:31.280 --> 00:01:33.280
I'll talk about some of the restrictions in just a second.

34
00:01:33.280 --> 00:01:36.590
So I'll say "first" is equal to "wes"

35
00:01:36.590 --> 00:01:39.330
and what I've done there is I've just created a new variable

36
00:01:39.330 --> 00:01:41.760
called "first" and I've set it to a

37
00:01:41.760 --> 00:01:43.140
what's called a string, and I'll talk

38
00:01:43.140 --> 00:01:45.250
about that in a second, of "wes".

39
00:01:45.250 --> 00:01:47.740
Now if I were to refresh this page here,

40
00:01:47.740 --> 00:01:49.770
and then type in "first"

41
00:01:49.770 --> 00:01:51.690
you'll see that we actually get the value

42
00:01:51.690 --> 00:01:53.290
that is inside of that variable.

43
00:01:53.290 --> 00:01:55.840
I can also do it by doing a console.log

44
00:01:57.640 --> 00:01:58.657
and "first",

45
00:02:00.870 --> 00:02:03.100
and you see that we see the value "wes".

46
00:02:03.100 --> 00:02:05.400
The second way to declare a variable is with "let"

47
00:02:05.400 --> 00:02:08.360
so, we'll say "let age" is equal to "300".

48
00:02:08.360 --> 00:02:10.040
Put a semi-colon on the end, there.

49
00:02:10.040 --> 00:02:12.040
And again, if I were to go over to refresh this page

50
00:02:12.040 --> 00:02:15.180
and type in "age", you see that we get 300

51
00:02:15.180 --> 00:02:18.680
as stored inside of the variable that we have, there.

52
00:02:18.680 --> 00:02:21.253
And then the third way is with "const".

53
00:02:21.253 --> 00:02:24.840
So we say "const cool" is equal to "true"

54
00:02:24.840 --> 00:02:27.340
and that is what's called a constant variable.

55
00:02:27.340 --> 00:02:30.720
Now, the naming of these things isn't great

56
00:02:30.720 --> 00:02:34.020
because "const" means constant,

57
00:02:34.020 --> 00:02:36.990
and we'll talk about what that means in just a second.

58
00:02:36.990 --> 00:02:39.640
But it's still called a variable.

59
00:02:39.640 --> 00:02:40.733
This is a variable, this is a variable,

60
00:02:40.733 --> 00:02:41.820
this is a variable.

61
00:02:41.820 --> 00:02:43.480
I've had people get angry with me before

62
00:02:43.480 --> 00:02:45.847
bein' like, "Oh, this is only a variable,

63
00:02:45.847 --> 00:02:48.010
"and this is a constant," and then they don't know

64
00:02:48.010 --> 00:02:49.860
what to call this, but all three of these

65
00:02:49.860 --> 00:02:51.300
are different types of variables.

66
00:02:51.300 --> 00:02:54.550
There's different ways to declare the variables

67
00:02:54.550 --> 00:02:57.070
and we'll talk about what the pros and cons

68
00:02:57.070 --> 00:02:58.950
to all of them are in just a second.

69
00:02:58.950 --> 00:03:00.620
But before we get into that,

70
00:03:00.620 --> 00:03:02.490
I wanna talk about these little semi-colons

71
00:03:02.490 --> 00:03:04.490
that we have right here.

72
00:03:04.490 --> 00:03:08.040
These little semi-colons that I put at all of my lines

73
00:03:08.040 --> 00:03:09.410
that we have here,

74
00:03:09.410 --> 00:03:12.387
they're used to terminate the line of JavaScript.

75
00:03:12.387 --> 00:03:14.130
And this is what is referred to

76
00:03:14.130 --> 00:03:17.470
as a statement in JavaScript.

77
00:03:17.470 --> 00:03:21.250
Now, a statement is an instruction to the computer,

78
00:03:21.250 --> 00:03:24.350
to the browser, to the JavaScript interpreter

79
00:03:24.350 --> 00:03:25.550
to do something.

80
00:03:25.550 --> 00:03:27.397
This can usually be summed up as,

81
00:03:27.397 --> 00:03:29.827
"a variable was being declared,

82
00:03:29.827 --> 00:03:32.447
"a variable was being updated,

83
00:03:32.447 --> 00:03:34.270
"a function was being called."

84
00:03:34.270 --> 00:03:36.370
Like in this case, I have console.log

85
00:03:36.370 --> 00:03:38.340
and that's actually something called a method

86
00:03:38.340 --> 00:03:40.120
that we're gonna be learning about.

87
00:03:40.120 --> 00:03:43.320
So, anytime you wanna do something in JavaScript,

88
00:03:43.320 --> 00:03:45.470
that is referred to as a statement

89
00:03:45.470 --> 00:03:47.130
and when you're done your statement,

90
00:03:47.130 --> 00:03:49.840
you put a semi-colon at the end of the line.

91
00:03:49.840 --> 00:03:51.953
So we take a look, here.

92
00:03:53.637 --> 00:03:56.500
This is called a variable declaration, statement,

93
00:03:57.900 --> 00:04:02.613
and this is a function call statement,

94
00:04:05.040 --> 00:04:06.250
et cetera, et cetera.

95
00:04:06.250 --> 00:04:09.450
One thing that we will sort of run into

96
00:04:09.450 --> 00:04:12.710
in JavaScript is these things called code blocks.

97
00:04:12.710 --> 00:04:15.240
So if I have what's called an IF statement,

98
00:04:15.240 --> 00:04:16.720
again I know I keep saiying this,

99
00:04:16.720 --> 00:04:18.670
we're gonna go into it, don't sweat it,

100
00:04:19.997 --> 00:04:22.650
"age" is greater than "10",

101
00:04:22.650 --> 00:04:23.483
then we're gonna say

102
00:04:23.483 --> 00:04:26.713
"console.log", "You are old"

103
00:04:27.550 --> 00:04:30.360
And if we're to refresh this and say "You are old."

104
00:04:30.360 --> 00:04:32.410
So, the question here is

105
00:04:32.410 --> 00:04:36.720
how come I didn't put a semi-colon here,

106
00:04:36.720 --> 00:04:38.870
and a semi-colon here, or how come I didn't,

107
00:04:38.870 --> 00:04:41.000
like, obviously I'm done my IF statement,

108
00:04:41.000 --> 00:04:43.200
why did I not put that there?

109
00:04:43.200 --> 00:04:47.010
That is referred to as a code block,

110
00:04:47.010 --> 00:04:48.720
and code blocks are things

111
00:04:48.720 --> 00:04:52.290
that are bound by these curly brackets, here.

112
00:04:52.290 --> 00:04:54.760
We'll talk a lot more about blocks

113
00:04:54.760 --> 00:04:57.430
in some future videos,

114
00:04:57.430 --> 00:04:59.700
and things like function definitions,

115
00:04:59.700 --> 00:05:01.180
IF statements, loops,

116
00:05:01.180 --> 00:05:04.180
they do not need a semi-colon at the end

117
00:05:04.180 --> 00:05:06.930
because you're not actually telling the computer

118
00:05:06.930 --> 00:05:07.810
to do something,

119
00:05:07.810 --> 00:05:09.180
you're just running some code

120
00:05:09.180 --> 00:05:11.943
and you tell the computer to do something inside of it.

121
00:05:13.019 --> 00:05:15.617
So, I will sort of come back and mention

122
00:05:16.880 --> 00:05:19.330
why we do and do not use a semi-colon

123
00:05:19.330 --> 00:05:22.000
and you'll sort of get the hang of it.

124
00:05:22.000 --> 00:05:25.640
It is possible to get away without writing semi-colons

125
00:05:25.640 --> 00:05:27.260
in JavaScript because there's something

126
00:05:27.260 --> 00:05:29.230
in JavaScript that's called ASI

127
00:05:30.270 --> 00:05:31.730
which is automatic semi-colon insertion.

128
00:05:31.730 --> 00:05:34.330
We are not going to be covering that

129
00:05:34.330 --> 00:05:37.380
because it's a much more advanced topic.

130
00:05:37.380 --> 00:05:39.380
Developers who do not use semi-colons

131
00:05:39.380 --> 00:05:42.170
sort of know how ASIs working

132
00:05:42.170 --> 00:05:43.737
and they take advantage of that

133
00:05:43.737 --> 00:05:45.030
and that's totally fine.

134
00:05:45.030 --> 00:05:47.010
It's just a bit of a topic

135
00:05:47.010 --> 00:05:49.320
that people are on either side of it

136
00:05:49.320 --> 00:05:52.400
and it's best to learn JavaScript with semi-colons,

137
00:05:52.400 --> 00:05:54.580
and then once you hit a point

138
00:05:54.580 --> 00:05:57.150
where you can decide whether your style

139
00:05:57.150 --> 00:05:58.800
doesn't use it or does use it,

140
00:05:58.800 --> 00:06:00.330
you can make that decision on your own.

141
00:06:00.330 --> 00:06:04.770
I personally, as a professional developer,

142
00:06:04.770 --> 00:06:05.970
use them myself.

143
00:06:05.970 --> 00:06:08.580
So, nothin' to sweat about, there.

144
00:06:08.580 --> 00:06:09.420
All right, back to it.

145
00:06:09.420 --> 00:06:10.610
Let's talk about some variables.

146
00:06:10.610 --> 00:06:13.630
I'll get rid of this IF statement, right here.

147
00:06:13.630 --> 00:06:15.760
Let's talk about what the difference

148
00:06:15.760 --> 00:06:18.990
between all three of these different types of variables are.

149
00:06:18.990 --> 00:06:20.350
Let's get rid of this console.log.

150
00:06:20.350 --> 00:06:22.333
I'll get rid of this comment, here.

151
00:06:24.670 --> 00:06:29.220
So, "var" and "let" can be updated.

152
00:06:29.220 --> 00:06:31.720
So if you every wanna change what the value is

153
00:06:31.720 --> 00:06:33.440
of one of these variables,

154
00:06:33.440 --> 00:06:35.220
you can simply just change it.

155
00:06:35.220 --> 00:06:38.373
So if I were to say "first" is equal to "westerhoff"

156
00:06:40.500 --> 00:06:44.057
and I were to go back here and type in "first",

157
00:06:45.789 --> 00:06:46.622
there we go,

158
00:06:46.622 --> 00:06:48.320
you'd see that it has been updated.

159
00:06:48.320 --> 00:06:49.970
Same with "age".

160
00:06:49.970 --> 00:06:52.720
If I were to say "age" is equal to "400", I can,

161
00:06:52.720 --> 00:06:55.550
so I can either run these from my script, here

162
00:06:55.550 --> 00:06:58.113
or I can run them from my console, here.

163
00:06:59.007 --> 00:07:01.940
And because these are what I refer to as global variables,

164
00:07:01.940 --> 00:07:04.133
we'll talk about scope in a future video,

165
00:07:05.060 --> 00:07:07.310
I can update them either from the script tag, here

166
00:07:07.310 --> 00:07:09.030
or right from my console.

167
00:07:09.030 --> 00:07:11.280
And you see that what I've done here is

168
00:07:11.280 --> 00:07:13.640
I've updated my "first" variable,

169
00:07:13.640 --> 00:07:17.340
I've also updated the "age" value by just setting it again.

170
00:07:17.340 --> 00:07:20.800
You'll notice that I do not have to re-declare the variable

171
00:07:20.800 --> 00:07:22.597
so I did not say something like this,

172
00:07:22.597 --> 00:07:24.330
"var first" is equal to "wes"

173
00:07:24.330 --> 00:07:27.640
and then I did "var first" is equal to "westerhoff",

174
00:07:27.640 --> 00:07:29.630
that's actually a bad practice

175
00:07:30.640 --> 00:07:32.990
and in most cases, in modules specifically,

176
00:07:32.990 --> 00:07:34.150
it won't even work.

177
00:07:34.150 --> 00:07:37.430
So you only ever need to declare the variable

178
00:07:37.430 --> 00:07:39.720
with a "var", "let", or "const" once,

179
00:07:39.720 --> 00:07:41.920
and then whenever you wanna update it,

180
00:07:41.920 --> 00:07:43.890
you don't need to put that in front of it,

181
00:07:43.890 --> 00:07:48.270
You can simply just go ahead and set it to its new value.

182
00:07:48.270 --> 00:07:52.300
You cannot set a "const" variable to be something else.

183
00:07:52.300 --> 00:07:55.390
So if I were to go say "cool" is equal to "false"

184
00:07:55.390 --> 00:07:57.460
which would never happen,

185
00:07:57.460 --> 00:07:58.980
you're gonna see that we get this thing

186
00:07:58.980 --> 00:08:00.890
that's called an error in JavaScript.

187
00:08:00.890 --> 00:08:03.220
And errors in JavaScript will tell you sort of

188
00:08:03.220 --> 00:08:06.660
what went wrong, and also where it went wrong.

189
00:08:06.660 --> 00:08:09.021
So here, it says, "Uncaught TypeError

190
00:08:09.021 --> 00:08:13.680
"Assignment to constant variable" on line 18.

191
00:08:13.680 --> 00:08:15.500
Well, that's exactly what we did.

192
00:08:15.500 --> 00:08:20.340
We tried to change a variable that was set to a constant.

193
00:08:20.340 --> 00:08:22.860
Now, constant variables cannot be changed,

194
00:08:22.860 --> 00:08:27.320
so think of a API key or anything that you don't ever want

195
00:08:27.320 --> 00:08:31.130
to be changed, you set them to a constant

196
00:08:31.130 --> 00:08:33.530
and the value that is put into that variable

197
00:08:33.530 --> 00:08:36.016
won't be able to be changed.

198
00:08:36.016 --> 00:08:38.060
Now, we will, that is not totally true.

199
00:08:38.060 --> 00:08:41.590
We will followup when we hit arrays and objects,

200
00:08:41.590 --> 00:08:44.760
meaning that there's a difference between the array

201
00:08:44.760 --> 00:08:46.280
or object that it's bound to

202
00:08:46.280 --> 00:08:48.167
and the values that live inside of it.

203
00:08:48.167 --> 00:08:50.050
But we won't get into it just yet.

204
00:08:50.050 --> 00:08:52.050
Just right now, what we need to know

205
00:08:52.050 --> 00:08:54.387
is that "const" variables cannot be changed,

206
00:08:54.387 --> 00:08:58.660
"var" and "let" variables can be changed or can be updated.

207
00:08:58.660 --> 00:09:00.600
Next thing we need to know about variables

208
00:09:00.600 --> 00:09:02.540
is this thing called Strict Mode.

209
00:09:02.540 --> 00:09:03.630
So if I were to

210
00:09:03.630 --> 00:09:05.160
let's just comment this out,

211
00:09:05.160 --> 00:09:08.290
on your editor you can use Command or Control

212
00:09:08.290 --> 00:09:10.220
and forward slash, and that will comment out

213
00:09:10.220 --> 00:09:11.480
your JavaScript code,

214
00:09:11.480 --> 00:09:14.320
and that will actually just make the browser

215
00:09:14.320 --> 00:09:15.530
skip over that code.

216
00:09:15.530 --> 00:09:18.840
We still have it there, but it's just not gonna be read

217
00:09:18.840 --> 00:09:21.110
by the browser when we run it.

218
00:09:21.110 --> 00:09:22.877
So, if I were to go here, and say

219
00:09:22.877 --> 00:09:25.733
"dog" is equal to "snickers"

220
00:09:28.400 --> 00:09:30.610
and refresh this and type in "dog",

221
00:09:30.610 --> 00:09:33.120
you see that we just made a variable, here.

222
00:09:33.120 --> 00:09:35.700
But I didn't var letter "const" it,

223
00:09:35.700 --> 00:09:38.280
so what's goin' on?

224
00:09:38.280 --> 00:09:39.750
What happened right there?

225
00:09:39.750 --> 00:09:41.760
Now, if we go ahead and go to the top

226
00:09:41.760 --> 00:09:43.220
of our opening script, here

227
00:09:43.220 --> 00:09:44.657
and in single quotes just type

228
00:09:44.657 --> 00:09:48.620
"use strict" and put a semi-colon on the end there,

229
00:09:48.620 --> 00:09:50.470
now if I refresh the page,

230
00:09:50.470 --> 00:09:53.030
you see we get an error "dog is not defined".

231
00:09:53.030 --> 00:09:55.520
So, in the early days of JavaScript

232
00:09:55.520 --> 00:09:57.030
when it was first invented,

233
00:09:57.030 --> 00:10:00.400
it was possible to do this type of thing

234
00:10:00.400 --> 00:10:03.010
where you could actually create a variable

235
00:10:03.010 --> 00:10:04.957
without first declaring it

236
00:10:04.957 --> 00:10:06.707
and the browser would go like,

237
00:10:06.707 --> 00:10:09.407
"Oops, you forgot to actually, like, var it,

238
00:10:09.407 --> 00:10:11.700
"so I'll just do it for you."

239
00:10:11.700 --> 00:10:13.880
And obviously that can lead to a lot of bugs

240
00:10:13.880 --> 00:10:16.210
down the road and it's bad coding.

241
00:10:16.210 --> 00:10:19.520
It's pretty sloppy, so it's just not what you want to do.

242
00:10:19.520 --> 00:10:21.540
So what happened is that

243
00:10:21.540 --> 00:10:23.380
they obviously have to keep this functionality

244
00:10:23.380 --> 00:10:26.110
'cause some guy fifteen years ago

245
00:10:26.110 --> 00:10:28.890
wrote some terrible code where he didn't "var" his variables

246
00:10:28.890 --> 00:10:31.270
and that still has to work today,

247
00:10:31.270 --> 00:10:34.750
so they can't go and break JavaScript.

248
00:10:34.750 --> 00:10:37.510
That's what's referred to as backwards compatibility,

249
00:10:37.510 --> 00:10:40.210
but they can introduce new modes into the browser

250
00:10:40.210 --> 00:10:43.150
and it's kinda like hard-mode in your video game,

251
00:10:43.150 --> 00:10:45.940
but this is just strict mode in your JavaScript

252
00:10:45.940 --> 00:10:48.560
where if you try to do something stupid like this

253
00:10:48.560 --> 00:10:51.040
where you create a variable without declaring

254
00:10:51.040 --> 00:10:52.800
a "var", "let", or "const" first,

255
00:10:52.800 --> 00:10:54.297
it's gonna yell at you and say like,

256
00:10:54.297 --> 00:10:55.777
"dog is not...," like "what are you doing

257
00:10:55.777 --> 00:10:57.147
"trying to update a variable

258
00:10:57.147 --> 00:10:59.300
"you have not yet created it."

259
00:10:59.300 --> 00:11:01.700
So to fix that, you would either just say, like,

260
00:11:03.492 --> 00:11:05.533
"var dog" is equal to "hugo"

261
00:11:07.150 --> 00:11:08.730
and what that will do is

262
00:11:08.730 --> 00:11:10.350
it will first make the variable

263
00:11:10.350 --> 00:11:14.130
and then go ahead and update it, good,

264
00:11:14.130 --> 00:11:15.810
or of course, you can just stick a var

265
00:11:15.810 --> 00:11:17.420
right in front of it

266
00:11:17.420 --> 00:11:19.100
and get rid of that, entirely

267
00:11:19.100 --> 00:11:21.170
and that will work, as well.

268
00:11:21.170 --> 00:11:23.287
Another thing you can do is you can just say,

269
00:11:23.287 --> 00:11:27.440
"var dog" and then update it on the next line,

270
00:11:27.440 --> 00:11:29.280
and this will work

271
00:11:29.280 --> 00:11:31.730
because what happens here, it that

272
00:11:31.730 --> 00:11:33.910
if I were to do this,

273
00:11:33.910 --> 00:11:36.570
if we see, like, what did I do?

274
00:11:36.570 --> 00:11:39.580
I declared a variable but I didn't set it to anything.

275
00:11:39.580 --> 00:11:41.150
And if you type it in here,

276
00:11:41.150 --> 00:11:43.450
you'll see that it's set to something called Undefined,

277
00:11:43.450 --> 00:11:45.900
which is one of the types we're gonna learn about

278
00:11:45.900 --> 00:11:47.560
in just a second.

279
00:11:47.560 --> 00:11:49.720
So strict mode is pretty cool.

280
00:11:49.720 --> 00:11:53.190
You won't have to be typing that every single time

281
00:11:53.190 --> 00:11:56.600
'cause A, we're gonna just be doing these good practices,

282
00:11:56.600 --> 00:11:59.340
and second, this is enforced by default

283
00:11:59.340 --> 00:12:01.360
when you use JavaScript modules,

284
00:12:01.360 --> 00:12:04.680
and JavaScript modules are probably how you'll be writing

285
00:12:04.680 --> 00:12:06.150
all of your modern JavaScript.

286
00:12:06.150 --> 00:12:08.690
So, it doesn't hurt to pop it in.

287
00:12:08.690 --> 00:12:11.650
There's no real down side, other than you writing good code,

288
00:12:11.650 --> 00:12:13.490
which is not a down side.

289
00:12:13.490 --> 00:12:15.060
Other than that, you can

290
00:12:15.060 --> 00:12:18.370
pop it at top of any of your script JS files

291
00:12:18.370 --> 00:12:20.653
or in your script tags.

292
00:12:21.630 --> 00:12:24.490
Now, let's move on to the second difference

293
00:12:24.490 --> 00:12:26.000
between "var", "let", and "const".

294
00:12:26.000 --> 00:12:28.090
Let's get rid of dog,

295
00:12:28.090 --> 00:12:28.923
let's get rid of these,

296
00:12:28.923 --> 00:12:30.790
and let's go back to our original three variables

297
00:12:30.790 --> 00:12:32.170
that we have, here.

298
00:12:32.170 --> 00:12:33.870
And the second is scoping.

299
00:12:33.870 --> 00:12:36.470
Now, scoping in JavaScript answers the question

300
00:12:36.470 --> 00:12:40.090
like, "Where are my variables available to me?"

301
00:12:40.090 --> 00:12:43.090
And we're going to have an entire section of this course

302
00:12:43.090 --> 00:12:45.870
based on scoping 'cause it's such a fundamental concept

303
00:12:45.870 --> 00:12:48.810
of JavaScript, but for now, we need to know

304
00:12:48.810 --> 00:12:51.900
that "var" variables are scoped differently

305
00:12:51.900 --> 00:12:53.780
than "let" and "const" variables.

306
00:12:53.780 --> 00:12:56.850
So, "var" variables are what I refer to as

307
00:12:56.850 --> 00:12:58.350
function scoped variables,

308
00:12:58.350 --> 00:13:01.470
and "let" and "const" variables are referred to

309
00:13:01.470 --> 00:13:04.067
what is called block scope variables.

310
00:13:05.007 --> 00:13:06.720
So, what does this mean?

311
00:13:06.720 --> 00:13:08.960
We're gonna learn what blocks and functions are

312
00:13:08.960 --> 00:13:09.793
in the future.

313
00:13:09.793 --> 00:13:12.290
So because we don't know what either of those are yet,

314
00:13:12.290 --> 00:13:14.170
we're gonna put that on ice.

315
00:13:14.170 --> 00:13:19.097
Just know that "var" variables are function, scoped

316
00:13:19.990 --> 00:13:23.330
and they're only available inside of the parent function

317
00:13:23.330 --> 00:13:25.610
and these are block scoped,

318
00:13:25.610 --> 00:13:28.000
and blocks are gonna be these little curly brackets.

319
00:13:28.000 --> 00:13:29.110
I've told you too much.

320
00:13:29.110 --> 00:13:30.480
I've told you what a block is.

321
00:13:30.480 --> 00:13:31.610
We'll continue on

322
00:13:31.610 --> 00:13:36.590
in the function and block videos about this.

323
00:13:36.590 --> 00:13:38.880
So, the question is, "What should I use?"

324
00:13:38.880 --> 00:13:41.920
What are we going to be using in this entire course?

325
00:13:41.920 --> 00:13:44.586
They're all valid, they're all part of the JavaScript,

326
00:13:44.586 --> 00:13:46.140
"let" and "const" were introduced

327
00:13:46.140 --> 00:13:48.270
as part of what is called ES-6

328
00:13:48.270 --> 00:13:50.760
which is only a couple years old,

329
00:13:50.760 --> 00:13:53.290
and "var" has been in the language

330
00:13:53.290 --> 00:13:55.523
for as long as it's been invented.

331
00:13:57.498 --> 00:13:59.253
How old is JavaScript?

332
00:14:00.990 --> 00:14:04.080
1995, so "var" variables have been around

333
00:14:04.080 --> 00:14:05.810
for a long, long time.

334
00:14:05.810 --> 00:14:10.350
So, you may sometimes see some people on the internet,

335
00:14:10.350 --> 00:14:11.700
you know there's people on the internet

336
00:14:11.700 --> 00:14:14.670
saying "var" variables are old,

337
00:14:14.670 --> 00:14:15.503
they're deprecated.

338
00:14:15.503 --> 00:14:16.700
They're not.

339
00:14:16.700 --> 00:14:18.920
It's just that most developers

340
00:14:18.920 --> 00:14:21.570
or some developers, I myself,

341
00:14:21.570 --> 00:14:24.340
prefer to use "let" and "const"

342
00:14:24.340 --> 00:14:26.380
because the block scoping that we're gonna learn about

343
00:14:26.380 --> 00:14:28.800
makes a little bit more sense,

344
00:14:28.800 --> 00:14:33.080
as well as the benefit of assigning a constant value

345
00:14:33.080 --> 00:14:34.080
to these variables

346
00:14:34.080 --> 00:14:37.310
and not accidentally overwriting a variable,

347
00:14:37.310 --> 00:14:38.670
which can lead to bugs.

348
00:14:38.670 --> 00:14:40.750
So, what do I do?

349
00:14:40.750 --> 00:14:43.860
So, these are my rules and these are only my opinions,

350
00:14:43.860 --> 00:14:45.410
these are not facts.

351
00:14:45.410 --> 00:14:47.930
So you very well may have your own opinions

352
00:14:47.930 --> 00:14:50.280
and I welcome you to have those.

353
00:14:50.280 --> 00:14:52.830
The first is I use "consts" by default.

354
00:14:52.830 --> 00:14:54.240
So any time I create a variable,

355
00:14:54.240 --> 00:14:57.120
I just default it to "const" because I don't know

356
00:14:57.120 --> 00:14:59.223
if I'll need to be updating that or not.

357
00:15:00.100 --> 00:15:04.880
Then, if I need to change a value of a variable

358
00:15:04.880 --> 00:15:06.350
I will just use a "let".

359
00:15:06.350 --> 00:15:08.900
So sometimes I'll make a variable here,

360
00:15:08.900 --> 00:15:11.570
called "cool" and then I'll realize, you know what,

361
00:15:11.570 --> 00:15:12.870
I might not be cool,

362
00:15:12.870 --> 00:15:15.850
so I need to change that to a "let"

363
00:15:15.850 --> 00:15:19.870
so that I can set it to "false" in the future.

364
00:15:19.870 --> 00:15:20.880
So no sweat there,

365
00:15:20.880 --> 00:15:24.080
you just go back and change it to a "let" value

366
00:15:24.080 --> 00:15:28.700
and then I almost never use a "var" variable.

367
00:15:28.700 --> 00:15:32.402
There is a couple of edu-cacey things

368
00:15:32.402 --> 00:15:34.500
where if you're declaring a variable inside of a block

369
00:15:34.500 --> 00:15:35.770
it's kind of annoying sometimes

370
00:15:35.770 --> 00:15:37.140
when it's block scoped.

371
00:15:37.140 --> 00:15:39.220
Again, we'll cover that as we go along.

372
00:15:39.220 --> 00:15:40.467
So, "const" by default,

373
00:15:40.467 --> 00:15:41.860
"let" when I need it.

374
00:15:41.860 --> 00:15:43.690
I don't really use "var" all that much.

375
00:15:43.690 --> 00:15:45.830
I know a lot of developers go by that,

376
00:15:45.830 --> 00:15:47.220
but again, that's not gospel.

377
00:15:47.220 --> 00:15:49.120
That's just my opinion.

378
00:15:49.120 --> 00:15:50.670
Uh, last thing we need to talk about, here

379
00:15:50.670 --> 00:15:52.310
is naming conventions.

380
00:15:52.310 --> 00:15:54.743
What can you call your variables?

381
00:15:55.920 --> 00:15:59.490
As a convention, variables should not start with a capital.

382
00:15:59.490 --> 00:16:01.840
So if I were to go here,

383
00:16:01.840 --> 00:16:04.800
and make a dog variable

384
00:16:06.499 --> 00:16:09.513
as a "const Dog" is equal to "bowser".

385
00:16:10.720 --> 00:16:11.750
Is that a dog or is it that

386
00:16:11.750 --> 00:16:15.060
the green guy from that video game?

387
00:16:15.060 --> 00:16:16.423
And I'd go out in here.

388
00:16:17.580 --> 00:16:19.130
It works, right?

389
00:16:19.130 --> 00:16:21.400
And you can use capitals all you want

390
00:16:21.400 --> 00:16:22.480
in declaring variables.

391
00:16:22.480 --> 00:16:25.660
It's not wrong, it's not broken JavaScript,

392
00:16:25.660 --> 00:16:26.810
but as a convention,

393
00:16:26.810 --> 00:16:29.070
variables should not start with a capital

394
00:16:29.070 --> 00:16:31.230
unless they are a Class.

395
00:16:31.230 --> 00:16:32.110
We're gonna hit that

396
00:16:32.110 --> 00:16:33.840
when we get into Classes and Prototypes,

397
00:16:33.840 --> 00:16:34.673
and things like that.

398
00:16:34.673 --> 00:16:37.730
So as a general rule, variables should not have a capital

399
00:16:37.730 --> 00:16:39.350
at the start.

400
00:16:39.350 --> 00:16:43.400
Variables must start with either an A to Z letter.

401
00:16:43.400 --> 00:16:46.150
So, a-b-c-d, all the way through z,

402
00:16:46.150 --> 00:16:48.190
or zed, if you're Canadian.

403
00:16:48.190 --> 00:16:50.840
And they can also start with an underscore,

404
00:16:50.840 --> 00:16:53.760
or contain underscore, or dollar signs.

405
00:16:53.760 --> 00:16:55.863
So, I could make a variable called "const"

406
00:16:57.810 --> 00:17:00.310
is equal to "100",

407
00:17:00.310 --> 00:17:04.100
and if I were to refresh this and look for that variable,

408
00:17:04.100 --> 00:17:05.772
you'd see that's there.

409
00:17:05.772 --> 00:17:07.650
That's a valid variable.

410
00:17:07.650 --> 00:17:10.400
Same thing with well, you could do something like this,

411
00:17:11.900 --> 00:17:14.593
and we can go and access it.

412
00:17:15.540 --> 00:17:16.760
Oh, I can't even type.

413
00:17:16.760 --> 00:17:17.593
There we go.

414
00:17:17.593 --> 00:17:19.700
You see that that's actually a valid variable,

415
00:17:19.700 --> 00:17:21.390
so dollar sign and underscore

416
00:17:21.390 --> 00:17:25.270
are two of the only kind of other than A through Z

417
00:17:25.270 --> 00:17:29.370
characters that can be used inside of variables.

418
00:17:29.370 --> 00:17:31.950
The underscore is sort of synonymous

419
00:17:31.950 --> 00:17:35.710
with a helper library called Lowdash,

420
00:17:35.710 --> 00:17:37.900
and the dollar sign is sorta synonymous

421
00:17:37.900 --> 00:17:40.340
with a library called JQuery,

422
00:17:40.340 --> 00:17:42.520
so you generally don't make your own variables

423
00:17:42.520 --> 00:17:46.210
called just dollar sign or just underscore

424
00:17:46.210 --> 00:17:47.950
'cause they've sort of been taken

425
00:17:47.950 --> 00:17:50.950
as a sort of convention,

426
00:17:50.950 --> 00:17:52.760
but you can certainly include them

427
00:17:52.760 --> 00:17:56.860
inside of your variable names, if you want.

428
00:17:56.860 --> 00:17:59.650
If a variable is made up of two words,

429
00:17:59.650 --> 00:18:01.900
so if I wanted to make a variable called

430
00:18:01.900 --> 00:18:05.560
I love to eat pizza, or I love pizza,

431
00:18:05.560 --> 00:18:06.607
you could do something like this,

432
00:18:06.607 --> 00:18:09.200
"const iLovePizza",

433
00:18:09.200 --> 00:18:11.950
this is what is referred to as camel-case.

434
00:18:11.950 --> 00:18:16.340
So, camel-case is every word inside of your variable

435
00:18:16.340 --> 00:18:20.210
will contain an upper-case, except for the first one

436
00:18:20.210 --> 00:18:23.140
because of the reasons we just talked about.

437
00:18:23.140 --> 00:18:26.350
Upper camel-case is where you do start it with a capital,

438
00:18:26.350 --> 00:18:28.200
however, that's almost never used

439
00:18:28.200 --> 00:18:32.180
in JavaScript unless you are defining a Class,

440
00:18:32.180 --> 00:18:34.013
so, maybe we should write some here,

441
00:18:36.119 --> 00:18:38.113
so camel-case is equal to "true"

442
00:18:39.980 --> 00:18:44.980
and we'll make another one called upper camel-case,

443
00:18:47.771 --> 00:18:49.600
put a capital "U" and we'll say

444
00:18:51.503 --> 00:18:53.586
"const ILoveToEatHotDogs"

445
00:18:54.860 --> 00:18:56.337
is equal to "false".

446
00:18:57.490 --> 00:19:00.320
There is also snake-case.

447
00:19:00.320 --> 00:19:01.813
Oooo, that's kind of fun.

448
00:19:03.133 --> 00:19:04.067
So, "const this_is_snake_case",

449
00:19:07.160 --> 00:19:10.410
so instead of using camel-case, which is capitals,

450
00:19:10.410 --> 00:19:13.320
you use underscores in your variable names

451
00:19:13.320 --> 00:19:15.830
and that's gonna be "cool".

452
00:19:15.830 --> 00:19:17.210
Set that to a string.

453
00:19:17.210 --> 00:19:19.810
And then, there's kebob-case,

454
00:19:19.810 --> 00:19:24.810
and kebob-case is not allowed in JavaScript, so this is...

455
00:19:26.303 --> 00:19:28.263
"const this-is-kebob-case".

456
00:19:30.960 --> 00:19:33.270
See, I can't even type it 'cause I never do it.

457
00:19:33.270 --> 00:19:35.080
Uh, that is not allowed in JavaScript.

458
00:19:35.080 --> 00:19:38.390
Why, because dashes are not allowed in variables

459
00:19:38.390 --> 00:19:39.223
in JavaScript.

460
00:19:39.223 --> 00:19:41.630
I know they are allowed in CSS selector,

461
00:19:41.630 --> 00:19:43.770
so that goofs some people up.

462
00:19:43.770 --> 00:19:45.810
So, those are the ones that are available.

463
00:19:45.810 --> 00:19:49.650
I personally, and I think most developers will always use

464
00:19:49.650 --> 00:19:51.390
the first one which is camel-case,

465
00:19:52.430 --> 00:19:55.660
upper camel-case if you're building a Class.

466
00:19:55.660 --> 00:19:58.073
Some people coming from sort of PHP world

467
00:19:58.073 --> 00:20:01.480
like to use underscores, myself not included.

468
00:20:01.480 --> 00:20:03.320
And kebob-case is not allowed.

469
00:20:03.320 --> 00:20:04.153
Look at that, I broke it.

470
00:20:04.153 --> 00:20:06.343
Just because of putting kebobs in there.

471
00:20:08.770 --> 00:20:09.760
That's it for variables.

472
00:20:09.760 --> 00:20:10.770
That's sort of our primer.

473
00:20:10.770 --> 00:20:12.540
We'll be using them throughout the rest of the course

474
00:20:12.540 --> 00:20:14.183
and I'll see you in the next video.

