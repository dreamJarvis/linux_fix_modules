WEBVTT

1
00:00:00.829 --> 00:00:03.412
(upbeat music)

2
00:00:05.800 --> 00:00:06.633
<v Instructor>All right, in this video,</v>

3
00:00:06.633 --> 00:00:09.100
we're gonna talk about using external modules

4
00:00:09.100 --> 00:00:11.380
that have been open sourced and made available

5
00:00:11.380 --> 00:00:13.400
to the community in your project

6
00:00:13.400 --> 00:00:15.330
because most things that you do,

7
00:00:15.330 --> 00:00:17.960
there's probably somebody else that has

8
00:00:17.960 --> 00:00:19.990
already written something for that

9
00:00:19.990 --> 00:00:22.850
and they are tested well, they're battle tested,

10
00:00:22.850 --> 00:00:25.120
they're fast, things like that.

11
00:00:25.120 --> 00:00:27.030
Almost always, you can go and reach

12
00:00:27.030 --> 00:00:29.710
for some sort of utility library

13
00:00:29.710 --> 00:00:33.440
or even an entire framework like React, or View, or Angular

14
00:00:33.440 --> 00:00:35.120
to do what it is that you want.

15
00:00:35.120 --> 00:00:37.290
I'm not gonna get a whole lot specific

16
00:00:37.290 --> 00:00:39.140
about like, I'm gonna show you React ones,

17
00:00:39.140 --> 00:00:40.400
or View ones, or something like that,

18
00:00:40.400 --> 00:00:42.410
but I'm just gonna show you JavaScript modules

19
00:00:42.410 --> 00:00:44.540
that are useful for whether you're doing

20
00:00:44.540 --> 00:00:46.190
back-end or front-end programming.

21
00:00:46.190 --> 00:00:51.170
So, what I wanna do first is open up your terminal.

22
00:00:51.170 --> 00:00:53.730
I'm gonna go into the exercises folder

23
00:00:53.730 --> 00:00:58.253
and let's make a directory called 80-npm modules.

24
00:01:01.600 --> 00:01:03.590
We'll get into that.

25
00:01:03.590 --> 00:01:06.340
And let's just do it completely from scratch.

26
00:01:06.340 --> 00:01:09.690
So, we'll npn init nothing just to start it up

27
00:01:09.690 --> 00:01:10.990
and we'll call npmmodules.

28
00:01:14.170 --> 00:01:15.003
Good.

29
00:01:15.890 --> 00:01:17.760
And you can see it's made us a directory

30
00:01:17.760 --> 00:01:19.660
with a package JSON in there.

31
00:01:19.660 --> 00:01:22.430
And then let's go ahead and install a couple

32
00:01:22.430 --> 00:01:24.630
and just sort of start working with

33
00:01:24.630 --> 00:01:25.960
the different ones that we want.

34
00:01:25.960 --> 00:01:30.350
So, let's npm install a parcel-bundler

35
00:01:30.350 --> 00:01:32.790
and we'll dash, dash capital D is the same thing

36
00:01:32.790 --> 00:01:35.480
as dash dash save div, I like to do that

37
00:01:35.480 --> 00:01:37.890
as a little bit of a shortcut.

38
00:01:37.890 --> 00:01:39.790
We installed node modules, you'll see that

39
00:01:39.790 --> 00:01:43.280
you actually get this folder that is called node modules

40
00:01:43.280 --> 00:01:46.980
and inside of that folder, there's always gonna be

41
00:01:46.980 --> 00:01:49.580
hundreds, if not hundreds of thousands of files

42
00:01:49.580 --> 00:01:52.330
inside of there and that stresses some people out

43
00:01:52.330 --> 00:01:55.063
'cause they aren't sure exactly what's going on there.

44
00:01:56.180 --> 00:01:58.813
So if I open this up, take a look.

45
00:02:01.690 --> 00:02:03.370
You'll see in here you have a node modules,

46
00:02:03.370 --> 00:02:05.550
and look at it, holy!

47
00:02:05.550 --> 00:02:08.510
So I installed one package and then

48
00:02:08.510 --> 00:02:10.853
they went and installed what?

49
00:02:12.610 --> 00:02:14.950
544 packages?

50
00:02:14.950 --> 00:02:16.163
Like what's going on?

51
00:02:18.420 --> 00:02:20.890
And what's really going on behind the scenes here

52
00:02:20.890 --> 00:02:23.440
is that parcel has dependencies itself.

53
00:02:23.440 --> 00:02:26.500
It has the little packages that it needs

54
00:02:26.500 --> 00:02:29.407
in order for it to work and it may seem like a lot,

55
00:02:29.407 --> 00:02:32.745
but a lot of these are just tiny, little packages

56
00:02:32.745 --> 00:02:35.720
that do one thing and one thing well.

57
00:02:35.720 --> 00:02:37.463
Which js, and we open that.

58
00:02:38.810 --> 00:02:41.430
So hundred of lines of code, probably some internal

59
00:02:41.430 --> 00:02:42.530
to the link that they have.

60
00:02:42.530 --> 00:02:45.420
So, whatever is in this node modules folder,

61
00:02:45.420 --> 00:02:47.100
don't stress about it.

62
00:02:47.100 --> 00:02:48.640
There's gonna be hundreds of things in there.

63
00:02:48.640 --> 00:02:51.670
It also look at quite large, like this is what?

64
00:02:51.670 --> 00:02:55.100
65 megs, I just installed one thing.

65
00:02:55.100 --> 00:02:57.270
And that's pretty common for tooling to have

66
00:02:57.270 --> 00:02:59.320
lots of dependencies, 'cause they are doing

67
00:02:59.320 --> 00:03:01.130
a lot under the hood.

68
00:03:01.130 --> 00:03:05.120
It is totally fine to always delete your node modules folder

69
00:03:05.120 --> 00:03:07.360
because you can always get it back

70
00:03:07.360 --> 00:03:09.460
by simply type npm install.

71
00:03:09.460 --> 00:03:11.820
The important thing is that you have a list of dependencies

72
00:03:11.820 --> 00:03:14.130
that you want in your package JSON.

73
00:03:14.130 --> 00:03:17.470
You should never ever modify code that is inside

74
00:03:17.470 --> 00:03:20.490
your node modules, because it will be wiped out

75
00:03:20.490 --> 00:03:22.330
at anytime and then the nmp install

76
00:03:22.330 --> 00:03:24.393
will always bring that back.

77
00:03:25.620 --> 00:03:27.920
Let's install a couple more.

78
00:03:27.920 --> 00:03:31.770
I like to nmp install, I'm gonna bump up the font here.

79
00:03:31.770 --> 00:03:36.770
One called faker, one called data-fns.

80
00:03:37.040 --> 00:03:38.900
And you're gonna install multiple packages

81
00:03:38.900 --> 00:03:40.993
just putting a space in between them.

82
00:03:41.910 --> 00:03:45.293
Another one called await to js.

83
00:03:46.510 --> 00:03:48.690
Another one called lodash and finally,

84
00:03:48.690 --> 00:03:50.420
another one called axios.

85
00:03:50.420 --> 00:03:52.530
And those are all regular dependencies

86
00:03:52.530 --> 00:03:54.830
so there's no need to put save div on the end.

87
00:04:01.610 --> 00:04:03.530
That installed much quicker than parcel.

88
00:04:03.530 --> 00:04:06.280
You can see, that we've got all these dependencies in here.

89
00:04:06.280 --> 00:04:07.113
Good.

90
00:04:08.220 --> 00:04:11.423
Now, let's go and make a index.html.

91
00:04:13.980 --> 00:04:16.393
Let's give ourselves an HTML base.

92
00:04:23.950 --> 00:04:25.173
Script source.

93
00:04:27.180 --> 00:04:28.483
To index.js.

94
00:04:30.130 --> 00:04:31.753
Go ahead and make that index.js.

95
00:04:33.230 --> 00:04:35.330
Console log, it works.

96
00:04:35.330 --> 00:04:37.370
Like the good old days.

97
00:04:37.370 --> 00:04:41.220
And I believe we can modify our package JSON

98
00:04:41.220 --> 00:04:44.210
to take a start command.

99
00:04:44.210 --> 00:04:49.040
I also will just run parcel index.html.

100
00:04:49.040 --> 00:04:53.297
We'll also have the ability to add browserslist.

101
00:05:00.300 --> 00:05:05.300
Just an array of last one chrome versions.

102
00:05:08.420 --> 00:05:10.123
Npm start this sucker.

103
00:05:13.820 --> 00:05:16.090
And it got one little bit of error here.

104
00:05:16.090 --> 00:05:18.410
Enoent undefined.

105
00:05:18.410 --> 00:05:23.410
That is I believe, this link to my CSS is incorrect.

106
00:05:23.500 --> 00:05:25.100
It's gotta go up one more level.

107
00:05:26.630 --> 00:05:28.930
Got a couple of errors here.

108
00:05:28.930 --> 00:05:30.453
Unexpected token.

109
00:05:31.530 --> 00:05:32.793
Angle bracket.

110
00:05:37.220 --> 00:05:39.503
Let's try to run this as JavaScript.

111
00:05:40.500 --> 00:05:43.763
Let's go to your package JSON.

112
00:05:44.610 --> 00:05:46.810
That's been funky to me so I'm gonna just try

113
00:05:46.810 --> 00:05:48.483
to delete some of the stuff.

114
00:05:50.600 --> 00:05:52.093
Cache and dist.

115
00:05:53.890 --> 00:05:54.743
Try it again.

116
00:05:59.200 --> 00:06:00.033
There we go.

117
00:06:00.033 --> 00:06:01.790
See, what I mean about these deleting

118
00:06:01.790 --> 00:06:03.760
those folders sometimes?

119
00:06:03.760 --> 00:06:05.492
That'll save you all the time in the world.

120
00:06:05.492 --> 00:06:06.970
(laughs) All right.

121
00:06:06.970 --> 00:06:08.850
So let's go through some of these different

122
00:06:08.850 --> 00:06:10.310
packages that we have.

123
00:06:10.310 --> 00:06:12.730
First one is that one I just forgot to tell you to install

124
00:06:12.730 --> 00:06:14.300
and that's wait.

125
00:06:14.300 --> 00:06:18.960
So, if we go to nmp.im/waait,

126
00:06:21.940 --> 00:06:26.940
it will redirect you to nmpjs.org/package/wait

127
00:06:27.430 --> 00:06:30.093
and this is the package that I told you about.

128
00:06:31.350 --> 00:06:34.190
This is the wait function that we probably coded 10 times.

129
00:06:34.190 --> 00:06:37.320
So, we can now install it as a package.

130
00:06:37.320 --> 00:06:40.653
So nmp install, waait, W-A-A-I-T.

131
00:06:41.710 --> 00:06:43.520
And then nmp start again.

132
00:06:43.520 --> 00:06:45.057
Make sure you always start it up

133
00:06:45.057 --> 00:06:47.440
and then I'll go into my index js

134
00:06:47.440 --> 00:06:50.493
and we'll make an async function go.

135
00:06:51.520 --> 00:06:54.853
And just console log Going.

136
00:06:55.990 --> 00:06:57.143
Then, we'll go.

137
00:06:58.210 --> 00:06:59.393
Let's check that out.

138
00:07:00.760 --> 00:07:02.270
Going, good.

139
00:07:02.270 --> 00:07:06.020
Now, I want to use this waait package.

140
00:07:06.020 --> 00:07:07.850
And you can look in the docks,

141
00:07:07.850 --> 00:07:09.920
it says import wait form waait.

142
00:07:09.920 --> 00:07:14.920
So import wait from W-A-A-I-T.

143
00:07:15.040 --> 00:07:16.660
And, you can name this whatever you want

144
00:07:16.660 --> 00:07:19.303
because it's a named export.

145
00:07:20.500 --> 00:07:24.190
Right below the going, we'll just await, wait,

146
00:07:24.190 --> 00:07:28.623
200 milliseconds, console log ending.

147
00:07:32.540 --> 00:07:34.490
Going, ending, going, ending, good.

148
00:07:34.490 --> 00:07:38.610
So that's the most basic idea of what a package is,

149
00:07:38.610 --> 00:07:42.590
is that even something as small as little function

150
00:07:42.590 --> 00:07:45.360
that we could write over and over and over,

151
00:07:45.360 --> 00:07:48.080
sometimes, it's helpful to have somebody else

152
00:07:48.080 --> 00:07:51.801
deploy that thing to npm and you simply just nmp install it

153
00:07:51.801 --> 00:07:54.760
and you are up and running without having

154
00:07:54.760 --> 00:07:56.793
to worry about putting that in.

155
00:07:57.680 --> 00:07:59.310
Quite honestly, that's why I made that package.

156
00:07:59.310 --> 00:08:01.360
'Cause I use it quite a bit.

157
00:08:01.360 --> 00:08:04.570
Now, next one is a faker.

158
00:08:04.570 --> 00:08:06.370
Let's check out what faker is.

159
00:08:06.370 --> 00:08:08.530
So we'll go to faker.

160
00:08:08.530 --> 00:08:11.090
Faker.js generates massive amounts of data

161
00:08:11.090 --> 00:08:12.600
in the browser in node js.

162
00:08:12.600 --> 00:08:16.950
So, pretty simple how it works, is that

163
00:08:16.950 --> 00:08:20.220
you can import faker and then there is faker name

164
00:08:20.220 --> 00:08:22.900
and you can generate fake names, fake email address,

165
00:08:22.900 --> 00:08:25.470
fake cards, and this is really helpful

166
00:08:25.470 --> 00:08:27.430
if you're just trying to get some data

167
00:08:27.430 --> 00:08:29.330
rather than sitting around and typing it.

168
00:08:29.330 --> 00:08:33.357
Or if you're writing test and you wanna fill those tests

169
00:08:33.357 --> 00:08:35.820
with a bunch of fake data.

170
00:08:35.820 --> 00:08:37.940
So look at they've got, commerce,

171
00:08:37.940 --> 00:08:39.830
company, database and date.

172
00:08:39.830 --> 00:08:44.830
So, what we can do is import faker from faker.

173
00:08:46.320 --> 00:08:47.607
And if you're not sure how to use it

174
00:08:47.607 --> 00:08:51.590
and the docks don't necessarily tell you how to use it.

175
00:08:51.590 --> 00:08:53.630
Because sometimes, you'll see this.

176
00:08:53.630 --> 00:08:56.780
Var faker equals require.

177
00:08:56.780 --> 00:08:59.340
And well, what does that mean?

178
00:08:59.340 --> 00:09:01.320
You might see it something like this.

179
00:09:01.320 --> 00:09:05.100
This is the older node.js syntax,

180
00:09:05.100 --> 00:09:07.580
this is referred to as common js

181
00:09:07.580 --> 00:09:10.740
and this is referred to as ECMAScript modules.

182
00:09:10.740 --> 00:09:13.450
Node js is currently not phasing out,

183
00:09:13.450 --> 00:09:17.670
but they have just implemented ES six or ECMAScript modules

184
00:09:17.670 --> 00:09:21.560
in node, so, you probably won't see this very much

185
00:09:21.560 --> 00:09:25.080
unless it is on a node js project.

186
00:09:25.080 --> 00:09:25.913
So that's what that is.

187
00:09:25.913 --> 00:09:27.750
If you ever do something like this,

188
00:09:27.750 --> 00:09:31.210
you can simply just take the variable declaration

189
00:09:31.210 --> 00:09:34.810
and make it import and then take the equals

190
00:09:34.810 --> 00:09:38.080
and require and the open parenthesis

191
00:09:38.080 --> 00:09:40.160
and then verbalize it with from

192
00:09:40.160 --> 00:09:43.050
and then you can also take off that.

193
00:09:43.050 --> 00:09:45.020
Well, let's just go ahead and console log faker

194
00:09:45.020 --> 00:09:46.870
and see what we're working with here.

195
00:09:48.900 --> 00:09:50.960
So there you go, faker.

196
00:09:50.960 --> 00:09:55.960
And we got those random number, random uu ID, boolean,

197
00:09:57.650 --> 00:09:58.770
a random boolean?

198
00:09:58.770 --> 00:10:00.400
That's great.

199
00:10:00.400 --> 00:10:03.840
Helpers, address, so let's just try.

200
00:10:03.840 --> 00:10:06.600
Let's try a first name and last name.

201
00:10:06.600 --> 00:10:11.600
So we'll just faker.name.firstName

202
00:10:14.440 --> 00:10:17.230
and open it in a back text.

203
00:10:17.230 --> 00:10:18.287
Back text, oh.

204
00:10:23.418 --> 00:10:24.251
firstName.

205
00:10:26.070 --> 00:10:27.987
A bit of a problem here..

206
00:10:31.610 --> 00:10:34.773
Oh, I forgot to close my back text, there we go.

207
00:10:35.890 --> 00:10:39.090
There we go, hello Pink, hello Parker, Hello Nedra,

208
00:10:39.090 --> 00:10:42.440
Raven, Dee, Laney, you get the point, right?

209
00:10:42.440 --> 00:10:45.430
It gives you a fake name every single time that you want.

210
00:10:45.430 --> 00:10:47.803
There's all kinds of different values in there.

211
00:10:49.610 --> 00:10:54.220
It would be kind of cool if you could import name

212
00:10:54.220 --> 00:10:56.290
from faker, let's see if that works.

213
00:10:56.290 --> 00:10:59.390
Sometimes, you're able to just import subsets of it.

214
00:10:59.390 --> 00:11:01.710
Console log name.

215
00:11:01.710 --> 00:11:02.543
Let's see.

216
00:11:03.550 --> 00:11:04.860
Yeah, there we go.

217
00:11:04.860 --> 00:11:07.190
So you can just import name and in that case,

218
00:11:07.190 --> 00:11:10.600
you just import name.FirstName.

219
00:11:10.600 --> 00:11:13.390
And you have access to all of the ones that you want.

220
00:11:13.390 --> 00:11:15.400
So, lots of different fake data there,

221
00:11:15.400 --> 00:11:18.290
I won't stay here and show you them all because (chuckles)

222
00:11:18.290 --> 00:11:19.640
I think that's a little bit boring.

223
00:11:19.640 --> 00:11:21.430
But you can kinda get the point.

224
00:11:21.430 --> 00:11:25.560
It'd be kinda cool to generate an array of different names.

225
00:11:25.560 --> 00:11:27.223
How would I do that, actually?

226
00:11:32.100 --> 00:11:34.220
Okay, there doesn't seem to be like,

227
00:11:34.220 --> 00:11:37.883
give me 10 faker names, if I put 10 in there.

228
00:11:38.829 --> 00:11:42.230
Does that give me, no, it doesn't change what it is.

229
00:11:42.230 --> 00:11:44.520
So how would I get 10 fake names?

230
00:11:44.520 --> 00:11:49.050
I'll say const fakeNames is equal to array.from.

231
00:11:51.500 --> 00:11:53.780
Remember we can pass it our from,

232
00:11:53.780 --> 00:11:55.670
something with the length of 10.

233
00:11:55.670 --> 00:11:59.900
And then the second argument is a map function

234
00:11:59.900 --> 00:12:04.037
which we can just pass name.firstName.

235
00:12:05.890 --> 00:12:07.717
Console log fakeNames.

236
00:12:11.665 --> 00:12:14.120
There we go, look at a whole bunch of fake names.

237
00:12:14.120 --> 00:12:15.880
If you wanted full names, you could pass

238
00:12:15.880 --> 00:12:17.663
your own callback function.

239
00:12:22.170 --> 00:12:24.060
And we get this return back text

240
00:12:28.667 --> 00:12:33.334
firstName and then space do it again with the last name.

241
00:12:39.226 --> 00:12:42.550
(laughs) Everyone's last name is Function, why?

242
00:12:42.550 --> 00:12:45.260
Oh, I forgot to actually call the code.

243
00:12:45.260 --> 00:12:46.450
There we go.

244
00:12:46.450 --> 00:12:47.660
You get the point.

245
00:12:47.660 --> 00:12:48.850
Looks pretty cool.

246
00:12:48.850 --> 00:12:50.530
So, faker is a good one.

247
00:12:50.530 --> 00:12:53.330
Next one I wanna show you, I'm gonna rid of all these

248
00:12:53.330 --> 00:12:57.870
console logs, get rid of this go call as well.

249
00:12:57.870 --> 00:13:01.330
Next one I wanna show you is date fns.

250
00:13:01.330 --> 00:13:03.700
And let's take a look at datefns.

251
00:13:03.700 --> 00:13:05.920
Some of these, you just have to go to the nmp

252
00:13:05.920 --> 00:13:07.360
to look at the docs.

253
00:13:07.360 --> 00:13:10.710
Some of these bigger ones will have their entire library

254
00:13:10.710 --> 00:13:12.780
which you can work with, which is great.

255
00:13:12.780 --> 00:13:14.980
And this is a really neat one.

256
00:13:14.980 --> 00:13:17.840
So you import, they have all of these different methods

257
00:13:17.840 --> 00:13:20.920
for working with it, and then it allows you

258
00:13:20.920 --> 00:13:25.180
to format dates and work with dates, a much nicer way

259
00:13:25.180 --> 00:13:28.370
than having to work with just the regular date library

260
00:13:28.370 --> 00:13:29.870
that's built into the browser.

261
00:13:31.566 --> 00:13:33.370
So, if we go here, we can click through

262
00:13:33.370 --> 00:13:34.713
to the documentation.

263
00:13:37.452 --> 00:13:41.247
I wanna say like, something minus three days

264
00:13:42.340 --> 00:13:43.243
was how long ago?

265
00:13:48.160 --> 00:13:51.870
Look for time ago.

266
00:13:51.870 --> 00:13:53.463
Format distance.

267
00:13:55.060 --> 00:13:58.500
It's called distance in words, if you have two dates

268
00:13:58.500 --> 00:14:01.500
and you wanna know what the difference is

269
00:14:01.500 --> 00:14:05.815
between those two dates, you can import formatDistance.

270
00:14:05.815 --> 00:14:06.740
All right, let's try that.

271
00:14:06.740 --> 00:14:11.740
So import formatDistance from date fns.

272
00:14:14.290 --> 00:14:17.270
So if you've ever heard of people using moment.js,

273
00:14:17.270 --> 00:14:21.050
before, this is the same thing as moment.js.

274
00:14:21.050 --> 00:14:23.780
It's just a little bit more chunked up,

275
00:14:23.780 --> 00:14:27.400
meaning that you don't have to import the entire library

276
00:14:27.400 --> 00:14:29.860
in order to use one piece.

277
00:14:29.860 --> 00:14:32.840
It will allow you just to pull a single piece

278
00:14:32.840 --> 00:14:35.560
from that library, which is great.

279
00:14:35.560 --> 00:14:38.470
So, we got here, formatDistance.

280
00:14:38.470 --> 00:14:41.663
Take a look at their example here.

281
00:14:42.890 --> 00:14:44.980
So maybe you wanna like tell somebody

282
00:14:44.980 --> 00:14:46.620
and how long will that be.

283
00:14:46.620 --> 00:14:47.960
So const diff.

284
00:14:52.262 --> 00:14:55.262
And let's just console log the diff.

285
00:15:04.056 --> 00:15:07.150
It says in about one hour so,

286
00:15:07.150 --> 00:15:09.683
you can also do things like this.

287
00:15:10.990 --> 00:15:15.900
New Date and new date 2020.

288
00:15:18.940 --> 00:15:20.840
And it will tell you the difference

289
00:15:20.840 --> 00:15:23.707
between those two is four months ago.

290
00:15:27.000 --> 00:15:29.140
I guess if you wanted four months in the future,

291
00:15:29.140 --> 00:15:31.763
you would switch them up.

292
00:15:33.280 --> 00:15:35.300
formatDistance to now, that's more,

293
00:15:35.300 --> 00:15:37.430
I guess, the more of the one that I just used

294
00:15:37.430 --> 00:15:39.453
'cause new date will give you now.

295
00:15:40.740 --> 00:15:42.510
Other formatting of the date.

296
00:15:42.510 --> 00:15:45.380
So if you have a date and you wanna format it

297
00:15:45.380 --> 00:15:48.460
in a very specific way, look at all,

298
00:15:48.460 --> 00:15:50.110
this is like PHP, how is this?

299
00:15:50.110 --> 00:15:52.470
They are really nice way to format the dates.

300
00:15:52.470 --> 00:15:54.840
So let me just pick a random one.

301
00:15:54.840 --> 00:15:59.840
If I wanna say January the 12th 2020,

302
00:16:03.950 --> 00:16:08.410
what will, how would I do that?

303
00:16:08.410 --> 00:16:11.092
So I need, let's bring it in here.

304
00:16:11.092 --> 00:16:14.570
Const date is equal to new Date

305
00:16:15.680 --> 00:16:17.510
and I want it to look like this.

306
00:16:17.510 --> 00:16:19.710
Not specifically say that, but I wanted to say

307
00:16:19.710 --> 00:16:22.540
give me the full month name, I wanna say the,

308
00:16:22.540 --> 00:16:27.540
I wanna give it the full th and then 2020 after it.

309
00:16:28.440 --> 00:16:29.820
So how would I do that?

310
00:16:29.820 --> 00:16:31.193
Well, let's look here.

311
00:16:32.300 --> 00:16:35.303
Format is the method, so go up here.

312
00:16:36.520 --> 00:16:37.443
Format.

313
00:16:38.470 --> 00:16:39.480
How does it work?

314
00:16:39.480 --> 00:16:43.270
It takes a date, it takes a format,

315
00:16:43.270 --> 00:16:45.193
and then there's some options,

316
00:16:46.488 --> 00:16:50.290
weeksStartsOn, firstWeekContainsDate, things like that.

317
00:16:50.290 --> 00:16:53.330
So, this will take a date or a number,

318
00:16:53.330 --> 00:16:54.710
that's what the pipe means.

319
00:16:54.710 --> 00:16:59.707
So, we'll say const formatted is equal to format,

320
00:17:00.610 --> 00:17:04.250
we'll pass it the date, which is today.

321
00:17:04.250 --> 00:17:08.420
And then it looks like we pass it a string, yeah,

322
00:17:08.420 --> 00:17:10.770
a string of tokens, and these are all of those.

323
00:17:10.770 --> 00:17:15.770
So, I want to find the month name in full.

324
00:17:16.060 --> 00:17:18.913
January, so I need four Ls.

325
00:17:21.562 --> 00:17:23.860
Then, can I just write the under it?

326
00:17:23.860 --> 00:17:25.543
Let's see how far we got there.

327
00:17:29.150 --> 00:17:31.610
So November, it's obviously not January one

328
00:17:31.610 --> 00:17:34.220
I'm recording this and the, (laughs)

329
00:17:34.220 --> 00:17:37.723
the gives me 157, that's not what we want.

330
00:17:40.220 --> 00:17:41.060
How do you put

331
00:17:43.920 --> 00:17:45.803
just regular English words?

332
00:17:54.760 --> 00:17:57.060
Oh, if you want, you have to put them on single quotes.

333
00:17:57.060 --> 00:17:59.280
So, I'm gonna use back text for this

334
00:18:00.400 --> 00:18:04.210
and then in single quotes, I put the,

335
00:18:04.210 --> 00:18:05.343
see if that works.

336
00:18:06.950 --> 00:18:08.960
Yeah, November the, okay.

337
00:18:08.960 --> 00:18:11.993
Now, I need the day of the month in th.

338
00:18:13.690 --> 00:18:15.253
So look at the docs here.

339
00:18:20.340 --> 00:18:23.420
First, second, third, fourth, oh it's quarter.

340
00:18:23.420 --> 00:18:28.230
So we wanna find month, date of month,

341
00:18:28.230 --> 00:18:29.963
do is this one.

342
00:18:31.100 --> 00:18:33.300
So you could either have a single number,

343
00:18:33.300 --> 00:18:36.540
a leading zero number or with the ordinal,

344
00:18:36.540 --> 00:18:39.790
that's what that's called, st and th.

345
00:18:39.790 --> 00:18:42.063
So, January the do.

346
00:18:43.460 --> 00:18:45.653
And then we need the full year.

347
00:18:48.670 --> 00:18:52.000
Our timezone, milliseconds, localize,

348
00:18:52.000 --> 00:18:53.733
ISO, calendar year.

349
00:18:55.010 --> 00:18:56.780
44, one.

350
00:18:58.400 --> 00:18:59.473
Looks like just Y.

351
00:19:01.400 --> 00:19:02.853
So LLLL the Y.

352
00:19:04.890 --> 00:19:07.760
November the 21st, 2019.

353
00:19:07.760 --> 00:19:08.593
Beautiful!

354
00:19:08.593 --> 00:19:10.818
Looks like, I love that.

355
00:19:10.818 --> 00:19:13.930
That's not doable in just regular JavaScript right now

356
00:19:13.930 --> 00:19:16.530
so I always reach for this moment js.

357
00:19:16.530 --> 00:19:20.210
Any time you have, anything to work with dates,

358
00:19:20.210 --> 00:19:24.340
not just formatting dates, but also trying to figure out

359
00:19:24.340 --> 00:19:26.250
if you're trying to compare two dates.

360
00:19:26.250 --> 00:19:28.909
So if you've got two dates, you wanna compare isBefore,

361
00:19:28.909 --> 00:19:30.183
isDate, isEqual, isFuture, isPast, isValid date,

362
00:19:33.447 --> 00:19:34.780
oh, lightFormat.

363
00:19:37.140 --> 00:19:39.210
Returns a formatted date string.

364
00:19:39.210 --> 00:19:41.590
Unlike format, lightFormat doesn't locales

365
00:19:41.590 --> 00:19:43.483
and outputs the most popular tokens.

366
00:19:44.500 --> 00:19:46.510
Please note that lightFormat token's different

367
00:19:46.510 --> 00:19:48.660
from moment js, blah blah blah.

368
00:19:48.660 --> 00:19:51.050
Maybe, if you can get away with lightFormat,

369
00:19:51.050 --> 00:19:54.080
it's probably gonna make your bundle size smaller

370
00:19:54.080 --> 00:19:56.373
'cause it just does most popular ones.

371
00:19:56.373 --> 00:19:57.206
Just cool.

372
00:19:57.206 --> 00:20:00.110
Doesn't look like it does ordinals though,

373
00:20:00.110 --> 00:20:02.990
which is what we needed there.

374
00:20:02.990 --> 00:20:04.490
Min, max, you get the point.

375
00:20:04.490 --> 00:20:06.360
There's all kinds of really interesting things

376
00:20:06.360 --> 00:20:07.270
for working with dates.

377
00:20:07.270 --> 00:20:09.300
Working with dates is very very hard.

378
00:20:09.300 --> 00:20:11.733
And date functions makes it very easy.

379
00:20:14.210 --> 00:20:16.510
Next one I wanna do is axios.

380
00:20:16.510 --> 00:20:21.510
So axios is a library for working with,

381
00:20:23.030 --> 00:20:25.700
basically, it's the same thing as fetch

382
00:20:25.700 --> 00:20:29.770
but A, it has a bunch of nice, little defaults in it,

383
00:20:29.770 --> 00:20:33.010
B, it doesn't have the weird double await

384
00:20:33.010 --> 00:20:36.963
that our promises do, because of the JSON default.

385
00:20:37.950 --> 00:20:40.970
And then also, it works in node js

386
00:20:40.970 --> 00:20:44.970
at the time of recording, fetch is not available on node js.

387
00:20:44.970 --> 00:20:48.003
You either have to polyfill it using like axios.

388
00:20:49.300 --> 00:20:51.950
And there's all kinds of plugins for axios as well

389
00:20:51.950 --> 00:20:54.840
for caching and things like that, which is pretty neat.

390
00:20:54.840 --> 00:20:57.290
So, I'll show you how to use it real quick.

391
00:20:57.290 --> 00:21:01.363
We import axios from axios.

392
00:21:03.710 --> 00:21:07.190
And let's make a function called getJoke.

393
00:21:09.880 --> 00:21:11.563
And we'll make that async.

394
00:21:13.070 --> 00:21:17.027
And I'll say const, response is equal to await axios.get

395
00:21:20.310 --> 00:21:23.340
and then, what is that?

396
00:21:23.340 --> 00:21:25.003
Icanhazdadjoke.com.

397
00:21:27.330 --> 00:21:31.120
And then I believe, the second argument is also for headers.

398
00:21:31.120 --> 00:21:32.570
So how would I find that out?

399
00:21:33.850 --> 00:21:34.830
There we go.

400
00:21:34.830 --> 00:21:36.713
So, headers.

401
00:21:38.840 --> 00:21:40.223
Lowercase headers.

402
00:21:42.180 --> 00:21:46.840
And you needed the accept application json.

403
00:21:50.950 --> 00:21:53.680
Then I'll just go ahead and console log that response

404
00:21:53.680 --> 00:21:57.673
to see what we get and then we'll run getJoke on page load.

405
00:22:02.750 --> 00:22:03.583
There we go.

406
00:22:03.583 --> 00:22:08.140
We get, this is our response and the data is what we want.

407
00:22:08.140 --> 00:22:10.467
It also gives you the headers, the config,

408
00:22:10.467 --> 00:22:12.420
the entire request.

409
00:22:12.420 --> 00:22:15.420
So, if you're also doing like some lower level

410
00:22:15.420 --> 00:22:17.790
network stuff, you can use axios for that

411
00:22:17.790 --> 00:22:20.200
or doing uploads, streaming uploads,

412
00:22:20.200 --> 00:22:23.760
makes a lot of that sort of more advanced stuff passed

413
00:22:23.760 --> 00:22:26.710
just doing a simple get request, it makes it really easy.

414
00:22:26.710 --> 00:22:29.240
So in our case, we want data, so we could do

415
00:22:29.240 --> 00:22:33.653
structure that data, and just console log data.

416
00:22:38.169 --> 00:22:40.420
There we go, get our joke right back.

417
00:22:40.420 --> 00:22:44.765
So, I can use fetch in most of my used cases

418
00:22:44.765 --> 00:22:48.610
but anytime we're doing a little bit more advanced,

419
00:22:48.610 --> 00:22:52.620
I reach for axios myself, big fan of it.

420
00:22:52.620 --> 00:22:54.990
Next one we have is lodash.

421
00:22:54.990 --> 00:22:59.990
Now, lodash is a utility library for working with arrays,

422
00:23:02.070 --> 00:23:07.070
objects, and a couple other, kinda interesting things.

423
00:23:07.420 --> 00:23:08.750
And I'm a big fan of lodash.

424
00:23:08.750 --> 00:23:12.330
So I don't reach for it all of the time,

425
00:23:12.330 --> 00:23:14.550
because in most cases, I can get away

426
00:23:14.550 --> 00:23:18.930
with a map filter reduce, but there is many used cases

427
00:23:18.930 --> 00:23:22.450
where I'll say, huh, this is gonna be really hard

428
00:23:22.450 --> 00:23:25.340
or really complicated with a reduce function.

429
00:23:25.340 --> 00:23:28.500
I'm just gonna reach for whatever the equivalent lodash is.

430
00:23:28.500 --> 00:23:32.250
So, let's look at a random one, intersection.

431
00:23:32.250 --> 00:23:33.170
What does this do?

432
00:23:33.170 --> 00:23:36.950
If you've got two pieces of data and you want to know

433
00:23:36.950 --> 00:23:40.570
what are the same values in them,

434
00:23:40.570 --> 00:23:42.290
we can just import it.

435
00:23:42.290 --> 00:23:45.373
So, import intersection

436
00:23:50.440 --> 00:23:51.813
from lodash.

437
00:23:55.280 --> 00:23:58.150
And now, we have this intersection example.

438
00:23:58.150 --> 00:24:00.370
You see all their examples are underscore dot?

439
00:24:00.370 --> 00:24:04.340
And that just assumes that you import the entire library.

440
00:24:04.340 --> 00:24:07.340
We can just go ahead and import one method as we want,

441
00:24:07.340 --> 00:24:09.340
just like we did with date functions.

442
00:24:09.340 --> 00:24:11.623
So that is exactly what we want.

443
00:24:12.650 --> 00:24:15.440
So let's go down here and we'll just say const

444
00:24:16.890 --> 00:24:21.890
a is equal to I don't know, one, two, three, four,

445
00:24:22.460 --> 00:24:24.613
five, six, seven, eight, nine, 10.

446
00:24:26.090 --> 00:24:30.280
And we've got b, that will have

447
00:24:30.280 --> 00:24:31.710
a whole bunch of other numbers.

448
00:24:31.710 --> 00:24:36.710
So, five, three, eight, three, seven, 34, you get the point.

449
00:24:40.140 --> 00:24:42.270
Now we wanna know what the the same numbers

450
00:24:42.270 --> 00:24:44.250
that exist in both of these?

451
00:24:44.250 --> 00:24:49.163
Okay well, I could run it, intersection of a and b.

452
00:24:55.621 --> 00:24:58.940
Const sameValues is equal to,

453
00:24:58.940 --> 00:25:01.233
console log, sameValues.

454
00:25:07.470 --> 00:25:09.460
There we go, we get a new array of values

455
00:25:09.460 --> 00:25:12.100
that exist in both of them.

456
00:25:12.100 --> 00:25:14.810
So that's little one that I like to use.

457
00:25:14.810 --> 00:25:16.170
There's also...

458
00:25:18.890 --> 00:25:20.083
Deep clone.

459
00:25:23.540 --> 00:25:25.020
Or clone deep.

460
00:25:25.020 --> 00:25:26.760
So clone, we've already looked at,

461
00:25:26.760 --> 00:25:30.230
we can use a spread, or object data sign,

462
00:25:30.230 --> 00:25:32.780
but then, you can also do clone deep

463
00:25:32.780 --> 00:25:35.930
and you can tell it how many levels deep

464
00:25:35.930 --> 00:25:37.690
you would like to clone, so remember,

465
00:25:37.690 --> 00:25:39.970
we talked about reference versus value,

466
00:25:39.970 --> 00:25:41.800
that's really good, you can use,

467
00:25:41.800 --> 00:25:43.953
there's the equal one.

468
00:25:44.955 --> 00:25:47.670
And if you wanna check if two values, two objects

469
00:25:47.670 --> 00:25:50.467
have equal values, remember I did this

470
00:25:50.467 --> 00:25:53.550
const person1 is equal to name of wes

471
00:25:56.097 --> 00:25:59.645
and person2, is equal to name of wes.

472
00:25:59.645 --> 00:26:04.220
If we were to console log, person1 is equal to person2,

473
00:26:04.220 --> 00:26:05.873
is that gonna be true or false?

474
00:26:08.680 --> 00:26:10.010
It's gonna be false.

475
00:26:10.010 --> 00:26:11.360
And why is that?

476
00:26:11.360 --> 00:26:14.770
Well, because these are not the same object.

477
00:26:14.770 --> 00:26:17.960
And if you want to know if all of the values inside

478
00:26:17.960 --> 00:26:22.203
of an object are the same, then, we'd have to use equal.

479
00:26:23.470 --> 00:26:25.183
So let's go ahead and import eq.

480
00:26:29.465 --> 00:26:32.077
And we just use it, eq, person1, person2.

481
00:26:35.360 --> 00:26:37.000
False.

482
00:26:37.000 --> 00:26:38.443
Did we get the right method?

483
00:26:45.440 --> 00:26:48.620
Oh, it looks like this performs triple equals to,

484
00:26:48.620 --> 00:26:49.620
that's not what we want.

485
00:26:49.620 --> 00:26:52.343
I believe they have another one that is equal.

486
00:26:54.620 --> 00:26:55.953
Yeah, isEqual.

487
00:26:57.627 --> 00:27:00.010
And that will check for the actual values.

488
00:27:00.010 --> 00:27:01.030
That's what we want.

489
00:27:01.030 --> 00:27:05.920
So, we change this import to not eq, but isEqual.

490
00:27:08.034 --> 00:27:09.523
We go down here, isEqual.

491
00:27:14.527 --> 00:27:16.100
And then that gives us true.

492
00:27:16.100 --> 00:27:17.610
So I've had a couple of values on there

493
00:27:17.610 --> 00:27:21.250
that will do a check of all of the values on it.

494
00:27:21.250 --> 00:27:23.466
They also have this isEqualWith.

495
00:27:23.466 --> 00:27:27.150
So like isEqual except it accepts a customizer

496
00:27:27.150 --> 00:27:29.027
which invoked to compare value

497
00:27:29.027 --> 00:27:31.283
if the customizer returns undefined.

498
00:27:32.120 --> 00:27:35.200
Comparisons are handled by the method instead.

499
00:27:35.200 --> 00:27:36.473
Interesting.

500
00:27:37.352 --> 00:27:42.352
So, is isEqualWith an array, hello goodbye,

501
00:27:42.900 --> 00:27:45.370
other, hi goodbye.

502
00:27:45.370 --> 00:27:48.470
And the customizer is, does it say hi or hello.

503
00:27:48.470 --> 00:27:49.600
Oh that's cool.

504
00:27:49.600 --> 00:27:52.170
So you can check if they are the same

505
00:27:52.170 --> 00:27:53.720
by giving it a regex.

506
00:27:53.720 --> 00:27:55.310
I can't say I've had to do that before,

507
00:27:55.310 --> 00:27:57.853
but put that in my (mumbles) for later.

508
00:28:00.330 --> 00:28:04.570
I think what I'd recommend you is to spend

509
00:28:04.570 --> 00:28:08.010
like an hour to two, and this might seem nuts,

510
00:28:08.010 --> 00:28:10.610
but just go through and just read

511
00:28:10.610 --> 00:28:12.980
what each of these wants to do,

512
00:28:12.980 --> 00:28:15.950
because you're gonna run into issues while programming,

513
00:28:15.950 --> 00:28:18.770
and just having a bit of a head space

514
00:28:18.770 --> 00:28:23.560
as to what lodash does will just kinda put it in your head

515
00:28:23.560 --> 00:28:26.150
and when you run into these problems,

516
00:28:26.150 --> 00:28:27.910
you'll very quickly be able to solve them

517
00:28:27.910 --> 00:28:30.590
because there's probably a lodash method for it.

518
00:28:30.590 --> 00:28:34.000
Oh there's even like a difference.

519
00:28:34.000 --> 00:28:34.950
There we go, difference.

520
00:28:34.950 --> 00:28:38.880
I remember years ago, this is like, I don't know,

521
00:28:38.880 --> 00:28:41.300
maybe eight years ago, I used difference

522
00:28:41.300 --> 00:28:44.030
and I took an array of all my Twitter followers,

523
00:28:44.030 --> 00:28:46.400
and then every 10 or 20 minutes,

524
00:28:46.400 --> 00:28:48.680
I took another array of my Twitter followers,

525
00:28:48.680 --> 00:28:51.850
and you could see who had unfollowed you,

526
00:28:51.850 --> 00:28:55.380
and you could run the other ones to see who has followed you

527
00:28:55.380 --> 00:28:58.000
which is kind of cool, and it would just give you

528
00:28:58.000 --> 00:29:01.889
a list of who unfollowed and who followed you.

529
00:29:01.889 --> 00:29:03.570
I don't think I could do that anymore

530
00:29:03.570 --> 00:29:05.690
'cause it'll be too large.

531
00:29:05.690 --> 00:29:10.170
But I think it'd be kinda interesting to check it as well.

532
00:29:10.170 --> 00:29:15.170
Finally, the last one is this await to js.

533
00:29:15.290 --> 00:29:17.680
And somebody showed me this when I was talking to them

534
00:29:17.680 --> 00:29:20.960
about recording a video on the different ways

535
00:29:20.960 --> 00:29:25.143
to handle an error and there's just one library that,

536
00:29:27.000 --> 00:29:30.410
it allows you to handle errors a little bit differently.

537
00:29:30.410 --> 00:29:33.183
So what I'm gonna do is we'll go to the top here,

538
00:29:34.390 --> 00:29:39.060
import to from await to js.

539
00:29:39.060 --> 00:29:41.570
And you notice here, we don't need to put .js

540
00:29:41.570 --> 00:29:43.103
or path to anything of those.

541
00:29:44.010 --> 00:29:47.310
They're simply just modules that have been npm installed.

542
00:29:47.310 --> 00:29:51.517
That's another benefit to using this over,

543
00:29:51.517 --> 00:29:54.540
like a parcel-bundler over something like

544
00:29:54.540 --> 00:29:57.120
just a regular browser-based one.

545
00:29:57.120 --> 00:30:01.020
So, let's make a function that resolves if your name is Wes

546
00:30:01.020 --> 00:30:02.930
and errors if your name is anything else.

547
00:30:02.930 --> 00:30:06.107
So, checkIfNameIsCool and in here,

548
00:30:10.140 --> 00:30:15.140
we will take in their name and return a new promise.

549
00:30:16.340 --> 00:30:18.770
We get another function, callback there,

550
00:30:18.770 --> 00:30:22.363
that gives us resolve and reject.

551
00:30:23.490 --> 00:30:27.503
And we'll say if the name is equal to Wes,

552
00:30:28.490 --> 00:30:33.490
then, resolve, cool name and then otherwise, else,

553
00:30:34.870 --> 00:30:39.410
or we can just return here, some people will return

554
00:30:39.410 --> 00:30:40.960
on the same line as the resolve,

555
00:30:40.960 --> 00:30:44.250
or they'll return on a new line, it doesn't really matter.

556
00:30:44.250 --> 00:30:49.250
And then down here, we reject not a cool name.

557
00:30:51.310 --> 00:30:53.257
It's yellin' at me here.

558
00:30:53.257 --> 00:30:56.233
The promise rejection reason to be in error.

559
00:30:57.100 --> 00:31:00.083
I think it expects you to do a new Error.

560
00:31:02.000 --> 00:31:03.343
Bad Name.

561
00:31:04.890 --> 00:31:06.240
And it's giving me here,

562
00:31:06.240 --> 00:31:08.620
name is already declared in upper scope.

563
00:31:08.620 --> 00:31:09.907
Let's say firstName.

564
00:31:12.360 --> 00:31:13.470
Okay.

565
00:31:13.470 --> 00:31:16.013
Now, I'm making a sync function called checkName

566
00:31:17.587 --> 00:31:20.837
and we'll run that when the page loads.

567
00:31:23.116 --> 00:31:27.949
And we'll say const nameDescripton is equal to await check

568
00:31:32.259 --> 00:31:33.842
if nameIsCool, Wes.

569
00:31:35.740 --> 00:31:40.073
Console log nameDescription.

570
00:31:41.090 --> 00:31:46.090
Now, it says cool name.

571
00:31:46.730 --> 00:31:50.150
Good, but what if I were to put in a name

572
00:31:50.150 --> 00:31:52.753
that wasn't cool like Snickers?

573
00:31:54.680 --> 00:31:57.560
And we get an error, uncaught in promise, error, bad name.

574
00:31:57.560 --> 00:32:00.440
Okay, so how do we catch that?

575
00:32:00.440 --> 00:32:02.970
Well, we could use any of the methods

576
00:32:02.970 --> 00:32:07.970
that we learned earlier but what this await too does,

577
00:32:08.320 --> 00:32:12.463
is you can wrap you promise base function into,

578
00:32:14.080 --> 00:32:19.010
and what it will do is it will return a response

579
00:32:19.010 --> 00:32:21.110
and let's just see what that response has.

580
00:32:27.160 --> 00:32:32.160
See, this response is an array

581
00:32:33.620 --> 00:32:36.150
and the first thing is an error

582
00:32:36.150 --> 00:32:37.870
and the second thing is undefined,

583
00:32:37.870 --> 00:32:40.823
and what if I make that Wes.

584
00:32:42.920 --> 00:32:46.500
The first thing is null, and the second thing is cool name.

585
00:32:46.500 --> 00:32:49.810
So what this does, is it always returns an array

586
00:32:49.810 --> 00:32:51.960
and the first thing will be an error

587
00:32:51.960 --> 00:32:54.440
and the second thing will be your resolve value.

588
00:32:54.440 --> 00:32:57.530
So what you can do is you can destructure that response

589
00:32:57.530 --> 00:33:02.530
into err and value or successValue

590
00:33:05.000 --> 00:33:07.873
and then, we can do here, say if there's an error,

591
00:33:08.760 --> 00:33:12.373
then, deal with it and then else,

592
00:33:13.930 --> 00:33:16.103
let me just console log successValue.

593
00:33:20.020 --> 00:33:21.820
Now, see, cool name, it works.

594
00:33:21.820 --> 00:33:24.120
And if I were to change that back to snickers,

595
00:33:28.670 --> 00:33:29.503
it handles in here.

596
00:33:29.503 --> 00:33:33.033
So, console log the error.

597
00:33:34.580 --> 00:33:35.810
There we go, error, bad name

598
00:33:35.810 --> 00:33:37.350
and it gives you the actual error.

599
00:33:37.350 --> 00:33:41.660
So that's kind of a cool way to deal with things

600
00:33:41.660 --> 00:33:44.610
where if you wanna deal with the error right up front

601
00:33:44.610 --> 00:33:46.820
before you keep going in the function,

602
00:33:46.820 --> 00:33:49.340
then all you need to do is to wrap it

603
00:33:49.340 --> 00:33:52.790
in a to function and that will return an array

604
00:33:52.790 --> 00:33:56.860
of either an error or the regularly resolved value.

605
00:33:56.860 --> 00:33:59.620
So, those are just a couple of my favorite npm package,

606
00:33:59.620 --> 00:34:02.650
I could go on for hours showing you different ones.

607
00:34:02.650 --> 00:34:06.040
There's literally probably hundreds of thousands

608
00:34:06.040 --> 00:34:08.080
of different packages out there, I recommend

609
00:34:08.080 --> 00:34:09.850
that you just take a look at npm search

610
00:34:09.850 --> 00:34:13.710
for top npm packages but mostly what happens is,

611
00:34:13.710 --> 00:34:15.580
you run into a problem and you start to think,

612
00:34:15.580 --> 00:34:18.610
huh, there's probably already a package for this,

613
00:34:18.610 --> 00:34:21.110
let me go and take a look and see if that's there.

