WEBVTT

1
00:00:00.424 --> 00:00:03.341
(bright pop music)

2
00:00:05.030 --> 00:00:07.270
<v Narrator>Another sort of really important thing</v>

3
00:00:07.270 --> 00:00:11.510
to understand is this idea of reference versus value.

4
00:00:11.510 --> 00:00:14.430
So, let's go into our objects HTML.

5
00:00:14.430 --> 00:00:17.700
I'm just gonna console.log out the deleting here.

6
00:00:17.700 --> 00:00:18.840
Let's just do a simple example,

7
00:00:18.840 --> 00:00:22.660
if I make a let variable of name one and I set that to Wes

8
00:00:22.660 --> 00:00:24.590
and I create another variable

9
00:00:24.590 --> 00:00:27.560
and I set that to Wes as well,

10
00:00:27.560 --> 00:00:31.610
if I check if two of the things are equal to each other,

11
00:00:31.610 --> 00:00:35.280
so name one is equal to name two.

12
00:00:35.280 --> 00:00:36.950
If we console.log that,

13
00:00:36.950 --> 00:00:39.483
we're obviously going to get true, right?

14
00:00:40.670 --> 00:00:44.210
Now, if I change name one and I set that to Scott

15
00:00:45.500 --> 00:00:49.100
and I were to run that again, we obviously get false,

16
00:00:49.100 --> 00:00:51.230
like no surprise there.

17
00:00:51.230 --> 00:00:56.157
Now, the question is, if I set name one to equal name two,

18
00:00:57.530 --> 00:00:58.980
so what are we doing there?

19
00:00:58.980 --> 00:01:03.980
Update name one to be what is name two.

20
00:01:06.330 --> 00:01:08.023
Now, if I console.log again,

21
00:01:09.510 --> 00:01:11.570
it's gonna be true and if we take a look at

22
00:01:11.570 --> 00:01:14.730
what is in either variable, we'll see that it is Wes.

23
00:01:14.730 --> 00:01:17.980
Name one is equal to name two.

24
00:01:17.980 --> 00:01:21.313
Now, if I take name two and set it to name one,

25
00:01:22.220 --> 00:01:23.430
that's just the same thing, right?

26
00:01:23.430 --> 00:01:27.770
We still have name one and name two equal to Wes.

27
00:01:27.770 --> 00:01:32.070
Now, the question is, if I change name two,

28
00:01:32.070 --> 00:01:34.397
so name two is equal to Westopher,

29
00:01:37.500 --> 00:01:39.330
we have name two,

30
00:01:39.330 --> 00:01:41.670
is name one gonna be Westopher as well?

31
00:01:41.670 --> 00:01:45.310
No, because we haven't updated that one.

32
00:01:45.310 --> 00:01:47.040
So, a couple things to note

33
00:01:47.040 --> 00:01:48.400
with this sort of exercise here.

34
00:01:48.400 --> 00:01:51.260
First, is when we are comparing values,

35
00:01:51.260 --> 00:01:55.220
the triple equals makes us check the type is string

36
00:01:55.220 --> 00:01:58.090
and the value is exactly the same thing.

37
00:01:58.090 --> 00:01:59.600
The second thing I wanna say is,

38
00:01:59.600 --> 00:02:03.630
when we set one string variable to be another,

39
00:02:03.630 --> 00:02:07.010
the value is copied from one to another, meaning that

40
00:02:07.010 --> 00:02:11.540
when I take name one and I set it to name two,

41
00:02:11.540 --> 00:02:15.720
it just takes the value of whatever is in name two

42
00:02:15.720 --> 00:02:20.350
and copies and pastes the value in to name one.

43
00:02:20.350 --> 00:02:25.350
Okay, so meaning that when I update one of the variables,

44
00:02:26.380 --> 00:02:29.420
the other one that has been pointing to it,

45
00:02:29.420 --> 00:02:31.170
does not update itself.

46
00:02:31.170 --> 00:02:33.150
You may be saying like, duh,

47
00:02:33.150 --> 00:02:35.030
obviously that's how variables work.

48
00:02:35.030 --> 00:02:39.050
Well, smile let me show you now how that works for objects

49
00:02:39.050 --> 00:02:40.590
because that is with string.

50
00:02:40.590 --> 00:02:43.310
So, we'll make a person one variable

51
00:02:44.220 --> 00:02:46.860
and we'll say the first is equal to Wes

52
00:02:46.860 --> 00:02:49.160
and the last is equal to Bos.

53
00:02:49.160 --> 00:02:51.860
Now, let's simply just dupe that right over

54
00:02:51.860 --> 00:02:54.860
and the only thing we wanna change is person two.

55
00:02:54.860 --> 00:02:57.270
So, my question now is, if I say person one

56
00:02:57.270 --> 00:03:02.240
is equal to person two, why do we get false?

57
00:03:02.240 --> 00:03:04.127
Well, you may say like,

58
00:03:04.127 --> 00:03:07.000
"well it's the exact same object, right?"

59
00:03:07.000 --> 00:03:10.350
It's an object for it's same contents inside of it

60
00:03:10.350 --> 00:03:14.223
so why am I getting false when I'm checking them?

61
00:03:15.180 --> 00:03:18.150
And that is because when you are comparing objects,

62
00:03:18.150 --> 00:03:21.520
it is done by reference to the object itself

63
00:03:21.520 --> 00:03:23.050
not the values inside of it.

64
00:03:23.050 --> 00:03:24.450
This means that if they

65
00:03:24.450 --> 00:03:27.370
are two totally separate objects,

66
00:03:27.370 --> 00:03:30.840
they simply have the same contents by chance.

67
00:03:30.840 --> 00:03:32.290
So, this is one object.

68
00:03:32.290 --> 00:03:33.620
This is another object,

69
00:03:33.620 --> 00:03:35.110
they are not the same thing

70
00:03:35.110 --> 00:03:36.860
even though the contents inside of them

71
00:03:36.860 --> 00:03:40.490
are the same thing, they are not the same actual object.

72
00:03:40.490 --> 00:03:44.190
So, that is different than the contents of a string

73
00:03:44.190 --> 00:03:46.230
because the string can only have a value

74
00:03:46.230 --> 00:03:50.220
whereas an object and as we're going to learn arrays,

75
00:03:50.220 --> 00:03:53.220
they can have multiple things inside of them

76
00:03:53.220 --> 00:03:55.040
whether they are property and values

77
00:03:55.040 --> 00:03:57.983
or whether they are just straight-up items.

78
00:03:59.850 --> 00:04:02.230
Now, next thing we need to know about objects

79
00:04:02.230 --> 00:04:05.870
is that if I make a new person

80
00:04:05.870 --> 00:04:10.483
so it's like a const person three is equal to person one.

81
00:04:11.840 --> 00:04:14.293
Now, if i take a look at person three,

82
00:04:16.090 --> 00:04:17.750
we see Wes Bos.

83
00:04:17.750 --> 00:04:20.790
Now, if I go ahead and update person three's name,

84
00:04:20.790 --> 00:04:23.570
so I'll say first is equal to Larry,

85
00:04:23.570 --> 00:04:24.540
what are we gonna get

86
00:04:24.540 --> 00:04:28.340
if we console.log person three.name?

87
00:04:28.340 --> 00:04:29.210
You can get it.

88
00:04:29.210 --> 00:04:32.323
It is, oh sorry, it's not name it's first.

89
00:04:33.460 --> 00:04:34.770
We're gonna get Larry

90
00:04:34.770 --> 00:04:39.770
but what if I console.log person one.name?

91
00:04:39.820 --> 00:04:43.220
Well, person one is Wes Bos

92
00:04:43.220 --> 00:04:46.610
so person one.first should be Wes, right?

93
00:04:46.610 --> 00:04:51.610
Ready and line 72, Larry.

94
00:04:51.990 --> 00:04:53.010
What?

95
00:04:53.010 --> 00:04:57.490
Person one Larry, person two Wes Bos,

96
00:04:58.520 --> 00:05:00.773
person three Larry.

97
00:05:01.890 --> 00:05:03.313
What's going on here?

98
00:05:04.210 --> 00:05:08.060
I just updated person three but for some reason,

99
00:05:08.060 --> 00:05:12.010
person one was also updated to be Larry as well.

100
00:05:12.010 --> 00:05:16.543
If I change person three.last to Cool,

101
00:05:18.150 --> 00:05:21.833
person three is obviously cool but what about person one?

102
00:05:23.570 --> 00:05:24.560
What the heck!

103
00:05:24.560 --> 00:05:26.890
Why is person one being updated?

104
00:05:26.890 --> 00:05:29.510
This is a fundamental concept of JavaScript

105
00:05:29.510 --> 00:05:31.690
that will come and bite you in the butt,

106
00:05:31.690 --> 00:05:33.167
if you don't understand it.

107
00:05:33.167 --> 00:05:36.330
And the reason that this happens is that,

108
00:05:36.330 --> 00:05:40.830
when objects and arrays are copied by reference,

109
00:05:40.830 --> 00:05:45.480
this means that we simply when we did this right here,

110
00:05:45.480 --> 00:05:47.130
we're not taking a copy of it.

111
00:05:47.130 --> 00:05:48.680
I shouldn't even say copy.

112
00:05:48.680 --> 00:05:52.190
We are simply creating a variable that references

113
00:05:52.190 --> 00:05:55.800
or points to the original variable

114
00:05:55.800 --> 00:05:58.980
instead of making a copy of it.

115
00:05:58.980 --> 00:06:03.130
Now, that can lead to some unexpected bugs down the road

116
00:06:03.130 --> 00:06:05.370
because you might simply think that

117
00:06:05.370 --> 00:06:06.740
you're creating a copy of it

118
00:06:06.740 --> 00:06:09.430
and then go ahead and modifying it but you're not.

119
00:06:09.430 --> 00:06:13.180
Person three was never its own object.

120
00:06:13.180 --> 00:06:16.300
It was just pointing at the original object

121
00:06:16.300 --> 00:06:19.027
and the same thing works with arrays,

122
00:06:19.027 --> 00:06:21.560
the same thing works with Maps and Sets as well

123
00:06:21.560 --> 00:06:23.320
which we will learn.

124
00:06:23.320 --> 00:06:26.640
So, what's a developer to do

125
00:06:26.640 --> 00:06:30.650
if you want to take a copy of something like this?

126
00:06:30.650 --> 00:06:32.570
Well, there's a couple different ways

127
00:06:32.570 --> 00:06:34.800
that you can sort of copy an object in it

128
00:06:34.800 --> 00:06:37.780
and probably the easiest way to copy something

129
00:06:37.780 --> 00:06:40.340
is via something called a spread.

130
00:06:40.340 --> 00:06:44.190
Now, a spread is the three dot operator

131
00:06:44.190 --> 00:06:49.040
and it's used for taking every single item in an object

132
00:06:49.040 --> 00:06:52.880
in spreading it into the new object.

133
00:06:52.880 --> 00:06:56.320
So, instead of doing this, person three equals person one

134
00:06:56.320 --> 00:06:58.910
I'll go ahead and comment that out.

135
00:06:58.910 --> 00:07:03.210
We can say const person three is equal to a new object

136
00:07:03.210 --> 00:07:07.220
so object literal ... person one.

137
00:07:07.220 --> 00:07:10.110
And what that will do is if we open this up

138
00:07:10.110 --> 00:07:12.080
and we take a look at person three,

139
00:07:12.080 --> 00:07:16.030
it will take every single item that is in an object

140
00:07:16.030 --> 00:07:20.960
and spread it into so you can sort of think of

141
00:07:20.960 --> 00:07:24.370
having a knife here and it says all right,

142
00:07:24.370 --> 00:07:26.830
we have the first spread that in, take a copy

143
00:07:26.830 --> 00:07:28.260
and put it into this object.

144
00:07:28.260 --> 00:07:29.850
Then we have the last, take a copy

145
00:07:29.850 --> 00:07:31.027
and put it into this object

146
00:07:31.027 --> 00:07:35.160
and that is a way to take a copy of an object.

147
00:07:35.160 --> 00:07:37.760
There is another way to do that as well that you might see

148
00:07:37.760 --> 00:07:40.710
it's not as popular anymore since we have spread now,

149
00:07:40.710 --> 00:07:43.880
but previously a lot of people would do something like this

150
00:07:43.880 --> 00:07:46.390
and they would do object.assign.

151
00:07:46.390 --> 00:07:48.340
You start with an empty object

152
00:07:48.340 --> 00:07:52.400
and you fold in the other object into it.

153
00:07:52.400 --> 00:07:54.950
So, you probably won't see that all that much

154
00:07:54.950 --> 00:07:56.540
but if you do see it, just know that

155
00:07:56.540 --> 00:07:59.050
that is the way to take a copy of an object

156
00:07:59.050 --> 00:08:02.100
just like the spread operator that we have here.

157
00:08:02.100 --> 00:08:04.830
So, now if I go to person three

158
00:08:04.830 --> 00:08:07.433
and I change the first name to Larry,

159
00:08:10.523 --> 00:08:12.570
person3.first is Larry.

160
00:08:12.570 --> 00:08:15.840
Now is person one is still Wes, right?

161
00:08:15.840 --> 00:08:18.700
Because this did a copy of the object

162
00:08:18.700 --> 00:08:22.290
and not a reference like we did it just there.

163
00:08:22.290 --> 00:08:24.730
Now take it even a step further

164
00:08:24.730 --> 00:08:28.560
this only goes one level deep meaning that

165
00:08:28.560 --> 00:08:31.280
if we go up to person one

166
00:08:31.280 --> 00:08:35.960
and let's add a clothing object

167
00:08:35.960 --> 00:08:39.070
and we'll say shirts is equal to 10

168
00:08:39.070 --> 00:08:40.833
and pants is equal to two.

169
00:08:42.500 --> 00:08:45.593
Now, if I take a copy of that and look at person three,

170
00:08:46.770 --> 00:08:49.770
you see we've got Larry, Bos.

171
00:08:49.770 --> 00:08:52.550
Our clothing is 10 and two.

172
00:08:52.550 --> 00:08:55.923
If I go to person3.clothing.shirts

173
00:08:57.690 --> 00:08:59.473
and I change that to a 100,

174
00:09:02.547 --> 00:09:05.810
you'll see that our clothing shirts is equal to a 100

175
00:09:05.810 --> 00:09:09.023
but if I look at person one as well,

176
00:09:10.790 --> 00:09:12.140
we've got the same problem.

177
00:09:14.130 --> 00:09:17.580
Person one's shirts were also updated

178
00:09:17.580 --> 00:09:21.060
even though I just told you that you can take a copy

179
00:09:21.060 --> 00:09:24.470
of an object with this spread.

180
00:09:24.470 --> 00:09:26.720
So, what we need to sort of take away

181
00:09:26.720 --> 00:09:28.470
from that little lesson is that

182
00:09:28.470 --> 00:09:31.410
the spread operator in the object.assign operator

183
00:09:31.410 --> 00:09:35.650
either way those do what are called shallow copies,

184
00:09:35.650 --> 00:09:39.240
meaning that they will only ever go one level deep

185
00:09:39.240 --> 00:09:41.090
and take a copy of it.

186
00:09:41.090 --> 00:09:46.090
If you do want to do a deep clone of an object,

187
00:09:46.540 --> 00:09:48.600
that's what is referred to or deep copy

188
00:09:48.600 --> 00:09:52.170
or a deep clone of all of the the properties.

189
00:09:52.170 --> 00:09:54.380
There are a number of different ways to do it.

190
00:09:54.380 --> 00:09:56.750
The most popular way is likely to use

191
00:09:56.750 --> 00:09:58.793
what's called the utility library.

192
00:10:00.225 --> 00:10:01.930
I like to use one called lodash.

193
00:10:01.930 --> 00:10:03.380
Let's look that up right now.

194
00:10:04.670 --> 00:10:07.330
So, lodash is a library that you can include

195
00:10:07.330 --> 00:10:12.330
into your script and it has a bevy of methods

196
00:10:12.390 --> 00:10:16.260
that are used for working with objects and arrays

197
00:10:16.260 --> 00:10:20.160
and one of them is for doing copies of objects.

198
00:10:20.160 --> 00:10:22.410
So, we'll go to the documentation here

199
00:10:22.410 --> 00:10:24.670
and we'll just do like a clone.

200
00:10:24.670 --> 00:10:25.503
Here we go.

201
00:10:26.760 --> 00:10:29.140
Creates a shallow clone of a value

202
00:10:29.140 --> 00:10:32.650
so this is pretty simple, this is all it does for us.

203
00:10:32.650 --> 00:10:34.700
So, if we use underscore,

204
00:10:34.700 --> 00:10:37.560
that's the variable that it puts itself into

205
00:10:37.560 --> 00:10:40.330
and then all of the handy lodash methods live

206
00:10:40.330 --> 00:10:43.800
in the underscore and we can simply just say dot clone.

207
00:10:43.800 --> 00:10:46.250
Now, that will just do a high-level clone

208
00:10:46.250 --> 00:10:48.440
like we've done right here.

209
00:10:48.440 --> 00:10:50.900
So, there's not much value in that.

210
00:10:50.900 --> 00:10:53.690
However, you can use this one called clone deep

211
00:10:54.906 --> 00:10:57.360
and clone deep will do any nested objects.

212
00:10:57.360 --> 00:11:00.310
It will also take a copy of them for us.

213
00:11:00.310 --> 00:11:01.820
So, how do you use that?

214
00:11:01.820 --> 00:11:05.930
Well, I like to use this thing called unpackage UNPKG

215
00:11:05.930 --> 00:11:08.830
and we can just click on one of their examples here

216
00:11:08.830 --> 00:11:13.437
and I believe we can just go to unpackage.com/lodash

217
00:11:13.437 --> 00:11:16.240
and that will load in the latest lodash

218
00:11:16.240 --> 00:11:18.850
so we can just take this URL here,

219
00:11:18.850 --> 00:11:23.820
or go up right above the script

220
00:11:23.820 --> 00:11:26.530
that we need because when you are loading JavaScript

221
00:11:26.530 --> 00:11:29.550
that is dependent on it, you need to load that first.

222
00:11:29.550 --> 00:11:34.550
So, do a script source and load to that.

223
00:11:37.050 --> 00:11:39.870
Now, if you just type in underscore dot into your browser

224
00:11:39.870 --> 00:11:41.753
you'll see that all of the lodash,

225
00:11:43.150 --> 00:11:45.320
the values are available to us.

226
00:11:45.320 --> 00:11:47.240
I'm gonna show you when we look at modules,

227
00:11:47.240 --> 00:11:49.930
how you can actually load in just the ones you need

228
00:11:49.930 --> 00:11:52.840
coz it's unlikely that you would need all of these

229
00:11:52.840 --> 00:11:56.190
but just for simplicity sake I'm loading

230
00:11:56.190 --> 00:11:57.950
the whole library in here now.

231
00:11:57.950 --> 00:12:00.010
And then what we could do down here

232
00:12:00.010 --> 00:12:02.083
where we were taking a copy of it,

233
00:12:03.020 --> 00:12:04.163
we'll come out that out

234
00:12:04.163 --> 00:12:09.163
and we'll say const person3 = _.clone deep

235
00:12:10.230 --> 00:12:13.863
and then you pass it person one.

236
00:12:16.450 --> 00:12:19.483
Now, if we take a look at person one,

237
00:12:20.340 --> 00:12:22.990
the clothing should still be 10, good

238
00:12:22.990 --> 00:12:24.313
and person three,

239
00:12:25.900 --> 00:12:29.410
their clothing should now be a 100 shirts.

240
00:12:29.410 --> 00:12:32.700
Beautiful, so that lodash is...

241
00:12:32.700 --> 00:12:34.390
I don't reach for it all the time

242
00:12:34.390 --> 00:12:36.270
because most of the stuff that I do

243
00:12:36.270 --> 00:12:38.410
can just be done with JavaScript

244
00:12:38.410 --> 00:12:41.970
but when you do reach for harder things

245
00:12:41.970 --> 00:12:46.630
like doing a deep clone, then you can reach for a lodash

246
00:12:46.630 --> 00:12:48.530
and they've got some really nice methods

247
00:12:48.530 --> 00:12:51.020
for working with that as well as

248
00:12:51.020 --> 00:12:53.770
for working with arrays as well.

249
00:12:53.770 --> 00:12:56.740
This spread operator dot dot dot is also helpful

250
00:12:56.740 --> 00:13:00.130
for working with merging objects.

251
00:13:00.130 --> 00:13:02.620
So, I'm going to just grab some variables

252
00:13:02.620 --> 00:13:03.870
that I've got right here.

253
00:13:04.740 --> 00:13:06.080
I'm gonna paste them in.

254
00:13:06.080 --> 00:13:08.950
So, I've got this meat inventory bacon and sausage

255
00:13:08.950 --> 00:13:11.300
and veggie inventory which has two properties on it.

256
00:13:11.300 --> 00:13:13.680
Now, I wanna merge those two objects together

257
00:13:13.680 --> 00:13:14.930
and the easiest way to do that

258
00:13:14.930 --> 00:13:16.600
is to just make a new variable

259
00:13:18.220 --> 00:13:19.910
and create a new object literal

260
00:13:20.910 --> 00:13:24.530
and it will have dot dot dot meat inventory

261
00:13:24.530 --> 00:13:28.580
and then dot dot dot veggie inventory.

262
00:13:28.580 --> 00:13:31.510
And all I did there is I just spread in one object

263
00:13:31.510 --> 00:13:34.800
and spread in a second object which is super handy

264
00:13:34.800 --> 00:13:37.760
because you can spread in as many objects as you want

265
00:13:37.760 --> 00:13:41.200
and that will then give us a new inventory property

266
00:13:41.200 --> 00:13:43.380
with absolutely everything in it.

267
00:13:43.380 --> 00:13:46.690
You can also put these on their own line

268
00:13:48.260 --> 00:13:50.950
and add your own values in.

269
00:13:50.950 --> 00:13:54.803
So, if I were to say oysters, 10.

270
00:13:57.430 --> 00:13:59.170
You see the oysters have been added to it.

271
00:13:59.170 --> 00:14:01.760
So, you can mix and match the spreading,

272
00:14:01.760 --> 00:14:04.840
the only thing that you really need to know about this

273
00:14:04.840 --> 00:14:07.240
is that if there are duplicates,

274
00:14:07.240 --> 00:14:09.030
like oyster is a good one.

275
00:14:09.030 --> 00:14:10.800
It could be an oyster mushroom

276
00:14:10.800 --> 00:14:14.240
but it could also be an oyster that you get from the seas.

277
00:14:14.240 --> 00:14:18.000
Oyster is 10

278
00:14:19.450 --> 00:14:22.650
and then a veggie inventory, oyster 15.

279
00:14:22.650 --> 00:14:24.180
Which one will win out?

280
00:14:24.180 --> 00:14:25.370
Let's see.

281
00:14:25.370 --> 00:14:28.490
It is 15 and why does that happen?

282
00:14:28.490 --> 00:14:32.540
Well, because veggie inventory comes after,

283
00:14:32.540 --> 00:14:37.190
so the order that which you spread them does matter here.

284
00:14:37.190 --> 00:14:40.890
Similarly, if I were to type in bacon of 10,

285
00:14:40.890 --> 00:14:43.700
that is going to overwrite the meat inventory

286
00:14:43.700 --> 00:14:44.570
that we have here.

287
00:14:44.570 --> 00:14:46.020
So, just know about that.

288
00:14:46.020 --> 00:14:48.320
I really like the spread operator.

289
00:14:48.320 --> 00:14:51.200
It can also be used for arrays

290
00:14:51.200 --> 00:14:53.580
and we're gonna be learning all about

291
00:14:53.580 --> 00:14:55.870
that once we hit arrays.

292
00:14:55.870 --> 00:14:58.760
Last thing I would really hammer home here is this idea

293
00:14:58.760 --> 00:15:01.760
of passing in via reference versus copy

294
00:15:01.760 --> 00:15:03.580
also applies to functions.

295
00:15:03.580 --> 00:15:07.090
So, if I had a function called do stuff

296
00:15:07.090 --> 00:15:11.690
and that takes in a argument called data

297
00:15:11.690 --> 00:15:15.730
and inside of that we were to change that data

298
00:15:15.730 --> 00:15:17.703
to be something else.

299
00:15:20.670 --> 00:15:23.570
So, all this function does is it takes an argument

300
00:15:23.570 --> 00:15:26.470
and changes that data for whatever reason.

301
00:15:26.470 --> 00:15:29.100
Now, if we were to then run

302
00:15:29.100 --> 00:15:30.830
that function called do stuff

303
00:15:30.830 --> 00:15:33.343
and let's pass it our name one variable,

304
00:15:35.600 --> 00:15:37.730
which was up here.

305
00:15:37.730 --> 00:15:39.633
We had initially set to Wes.

306
00:15:42.420 --> 00:15:45.780
If I take a look at that, here let's go inside here

307
00:15:45.780 --> 00:15:47.163
and console.log the data.

308
00:15:49.070 --> 00:15:50.180
That's something else, right?

309
00:15:50.180 --> 00:15:51.420
There's a variable called data

310
00:15:51.420 --> 00:15:52.680
and it's equal to something else.

311
00:15:52.680 --> 00:15:54.973
But if I were to type name one,

312
00:15:56.870 --> 00:15:59.760
you see that it still is Wes, meaning that

313
00:15:59.760 --> 00:16:04.760
when we pass in this variable, it only passes in the value

314
00:16:04.780 --> 00:16:07.450
of Wes and it doesn't actually reference

315
00:16:07.450 --> 00:16:09.210
to the external variable.

316
00:16:09.210 --> 00:16:10.120
Which is good.

317
00:16:10.120 --> 00:16:12.750
Now, let me do that again with an object ,

318
00:16:12.750 --> 00:16:17.490
so function do stuff two,

319
00:16:17.490 --> 00:16:18.580
that takes in data

320
00:16:19.520 --> 00:16:22.960
and that will say data about tomatoes is equal

321
00:16:22.960 --> 00:16:25.610
to a ton of tomatoes

322
00:16:26.660 --> 00:16:28.210
and we'll console.log the data.

323
00:16:29.410 --> 00:16:30.630
And then we'll go ahead and run it,

324
00:16:30.630 --> 00:16:35.630
do stuff two and we will pass in our inventory property.

325
00:16:38.490 --> 00:16:40.080
Now, we have our inventory here.

326
00:16:40.080 --> 00:16:43.310
This is tomatoes, is a million or a 1000

327
00:16:43.310 --> 00:16:44.660
or however many that is.

328
00:16:44.660 --> 00:16:49.070
But if I were to look at our inventory variable

329
00:16:49.070 --> 00:16:52.200
that is outside, you'll see that also

330
00:16:52.200 --> 00:16:56.480
was modified meaning that if you pass in an object

331
00:16:56.480 --> 00:17:00.800
into a function and you modify that object,

332
00:17:00.800 --> 00:17:04.410
the external object will also be updated.

333
00:17:04.410 --> 00:17:09.410
So, it's not the case for Boolean, numbers and strings

334
00:17:10.000 --> 00:17:13.600
but it is the case for objects and arrays,

335
00:17:13.600 --> 00:17:16.460
meaning that if you modify an object or an array

336
00:17:16.460 --> 00:17:19.420
that is passed into a function inside of that function,

337
00:17:19.420 --> 00:17:24.420
know that you may be accidentally modifying data

338
00:17:24.900 --> 00:17:26.030
that lives outside of it.

339
00:17:26.030 --> 00:17:27.960
And this is a huge source of bugs

340
00:17:27.960 --> 00:17:31.430
because when you pass in data as a reference,

341
00:17:31.430 --> 00:17:33.690
you might be like, okay, just for this function

342
00:17:33.690 --> 00:17:34.750
I'm modifying the data

343
00:17:34.750 --> 00:17:37.870
but you might be unknowingly modifying data

344
00:17:37.870 --> 00:17:39.700
that lives outside of that function.

345
00:17:39.700 --> 00:17:42.520
So, if that's the case, you make sure that

346
00:17:42.520 --> 00:17:46.640
you pass it in as a copy using one of the references

347
00:17:46.640 --> 00:17:47.950
that we've done.

348
00:17:47.950 --> 00:17:51.010
It may be the case that you do wanna modify external data

349
00:17:51.010 --> 00:17:53.510
but just know that sometimes it's not

350
00:17:53.510 --> 00:17:55.150
and sometimes that leads to bugs

351
00:17:55.150 --> 00:17:56.810
and that's gonna be a bad day.

352
00:17:56.810 --> 00:17:58.220
That's it for now.

353
00:17:58.220 --> 00:18:01.283
Let's move into talking about maps real quick.

