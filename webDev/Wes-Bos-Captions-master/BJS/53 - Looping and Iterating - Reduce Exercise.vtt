WEBVTT

1
00:00:00.518 --> 00:00:03.101
(upbeat music)

2
00:00:05.440 --> 00:00:07.000
<v Narrator>Ready for a fun challenge?</v>

3
00:00:07.000 --> 00:00:08.700
And I say fun because we're developers

4
00:00:08.700 --> 00:00:11.260
and what we do for fun might not be the same

5
00:00:11.260 --> 00:00:14.140
as people who do rock climbing and what not.

6
00:00:14.140 --> 00:00:18.230
But what I want you to do is to use map, filter, and reduce

7
00:00:18.230 --> 00:00:21.530
all in one exercise and I want you to do this:

8
00:00:21.530 --> 00:00:24.840
go to any web page like the Mozilla Developer Docs

9
00:00:24.840 --> 00:00:25.940
for reduce.

10
00:00:25.940 --> 00:00:28.970
Copy every single piece of text, I just hit command A

11
00:00:28.970 --> 00:00:32.480
and command C and I want you to count

12
00:00:32.480 --> 00:00:37.330
how many times every letter and number occur on here.

13
00:00:37.330 --> 00:00:40.860
So, how would you even do that. Well here's a couple tips.

14
00:00:40.860 --> 00:00:42.800
First of all, maybe I'll try it now

15
00:00:42.800 --> 00:00:44.460
before I even give you some tips.

16
00:00:44.460 --> 00:00:46.240
Now, I'm gonna give you some tips,

17
00:00:46.240 --> 00:00:49.339
so if you are still listening then here you go.

18
00:00:49.339 --> 00:00:53.110
I want you to first grab all the text.

19
00:00:53.110 --> 00:00:57.380
Then we need to convert that text into an array of letters,

20
00:00:57.380 --> 00:01:02.380
then we need to filter that letters into letters or numbers.

21
00:01:03.650 --> 00:01:06.830
Since, we're going to get like parenthesis, commas,

22
00:01:06.830 --> 00:01:10.350
spaces, and things that are not what we are looking for.

23
00:01:10.350 --> 00:01:11.920
So we need to filter those out

24
00:01:11.920 --> 00:01:15.720
and also we need to take are of if it's a capital 'A'

25
00:01:15.720 --> 00:01:19.420
or a lowercase 'a', I only ever want to count that once,

26
00:01:19.420 --> 00:01:21.450
so maybe we'll have to use a map there as well.

27
00:01:21.450 --> 00:01:23.960
So this is going to use map, filter, reduce,

28
00:01:23.960 --> 00:01:27.460
all in one go so let's go ahead and do that now.

29
00:01:27.460 --> 00:01:31.800
So first thing I'm gonna do is say const text is equal to

30
00:01:31.800 --> 00:01:33.370
and I'm going to use back ticks here

31
00:01:33.370 --> 00:01:36.779
because it has to be multi-line like look at this.

32
00:01:36.779 --> 00:01:38.110
(Cheering)

33
00:01:38.110 --> 00:01:40.730
Three hundred, many many letters here

34
00:01:40.730 --> 00:01:44.120
and if we were to console log the text,

35
00:01:44.120 --> 00:01:45.910
let's see what we're working with.

36
00:01:45.910 --> 00:01:50.910
So we see thirty-one K of text that is in here.

37
00:01:51.530 --> 00:01:53.747
So how would I convert all of this text

38
00:01:53.747 --> 00:01:56.190
to an array of every single letter.

39
00:01:56.190 --> 00:01:59.750
Well, you can call .split or spread it into an array.

40
00:01:59.750 --> 00:02:04.750
So we'll say const everything is equal to text.split

41
00:02:05.040 --> 00:02:08.423
and split it based on nothing.

42
00:02:09.290 --> 00:02:13.030
And console log everything, now we get an array

43
00:02:16.280 --> 00:02:19.993
with 15,911 letters that are in it.

44
00:02:21.010 --> 00:02:26.010
Now, what we need to do is, we could do two things,

45
00:02:26.210 --> 00:02:30.000
we could lowercase everything immediately,

46
00:02:30.000 --> 00:02:34.640
or we could filter the things out for what we want.

47
00:02:34.640 --> 00:02:36.400
So if we do lowercase first,

48
00:02:36.400 --> 00:02:40.080
were gonna be unnecessarily lower casing things

49
00:02:40.080 --> 00:02:42.550
that can't go lowercase.

50
00:02:42.550 --> 00:02:44.840
And we do filter first to get rid of this junk,

51
00:02:44.840 --> 00:02:48.500
our matcher will have to match both uppercase

52
00:02:48.500 --> 00:02:53.500
and lowercase. Let's actually get rid of the junk first.

53
00:02:53.510 --> 00:02:57.230
So what we'll do is say const

54
00:03:01.430 --> 00:03:05.153
result is equal to we'll take everything.filter

55
00:03:07.730 --> 00:03:11.900
and give ourselves a character and we want to test

56
00:03:11.900 --> 00:03:14.700
if that character so I'll put it up.

57
00:03:14.700 --> 00:03:19.700
If that character is a to z, A to Z, or 0 to 9.

58
00:03:23.300 --> 00:03:28.000
Then we want to keep it. So, how do you test

59
00:03:28.000 --> 00:03:31.740
if something is a to Z, A to Z, or 0 to 9.

60
00:03:31.740 --> 00:03:34.690
Well, that's with a match function.

61
00:03:34.690 --> 00:03:38.550
So, we'll go mdn match, go to our regular expression.

62
00:03:38.550 --> 00:03:40.660
Our regular expression is a way

63
00:03:40.660 --> 00:03:45.660
to use what is called a Regex pattern to test some text

64
00:03:45.830 --> 00:03:50.170
if things exist. And there's a number of different methods

65
00:03:50.170 --> 00:03:54.070
that take a Regex like match, matchall, replace, search,

66
00:03:54.070 --> 00:03:57.920
so if we wanted to filter for a's, what we could do

67
00:03:57.920 --> 00:04:01.047
is we'll say if the character matches

68
00:04:04.520 --> 00:04:06.830
and the way that you pass a regular expression

69
00:04:06.830 --> 00:04:08.280
is two forward slashes

70
00:04:08.280 --> 00:04:10.420
and you put your matcher in the middle

71
00:04:10.420 --> 00:04:15.420
so if it matches a then you return true.

72
00:04:17.330 --> 00:04:22.330
Else, return false. So if I have 'a' and I try to match 'a',

73
00:04:25.920 --> 00:04:28.260
that will return to us a value.

74
00:04:28.260 --> 00:04:31.387
If we try to look for 'b' then it's null

75
00:04:31.387 --> 00:04:33.200
and that is false.

76
00:04:33.200 --> 00:04:35.390
In this case it gives us a little bit more information

77
00:04:35.390 --> 00:04:36.790
as to where we found it.

78
00:04:36.790 --> 00:04:39.340
So if I were to pass cat,

79
00:04:39.340 --> 00:04:41.660
it tells us we found it at the second letter.

80
00:04:41.660 --> 00:04:43.060
But in our case it's just one letter

81
00:04:43.060 --> 00:04:44.370
so that's just totally fine.

82
00:04:44.370 --> 00:04:49.030
So, in our case we need a regex that will match all letters

83
00:04:49.030 --> 00:04:51.510
and the way that we can do that is with groups

84
00:04:51.510 --> 00:04:53.940
so square bracket a to z

85
00:04:55.310 --> 00:04:58.810
and in our case we don't need to return true or false.

86
00:04:58.810 --> 00:05:01.150
We can, so let's see how we're doing.

87
00:05:01.150 --> 00:05:02.593
Console log result.

88
00:05:06.580 --> 00:05:09.510
And now we have 10,000 and it looks

89
00:05:09.510 --> 00:05:11.357
like they're all just lowercase.

90
00:05:11.357 --> 00:05:15.803
And we need to modify that to also take a to z,

91
00:05:18.160 --> 00:05:20.340
and now that has a little bit more,

92
00:05:20.340 --> 00:05:22.200
see that has a capital S right there

93
00:05:22.200 --> 00:05:24.110
and another capital S right there,

94
00:05:24.110 --> 00:05:27.750
but we have no numbers so we could say 0 to 9

95
00:05:27.750 --> 00:05:29.497
and how do I know this? Well it's just from years

96
00:05:29.497 --> 00:05:31.850
of writing regex's.

97
00:05:31.850 --> 00:05:35.870
I really like the website regexer.com

98
00:05:35.870 --> 00:05:39.330
and what this will do is give you a bunch of,

99
00:05:39.330 --> 00:05:40.550
you can save your own patterns.

100
00:05:40.550 --> 00:05:43.620
Its got cheat sheets, for you can match any character

101
00:05:43.620 --> 00:05:45.080
except the new line.

102
00:05:45.080 --> 00:05:48.920
You can match words, you can match white space.

103
00:05:48.920 --> 00:05:51.130
So here we can remove this here

104
00:05:51.130 --> 00:05:53.200
and you see that we have this group here

105
00:05:53.200 --> 00:05:54.790
that is matching a to z.

106
00:05:54.790 --> 00:05:59.550
Another option you can pass is the insensitive flag

107
00:05:59.550 --> 00:06:02.210
and what that will do is it will not care about upper

108
00:06:02.210 --> 00:06:03.043
or lowercase.

109
00:06:03.043 --> 00:06:06.170
So in our case, we can either match A through Z

110
00:06:06.170 --> 00:06:09.850
and a to z or we can leave off that uppercase

111
00:06:09.850 --> 00:06:12.930
and simply pass the i-flag

112
00:06:12.930 --> 00:06:15.100
and the I-flag will make it case insensitive.

113
00:06:15.100 --> 00:06:17.080
Let's just refresh that and make sure

114
00:06:17.080 --> 00:06:20.490
that we still have. Now we have a few more.

115
00:06:20.490 --> 00:06:23.400
Oh, that's because we added the 0 to 9 as well.

116
00:06:23.400 --> 00:06:26.353
So we're getting some numbers in here as well.

117
00:06:26.353 --> 00:06:29.190
I'll put it up. It groups them

118
00:06:29.190 --> 00:06:30.890
when you have really large arrays.

119
00:06:31.737 --> 00:06:34.070
(scrolling)

120
00:06:35.380 --> 00:06:37.300
Um, I'm not finding any numbers in here

121
00:06:37.300 --> 00:06:38.900
and I want to make sure that's correct

122
00:06:38.900 --> 00:06:42.490
so if I delete this, we should get just numbers.

123
00:06:42.490 --> 00:06:44.800
Yeah, so it is matching numbers.

124
00:06:44.800 --> 00:06:47.470
We know that because the count went up to 11,000

125
00:06:47.470 --> 00:06:50.080
from about 10,000 that we had before.

126
00:06:50.080 --> 00:06:53.320
So that is our first filter,

127
00:06:53.320 --> 00:06:56.780
now what we wanna do is lowercase everything

128
00:06:56.780 --> 00:06:59.040
and the way we can do that is with a map.

129
00:06:59.040 --> 00:07:00.700
Now, I'm changing this right on the end.

130
00:07:00.700 --> 00:07:04.440
This is probably getting a little bit hard to work with,

131
00:07:04.440 --> 00:07:08.210
so what I wanna do here, is take these transforms

132
00:07:08.210 --> 00:07:10.810
and put them in their own functions.

133
00:07:10.810 --> 00:07:15.810
So we'll make a function called is Valid Character

134
00:07:16.610 --> 00:07:20.483
that takes in a character and returns.

135
00:07:22.270 --> 00:07:24.600
And were going to do this return true or false,

136
00:07:24.600 --> 00:07:27.830
but in our case we just return the matcher

137
00:07:27.830 --> 00:07:31.550
because the matcher will be truthy or falsey enough for us.

138
00:07:31.550 --> 00:07:34.450
That's beautiful, now I can filter.

139
00:07:34.450 --> 00:07:37.350
Let's say filter for is Valid Character.

140
00:07:37.350 --> 00:07:41.480
See how nice that reads? And we can go one step further

141
00:07:42.780 --> 00:07:46.740
and chain the text.split on

142
00:07:46.740 --> 00:07:48.883
instead of having an everything variable.

143
00:07:50.350 --> 00:07:54.200
Similarly, often developers will like to put one per line,

144
00:07:54.200 --> 00:07:57.050
so we say text.split.filter

145
00:07:57.050 --> 00:08:01.153
and then we can comment them into split each char

146
00:08:03.130 --> 00:08:08.130
into an item of an array. Then we filter for a valid char.

147
00:08:11.150 --> 00:08:13.400
That doesn't even need a comment.

148
00:08:13.400 --> 00:08:16.080
People often talk about writing good enough JavaScript

149
00:08:16.080 --> 00:08:20.693
so that the code explains itself.

150
00:08:21.870 --> 00:08:23.530
Filter for is Valid Character.

151
00:08:23.530 --> 00:08:24.970
You don't even need a comment there.

152
00:08:24.970 --> 00:08:27.970
Next, we want to take everything and lowercase it

153
00:08:27.970 --> 00:08:32.970
so we will map convert every letter to lowercase

154
00:08:35.170 --> 00:08:38.010
and we just map over the lowercase function

155
00:08:40.857 --> 00:08:44.820
and we can make that. Actually does that exist

156
00:08:44.820 --> 00:08:47.253
as a static method? String.toLowerCase.

157
00:08:50.146 --> 00:08:50.979
No, it doesn't.

158
00:08:50.979 --> 00:08:54.220
All right, lets make little function called lowercase

159
00:08:55.677 --> 00:09:00.313
to character returns character to lower case.

160
00:09:03.350 --> 00:09:05.590
You could write that as an arrow function as well.

161
00:09:05.590 --> 00:09:08.640
Const lowercase is equal to character

162
00:09:09.600 --> 00:09:14.600
and character dot to Lower Case.

163
00:09:15.200 --> 00:09:17.970
You'll see that quite a bit, I'll comment this out.

164
00:09:17.970 --> 00:09:20.000
Those ae the exact same thing.

165
00:09:20.000 --> 00:09:21.630
We will map into lowercase

166
00:09:21.630 --> 00:09:24.250
and then that will see what we're working with here.

167
00:09:24.250 --> 00:09:27.660
Now, it seems that everything is lowercased.

168
00:09:31.640 --> 00:09:35.140
Looking good, and then the final thing we want to do

169
00:09:35.140 --> 00:09:39.590
is count the instances of and that is with a reduce.

170
00:09:39.590 --> 00:09:41.570
And we will make another function here

171
00:09:42.610 --> 00:09:47.610
called instanceCounterReducer.

172
00:09:50.755 --> 00:09:51.588
Actually, just call it instanceCounter

173
00:09:51.588 --> 00:09:53.603
because we're already passing it to a reducer.

174
00:09:56.810 --> 00:10:01.810
And we want to start with an empty object and in here,

175
00:10:02.340 --> 00:10:04.610
we'll say letters

176
00:10:04.610 --> 00:10:07.533
and we'll give ourselves the individual character

177
00:10:07.533 --> 00:10:09.490
that we were looking at. Maybe not letters,

178
00:10:09.490 --> 00:10:12.840
let's call it counts and in here,

179
00:10:12.840 --> 00:10:17.840
we'll simply say if the count of the character exists,

180
00:10:21.390 --> 00:10:25.380
then we'll increment it plus one,

181
00:10:25.380 --> 00:10:27.823
otherwise, we'll set it to one.

182
00:10:37.693 --> 00:10:39.370
What we do is loop over it and say,

183
00:10:39.370 --> 00:10:41.530
does our accumulator have an s property?

184
00:10:41.530 --> 00:10:43.330
If it does, we increment it by one,

185
00:10:43.330 --> 00:10:46.070
otherwise, we'll set it to one because it's the first time.

186
00:10:46.070 --> 00:10:50.320
Now, when I refresh that, count is not defined

187
00:10:50.320 --> 00:10:52.973
because I named it counts.

188
00:10:54.900 --> 00:10:58.480
Error, cannot read property 'k' of undefined.

189
00:10:58.480 --> 00:11:03.030
Why is it giving us 'k'? So if I comment this off,

190
00:11:03.030 --> 00:11:06.000
you'll see 'k' is the second one in there.

191
00:11:06.000 --> 00:11:08.573
So why is it telling us k of undefined?

192
00:11:08.573 --> 00:11:10.520
It's because the first time it works.

193
00:11:10.520 --> 00:11:14.560
The first time our reducer accumulator is an object,

194
00:11:14.560 --> 00:11:18.330
but because we didn't return anything from this line

195
00:11:18.330 --> 00:11:21.770
then the second time the return is undefined

196
00:11:21.770 --> 00:11:23.770
because the accumulator is undefined

197
00:11:23.770 --> 00:11:25.060
because we haven't returned anything.

198
00:11:25.060 --> 00:11:27.250
So we simply have to return counts

199
00:11:27.250 --> 00:11:31.163
so the next loop will have access to our counts.

200
00:11:32.660 --> 00:11:37.660
Loop over it, look at that. 0, 1, 1 ,1 ,1, that's not right.

201
00:11:39.541 --> 00:11:41.010
(laughing)

202
00:11:41.010 --> 00:11:43.691
You're telling me that every letter only occurred once?

203
00:11:43.691 --> 00:11:47.070
Okay, I goofed us up but I like to leave my debugging in

204
00:11:47.070 --> 00:11:48.823
so it was probably something here.

205
00:11:51.060 --> 00:11:53.610
Counts of character, if that exists

206
00:11:53.610 --> 00:11:58.330
then count of character is equal

207
00:11:58.330 --> 00:12:03.330
to counts of character plus one,

208
00:12:04.330 --> 00:12:06.070
otherwise it's equal to one

209
00:12:06.070 --> 00:12:08.320
and we can put these on their own lines

210
00:12:09.230 --> 00:12:12.233
so if it exists, if it doesn't exist.

211
00:12:16.898 --> 00:12:20.565
So, if true or if exists, it does not exist.

212
00:12:24.970 --> 00:12:29.640
There we go. So 0 is 54, What's the least?

213
00:12:29.640 --> 00:12:34.370
Seven. The worst number, 7 exists that often.

214
00:12:34.370 --> 00:12:39.370
Nine, 8 times. E, a kind of fun little thing

215
00:12:39.460 --> 00:12:42.840
that you can do now with our array or object entries

216
00:12:42.840 --> 00:12:45.080
is figure out what is the most popular.

217
00:12:45.080 --> 00:12:48.810
So now figure out how do you sort these based on

218
00:12:48.810 --> 00:12:50.531
the most popular letter to the least popular letter.

219
00:12:50.531 --> 00:12:55.531
You can tune out now, but I'm genuinely curious here.

220
00:12:56.430 --> 00:13:01.230
So let's do it together. Okay, so I have this result

221
00:13:01.230 --> 00:13:04.200
and what happens if I do object.entires?

222
00:13:11.590 --> 00:13:16.053
It gives us an array or it gives us a key or the count.

223
00:13:17.974 --> 00:13:22.397
Okay, so what we can do is const sorted result

224
00:13:24.931 --> 00:13:28.740
is equal to object.entries result

225
00:13:31.790 --> 00:13:34.140
and the we will sort

226
00:13:37.152 --> 00:13:38.270
and we could make a little function here

227
00:13:38.270 --> 00:13:43.270
called function sort by value

228
00:13:46.780 --> 00:13:49.103
and with a sort we get an 'a' and a 'b'

229
00:13:53.395 --> 00:13:56.062
and we return a the second thing

230
00:13:58.511 --> 00:13:59.344
because this is an array

231
00:13:59.344 --> 00:14:00.940
we don't want to sort based on the first item,

232
00:14:00.940 --> 00:14:02.750
we want to sort based on the second item

233
00:14:02.750 --> 00:14:06.127
which is the count minus b 1.

234
00:14:15.175 --> 00:14:19.190
Then sort by value, does that work?

235
00:14:19.190 --> 00:14:22.240
I'll explain it if it does. Not totally confident.

236
00:14:22.240 --> 00:14:23.323
Not just yet.

237
00:14:32.560 --> 00:14:35.880
It worked. Okay, so e is the most popular letter

238
00:14:35.880 --> 00:14:40.570
where as 7 is the least popular character.

239
00:14:40.570 --> 00:14:42.400
So what happened there?

240
00:14:42.400 --> 00:14:45.130
So as you remember the way that sort works is

241
00:14:45.130 --> 00:14:50.130
that you can take the previous one and the next one

242
00:14:50.820 --> 00:14:52.810
and you can compare their values,

243
00:14:52.810 --> 00:14:55.920
in our case you are comparing the second item in the array

244
00:14:55.920 --> 00:14:59.880
and you can either return 0, stay where you are,

245
00:14:59.880 --> 00:15:04.470
negative 1, go forward, or positive 1, go backwards

246
00:15:04.470 --> 00:15:05.812
to the end of the array.

247
00:15:05.812 --> 00:15:09.251
Instead of saying if it's greater or less than

248
00:15:09.251 --> 00:15:10.290
and go back to the sorting one to see that,

249
00:15:10.290 --> 00:15:13.550
we can simply just return what the value is

250
00:15:13.550 --> 00:15:15.550
so it might be a negative value,

251
00:15:15.550 --> 00:15:18.100
it might be a positive value, it might be a zero value.

252
00:15:18.100 --> 00:15:20.250
So, that's just the benefit of doing that,

253
00:15:20.250 --> 00:15:22.200
we just return the sort by value

254
00:15:22.200 --> 00:15:25.840
and we can see that e is a very popular number,

255
00:15:25.840 --> 00:15:28.050
not even close to r.

256
00:15:28.050 --> 00:15:30.910
Cool, hopefully that clarified it a little.

257
00:15:30.910 --> 00:15:32.450
You'll be doing this type of thing

258
00:15:32.450 --> 00:15:35.750
where you split, filter, map, reduce all over.

259
00:15:35.750 --> 00:15:39.440
It is possible to do all of this work

260
00:15:39.440 --> 00:15:42.320
in one single reduce function

261
00:15:42.320 --> 00:15:46.050
but in my opinions it's much easier to read

262
00:15:46.050 --> 00:15:48.650
and much better for readability to split it up

263
00:15:48.650 --> 00:15:50.660
into a couple different functions

264
00:15:50.660 --> 00:15:54.300
and just chain them along on each of them like that.

265
00:15:54.300 --> 00:15:56.920
You'll also notice I haven't put a semicolon right there.

266
00:15:56.920 --> 00:15:58.130
I can put that on the end,

267
00:15:58.130 --> 00:16:00.460
just make sure you don't accidentally put a semicolon

268
00:16:00.460 --> 00:16:01.640
in the middle of that

269
00:16:01.640 --> 00:16:04.400
because that will immediately raise a red flag

270
00:16:04.400 --> 00:16:08.350
and it tells me that I have ended my JavaScript line.

271
00:16:08.350 --> 00:16:09.910
So make sure you don't put that on there.

272
00:16:09.910 --> 00:16:11.800
Put that on the very end.

273
00:16:11.800 --> 00:16:13.897
Hope you enjoyed that, see you the next one.

