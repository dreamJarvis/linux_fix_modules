WEBVTT

1
00:00:00.678 --> 00:00:03.261
(upbeat music)

2
00:00:05.208 --> 00:00:06.210
<v Instructor>Right, here it is.</v>

3
00:00:06.210 --> 00:00:09.800
This is the video on classes, prototypes, new,

4
00:00:09.800 --> 00:00:12.830
and this keyword, these things are all connected,

5
00:00:12.830 --> 00:00:15.020
that's why I'm sort of grouping them all together

6
00:00:15.020 --> 00:00:16.410
and they're the foundation

7
00:00:16.410 --> 00:00:19.970
for what is often called object-oriented programming.

8
00:00:19.970 --> 00:00:22.880
Another popular version is functional programs.

9
00:00:22.880 --> 00:00:25.370
So let's go through,

10
00:00:25.370 --> 00:00:28.150
let's start with the new keyword and sort of understand how

11
00:00:28.150 --> 00:00:30.940
that works and then we'll get into the rest of it.

12
00:00:30.940 --> 00:00:33.740
So for this, we'll just open up a playground file.

13
00:00:33.740 --> 00:00:34.910
So go to your playground folder,

14
00:00:34.910 --> 00:00:39.910
make a new folder and we'll call this new-this.html.

15
00:00:42.230 --> 00:00:44.860
Inside of that, you want your HTML base

16
00:00:46.010 --> 00:00:51.010
and we'll call it new, this prototypes and classes,

17
00:00:52.510 --> 00:00:57.510
and give yourself a script tag, console log, it works.

18
00:00:59.990 --> 00:01:01.800
Open that up in the browser.

19
00:01:01.800 --> 00:01:05.280
We're mostly going to be focusing on Dev Tools here

20
00:01:05.280 --> 00:01:07.670
and then we'll go back and refactor

21
00:01:07.670 --> 00:01:10.990
those two last exercises that we did.

22
00:01:10.990 --> 00:01:13.373
Okay, so let's talk about the new keyword.

23
00:01:14.350 --> 00:01:15.993
What is the new keyword?

24
00:01:17.070 --> 00:01:19.050
You've seen us use it a couple of times.

25
00:01:19.050 --> 00:01:21.770
You've seen us use it when we throw an error,

26
00:01:21.770 --> 00:01:24.510
you've seen us use it when we create a date.

27
00:01:24.510 --> 00:01:26.590
I've also showed you that you can create arrays

28
00:01:26.590 --> 00:01:28.760
with the new array keyword, things like that.

29
00:01:28.760 --> 00:01:32.070
So, let's talk about dates here.

30
00:01:32.070 --> 00:01:33.800
If we may go ahead and make a new date.

31
00:01:33.800 --> 00:01:37.917
So const, my date is equal to new capital D date,

32
00:01:41.666 --> 00:01:44.999
and then you pass that, August 11, 2025.

33
00:01:47.646 --> 00:01:52.028
Now if I were to console log my date, see what we got here.

34
00:01:52.028 --> 00:01:55.221
You just get sort of like a string that is in there.

35
00:01:55.221 --> 00:01:58.564
If we make console.dir that instead

36
00:01:58.564 --> 00:02:02.646
you'll see that we have our date and inside of that

37
00:02:02.646 --> 00:02:05.755
there is a prototype of tons and tons

38
00:02:05.755 --> 00:02:08.267
and tons of different methods, okay?

39
00:02:08.267 --> 00:02:09.816
Okay, so that works so far.

40
00:02:09.816 --> 00:02:13.846
So if I were to duplicate this and console log

41
00:02:13.846 --> 00:02:17.346
mydate.getfullyear, refresh, you see 2025,

42
00:02:20.620 --> 00:02:22.490
where did this come from?

43
00:02:22.490 --> 00:02:25.160
Where did this method get full year come from?

44
00:02:25.160 --> 00:02:27.170
Same thing when we create an array,

45
00:02:27.170 --> 00:02:30.810
we automatically have all of these new methods like pop,

46
00:02:30.810 --> 00:02:34.580
push and slice and splice and all of those methods

47
00:02:34.580 --> 00:02:37.790
that we learned about, like where do those come from?

48
00:02:37.790 --> 00:02:41.830
Well this is because when you create a date

49
00:02:41.830 --> 00:02:44.100
or you create an object, when you create an array,

50
00:02:44.100 --> 00:02:46.650
when you create a number, when you create a string,

51
00:02:46.650 --> 00:02:49.020
when you create any of these things,

52
00:02:49.020 --> 00:02:53.540
we are essentially creating a new object in JavaScript

53
00:02:53.540 --> 00:02:58.540
that is extended off what I like to call the Maba object

54
00:02:58.760 --> 00:03:02.040
or the proper word is probably from the constructor.

55
00:03:02.040 --> 00:03:05.910
So if we take a look at all of the types that we have,

56
00:03:05.910 --> 00:03:10.180
so array, that's just a function, object,

57
00:03:10.180 --> 00:03:13.283
that's just a function date, number,

58
00:03:16.760 --> 00:03:21.440
these are all just functions that when they are run

59
00:03:21.440 --> 00:03:23.910
with the new keyword in front of it

60
00:03:23.910 --> 00:03:26.220
will return to you an object.

61
00:03:26.220 --> 00:03:30.500
And that's why we say everything in JavaScript is an object.

62
00:03:30.500 --> 00:03:35.080
Because even though a number is just a number,

63
00:03:35.080 --> 00:03:37.090
when we create a new number

64
00:03:38.350 --> 00:03:40.860
on that, let's store that in a variable.

65
00:03:40.860 --> 00:03:42.710
My number is equal to

66
00:03:44.240 --> 00:03:46.000
then we have my number

67
00:03:46.990 --> 00:03:50.950
and you'll see that there are a bunch of methods

68
00:03:50.950 --> 00:03:52.660
that exists on it.

69
00:03:52.660 --> 00:03:55.220
So that's what we mean when we say everything

70
00:03:55.220 --> 00:03:58.190
in JavaScript is an object because even things

71
00:03:58.190 --> 00:04:01.950
that are numbers, are a type of number,

72
00:04:01.950 --> 00:04:03.240
they also are an object,

73
00:04:03.240 --> 00:04:05.360
meaning that they are packed

74
00:04:05.360 --> 00:04:08.653
with all of these little methods for working with it.

75
00:04:09.780 --> 00:04:12.950
Okay, so (clearing throat) let's go back to this date here

76
00:04:12.950 --> 00:04:14.450
and keep going with it.

77
00:04:14.450 --> 00:04:17.470
Because we are creating a new date here,

78
00:04:17.470 --> 00:04:19.640
we actually have this my date variable

79
00:04:19.640 --> 00:04:22.760
that is an instance of date.

80
00:04:22.760 --> 00:04:27.700
And remember if we go back here and we were to type,

81
00:04:27.700 --> 00:04:28.780
type of

82
00:04:31.410 --> 00:04:34.790
my date, we get object.

83
00:04:34.790 --> 00:04:39.790
But if we say my date instance of capital D date,

84
00:04:42.810 --> 00:04:45.070
it will tell us true.

85
00:04:45.070 --> 00:04:48.780
So date is an object

86
00:04:48.780 --> 00:04:52.040
but it is an instance of the special object

87
00:04:52.040 --> 00:04:55.370
that we have in our browser that is called a date.

88
00:04:55.370 --> 00:04:57.150
So same thing with an array.

89
00:04:57.150 --> 00:05:00.280
If we create a new array, so const names is equal to

90
00:05:05.290 --> 00:05:06.840
Wes and Kait

91
00:05:08.040 --> 00:05:10.340
and we take a look here.

92
00:05:10.340 --> 00:05:12.000
So we have names,

93
00:05:12.000 --> 00:05:12.980
Type of

94
00:05:14.570 --> 00:05:19.570
names is an object because an array is not a type.

95
00:05:19.990 --> 00:05:22.850
An array is just a special kind of object.

96
00:05:22.850 --> 00:05:27.850
But if we say names is an instance of the array,

97
00:05:29.130 --> 00:05:31.260
you'll see that it is true

98
00:05:31.260 --> 00:05:34.340
because names is an instance of an array, okay.

99
00:05:34.340 --> 00:05:35.760
This might be a little bit confusing

100
00:05:35.760 --> 00:05:38.700
because you don't see us using the new keyword right here

101
00:05:38.700 --> 00:05:40.510
when we create an array.

102
00:05:40.510 --> 00:05:44.520
Same thing when you create an object like this,

103
00:05:44.520 --> 00:05:47.910
name is equal to Wes, you might be saying like, okay,

104
00:05:47.910 --> 00:05:50.560
why are we able to use that instance of here

105
00:05:50.560 --> 00:05:52.600
when we don't use a new keyword?

106
00:05:52.600 --> 00:05:56.880
Because these are what are referred to as literal syntax.

107
00:05:56.880 --> 00:05:59.980
This is the object, this, sorry.

108
00:05:59.980 --> 00:06:01.970
This is the array literal syntax

109
00:06:01.970 --> 00:06:04.540
and this is the object literal syntax.

110
00:06:04.540 --> 00:06:08.220
And it's the same thing as doing something like this.

111
00:06:08.220 --> 00:06:13.220
New, array and I think you pass it in array like that

112
00:06:15.170 --> 00:06:18.633
and same thing here, new object,

113
00:06:21.650 --> 00:06:24.350
you pass it, your objects there.

114
00:06:24.350 --> 00:06:26.230
And this should be the same thing.

115
00:06:26.230 --> 00:06:30.790
So names, it's an array of an array.

116
00:06:30.790 --> 00:06:32.340
Okay, so we don't need that.

117
00:06:32.340 --> 00:06:34.390
So you could see how often I use this syntax.

118
00:06:34.390 --> 00:06:36.780
I don't even know how it works.

119
00:06:36.780 --> 00:06:39.440
But let's take a look, refresh that, there we go,

120
00:06:39.440 --> 00:06:42.320
that's our normal array and then we take a look at Wes

121
00:06:42.320 --> 00:06:43.880
and it looks like a normal object.

122
00:06:43.880 --> 00:06:46.480
So the only difference between those two is that

123
00:06:46.480 --> 00:06:48.670
it's just a bit of a shorter syntax.

124
00:06:48.670 --> 00:06:52.050
Some of the other things like dates don't have

125
00:06:52.050 --> 00:06:55.890
a literal syntax, meaning that's why we have to stick

126
00:06:55.890 --> 00:06:58.190
that new keyword in front of it.

127
00:06:58.190 --> 00:07:01.080
Same thing when you create an element.

128
00:07:01.080 --> 00:07:05.740
So we'll say con span is equal to document.create element

129
00:07:07.080 --> 00:07:08.910
you have a span in there.

130
00:07:08.910 --> 00:07:10.923
If I were to console log the span,

131
00:07:13.200 --> 00:07:14.850
see we have our span there.

132
00:07:14.850 --> 00:07:19.850
If we were to take a look at, we say span, instance of,

133
00:07:21.280 --> 00:07:23.670
remember capital E element from that last one,

134
00:07:23.670 --> 00:07:24.880
it will say true.

135
00:07:24.880 --> 00:07:25.713
Why?

136
00:07:25.713 --> 00:07:27.880
Because element was the base one

137
00:07:27.880 --> 00:07:32.040
and span is the instance that we have there.

138
00:07:32.040 --> 00:07:35.150
Now why didn't we use new element here?

139
00:07:35.150 --> 00:07:38.160
Well let's just go ahead and look at the MDN doc.

140
00:07:38.160 --> 00:07:40.410
Here I am on the document.create element.

141
00:07:40.410 --> 00:07:43.260
It says here this method creates the HTML element

142
00:07:43.260 --> 00:07:46.310
specified by tag name or an HTML unknown element

143
00:07:46.310 --> 00:07:48.210
if a tech name isn't recognized,

144
00:07:48.210 --> 00:07:51.660
that's because you can make up your own elements.

145
00:07:51.660 --> 00:07:53.900
But what we have to look at

146
00:07:53.900 --> 00:07:57.240
is what happens when we create a span.

147
00:07:57.240 --> 00:08:02.240
Well, we can actually take a look and say span.constructor,

148
00:08:02.650 --> 00:08:04.530
and what that will do is it will give us

149
00:08:04.530 --> 00:08:07.310
a single HTML span element.

150
00:08:07.310 --> 00:08:12.310
Now, so if I type span instance of HTML span element,

151
00:08:14.540 --> 00:08:16.270
we also get true.

152
00:08:16.270 --> 00:08:19.363
And then if I say span instance of a node,

153
00:08:20.260 --> 00:08:21.390
we also get true.

154
00:08:21.390 --> 00:08:23.120
So like what's going on here?

155
00:08:23.120 --> 00:08:23.953
Is it an element?

156
00:08:23.953 --> 00:08:26.320
Is it a span, is it a node?

157
00:08:26.320 --> 00:08:30.200
And this is going a little bit ahead of ourselves,

158
00:08:30.200 --> 00:08:33.040
but we'll learn about this when we hit classes.

159
00:08:33.040 --> 00:08:36.410
But essentially things can start at a very basics,

160
00:08:36.410 --> 00:08:38.570
like a node can have texts,

161
00:08:38.570 --> 00:08:40.620
and then it can go a little bit further

162
00:08:40.620 --> 00:08:42.020
and become an element

163
00:08:42.020 --> 00:08:44.550
and it could have like a tag and attributes.

164
00:08:44.550 --> 00:08:46.890
And then it can go a little bit further

165
00:08:46.890 --> 00:08:48.720
and become a special kind of an element,

166
00:08:48.720 --> 00:08:52.510
like a span or an image or a div and all of these things,

167
00:08:52.510 --> 00:08:54.710
the element inherits the node

168
00:08:54.710 --> 00:08:57.280
and the span element inherits the element.

169
00:08:57.280 --> 00:08:58.710
They get a little bit more specific

170
00:08:58.710 --> 00:09:00.670
and that is what is referred to as extending

171
00:09:00.670 --> 00:09:03.870
and we'll go to that when we run into our classes.

172
00:09:03.870 --> 00:09:04.780
So to answer our question,

173
00:09:04.780 --> 00:09:06.890
why don't we use new in front of this

174
00:09:06.890 --> 00:09:09.760
is because document.create element under the hood,

175
00:09:09.760 --> 00:09:12.620
we'll say new element or new HTML element

176
00:09:12.620 --> 00:09:15.310
or new HTML span element for us.

177
00:09:15.310 --> 00:09:18.240
So let's build our own to hopefully get a bit of

178
00:09:18.240 --> 00:09:19.860
a better grasp on this.

179
00:09:19.860 --> 00:09:21.410
And let's make a pizza.

180
00:09:21.410 --> 00:09:22.630
How do you feel about that?

181
00:09:22.630 --> 00:09:25.560
We'll make a function capital P pizza

182
00:09:25.560 --> 00:09:30.560
and then we will just console log making a pizza.

183
00:09:30.860 --> 00:09:33.790
Now what we've done there is we have created

184
00:09:33.790 --> 00:09:37.320
the ability to create a new pizza.

185
00:09:37.320 --> 00:09:40.030
So what we can do here is if we were

186
00:09:40.030 --> 00:09:43.303
to say const pepperoni pizza,

187
00:09:45.500 --> 00:09:48.140
and let's use it without the new keyword,

188
00:09:48.140 --> 00:09:52.160
just see what we get, pizza, okay.

189
00:09:52.160 --> 00:09:54.467
And we'll console log pepperoni,

190
00:09:56.130 --> 00:09:57.123
pepperoni pizza,

191
00:09:59.760 --> 00:10:01.050
refresh this.

192
00:10:01.050 --> 00:10:03.093
We get undefined, okay.

193
00:10:04.716 --> 00:10:07.100
That makes sense because this function

194
00:10:07.100 --> 00:10:08.580
didn't return anything.

195
00:10:08.580 --> 00:10:12.700
But if I create a new pizza by putting the new keyword

196
00:10:12.700 --> 00:10:17.150
in front of that, you'll see that we get a pizza object

197
00:10:17.150 --> 00:10:19.860
with nothing in it because we haven't done anything.

198
00:10:19.860 --> 00:10:22.680
So what happens is that

199
00:10:22.680 --> 00:10:26.150
when you use the new keyword on a function,

200
00:10:26.150 --> 00:10:30.940
it creates a new instance object of that function

201
00:10:30.940 --> 00:10:35.430
instead of whatever has been returned from that function.

202
00:10:35.430 --> 00:10:37.160
So by using, I'll say it one more time

203
00:10:37.160 --> 00:10:38.460
'cause this is a bit confusing,

204
00:10:38.460 --> 00:10:40.750
by using the new keyword in JavaScript

205
00:10:40.750 --> 00:10:42.990
that creates a new object

206
00:10:42.990 --> 00:10:44.830
that is an instance of

207
00:10:44.830 --> 00:10:46.550
whatever function you have made it from.

208
00:10:46.550 --> 00:10:49.260
Now that will make a lot more sense when we get into this,

209
00:10:49.260 --> 00:10:52.880
when you get into constructors and we get into classes.

210
00:10:52.880 --> 00:10:56.090
But so far that's what we need to know about that.

211
00:10:56.090 --> 00:10:57.450
We can take it a little bit further

212
00:10:57.450 --> 00:11:01.090
and take a look at this pizza and we can say .constructor

213
00:11:04.410 --> 00:11:08.890
and the constructor will tell us what function made me.

214
00:11:08.890 --> 00:11:10.300
And it'll go here, you see,

215
00:11:10.300 --> 00:11:12.290
it will tell us what function made me.

216
00:11:12.290 --> 00:11:14.190
Same thing if we go to our span

217
00:11:14.190 --> 00:11:15.770
and we look at the constructor,

218
00:11:15.770 --> 00:11:17.660
it'll tell us that the thing

219
00:11:17.660 --> 00:11:22.003
that made me was the HTML span element function.

220
00:11:24.110 --> 00:11:28.420
And finally we can say pepperoni pizza is an

221
00:11:29.680 --> 00:11:32.243
instance of pizza,

222
00:11:34.550 --> 00:11:37.010
now we see true because it is, right?

223
00:11:37.010 --> 00:11:38.840
So that is new keyword.

224
00:11:38.840 --> 00:11:39.880
Let's take a break there

225
00:11:39.880 --> 00:11:42.983
and jump into this keyword in the next one.

