WEBVTT

1
00:00:05.000 --> 00:00:06.720
Next up, let's talk about what's called

2
00:00:06.720 --> 00:00:09.520
parameters and arguments.

3
00:00:09.520 --> 00:00:14.000
Obviously, we've hard-coded here the amount of the bill

4
00:00:14.000 --> 00:00:18.170
and we've hard-coded the amount of the tax rate.

5
00:00:18.170 --> 00:00:19.187
That's not a very--

6
00:00:20.090 --> 00:00:22.270
I don't know, we always talk in JavaScript,

7
00:00:22.270 --> 00:00:23.103
when we say,

8
00:00:23.103 --> 00:00:23.936
"Don't repeat yourself.

9
00:00:23.936 --> 00:00:25.460
"Keep your code dry."

10
00:00:25.460 --> 00:00:27.940
And if you're making a function called calculateBill

11
00:00:27.940 --> 00:00:30.220
and you're assuming the bill is $100,

12
00:00:30.220 --> 00:00:32.170
and the tax rate is 13%,

13
00:00:32.170 --> 00:00:33.470
that's not good, unless we call that

14
00:00:33.470 --> 00:00:34.450
calculateBillForABill

15
00:00:37.921 --> 00:00:41.710
ThatWasOneHundred.

16
00:00:41.710 --> 00:00:42.830
You get the point, right?

17
00:00:42.830 --> 00:00:44.140
That's too specific.

18
00:00:44.140 --> 00:00:45.610
So, what we wanna do is

19
00:00:45.610 --> 00:00:49.250
we wanna turn these things into variables.

20
00:00:49.250 --> 00:00:52.450
What we could do here is

21
00:00:52.450 --> 00:00:55.030
maybe we'll go up here

22
00:00:55.030 --> 00:00:59.500
and we'll say let bill = 100

23
00:00:59.500 --> 00:01:04.343
and let taxRate = 0.13.

24
00:01:05.440 --> 00:01:08.010
And then what we'll do in here is

25
00:01:08.010 --> 00:01:10.250
we just replace that with bill

26
00:01:10.250 --> 00:01:14.353
and we replace this with 1 + taxRate.

27
00:01:16.230 --> 00:01:18.040
And that will probably work,

28
00:01:18.040 --> 00:01:20.220
but you could probably tell by the sound of my voice

29
00:01:20.220 --> 00:01:21.490
that's not the best way to do it

30
00:01:21.490 --> 00:01:22.590
and I'll tell you why.

31
00:01:22.590 --> 00:01:23.970
So the reason we don't do this is

32
00:01:23.970 --> 00:01:26.270
because this function right here, calculateBill,

33
00:01:26.270 --> 00:01:29.310
is relying on what is called global variables.

34
00:01:29.310 --> 00:01:32.380
We're gonna go much more into scope and global variables

35
00:01:32.380 --> 00:01:35.340
and scoping variables to a function

36
00:01:35.340 --> 00:01:37.310
and these things called closures,

37
00:01:37.310 --> 00:01:40.440
which is kind of a nifty way to use variables.

38
00:01:40.440 --> 00:01:42.170
But for right now, what we need to know

39
00:01:42.170 --> 00:01:45.030
is that this is a function that needs some data.

40
00:01:45.030 --> 00:01:47.930
And when the function is not passed in data,

41
00:01:47.930 --> 00:01:51.310
it does this thing called reaching outside of the function

42
00:01:51.310 --> 00:01:54.170
in order to look up that data in a higher scope.

43
00:01:54.170 --> 00:01:56.820
Again, we'll go into scope more in a future video.

44
00:01:56.820 --> 00:01:57.910
So what we need to know right now

45
00:01:57.910 --> 00:01:59.460
is that it's not great to reach outside

46
00:01:59.460 --> 00:02:02.070
of a function in order to get your data.

47
00:02:02.070 --> 00:02:03.720
Now, if we wanted to do like--

48
00:02:03.720 --> 00:02:06.020
Let's get rid of this console.log here.

49
00:02:06.020 --> 00:02:07.450
Let's get rid of that.

50
00:02:07.450 --> 00:02:10.610
And let's just make a myTotal2 and run it.

51
00:02:10.610 --> 00:02:13.853
And then we'll console.log myTotal and myTotal2.

52
00:02:15.750 --> 00:02:17.490
By the way, you can pass console.log

53
00:02:17.490 --> 00:02:19.300
as many arguments as you want.

54
00:02:19.300 --> 00:02:21.420
So here I'm doing one comma two

55
00:02:21.420 --> 00:02:23.350
and it will just log as many pieces of data

56
00:02:23.350 --> 00:02:24.450
as you pass it.

57
00:02:24.450 --> 00:02:26.350
Here we see, yeah, you see both pieces of data.

58
00:02:26.350 --> 00:02:28.180
So what if I wanted a new total?

59
00:02:28.180 --> 00:02:33.180
Well, I could go up here and I could say bill = 200.

60
00:02:35.010 --> 00:02:36.030
And now I have an error,

61
00:02:36.030 --> 00:02:38.620
because we're trying to reassign a const.

62
00:02:38.620 --> 00:02:41.310
So we'll go up here and change this to a let.

63
00:02:41.310 --> 00:02:42.970
And refresh it, and now it works.

64
00:02:42.970 --> 00:02:45.620
But you see all of that work that we did where

65
00:02:45.620 --> 00:02:47.580
in between running these two pieces of code

66
00:02:47.580 --> 00:02:50.460
we had to change a variable that was set before

67
00:02:50.460 --> 00:02:54.220
and then is yanked into this function outside?

68
00:02:54.220 --> 00:02:56.320
This gets confusing really quickly,

69
00:02:56.320 --> 00:02:59.620
and it's how you build very brittle applications.

70
00:02:59.620 --> 00:03:03.230
So what we wanna do is instead of reaching outside,

71
00:03:03.230 --> 00:03:05.500
we wanna pass into our functions

72
00:03:05.500 --> 00:03:07.500
the pieces of data that we need.

73
00:03:07.500 --> 00:03:08.910
Let's do a little bit of clean-up here.

74
00:03:08.910 --> 00:03:11.603
Let's get rid of these global variables right here.

75
00:03:12.550 --> 00:03:15.410
We'll get rid of this line and the myTotal

76
00:03:15.410 --> 00:03:16.860
and get rid of that.

77
00:03:16.860 --> 00:03:19.360
Now what we wanna do is these variables,

78
00:03:19.360 --> 00:03:22.160
bill and taxRate, we wanna make them

79
00:03:22.160 --> 00:03:25.120
what are called params for your function.

80
00:03:25.120 --> 00:03:27.727
When you define your function and you say,

81
00:03:27.727 --> 00:03:29.367
"Okay, when somebody calls it,

82
00:03:29.367 --> 00:03:32.870
"I am going to expect somebody to pass me some data."

83
00:03:32.870 --> 00:03:34.800
So we put in params.

84
00:03:34.800 --> 00:03:36.960
I like to think of them as placeholders.

85
00:03:36.960 --> 00:03:39.685
So we'll say someone will pass us in a bill--

86
00:03:39.685 --> 00:03:41.690
let's call it billAmount.

87
00:03:41.690 --> 00:03:43.640
And somebody will pass us in a taxRate.

88
00:03:46.820 --> 00:03:49.520
Then what we can do is inside of our function body,

89
00:03:49.520 --> 00:03:51.930
we will have access to these variables

90
00:03:51.930 --> 00:03:53.830
that are passed into us.

91
00:03:53.830 --> 00:03:54.980
It's kind of confusing because

92
00:03:54.980 --> 00:03:57.770
there's no creation of these variables,

93
00:03:57.770 --> 00:03:59.750
but I'll explain that in just a second.

94
00:03:59.750 --> 00:04:03.455
Then we can go in here and we call this a billAmount

95
00:04:03.455 --> 00:04:04.810
and we called this taxRate as well,

96
00:04:04.810 --> 00:04:06.670
and then we return our total.

97
00:04:06.670 --> 00:04:08.770
Now when we go ahead and run it,

98
00:04:08.770 --> 00:04:10.200
we can then pass it--

99
00:04:10.200 --> 00:04:12.420
The first thing it wants is the billAmount,

100
00:04:12.420 --> 00:04:14.240
so we'll say it was $100.

101
00:04:14.240 --> 00:04:17.950
And then the second thing it wants is the taxRate, 0.13.

102
00:04:17.950 --> 00:04:20.670
Then if I console.log myTotal,

103
00:04:24.500 --> 00:04:26.260
you see that we get our value here,

104
00:04:26.260 --> 00:04:28.723
but I'm able to make a myTotal2 really quickly.

105
00:04:38.505 --> 00:04:41.180
And you see that it works without having to reassign.

106
00:04:41.180 --> 00:04:42.013
Why?

107
00:04:42.013 --> 00:04:43.630
Because when you define a function,

108
00:04:43.630 --> 00:04:46.250
you can place what are called parameters.

109
00:04:46.250 --> 00:04:47.720
These are called parameters.

110
00:04:47.720 --> 00:04:49.940
And I always remember it because P,

111
00:04:49.940 --> 00:04:51.950
parameter is a placeholder.

112
00:04:51.950 --> 00:04:54.430
And then when you run it, you pass the values.

113
00:04:54.430 --> 00:04:56.300
These are called arguments.

114
00:04:56.300 --> 00:04:58.110
I actually have a nifty little thing here.

115
00:04:58.110 --> 00:04:59.560
Let me open it up for you.

116
00:04:59.560 --> 00:05:02.860
This will be in the README of the repo for this

117
00:05:02.860 --> 00:05:04.363
if you wanna grab it yourself.

118
00:05:05.200 --> 00:05:08.150
So I've got this little function definition cheat sheet

119
00:05:08.150 --> 00:05:09.870
that I've put together here.

120
00:05:09.870 --> 00:05:11.420
Again, this will be in the README.

121
00:05:11.420 --> 00:05:14.150
So right here, this is our function definition.

122
00:05:14.150 --> 00:05:17.290
And when we define the function name,

123
00:05:17.290 --> 00:05:19.070
we put in what are called parameters.

124
00:05:19.070 --> 00:05:21.540
Again, parameters are what are called placeholders.

125
00:05:21.540 --> 00:05:22.870
We'll talk about this in the future,

126
00:05:22.870 --> 00:05:24.720
this is called a default value.

127
00:05:24.720 --> 00:05:27.160
And then when you actually run your function,

128
00:05:27.160 --> 00:05:29.040
or you call it, or you invoke it--

129
00:05:29.040 --> 00:05:31.302
those are three names to actually run your function--

130
00:05:31.302 --> 00:05:33.200
you pass it the data

131
00:05:33.200 --> 00:05:35.740
that will take place of these variables.

132
00:05:35.740 --> 00:05:40.600
So, meal will be 100, taxRate will be 0.13.

133
00:05:40.600 --> 00:05:42.840
And these are called arguments.

134
00:05:42.840 --> 00:05:45.940
You'll hear people interchangeably use those two things,

135
00:05:45.940 --> 00:05:47.380
but the way to remember it is

136
00:05:47.380 --> 00:05:49.380
parameters are placeholders,

137
00:05:49.380 --> 00:05:51.700
meaning that when we define our function,

138
00:05:51.700 --> 00:05:52.730
they are just a placeholder

139
00:05:52.730 --> 00:05:54.600
because we don't know what that data will be

140
00:05:54.600 --> 00:05:56.340
until they're actually run.

141
00:05:56.340 --> 00:05:58.180
And then when you run your function,

142
00:05:58.180 --> 00:06:00.580
the things that you pass in are called arguments

143
00:06:00.580 --> 00:06:02.360
because they are actual values.

144
00:06:02.360 --> 00:06:06.490
So P, parameter is a placeholder, or possible,

145
00:06:06.490 --> 00:06:07.920
some people have said as well.

146
00:06:07.920 --> 00:06:11.323
And A, arguments, are actual values.

147
00:06:11.323 --> 00:06:12.860
Let's keep going with this.

148
00:06:12.860 --> 00:06:14.731
Let's bring this back to myTotal.

149
00:06:14.731 --> 00:06:15.880
So we'll just have this one.

150
00:06:15.880 --> 00:06:17.830
So in this case I'm running my function

151
00:06:17.830 --> 00:06:20.470
and as arguments, I'm passing straight away numbers.

152
00:06:20.470 --> 00:06:24.050
However, the values that get passed into a function

153
00:06:24.050 --> 00:06:26.620
can be in a variable as well.

154
00:06:26.620 --> 00:06:28.690
This is a common hang-up that people have

155
00:06:28.690 --> 00:06:30.390
when learning how functions work

156
00:06:30.390 --> 00:06:32.308
is how they sort of get renamed.

157
00:06:32.308 --> 00:06:34.400
Let's take a look right here.

158
00:06:34.400 --> 00:06:36.770
When we have a function called calculateBill,

159
00:06:36.770 --> 00:06:39.010
when the data gets passed in,

160
00:06:39.010 --> 00:06:40.450
there is going to be variables

161
00:06:40.450 --> 00:06:42.950
that are available inside of this function.

162
00:06:42.950 --> 00:06:45.500
They are going to be what's called scoped to this function.

163
00:06:45.500 --> 00:06:47.770
And they are only available inside of this function

164
00:06:47.770 --> 00:06:49.100
as to what they are passed in.

165
00:06:49.100 --> 00:06:52.220
So if I were to go in here and console.log

166
00:06:52.220 --> 00:06:53.053
the billAmount

167
00:06:55.000 --> 00:06:56.130
and the taxRate,

168
00:06:59.350 --> 00:07:00.620
you'll see that when it runs

169
00:07:00.620 --> 00:07:02.900
it tells me it's 100 and 0.13.

170
00:07:02.900 --> 00:07:04.960
Again, I can run that function all day long.

171
00:07:04.960 --> 00:07:06.303
I can even run it in here.

172
00:07:11.582 --> 00:07:15.700
And you'll see that we actually get the 200 and 0.2.

173
00:07:15.700 --> 00:07:16.533
Why?

174
00:07:16.533 --> 00:07:18.310
Because JavaScript will take whatever it is

175
00:07:18.310 --> 00:07:20.590
that you write as an argument,

176
00:07:20.590 --> 00:07:22.400
and then when you call the function,

177
00:07:22.400 --> 00:07:24.350
it will sort of make it temporarily available

178
00:07:24.350 --> 00:07:26.470
and make them available to you

179
00:07:26.470 --> 00:07:29.700
via the names that you put in your parameters.

180
00:07:29.700 --> 00:07:32.220
Now what gets a little confusing to people

181
00:07:32.220 --> 00:07:34.437
is if somebody has a variable here

182
00:07:34.437 --> 00:07:36.250
and they say const wesTotal

183
00:07:37.160 --> 00:07:40.730
and we'll say maybe my bill was $500.

184
00:07:40.730 --> 00:07:43.523
And const wesTaxRate,

185
00:07:44.370 --> 00:07:45.900
maybe I have my own tax rate

186
00:07:47.125 --> 00:07:48.870
and it's 30% tax rate.

187
00:07:48.870 --> 00:07:49.920
Then what you can do is

188
00:07:49.920 --> 00:07:51.970
if you have these values in a variable,

189
00:07:51.970 --> 00:07:53.290
you can actually pass them

190
00:07:53.290 --> 00:07:55.140
into a function like this:

191
00:07:55.140 --> 00:07:57.807
wesTotal and we'll go in here

192
00:07:57.807 --> 00:07:59.510
and call it wesTaxRate.

193
00:08:00.580 --> 00:08:02.650
Now, the big confusion is

194
00:08:04.500 --> 00:08:07.380
if they're variables here,

195
00:08:07.380 --> 00:08:09.890
and you pass them in here,

196
00:08:09.890 --> 00:08:12.960
then when it's called inside of the function

197
00:08:12.960 --> 00:08:15.923
is this called billAmount or is it called wesTotal?

198
00:08:16.815 --> 00:08:18.310
Well, is this even gonna work?

199
00:08:18.310 --> 00:08:20.850
The fact that you just ran it with a variable

200
00:08:20.850 --> 00:08:23.730
that was not named the thing of the parameter?

201
00:08:23.730 --> 00:08:25.340
Well, refresh it.

202
00:08:25.340 --> 00:08:26.360
It works just fine.

203
00:08:26.360 --> 00:08:29.680
See, we get 500 and 0.3.

204
00:08:29.680 --> 00:08:32.280
So, when you run a function in JavaScript,

205
00:08:32.280 --> 00:08:35.030
what happens is JavaScript just takes in

206
00:08:35.030 --> 00:08:36.580
whatever you've passed it

207
00:08:36.580 --> 00:08:39.620
and whether you've passed it that value directly

208
00:08:39.620 --> 00:08:43.160
as a number or a string,

209
00:08:43.160 --> 00:08:46.110
or whether you've passed it in via reference,

210
00:08:46.110 --> 00:08:49.460
meaning that you've just passed a reference to a variable,

211
00:08:49.460 --> 00:08:51.310
which in turn will hold a value,

212
00:08:51.310 --> 00:08:53.270
at the end of the day we're still passing values,

213
00:08:53.270 --> 00:08:54.820
whether you pass it directly,

214
00:08:54.820 --> 00:08:57.100
or whether you pass a reference to a variable

215
00:08:57.100 --> 00:08:58.260
that holds a value,

216
00:08:58.260 --> 00:09:01.360
JavaScript doesn't care how you're passing it in

217
00:09:01.360 --> 00:09:03.200
and as soon as the function runs,

218
00:09:03.200 --> 00:09:05.660
it doesn't care about whether you passed in a variable,

219
00:09:05.660 --> 00:09:07.360
or whether you passed in a value,

220
00:09:07.360 --> 00:09:10.410
because it just knows that you passed in a value.

221
00:09:10.410 --> 00:09:12.177
And then what JavaScript does is it says,

222
00:09:12.177 --> 00:09:15.787
"Okay, take whatever they passed in as the first argument,

223
00:09:15.787 --> 00:09:18.077
"whether that's a variable value of 500,

224
00:09:18.077 --> 00:09:21.297
"or whether I've passed it in as a straight ahead 100,

225
00:09:21.297 --> 00:09:22.907
"and then just make a variable

226
00:09:22.907 --> 00:09:24.097
"that's available inside

227
00:09:24.097 --> 00:09:26.277
"the confines of these curly brackets

228
00:09:26.277 --> 00:09:27.930
"that is called billAmount."

229
00:09:27.930 --> 00:09:29.260
So when this function is running,

230
00:09:29.260 --> 00:09:31.420
it does not care about anything else

231
00:09:31.420 --> 00:09:33.770
that's going outside of this function.

232
00:09:33.770 --> 00:09:36.390
It just knows that it's doing its job.

233
00:09:36.390 --> 00:09:38.500
It's been passed in the two little pieces of data

234
00:09:38.500 --> 00:09:39.410
that it needs.

235
00:09:39.410 --> 00:09:40.520
It does its little math

236
00:09:40.520 --> 00:09:42.660
and then it returns its value in there.

237
00:09:42.660 --> 00:09:45.637
So when values get passed into a function,

238
00:09:45.637 --> 00:09:48.730
they sort of get renamed into whatever it is

239
00:09:48.730 --> 00:09:51.890
that you've defined your function parameters as.

240
00:09:51.890 --> 00:09:53.340
Let's do another example

241
00:09:53.340 --> 00:09:54.530
to sort of get that down pat,

242
00:09:54.530 --> 00:09:56.570
because honestly when I'm teaching JavaScript,

243
00:09:56.570 --> 00:09:59.710
this is probably by far the most common thing that happens.

244
00:09:59.710 --> 00:10:03.877
So let's make another function here called function sayHiTo

245
00:10:05.530 --> 00:10:10.460
and inside of that, we will simply just return hello.

246
00:10:10.460 --> 00:10:12.417
And we'll pass in somebody's--

247
00:10:13.730 --> 00:10:15.077
we'll call it firstName.

248
00:10:16.760 --> 00:10:20.373
And then I will const greeting = sayHiTo,

249
00:10:21.720 --> 00:10:23.460
and we'll go ahead and run it.

250
00:10:23.460 --> 00:10:25.690
Obviously this is going to break,

251
00:10:25.690 --> 00:10:26.793
but let's see why.

252
00:10:27.670 --> 00:10:29.123
Console.log that greeting.

253
00:10:31.180 --> 00:10:34.384
Let's get rid of this running right here.

254
00:10:34.384 --> 00:10:35.240
I just wanna keep it as clean as possible.

255
00:10:35.240 --> 00:10:36.388
Here we go.

256
00:10:36.388 --> 00:10:37.520
Reference error: firstName is not defined.

257
00:10:37.520 --> 00:10:38.353
Okay, good.

258
00:10:38.353 --> 00:10:40.610
So what happens is this function--

259
00:10:40.610 --> 00:10:41.790
First, what it will do is

260
00:10:41.790 --> 00:10:44.800
it will look inside of its own function confines,

261
00:10:44.800 --> 00:10:45.980
its own function scope,

262
00:10:45.980 --> 00:10:47.550
which is these curly brackets,

263
00:10:47.550 --> 00:10:48.397
and it will say,

264
00:10:48.397 --> 00:10:50.337
"Do I have a variable named firstName

265
00:10:50.337 --> 00:10:51.470
"that's been passed in?"

266
00:10:51.470 --> 00:10:53.680
And if there's not, what it will start to do is

267
00:10:53.680 --> 00:10:56.570
it will go out to a higher level scope and look there.

268
00:10:56.570 --> 00:10:59.240
Again, this is not a full explanation of scope

269
00:10:59.240 --> 00:11:01.340
but we're gonna go into that much more.

270
00:11:01.340 --> 00:11:03.550
So if there was a firstName variable here,

271
00:11:03.550 --> 00:11:04.930
maybe we'll set that to Wes,

272
00:11:04.930 --> 00:11:05.930
it would actually work.

273
00:11:05.930 --> 00:11:06.763
Watch.

274
00:11:07.690 --> 00:11:08.523
Hello, Wes.

275
00:11:08.523 --> 00:11:09.356
Why?

276
00:11:09.356 --> 00:11:11.570
Because it will try to reach outside for that data

277
00:11:11.570 --> 00:11:14.720
if nothing is found in the scope of that function.

278
00:11:14.720 --> 00:11:17.369
So what we wanna do is modify this--

279
00:11:17.369 --> 00:11:18.460
What is this called?

280
00:11:18.460 --> 00:11:20.530
This is called a function definition.

281
00:11:20.530 --> 00:11:22.660
And then we'll set it to take in one parameter,

282
00:11:22.660 --> 00:11:23.493
which is--

283
00:11:23.493 --> 00:11:25.017
let's call it firstName.

284
00:11:26.020 --> 00:11:30.030
Then, when we run it, we have to actually pass it a string.

285
00:11:30.030 --> 00:11:31.220
Call it Wes.

286
00:11:31.220 --> 00:11:33.110
And then we will have our greeting.

287
00:11:33.110 --> 00:11:34.730
And what's nice about that is that we can

288
00:11:34.730 --> 00:11:39.720
make sayHiTo and you can say Wes,

289
00:11:39.720 --> 00:11:43.070
you can say Kait, you can say Snickers,

290
00:11:43.070 --> 00:11:44.490
you get the point that right here,

291
00:11:44.490 --> 00:11:46.790
as long as we pass in an argument, in this case Wes,

292
00:11:46.790 --> 00:11:49.710
it's going to have a variable inside of the function

293
00:11:49.710 --> 00:11:52.600
that is referenced to whatever the person has passed in.

294
00:11:52.600 --> 00:11:54.440
If we actually don't run it with anything,

295
00:11:54.440 --> 00:11:55.453
look what happens.

296
00:11:56.840 --> 00:11:58.220
Hello undefined.

297
00:11:58.220 --> 00:12:00.490
And the reason we have that is because

298
00:12:00.490 --> 00:12:02.830
when a function runs,

299
00:12:02.830 --> 00:12:04.820
it will create the variable for us,

300
00:12:04.820 --> 00:12:08.470
and then set it to whatever the person has passed in,

301
00:12:08.470 --> 00:12:10.160
but if it creates a variable

302
00:12:10.160 --> 00:12:12.340
and someone doesn't pass in anything,

303
00:12:12.340 --> 00:12:14.330
then it will just be set to undefined.

304
00:12:14.330 --> 00:12:16.860
Exactly how variables work.

305
00:12:16.860 --> 00:12:19.090
Let's keep going with a few more examples here.

306
00:12:19.090 --> 00:12:21.800
Let's talk about passing expressions.

307
00:12:21.800 --> 00:12:24.560
So we'll go back to this calculateBill here.

308
00:12:24.560 --> 00:12:26.810
And we'll say const myTotal3 = calculateBill.

309
00:12:31.850 --> 00:12:34.900
And obviously we can pass 100 and 0.15.

310
00:12:34.900 --> 00:12:36.670
We've done that a million times.

311
00:12:36.670 --> 00:12:39.804
And we have our myTotal3 value.

312
00:12:39.804 --> 00:12:42.030
What happens if we do this?

313
00:12:42.030 --> 00:12:46.290
20 + 20 + 30 + 20.

314
00:12:46.290 --> 00:12:48.420
Is that gonna work?

315
00:12:48.420 --> 00:12:52.610
And we'll take a look at myTotal3 and we see 90.15.

316
00:12:52.610 --> 00:12:55.220
Oh, I think I goofed this up.

317
00:12:55.220 --> 00:12:57.990
Part of what we're gonna learn about is BEDMAS,

318
00:12:57.990 --> 00:12:59.410
which is brackets first

319
00:12:59.410 --> 00:13:01.270
and here I am, screwing it up.

320
00:13:01.270 --> 00:13:03.073
So make sure you put the parentheses on that

321
00:13:03.073 --> 00:13:05.288
because it needs to add the taxRate

322
00:13:05.288 --> 00:13:06.840
before it multiplies,

323
00:13:06.840 --> 00:13:08.750
otherwise it does it in a weird order.

324
00:13:08.750 --> 00:13:09.583
And now, we take a look.

325
00:13:09.583 --> 00:13:11.293
There we go, $103.50.

326
00:13:13.690 --> 00:13:14.940
That works, why?

327
00:13:14.940 --> 00:13:16.639
Well, because the only thing

328
00:13:16.639 --> 00:13:19.697
that a function can take in is a value.

329
00:13:19.697 --> 00:13:22.110
And whether you pass that value directly,

330
00:13:22.110 --> 00:13:23.230
as in a number,

331
00:13:23.230 --> 00:13:26.140
whether you pass that value in as a variable

332
00:13:26.140 --> 00:13:27.940
which holds a value, that works.

333
00:13:27.940 --> 00:13:30.580
And then you can also pass in expressions.

334
00:13:30.580 --> 00:13:32.930
You're not actually passing in an expression.

335
00:13:32.930 --> 00:13:35.780
In this case we're just running an expression

336
00:13:35.780 --> 00:13:37.470
and that will first run.

337
00:13:37.470 --> 00:13:39.810
It will add that up to $90.

338
00:13:39.810 --> 00:13:42.330
And then it will pass the raw value of 90.

339
00:13:42.330 --> 00:13:46.280
So absolutely, totally fine to do something like that.

340
00:13:46.280 --> 00:13:48.320
It's actually pretty common because

341
00:13:48.320 --> 00:13:50.609
even if you mix and match--

342
00:13:50.609 --> 00:13:53.880
const kait had a bill that was $100

343
00:13:53.880 --> 00:13:56.580
and I'll take Kait's bill when I'm running it,

344
00:13:56.580 --> 00:13:59.010
we'll call it kait.

345
00:13:59.010 --> 00:14:02.130
And then I'll add my own bill which was $50, right?

346
00:14:02.130 --> 00:14:03.990
So it's totally fine to mix and match

347
00:14:03.990 --> 00:14:04.880
those types of things.

348
00:14:04.880 --> 00:14:06.950
It's still going to work,

349
00:14:06.950 --> 00:14:10.800
regardless of what's going on.

350
00:14:10.800 --> 00:14:12.123
Let's bring that back.

351
00:14:12.991 --> 00:14:13.824
I'm gonna remove this example.

352
00:14:13.824 --> 00:14:14.657
Pretty simple.

353
00:14:14.657 --> 00:14:17.030
Let's do another example here

354
00:14:17.030 --> 00:14:20.790
where we pass functions as arguments.

355
00:14:20.790 --> 00:14:25.340
So we'll make a function called doctorize here

356
00:14:25.340 --> 00:14:28.820
and that will take in a name argument

357
00:14:28.820 --> 00:14:31.670
and we will return doctor

358
00:14:31.670 --> 00:14:33.383
and we'll put the name there.

359
00:14:34.270 --> 00:14:35.380
Then in here we're gonna make

360
00:14:35.380 --> 00:14:37.140
another function called yell

361
00:14:37.140 --> 00:14:39.730
and that takes in a name as well.

362
00:14:39.730 --> 00:14:41.633
And for our return,

363
00:14:42.610 --> 00:14:44.900
we're just going to say "Hey,"

364
00:14:44.900 --> 00:14:46.710
and then we're gonna take the person's name

365
00:14:46.710 --> 00:14:51.180
and run toUpperCase on the end.

366
00:14:51.180 --> 00:14:52.650
Now we have two functions here.

367
00:14:52.650 --> 00:14:53.483
You might be saying,

368
00:14:53.483 --> 00:14:55.660
"Hey Wes, you reused a variable!"

369
00:14:55.660 --> 00:14:58.010
Well, while it's not okay

370
00:14:58.010 --> 00:15:01.840
to reuse variables in the same scope multiple times,

371
00:15:01.840 --> 00:15:04.240
it is okay to reuse parameters.

372
00:15:04.240 --> 00:15:05.073
Why?

373
00:15:05.073 --> 00:15:07.350
Because parameters, when they're passed in,

374
00:15:07.350 --> 00:15:08.980
when arguments are passed in,

375
00:15:08.980 --> 00:15:11.400
they are only available inside of that function.

376
00:15:11.400 --> 00:15:14.260
So, never will you run into a collision

377
00:15:14.260 --> 00:15:16.440
where the name that you pass in here

378
00:15:16.440 --> 00:15:18.040
is going to overwrite this,

379
00:15:18.040 --> 00:15:20.330
because these are their own little confines.

380
00:15:20.330 --> 00:15:22.890
They are their own little scoped functions,

381
00:15:22.890 --> 00:15:25.320
and the name that gets passed into doctorize

382
00:15:25.320 --> 00:15:27.247
is only available inside of this function,

383
00:15:27.247 --> 00:15:28.900
and will never collide with the name

384
00:15:28.900 --> 00:15:30.420
that is inside of here.

385
00:15:30.420 --> 00:15:32.670
Now, what's kind of cool about that is--

386
00:15:32.670 --> 00:15:34.060
let's just try to go ahead and run it.

387
00:15:34.060 --> 00:15:37.490
So doctorize, we'll call it Wes.

388
00:15:37.490 --> 00:15:42.480
And if we try that with yell, we get "hey Wes."

389
00:15:42.480 --> 00:15:44.550
Now, what's kind of cool is that

390
00:15:44.550 --> 00:15:49.550
you can pass the output of doctorize into yell.

391
00:15:50.840 --> 00:15:54.010
So we could say yell doctorize

392
00:15:57.561 --> 00:15:58.853
and we could say Wes.

393
00:15:59.810 --> 00:16:01.020
Hey Dr. Wes!

394
00:16:01.020 --> 00:16:03.450
So, what just happened there is--

395
00:16:03.450 --> 00:16:05.423
let's bring that down over here.

396
00:16:06.490 --> 00:16:09.400
What happens here is brackets go first,

397
00:16:09.400 --> 00:16:11.240
so anything that is inside of here,

398
00:16:11.240 --> 00:16:14.167
it says, "Okay, I need to first run this function

399
00:16:14.167 --> 00:16:16.310
"and hopefully that returns a value."

400
00:16:16.310 --> 00:16:17.253
Which it does.

401
00:16:19.891 --> 00:16:21.460
It returns doctor and the name.

402
00:16:21.460 --> 00:16:24.050
And then the value that's returned from doctorize

403
00:16:24.050 --> 00:16:27.620
immediately gets passed into yell as an argument,

404
00:16:27.620 --> 00:16:31.150
and then that will in turn return "Hey Dr. Wes."

405
00:16:31.150 --> 00:16:32.700
So again, just another way

406
00:16:32.700 --> 00:16:34.490
that we can pass a value to a function

407
00:16:34.490 --> 00:16:37.100
is the output of a function is just a value

408
00:16:37.100 --> 00:16:38.200
at the end of the day,

409
00:16:38.200 --> 00:16:41.070
and you can actually run that directly.

410
00:16:41.070 --> 00:16:43.050
Now let's talk about default values.

411
00:16:43.050 --> 00:16:45.310
I'm gonna comment out this yell right here,

412
00:16:45.310 --> 00:16:47.670
or just remove it entirely.

413
00:16:47.670 --> 00:16:49.960
Let's go up to this taxRate right here.

414
00:16:49.960 --> 00:16:51.777
You may be thinking,

415
00:16:51.777 --> 00:16:52.760
"That's a little bit silly

416
00:16:52.760 --> 00:16:56.150
to have to pass it in directly every single time,"

417
00:16:56.150 --> 00:17:00.670
or even if we go to this yell function that we have here,

418
00:17:00.670 --> 00:17:03.880
if I run yell and it says Wes,

419
00:17:03.880 --> 00:17:04.760
obviously it works,

420
00:17:04.760 --> 00:17:07.938
but if I run just yell directly,

421
00:17:07.938 --> 00:17:10.090
without passing in an argument,

422
00:17:10.090 --> 00:17:12.270
it just says uncaught type error:

423
00:17:12.270 --> 00:17:15.430
cannot read property toUpperCase of undefined.

424
00:17:15.430 --> 00:17:18.630
What's happening is that this toUpperCase function,

425
00:17:18.630 --> 00:17:20.040
it's technically a method,

426
00:17:20.040 --> 00:17:21.910
we'll go into that in a bit,

427
00:17:21.910 --> 00:17:23.740
it's trying to run it against something

428
00:17:23.740 --> 00:17:25.333
that didn't get passed in.

429
00:17:26.785 --> 00:17:29.080
First of all, you shouldn't have forgot it,

430
00:17:29.080 --> 00:17:33.660
but if someone forgets to pass a value to the yell function,

431
00:17:33.660 --> 00:17:35.710
our whole program is going to break.

432
00:17:35.710 --> 00:17:37.380
So what we can do is we can actually set

433
00:17:37.380 --> 00:17:38.770
what's called defaults.

434
00:17:38.770 --> 00:17:40.190
When you define your function,

435
00:17:40.190 --> 00:17:42.250
inside of your function definition,

436
00:17:42.250 --> 00:17:45.957
you can set a default by saying name is equal to--

437
00:17:47.940 --> 00:17:49.363
we'll call him Silly Goose.

438
00:17:50.770 --> 00:17:53.630
And now what will happen is if I run this again

439
00:17:53.630 --> 00:17:56.410
with yell, passing Wes, it will still work.

440
00:17:56.410 --> 00:18:00.890
But if you pass it without passing any value to it,

441
00:18:00.890 --> 00:18:04.470
it will fall back to whatever the default value was

442
00:18:04.470 --> 00:18:05.920
in your function definition.

443
00:18:05.920 --> 00:18:06.753
So that's great.

444
00:18:06.753 --> 00:18:07.880
So as you define your function,

445
00:18:07.880 --> 00:18:12.220
you can say if somebody does not pass this parameter here,

446
00:18:12.220 --> 00:18:13.240
called name,

447
00:18:13.240 --> 00:18:16.160
just default it to Silly Goose.

448
00:18:16.160 --> 00:18:18.668
So we can go up here to taxRate

449
00:18:18.668 --> 00:18:22.670
and we can always just set a default to 0.13,

450
00:18:22.670 --> 00:18:24.330
and what that will allow us to do is

451
00:18:24.330 --> 00:18:26.380
we can simply just call our calculateBill

452
00:18:29.410 --> 00:18:31.110
with $100,

453
00:18:31.110 --> 00:18:32.268
and it will say,

454
00:18:32.268 --> 00:18:33.577
"Okay, well, they didn't pass a taxRate,

455
00:18:33.577 --> 00:18:36.760
"so we're just going to default to 0.13."

456
00:18:36.760 --> 00:18:39.810
And we get our actual value that's returned here.

457
00:18:39.810 --> 00:18:41.650
So I often like to do that.

458
00:18:41.650 --> 00:18:44.410
Even if you go as far as to just say

459
00:18:44.410 --> 00:18:46.920
name is equal to an empty string,

460
00:18:46.920 --> 00:18:49.980
what that will do is it will just make sure that

461
00:18:49.980 --> 00:18:52.080
it falls back to an empty string,

462
00:18:52.080 --> 00:18:53.690
and it won't error out.

463
00:18:53.690 --> 00:18:56.270
It just won't show you anything in that case.

464
00:18:56.270 --> 00:18:58.420
So you'll see me doing that sometimes

465
00:18:58.420 --> 00:19:00.240
when we hit a lot of our exercises.

466
00:19:00.240 --> 00:19:01.760
I'll just set the default to be

467
00:19:01.760 --> 00:19:04.080
a value of nothing of that type,

468
00:19:04.080 --> 00:19:06.690
and that's just to sort of safeguard myself

469
00:19:06.690 --> 00:19:10.150
from any cases where I am not passing it in,

470
00:19:10.150 --> 00:19:12.400
or forget, or something like that.

471
00:19:12.400 --> 00:19:13.890
Let's take it one step further now

472
00:19:13.890 --> 00:19:15.850
and let's modify this calculateBill

473
00:19:15.850 --> 00:19:17.660
to also take a tipRate.

474
00:19:17.660 --> 00:19:18.620
So let's go in here.

475
00:19:18.620 --> 00:19:20.910
We take a billAmount, a taxRate,

476
00:19:20.910 --> 00:19:25.060
and then we also have a tipRate argument.

477
00:19:25.060 --> 00:19:29.020
Let's default the tip to 0.15, 15%.

478
00:19:29.020 --> 00:19:32.720
By the way, the Europeans that are listening,

479
00:19:32.720 --> 00:19:37.097
where tip is not required and tax is built into the price,

480
00:19:37.097 --> 00:19:38.510
congratulations.

481
00:19:38.510 --> 00:19:39.620
You're lucky.

482
00:19:39.620 --> 00:19:43.120
Not so easy here in Canada and in the U.S.

483
00:19:43.120 --> 00:19:45.070
Let's get rid of this console.log here.

484
00:19:45.960 --> 00:19:47.210
Now what we do is we say

485
00:19:47.210 --> 00:19:49.797
the total is equal to the billAmount plus--

486
00:19:50.740 --> 00:19:52.380
we'll take this, and we'll say

487
00:19:56.233 --> 00:19:59.233
the billAmount times taxRate, plus--

488
00:20:00.210 --> 00:20:03.970
and we'll say it's the billAmount times the tipRate.

489
00:20:05.610 --> 00:20:07.760
Now you see my Prettier right there?

490
00:20:07.760 --> 00:20:09.405
I just put in those parentheses

491
00:20:09.405 --> 00:20:12.470
because I was thinking that these had to run first,

492
00:20:12.470 --> 00:20:13.840
and then I gave it a save,

493
00:20:13.840 --> 00:20:15.510
and Prettier automatically fixed it

494
00:20:15.510 --> 00:20:17.652
because those were unnecessary parentheses

495
00:20:17.652 --> 00:20:19.660
that were put in there.

496
00:20:19.660 --> 00:20:22.320
The BEDMAS rules do not need to happen there.

497
00:20:22.320 --> 00:20:23.950
So when I save it, it just removes them.

498
00:20:23.950 --> 00:20:25.200
That's why I like Prettier.

499
00:20:25.200 --> 00:20:27.030
I can just put them in when I'm thinking about it,

500
00:20:27.030 --> 00:20:28.817
and it says, "Oh, Wes, you're dumb.

501
00:20:28.817 --> 00:20:29.980
"You don't know what you're doing."

502
00:20:29.980 --> 00:20:31.290
It will remove them for us.

503
00:20:31.290 --> 00:20:34.345
So now if I run calculateBill,

504
00:20:34.345 --> 00:20:37.030
and pass it $100,

505
00:20:37.030 --> 00:20:38.810
we get $128,

506
00:20:38.810 --> 00:20:43.600
because I have a 13% taxRate, and a 15% tipRate,

507
00:20:43.600 --> 00:20:45.120
and they have defaulted.

508
00:20:45.120 --> 00:20:47.920
Now, one little sort of gotcha that happens here

509
00:20:47.920 --> 00:20:50.940
is what if you wanna use the default taxRate,

510
00:20:50.940 --> 00:20:52.270
but not the default tipRate?

511
00:20:52.270 --> 00:20:53.300
So we'll go here.

512
00:20:53.300 --> 00:20:54.800
Let's go to the very bottom.

513
00:20:54.800 --> 00:20:56.623
Const myBill4 = calculateBill,

514
00:21:00.397 --> 00:21:01.630
$100,

515
00:21:01.630 --> 00:21:04.720
and you wanna use the default taxRate,

516
00:21:04.720 --> 00:21:07.410
so just maybe skip it, or something like that?

517
00:21:07.410 --> 00:21:09.130
I don't know what goes in here.

518
00:21:09.130 --> 00:21:11.650
And then I wanna pass a 20% tipRate.

519
00:21:11.650 --> 00:21:12.840
This is gonna break.

520
00:21:12.840 --> 00:21:13.673
Watch.

521
00:21:13.673 --> 00:21:14.506
Mybill4.

522
00:21:17.640 --> 00:21:20.070
Unexpected token comma.

523
00:21:20.070 --> 00:21:23.090
Okay, it expected you to actually pass a value here.

524
00:21:23.090 --> 00:21:25.330
So the only thing that you can pass into a function

525
00:21:25.330 --> 00:21:29.750
to make it kick back to its default value is undefined,

526
00:21:29.750 --> 00:21:33.546
meaning that functions will only ever fall back

527
00:21:33.546 --> 00:21:36.670
to their defaults if nothing is passed.

528
00:21:36.670 --> 00:21:39.610
And remember when a variable is not set to anything,

529
00:21:39.610 --> 00:21:41.100
it is the value of undefined.

530
00:21:41.100 --> 00:21:43.750
So you can't go ahead and pass zero here

531
00:21:43.750 --> 00:21:46.210
and expect it to fall back to the default,

532
00:21:46.210 --> 00:21:48.500
or you can't say false or anything like that.

533
00:21:48.500 --> 00:21:50.290
You have to pass undefined,

534
00:21:50.290 --> 00:21:52.540
and what that will do is it will--

535
00:21:52.540 --> 00:21:54.900
we're explicitly passing undefined,

536
00:21:54.900 --> 00:21:58.290
and then that will make it fall back to 0.13.

537
00:21:58.290 --> 00:22:01.400
And it works just like we had wanted.

538
00:22:01.400 --> 00:22:03.567
It's very often--

539
00:22:05.070 --> 00:22:07.990
It's very infrequently that I actually ever have to do that,

540
00:22:07.990 --> 00:22:09.010
but it's worth knowing

541
00:22:09.010 --> 00:22:13.760
that that's how the function will define

542
00:22:13.760 --> 00:22:17.160
whether it should fall back to the default or not.

543
00:22:17.160 --> 00:22:20.990
And it's nothing to do with truthy or falsey,

544
00:22:20.990 --> 00:22:23.830
which we're going to learn in an upcoming video.

545
00:22:23.830 --> 00:22:25.500
So that's parameters and arguments.

546
00:22:25.500 --> 00:22:26.333
In the next video,

547
00:22:26.333 --> 00:22:28.960
we're gonna look at a handful of other ways

548
00:22:28.960 --> 00:22:30.930
to define a function rather than just

549
00:22:30.930 --> 00:22:32.778
the function keyword and

550
00:22:32.778 --> 00:22:34.628
followed by the name of the function.

