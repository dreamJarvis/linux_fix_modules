WEBVTT

1
00:00:00.690 --> 00:00:03.273
(upbeat music)

2
00:00:05.570 --> 00:00:06.810
<v Instructor>All right let's do the first one,</v>

3
00:00:06.810 --> 00:00:07.990
which is strings,

4
00:00:07.990 --> 00:00:09.377
I want you to create a new file

5
00:00:09.377 --> 00:00:12.570
and just call it 'types.html'.

6
00:00:12.570 --> 00:00:17.570
And we're going to use our base, html base in there.

7
00:00:20.300 --> 00:00:23.870
And I'm going to give ourselves a script source,

8
00:00:23.870 --> 00:00:26.227
which will go to types.js.

9
00:00:26.227 --> 00:00:28.480
The I'll go ahead and make another file in the

10
00:00:28.480 --> 00:00:29.930
playground called 'types.js'.

11
00:00:31.320 --> 00:00:36.320
And in here, we will just console.log it works.

12
00:00:36.470 --> 00:00:38.313
Open that up in your browser.

13
00:00:39.280 --> 00:00:40.769
Open up our thing, and there we go, it works.

14
00:00:40.769 --> 00:00:43.270
Okay, so, strings, what are they?

15
00:00:43.270 --> 00:00:45.143
They're used for holding text.

16
00:00:45.143 --> 00:00:47.250
There are three different ways to

17
00:00:47.250 --> 00:00:49.020
create strings in JavaScript.

18
00:00:49.020 --> 00:00:52.750
There's single quotes, double quotes and back ticks.

19
00:00:52.750 --> 00:00:57.080
So let's make a const name is equal to wes.

20
00:00:57.080 --> 00:01:01.163
Const middle is equal to topher, we'll do double.

21
00:01:03.260 --> 00:01:07.750
And const last is equal to, back ticks, bos.

22
00:01:07.750 --> 00:01:09.250
Before you even hit save here,

23
00:01:09.250 --> 00:01:12.530
this actually might just be fixed for me.

24
00:01:12.530 --> 00:01:14.350
Let's give it a save.

25
00:01:14.350 --> 00:01:17.850
You see that, that immediately just changed itself to

26
00:01:17.850 --> 00:01:19.200
a single quote.

27
00:01:19.200 --> 00:01:20.996
The way that we can fix that because,

28
00:01:20.996 --> 00:01:24.420
we actually want to try single and double quotes.

29
00:01:24.420 --> 00:01:26.250
Is you go to your first line of there

30
00:01:26.250 --> 00:01:27.850
and you give yourselves a comment,

31
00:01:27.850 --> 00:01:30.680
and this is different than the other kind of comment,

32
00:01:30.680 --> 00:01:31.640
which I've been showing you,

33
00:01:31.640 --> 00:01:33.610
which is just two forward slashes.

34
00:01:33.610 --> 00:01:35.780
That will comment out the entire line,

35
00:01:35.780 --> 00:01:38.180
or you can put a comment at the end of the line.

36
00:01:39.130 --> 00:01:41.930
But a star forward slash will open up

37
00:01:41.930 --> 00:01:43.760
what's called a block comment.

38
00:01:43.760 --> 00:01:46.090
And then you can just close your block comment

39
00:01:46.090 --> 00:01:48.370
whenever you wish to close it.

40
00:01:48.370 --> 00:01:50.620
So this will go from multiple lines,

41
00:01:50.620 --> 00:01:52.530
in our case we just want it on one line.

42
00:01:52.530 --> 00:01:54.890
But ESLint is looking for a block comment.

43
00:01:54.890 --> 00:01:58.223
So, we'll just type eslint-disabled,

44
00:02:00.550 --> 00:02:01.930
and give that a save.

45
00:02:01.930 --> 00:02:03.080
And...

46
00:02:04.280 --> 00:02:05.743
Maybe it's just disable?

47
00:02:07.090 --> 00:02:07.923
There we go.

48
00:02:07.923 --> 00:02:10.750
So it's eslint-disable and that will just disable

49
00:02:10.750 --> 00:02:14.654
the entire file, you can also just Eslint-disable line,

50
00:02:14.654 --> 00:02:16.820
and that will disable one line.

51
00:02:16.820 --> 00:02:20.090
And now, if I go back and give myself double quotes.

52
00:02:20.090 --> 00:02:23.100
It's not actually going to go ahead and fix it for me.

53
00:02:23.100 --> 00:02:26.530
Single and double quotes and then we have back ticks.

54
00:02:26.530 --> 00:02:27.763
What's the difference?

55
00:02:28.600 --> 00:02:30.740
For my prettier settings I generally stick with

56
00:02:30.740 --> 00:02:33.010
either back ticks or single quotes.

57
00:02:33.010 --> 00:02:35.374
And I have prettier currently set up to

58
00:02:35.374 --> 00:02:37.650
correct myself to single quotes.

59
00:02:37.650 --> 00:02:40.310
Although, I have been sort of contemplating myself

60
00:02:40.310 --> 00:02:42.630
just switching to back ticks entirely.

61
00:02:42.630 --> 00:02:44.953
And I'll talk about why in just a second.

62
00:02:46.638 --> 00:02:50.650
Single quotes and double quotes are exactly the same thing.

63
00:02:50.650 --> 00:02:53.100
The only reason we sort of have both

64
00:02:53.100 --> 00:02:55.600
is because if you are having a sentence,

65
00:02:55.600 --> 00:02:58.450
const sentence and you wanted to say,

66
00:02:58.450 --> 00:03:01.760
in single quotes, she's so cool.

67
00:03:01.760 --> 00:03:02.950
You see what just happened there?

68
00:03:02.950 --> 00:03:04.490
I broke my JavaScript, why?

69
00:03:04.490 --> 00:03:07.730
Because I opened my string I typed 'she's',

70
00:03:07.730 --> 00:03:11.200
and then I needed an apostrophe for apostrophe 's',

71
00:03:11.200 --> 00:03:13.930
but the JavaScript interpreter took that as

72
00:03:13.930 --> 00:03:17.310
me closing the string and now it's going to,

73
00:03:17.310 --> 00:03:21.880
watch this, 'Unexpected identifier on line 6'.

74
00:03:21.880 --> 00:03:24.500
And then you see that if you hover over top of it,

75
00:03:24.500 --> 00:03:28.410
it starts underlining it right away at the 's', right?

76
00:03:28.410 --> 00:03:31.390
So it's just like, "Whoa! What's this 's' from?", right?

77
00:03:31.390 --> 00:03:34.260
If I put a semicolon there I think it might have

78
00:03:34.260 --> 00:03:37.470
even told us, no it gives us the same error.

79
00:03:37.470 --> 00:03:39.700
What can we do in that case?

80
00:03:39.700 --> 00:03:41.550
There's a couple options here.

81
00:03:41.550 --> 00:03:43.970
First, you can do what's called escaping.

82
00:03:43.970 --> 00:03:47.820
And escaping in JavaScript allows you to tell JavaScript,

83
00:03:47.820 --> 00:03:51.650
no, I actually want this character.

84
00:03:51.650 --> 00:03:55.520
Don't take this as JavaScript syntax take it as text,

85
00:03:55.520 --> 00:03:58.010
and escaping is just a forward slash.

86
00:03:58.010 --> 00:04:01.110
So you see that, that is a sort of pink in my editor,

87
00:04:01.110 --> 00:04:03.430
your editor might be different depending on what you have.

88
00:04:03.430 --> 00:04:05.520
And then we no longer have an issue,

89
00:04:05.520 --> 00:04:08.330
and if I were to pull up that sentence.

90
00:04:08.330 --> 00:04:10.480
You see, that is "she's so cool",

91
00:04:10.480 --> 00:04:13.260
that forward slash is actually not in there.

92
00:04:13.260 --> 00:04:17.040
That's how you can sort of escape a character that you want.

93
00:04:17.040 --> 00:04:18.460
Kind of annoying in my opinion,

94
00:04:18.460 --> 00:04:20.800
because you have to remember to type them.

95
00:04:20.800 --> 00:04:24.570
And then also, if you want a forward slash,

96
00:04:24.570 --> 00:04:28.450
what if you wanted a forward slash in your code.

97
00:04:28.450 --> 00:04:32.730
Now it's broken you have to escape the forward slash

98
00:04:32.730 --> 00:04:35.890
with another escape value and then it works.

99
00:04:35.890 --> 00:04:38.530
I don't know how many, what if you do two?

100
00:04:38.530 --> 00:04:40.890
Then it's broken, what if you do four?

101
00:04:40.890 --> 00:04:41.913
Then you get two?

102
00:04:43.890 --> 00:04:44.890
There you go.

103
00:04:44.890 --> 00:04:46.205
You kind of get the point.

104
00:04:46.205 --> 00:04:49.140
Obviously, the other better option there

105
00:04:49.140 --> 00:04:53.030
is just to use the other type of quote that you have there.

106
00:04:53.030 --> 00:04:55.280
So instead of using single quotes just use double quotes

107
00:04:55.280 --> 00:04:58.163
and then you don't have to worry about that.

108
00:04:58.163 --> 00:05:00.323
And, that's great.

109
00:05:01.554 --> 00:05:04.450
The other sort of bummer there is if you also

110
00:05:04.450 --> 00:05:05.700
needed double quotes in there.

111
00:05:05.700 --> 00:05:09.100
So if you want to do air quotes she's so "cool",

112
00:05:09.100 --> 00:05:12.470
and you were to put quotes around this cool here,

113
00:05:12.470 --> 00:05:13.810
then we have the same problem where

114
00:05:13.810 --> 00:05:15.980
we just broke our string.

115
00:05:15.980 --> 00:05:19.050
So you'd have to escape the one that you want,

116
00:05:19.050 --> 00:05:20.890
and then also escape that one.

117
00:05:20.890 --> 00:05:23.580
And, I think that should work for us, there we go.

118
00:05:23.580 --> 00:05:26.040
So that's part of the actual string.

119
00:05:26.040 --> 00:05:28.890
Those are the, sort of the two differences between those.

120
00:05:29.790 --> 00:05:33.040
Sort of the third option is the back ticks

121
00:05:33.040 --> 00:05:35.750
which is just sort of gets away from all of that.

122
00:05:35.750 --> 00:05:38.460
So, we can just make a sentence two here,

123
00:05:38.460 --> 00:05:39.830
and then use back ticks

124
00:05:42.770 --> 00:05:44.627
and that will just work

125
00:05:44.627 --> 00:05:46.530
without having to escape.

126
00:05:46.530 --> 00:05:49.300
The only sort of downside is if you did really

127
00:05:49.300 --> 00:05:51.500
yant a back tick inside of your string,

128
00:05:51.500 --> 00:05:54.114
You would have to escape that just like we did with the

129
00:05:54.114 --> 00:05:56.130
single and double quotes that we have there.

130
00:05:56.130 --> 00:05:59.240
So, that's single, double and back ticks.

131
00:05:59.240 --> 00:06:01.840
They are all the same kind of string.

132
00:06:01.840 --> 00:06:04.870
That's one sort of benefit that you have

133
00:06:04.870 --> 00:06:06.620
to using back ticks there.

134
00:06:06.620 --> 00:06:09.800
The next thing is putting strings on multiple lines.

135
00:06:09.800 --> 00:06:12.960
So if I have like a song and I want to set that

136
00:06:12.960 --> 00:06:15.070
to let's use single quotes here.

137
00:06:15.070 --> 00:06:20.070
And we'll say 'Ohh yeah I like pizza'.

138
00:06:20.670 --> 00:06:22.470
So like, that's one string, right?

139
00:06:22.470 --> 00:06:25.060
I opened it right here and I closed it right there.

140
00:06:25.060 --> 00:06:28.110
You already see that this is being underlined,

141
00:06:28.110 --> 00:06:30.000
because there's a problem with it.

142
00:06:30.000 --> 00:06:33.813
And if I refresh this we get an unexpected token on line 9,

143
00:06:33.813 --> 00:06:37.310
because it expected us to actually go ahead and close that.

144
00:06:37.310 --> 00:06:38.840
How do you do multi-line strings?

145
00:06:38.840 --> 00:06:42.690
Well, you probably don't even put any room in

146
00:06:42.690 --> 00:06:44.538
your brain for this because you won't

147
00:06:44.538 --> 00:06:48.210
need it all that often but if you want to have a new line,

148
00:06:48.210 --> 00:06:50.870
you have to put a forward slash, forward slash,

149
00:06:50.870 --> 00:06:53.920
forward slash, at the end of every single line.

150
00:06:53.920 --> 00:06:57.810
And that will allow you to put a string on multiple lines.

151
00:06:57.810 --> 00:07:00.053
And then if you were to look at the string.

152
00:07:01.650 --> 00:07:05.010
It's still just on one single line.

153
00:07:05.010 --> 00:07:07.070
As I say, this is no way to live your life,

154
00:07:07.070 --> 00:07:09.300
having to put these things in here.

155
00:07:09.300 --> 00:07:12.400
The benefit to using back ticks is that you can

156
00:07:12.400 --> 00:07:13.860
have multi-line strings

157
00:07:13.860 --> 00:07:16.000
and they actually maintain all

158
00:07:16.000 --> 00:07:19.140
of the line breaks that we have inside of them.

159
00:07:19.140 --> 00:07:21.824
So it's actually not necessary to do any of that.

160
00:07:21.824 --> 00:07:23.140
Going to refresh here, take a look.

161
00:07:23.140 --> 00:07:24.530
There's our song.

162
00:07:24.530 --> 00:07:26.320
You'll see, like when I type it,

163
00:07:26.320 --> 00:07:28.910
it will preview it with these little return characters.

164
00:07:28.910 --> 00:07:31.440
That means new line in JavaScript,

165
00:07:31.440 --> 00:07:32.890
and then we actually look at it.

166
00:07:32.890 --> 00:07:35.910
That's going to be extremely helpful for when we want

167
00:07:35.910 --> 00:07:37.760
to make html.

168
00:07:37.760 --> 00:07:40.640
Let's say we have a, build a new one,

169
00:07:40.640 --> 00:07:43.520
so const html is equal to back ticks,

170
00:07:43.520 --> 00:07:45.863
and then inside of that we want like a div.

171
00:07:47.510 --> 00:07:50.240
And then inside of that maybe you want an h2.

172
00:07:50.240 --> 00:07:52.400
Previously, with single and double quotes we had

173
00:07:52.400 --> 00:07:56.410
to do all of that weird like new line stuff.

174
00:07:56.410 --> 00:07:59.020
Or we had to use what is called concatenation,

175
00:07:59.020 --> 00:08:01.600
which let's take a look at that right now.

176
00:08:01.600 --> 00:08:04.110
So, this is sort of, I guess the third benefit

177
00:08:04.110 --> 00:08:05.930
to using back ticks here.

178
00:08:05.930 --> 00:08:08.620
And it's called interpolation and concatenation.

179
00:08:08.620 --> 00:08:11.230
So, let's go through those words real quick.

180
00:08:11.230 --> 00:08:13.880
A concatenation is when two or more strings

181
00:08:13.880 --> 00:08:15.680
are combined into one.

182
00:08:15.680 --> 00:08:18.410
And the word interpolation is when you

183
00:08:18.410 --> 00:08:20.897
put a variable inside of a string.

184
00:08:20.897 --> 00:08:23.870
Let's make a new variable called,

185
00:08:23.870 --> 00:08:26.000
we already have a variable called name.

186
00:08:26.000 --> 00:08:28.440
And let's make a,

187
00:08:28.440 --> 00:08:33.440
hello sentence and if we want to say,

188
00:08:33.935 --> 00:08:38.935
"Hello, my name is", and then we want

189
00:08:40.206 --> 00:08:43.450
to say "nice to meet you".

190
00:08:43.450 --> 00:08:47.300
So, if I want to put my name right in the middle right here.

191
00:08:47.300 --> 00:08:50.430
Previously, with the double and single quotes,

192
00:08:50.430 --> 00:08:53.630
what you have to do is you actually have to

193
00:08:53.630 --> 00:08:57.500
close the quote so you close the string.

194
00:08:57.500 --> 00:09:01.410
You put a plus in there, which is concatenation.

195
00:09:01.410 --> 00:09:05.700
Then you put your variable, then you put another plus,

196
00:09:05.700 --> 00:09:08.530
and then you continue on with opening

197
00:09:08.530 --> 00:09:09.843
your other quote there.

198
00:09:09.843 --> 00:09:12.560
What we did here is we took one string,

199
00:09:12.560 --> 00:09:15.080
and then we added a second string here.

200
00:09:15.080 --> 00:09:18.490
And then we had to do the concatenation in here.

201
00:09:18.490 --> 00:09:20.483
And if we, say, took a look at hello,

202
00:09:21.620 --> 00:09:23.830
and, you see I already goofed that up.

203
00:09:23.830 --> 00:09:25.807
My name is 'iswes', Right?

204
00:09:25.807 --> 00:09:27.483
Now I have to put a space there.

205
00:09:28.740 --> 00:09:30.730
Okay, so, that's how it works

206
00:09:30.730 --> 00:09:33.160
and it also works for single quotes as well.

207
00:09:33.160 --> 00:09:35.540
You can mix and match them if you like.

208
00:09:35.540 --> 00:09:38.399
There's no difference between single and double quotes.

209
00:09:38.399 --> 00:09:42.238
JavaScript doesn't remember what type of quotes you've used.

210
00:09:42.238 --> 00:09:43.137
You might be seeing like

211
00:09:43.137 --> 00:09:45.543
'Oh, like these are, these are double quotes here

212
00:09:45.543 --> 00:09:47.647
'and I made it with single quotes.'

213
00:09:47.647 --> 00:09:50.590
No, a string is a string in JavaScript,

214
00:09:50.590 --> 00:09:52.680
it doesn't remember what type of quotes you used

215
00:09:52.680 --> 00:09:53.513
to make that string.

216
00:09:53.513 --> 00:09:57.210
So, that's what is referred to as concatenation.

217
00:09:57.210 --> 00:09:59.460
And this is sort of how you do interpolation,

218
00:09:59.460 --> 00:10:01.250
meaning this is how you put a variable

219
00:10:01.250 --> 00:10:03.640
in the middle of a string.

220
00:10:03.640 --> 00:10:05.080
And, it's kind of annoying.

221
00:10:05.080 --> 00:10:07.410
Another way that people would do it is

222
00:10:07.410 --> 00:10:12.070
you might say something like, let hello2 is equal

223
00:10:12.070 --> 00:10:15.280
to 'hello my name is', space

224
00:10:16.400 --> 00:10:20.930
and then you would do hello2 is equal to hello2 plus name.

225
00:10:23.920 --> 00:10:28.920
And then you would do it again, hello2 is equal to hello2,

226
00:10:29.790 --> 00:10:33.827
plus space 'Nice to meet you'.

227
00:10:35.330 --> 00:10:36.910
And that's just annoying because essentially,

228
00:10:36.910 --> 00:10:38.030
what we're doing is we're just

229
00:10:38.030 --> 00:10:41.060
overwriting the variable every single line.

230
00:10:41.060 --> 00:10:43.040
So, we're initially creating a variable,

231
00:10:43.040 --> 00:10:45.420
and then we overwrite the variable value

232
00:10:45.420 --> 00:10:49.500
to whatever it was previously plus the new variable,

233
00:10:49.500 --> 00:10:52.500
and let's take a look and see if it actually worked, hello2.

234
00:10:55.332 --> 00:10:58.270
There we go it works but again it's no way

235
00:10:58.270 --> 00:10:59.840
to live your life.

236
00:10:59.840 --> 00:11:02.330
It's awful to work with it.

237
00:11:02.330 --> 00:11:04.090
And also this plus here,

238
00:11:04.090 --> 00:11:06.660
plus is generally used for numbers as we're going

239
00:11:06.660 --> 00:11:07.743
to learn about.

240
00:11:08.830 --> 00:11:10.943
If you use a plus with a string,

241
00:11:12.420 --> 00:11:14.430
it works in concatenation.

242
00:11:14.430 --> 00:11:16.860
So, the plus kind of does two things in JavaScript,

243
00:11:16.860 --> 00:11:19.720
it does numbers, so, one plus one.

244
00:11:19.720 --> 00:11:24.720
But then it also does if I do one plus one I get eleven.

245
00:11:25.560 --> 00:11:28.261
Because I'm adding that or if I do one plus

246
00:11:28.261 --> 00:11:31.580
a string plus a number then I get eleven,

247
00:11:31.580 --> 00:11:35.583
and if I do a number plus a string I also get eleven.

248
00:11:36.660 --> 00:11:41.150
That's ripe for bugs and I hate doing that.

249
00:11:41.150 --> 00:11:44.050
That's where back ticks come in, much nicer.

250
00:11:44.050 --> 00:11:45.720
Let's just comment all this out here.

251
00:11:45.720 --> 00:11:47.400
And we'll just say const hello,

252
00:11:47.400 --> 00:11:52.400
and then we'll use back ticks say 'hello my name is period,

253
00:11:53.920 --> 00:11:57.330
Nice to meet you' and then if you want to interpolate,

254
00:11:57.330 --> 00:11:59.810
if you want to put a variable inside of a string,

255
00:11:59.810 --> 00:12:02.850
you use this syntax dollar sign, curly brackets,

256
00:12:02.850 --> 00:12:05.470
and then you can just put your variable inside of there.

257
00:12:05.470 --> 00:12:10.100
And this syntax here can only ever be used in back ticks,

258
00:12:10.100 --> 00:12:12.210
and that's sort of one of the benefits for always going

259
00:12:12.210 --> 00:12:14.070
with back ticks is that if you ever want

260
00:12:14.070 --> 00:12:16.900
to pop a variable inside of a string you just go ahead,

261
00:12:16.900 --> 00:12:18.150
and use that.

262
00:12:18.150 --> 00:12:20.330
Now if we take a look at hello we see,

263
00:12:20.330 --> 00:12:21.730
it's working very nicely.

264
00:12:21.730 --> 00:12:24.440
Actually almost anything can go inside of these things

265
00:12:24.440 --> 00:12:26.155
as we're going to be learning,

266
00:12:26.155 --> 00:12:30.660
you... maybe can be doing some math.

267
00:12:30.660 --> 00:12:32.880
So, I am...

268
00:12:33.920 --> 00:12:38.920
One plus 100 years old and JavaScript will sort of like,

269
00:12:39.040 --> 00:12:40.810
run whatever it is inside of this.

270
00:12:40.810 --> 00:12:43.340
We're going to learn about bedmass in the future

271
00:12:43.340 --> 00:12:46.040
but just as sort of a look ahead it will run

272
00:12:46.040 --> 00:12:47.620
whatever is inside of that.

273
00:12:47.620 --> 00:12:49.979
Whether it's a variable, or an actual statement,

274
00:12:49.979 --> 00:12:53.400
and then it will return the value as inside of it see.

275
00:12:53.400 --> 00:12:57.500
I am 101 years old, huge benefit to that.

276
00:12:57.500 --> 00:12:59.600
Again, you can do multiple lines with back ticks.

277
00:12:59.600 --> 00:13:02.555
You can do variable interpolation with back ticks.

278
00:13:02.555 --> 00:13:05.550
And then there's even something a little bit more advanced

279
00:13:05.550 --> 00:13:08.000
that's called a tagged template literal.

280
00:13:08.000 --> 00:13:10.251
Which we're not going to look at because we are

281
00:13:10.251 --> 00:13:13.503
not getting into functions just yet.

282
00:13:14.460 --> 00:13:16.350
Finally, this will be really helpful

283
00:13:16.350 --> 00:13:20.140
for creating html, so if I say Const html...

284
00:13:21.720 --> 00:13:24.313
is equal to then we'll do back ticks.

285
00:13:24.313 --> 00:13:27.240
Then inside of that I'll have like a div,

286
00:13:27.240 --> 00:13:28.810
And inside of that I'll have an h2.

287
00:13:28.810 --> 00:13:31.160
And I'll put the person's name,

288
00:13:31.160 --> 00:13:33.900
and then inside of that maybe I'll just put the hello,

289
00:13:33.900 --> 00:13:36.350
maybe inside of a paragraph tag.

290
00:13:36.350 --> 00:13:39.450
And then, I've got all of this html that I've made,

291
00:13:39.450 --> 00:13:41.690
and we'll talk a lot more about creating html.

292
00:13:41.690 --> 00:13:45.330
But, you see that I've just created a string that is html

293
00:13:45.330 --> 00:13:46.910
and we can actually take that,

294
00:13:46.910 --> 00:13:49.440
and dump it into we can say something like

295
00:13:49.440 --> 00:13:54.004
document.body.innerHTML is equal to html.

296
00:13:54.004 --> 00:13:57.270
Again, we're going to go much more into this in the future

297
00:13:57.270 --> 00:13:59.210
as well as some possible security things

298
00:13:59.210 --> 00:14:01.028
that may be happening here.

299
00:14:01.028 --> 00:14:04.500
Don't just start go building a website just yet with this.

300
00:14:04.500 --> 00:14:05.750
But, you see, there we go.

301
00:14:05.750 --> 00:14:08.040
I've just made some html and if I inspect it

302
00:14:08.040 --> 00:14:09.940
you'll see it's a regular, there's our div,

303
00:14:09.940 --> 00:14:12.210
There's our h2 and there's our paragraph tag

304
00:14:12.210 --> 00:14:13.460
that I dumped into it.

305
00:14:13.460 --> 00:14:15.953
So, that is strings, let's jump into numbers.

