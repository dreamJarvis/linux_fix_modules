WEBVTT

1
00:00:00.661 --> 00:00:03.244
(joyful music)

2
00:00:05.400 --> 00:00:07.290
<v ->Why did the developer quit their job?</v>

3
00:00:07.290 --> 00:00:09.520
because they wanted arrays.

4
00:00:09.520 --> 00:00:13.330
We are going to be learning about arrays, finally,

5
00:00:13.330 --> 00:00:15.140
how to create them, how to add items to them,

6
00:00:15.140 --> 00:00:17.020
how to remove items, things like that.

7
00:00:17.020 --> 00:00:18.260
And then in the next section,

8
00:00:18.260 --> 00:00:20.920
we'll go into looping over the array.

9
00:00:20.920 --> 00:00:22.890
So, what is an array?

10
00:00:22.890 --> 00:00:25.720
An array is used for holding a list of items

11
00:00:25.720 --> 00:00:27.160
where the order matters.

12
00:00:27.160 --> 00:00:30.390
Each thing inside of an array is called an item

13
00:00:30.390 --> 00:00:33.340
and its position in the array is called an index.

14
00:00:33.340 --> 00:00:35.880
So the thing is called an item

15
00:00:35.880 --> 00:00:39.340
and where it remains in the array is called an index.

16
00:00:39.340 --> 00:00:42.720
The number of items inside of an array is called a length.

17
00:00:42.720 --> 00:00:45.700
And each item inside of an array can be any type.

18
00:00:45.700 --> 00:00:48.150
So it can be a string, a number, a boolean, an object,

19
00:00:48.150 --> 00:00:50.960
another array, a nested array, you name it.

20
00:00:50.960 --> 00:00:55.430
So let's go and jump into arrays dot html.

21
00:00:55.430 --> 00:00:57.320
I'm gonna give myself a quick little script tag

22
00:00:57.320 --> 00:00:58.840
if it's not there already.

23
00:00:58.840 --> 00:01:02.740
And to create an array, you simply say const.

24
00:01:02.740 --> 00:01:05.290
And we'll use a list of names.

25
00:01:05.290 --> 00:01:06.810
And we use square brackets.

26
00:01:06.810 --> 00:01:10.080
So whereas the curly brackets are for an object,

27
00:01:10.080 --> 00:01:12.540
the square brackets are for noting

28
00:01:12.540 --> 00:01:13.830
you are creating an array.

29
00:01:13.830 --> 00:01:16.620
This is what is referred to as an array literal.

30
00:01:16.620 --> 00:01:18.970
You can also do something like this new array,

31
00:01:18.970 --> 00:01:20.860
just like we looked at doing new number,

32
00:01:20.860 --> 00:01:22.460
new object, things like that.

33
00:01:22.460 --> 00:01:25.410
But almost always, in fact, always in my case,

34
00:01:25.410 --> 00:01:29.090
we are going to be using the array literal syntax here.

35
00:01:29.090 --> 00:01:31.367
Then, to create items inside of an array,

36
00:01:31.367 --> 00:01:36.367
you can simply just say, wes, kait, snickers.

37
00:01:36.670 --> 00:01:39.080
So what I've done there is I've created an array,

38
00:01:39.080 --> 00:01:43.000
three items, every item is separated by a comma.

39
00:01:43.000 --> 00:01:45.280
And we can go ahead and open that up in our browser,

40
00:01:45.280 --> 00:01:46.183
take a look at it.

41
00:01:47.720 --> 00:01:48.893
So we have our names.

42
00:01:50.120 --> 00:01:51.960
And it is an array.

43
00:01:51.960 --> 00:01:54.580
Open it up, you see that we have our three items.

44
00:01:54.580 --> 00:01:56.330
Looks a lot like an object,

45
00:01:56.330 --> 00:01:59.340
except that there are no keys in array.

46
00:01:59.340 --> 00:02:01.050
So that's the sort of the main

47
00:02:01.050 --> 00:02:03.230
difference between an object and an array,

48
00:02:03.230 --> 00:02:05.320
is that an array has no keys,

49
00:02:05.320 --> 00:02:07.410
the keys are always going to be indexes,

50
00:02:07.410 --> 00:02:10.130
meaning these, zero, one, two, three, four, five.

51
00:02:10.130 --> 00:02:12.910
Now, one little sort of thing I can tell you right now

52
00:02:12.910 --> 00:02:16.363
is if we type typeof and names, what are we gonna get?

53
00:02:18.750 --> 00:02:19.583
What?

54
00:02:20.750 --> 00:02:22.590
Type of names is an object.

55
00:02:22.590 --> 00:02:24.070
And you may be going back to like

56
00:02:24.070 --> 00:02:25.300
one of the first videos we did,

57
00:02:25.300 --> 00:02:27.427
where we listed all the types that we have.

58
00:02:27.427 --> 00:02:29.380
And you notice that we didn't

59
00:02:29.380 --> 00:02:31.730
actually say that array was a type.

60
00:02:31.730 --> 00:02:34.000
So an array isn't its own type,

61
00:02:34.000 --> 00:02:36.390
it is just an object at the end of the day,

62
00:02:36.390 --> 00:02:38.100
meaning that it can hold data,

63
00:02:38.100 --> 00:02:40.960
and it has a bunch of methods that live inside of it.

64
00:02:40.960 --> 00:02:44.110
So if you are checking, this is just a bit of an aside,

65
00:02:44.110 --> 00:02:46.860
if you ever wanna know if something is an array,

66
00:02:46.860 --> 00:02:48.580
the way that you should do that

67
00:02:48.580 --> 00:02:53.570
is you take Array.isArray and you pass it names,

68
00:02:53.570 --> 00:02:55.170
and we'll talk about this right here.

69
00:02:55.170 --> 00:02:57.010
This is what's referred to as a static method.

70
00:02:57.010 --> 00:02:59.710
We'll go into that a little bit later on.

71
00:02:59.710 --> 00:03:01.000
That will be true or false,

72
00:03:01.000 --> 00:03:03.633
whether something is an array or not.

73
00:03:05.000 --> 00:03:06.630
You see, that gives you false.

74
00:03:06.630 --> 00:03:09.010
All right, so we've got this names array here.

75
00:03:09.010 --> 00:03:12.910
And if you want to access things from the array,

76
00:03:12.910 --> 00:03:13.980
how do you do it, right?

77
00:03:13.980 --> 00:03:16.400
Because we can't just say names.wes

78
00:03:16.400 --> 00:03:18.050
because that's object.

79
00:03:18.050 --> 00:03:18.883
That's an object.

80
00:03:18.883 --> 00:03:21.070
That's how you access properties in an object.

81
00:03:21.070 --> 00:03:23.930
So if you wanna access things inside of an array,

82
00:03:23.930 --> 00:03:24.867
you use their index.

83
00:03:24.867 --> 00:03:29.090
So again, console.log names and we'll use

84
00:03:29.090 --> 00:03:30.030
square bracket one.

85
00:03:30.030 --> 00:03:31.525
So that should give us what?

86
00:03:31.525 --> 00:03:34.290
You think it should give us the first item in the array?

87
00:03:34.290 --> 00:03:38.220
So we'll refresh and we'll see wes, kait, what?

88
00:03:38.220 --> 00:03:41.110
One, what's two?

89
00:03:41.110 --> 00:03:44.660
So there's three items, two should give us snickers.

90
00:03:44.660 --> 00:03:47.200
So what does three?

91
00:03:47.200 --> 00:03:48.470
What's going on here?

92
00:03:48.470 --> 00:03:51.160
Well, I'd like to tell you

93
00:03:51.160 --> 00:03:54.950
that arrays are what are referred to as zero based,

94
00:03:54.950 --> 00:03:58.820
meaning the counting starts at zero

95
00:03:58.820 --> 00:04:02.050
and the two little things I like to tell everybody

96
00:04:02.050 --> 00:04:03.430
when we're talking about zero base,

97
00:04:03.430 --> 00:04:04.810
so that you'll remember them.

98
00:04:04.810 --> 00:04:08.590
First of all, I went to McDonald's once.

99
00:04:08.590 --> 00:04:12.390
And I once got, I was order number zero.

100
00:04:12.390 --> 00:04:14.820
And then I went to McDonald's another time,

101
00:04:14.820 --> 00:04:17.450
and I was ordered number 99.

102
00:04:17.450 --> 00:04:19.250
And it was just so

103
00:04:19.250 --> 00:04:22.690
that the numbers were huge on the receipt.

104
00:04:22.690 --> 00:04:24.960
And they had enough space on the receipt

105
00:04:24.960 --> 00:04:27.390
to fit up to two numbers.

106
00:04:27.390 --> 00:04:29.970
But their ordering system did

107
00:04:29.970 --> 00:04:31.700
like a hundred numbers at once, right.

108
00:04:31.700 --> 00:04:33.320
And then once you hit order a hundred,

109
00:04:33.320 --> 00:04:35.190
it rolls over and starts again.

110
00:04:35.190 --> 00:04:38.900
So, what they did is instead of going from one to a hundred,

111
00:04:38.900 --> 00:04:41.890
because then order 100 wouldn't fit on the receipt,

112
00:04:41.890 --> 00:04:46.010
they started at zero based, going from zero to 99.

113
00:04:46.010 --> 00:04:48.580
And that still gives you a full hundred orders.

114
00:04:48.580 --> 00:04:49.973
So that's my first story.

115
00:04:51.130 --> 00:04:53.800
My second story is that when I got married,

116
00:04:53.800 --> 00:04:55.790
we had a table zero.

117
00:04:55.790 --> 00:05:00.330
So I think we had, the last table that we had was 23,

118
00:05:00.330 --> 00:05:02.680
meaning that we had how many tables?

119
00:05:02.680 --> 00:05:05.880
24, because we had zero based our tables,

120
00:05:05.880 --> 00:05:08.620
the head table was zero and it went up.

121
00:05:08.620 --> 00:05:10.920
That was very confusing to the people

122
00:05:10.920 --> 00:05:11.900
that were working there.

123
00:05:11.900 --> 00:05:13.640
And I wouldn't recommend it,

124
00:05:13.640 --> 00:05:16.350
unless you're a hardcore developer like me.

125
00:05:16.350 --> 00:05:19.350
So in order to access the first item in an array,

126
00:05:19.350 --> 00:05:24.350
you just console log the first item with a zero.

127
00:05:25.540 --> 00:05:28.850
Now if I were to check how many items are in here,

128
00:05:28.850 --> 00:05:32.660
so console log, names, we can use .length

129
00:05:32.660 --> 00:05:35.020
Similarly we use with maps, we use size.

130
00:05:35.020 --> 00:05:36.730
But with an array, we use length

131
00:05:36.730 --> 00:05:38.650
to see how many items are in the array.

132
00:05:38.650 --> 00:05:42.170
And that is not zero based, okay.

133
00:05:42.170 --> 00:05:45.450
So if you wanna access things based on their index,

134
00:05:45.450 --> 00:05:46.283
it is zero base.

135
00:05:46.283 --> 00:05:48.870
But if you wanna know how many items are in the array,

136
00:05:48.870 --> 00:05:50.940
it is not zero base that's going to tell us

137
00:05:50.940 --> 00:05:52.383
how many items are in there.

138
00:05:54.280 --> 00:05:57.420
Now if I wanna get the last item of this names array,

139
00:05:57.420 --> 00:06:00.910
I could console log, names, square bracket, two,

140
00:06:00.910 --> 00:06:03.520
and that will obviously give us snickers.

141
00:06:03.520 --> 00:06:07.090
But if I don't know how long this array is,

142
00:06:07.090 --> 00:06:09.710
like what if I did this?

143
00:06:09.710 --> 00:06:13.380
This is going to be bananas, there.

144
00:06:13.380 --> 00:06:16.990
I have no idea how many items are in this array, right.

145
00:06:16.990 --> 00:06:19.490
If I take a look at, oh now I know, it's 27.

146
00:06:19.490 --> 00:06:22.820
But if I didn't know how many items were in this array,

147
00:06:22.820 --> 00:06:25.000
how would I access the last one?

148
00:06:25.000 --> 00:06:26.850
Well, what you could do is, you could

149
00:06:27.980 --> 00:06:32.980
take the length property and use that as a reference

150
00:06:33.060 --> 00:06:34.970
to see how many items are in the array.

151
00:06:34.970 --> 00:06:36.170
So let's let's try that.

152
00:06:38.720 --> 00:06:39.900
Undefined.

153
00:06:39.900 --> 00:06:40.810
Why is that?

154
00:06:40.810 --> 00:06:45.810
That's because names 27 is nothing.

155
00:06:46.250 --> 00:06:51.250
Names 26 is actually the last item that we have there.

156
00:06:51.600 --> 00:06:54.660
By the way, this is a trailing comma, totally fine.

157
00:06:54.660 --> 00:06:56.530
You can do that if you like.

158
00:06:56.530 --> 00:06:59.430
So how do we access the last item using the length?

159
00:06:59.430 --> 00:07:00.840
You just take one Whatever the length is,

160
00:07:00.840 --> 00:07:02.650
and you minus one from that,

161
00:07:02.650 --> 00:07:04.967
and that will return the last one.

162
00:07:04.967 --> 00:07:06.963
And we can see that snickers is the last one,

163
00:07:06.963 --> 00:07:09.050
we change that to last one.

164
00:07:09.050 --> 00:07:13.270
Here, we have actual access to it.

165
00:07:13.270 --> 00:07:17.570
Now, an array is loaded with a whole bunch of methods

166
00:07:17.570 --> 00:07:18.590
for working with it.

167
00:07:18.590 --> 00:07:20.900
We've already sort of peeked forward

168
00:07:20.900 --> 00:07:24.820
into dot for each, which is for looping.

169
00:07:24.820 --> 00:07:27.990
However, the array prototype

170
00:07:27.990 --> 00:07:29.360
has all kinds of little methods

171
00:07:29.360 --> 00:07:32.080
for adding and removing and finding things

172
00:07:32.080 --> 00:07:33.280
inside of the array.

173
00:07:33.280 --> 00:07:35.393
So if we take a look at names.

174
00:07:37.910 --> 00:07:40.783
I'm gonna move this back just to three items.

175
00:07:42.920 --> 00:07:44.700
And now we look at names,

176
00:07:44.700 --> 00:07:47.390
open it up, open up the prototype,

177
00:07:47.390 --> 00:07:50.340
and you'll see there's concat, copyWithin,

178
00:07:50.340 --> 00:07:55.060
fill, find, pop, push, snap, crackle, pop, join, index,

179
00:07:55.060 --> 00:07:57.930
all kinds of neat things for working with an array

180
00:07:57.930 --> 00:08:00.900
and I'm not gonna make you sit here

181
00:08:00.900 --> 00:08:02.420
and I'm gonna show you how absolutely

182
00:08:02.420 --> 00:08:03.971
every single one works.

183
00:08:03.971 --> 00:08:06.380
We'll go through some of the more important ones.

184
00:08:06.380 --> 00:08:07.500
And I think more importantly,

185
00:08:07.500 --> 00:08:11.130
we're gonna be learning about this idea of immutability,

186
00:08:11.130 --> 00:08:13.801
and mutable and immutable.

187
00:08:13.801 --> 00:08:15.780
Because I think that's much more important.

188
00:08:15.780 --> 00:08:18.250
And you can read the docs as to how they work.

189
00:08:18.250 --> 00:08:19.980
And we're gonna be using them all throughout

190
00:08:19.980 --> 00:08:21.880
all of the exercises that we do in this course.

191
00:08:21.880 --> 00:08:25.210
So, let's talk about this kind of scary word

192
00:08:25.210 --> 00:08:27.487
of mutable and immutable right now.

193
00:08:27.487 --> 00:08:29.070
And we've mentioned it a few times,

194
00:08:29.070 --> 00:08:31.120
but let's go over it again.

195
00:08:31.120 --> 00:08:34.700
Mutable methods perform mutations.

196
00:08:34.700 --> 00:08:37.490
If you think about the Teenage Mutant Ninja Turtles.

197
00:08:37.490 --> 00:08:39.480
Why were they mutants?

198
00:08:39.480 --> 00:08:40.980
Because they were, one thing,

199
00:08:40.980 --> 00:08:42.770
they were just regular turtles,

200
00:08:42.770 --> 00:08:46.770
and then they mutated into like teenagers

201
00:08:46.770 --> 00:08:48.380
and they had powers, right,

202
00:08:48.380 --> 00:08:49.750
and they wore cool bandanas.

203
00:08:49.750 --> 00:08:54.100
So, when something changes the original version of it,

204
00:08:54.100 --> 00:08:58.120
that is what is referred to as a mutation.

205
00:08:58.120 --> 00:08:59.370
Now we have this other thing

206
00:08:59.370 --> 00:09:01.660
which is referred to as immutable,

207
00:09:01.660 --> 00:09:05.020
meaning the methods do not change the original thing,

208
00:09:05.020 --> 00:09:08.050
but they simply return a new array.

209
00:09:08.050 --> 00:09:09.540
So let's go into a couple examples

210
00:09:09.540 --> 00:09:12.080
that will sorta illustrate how things work.

211
00:09:12.080 --> 00:09:16.160
So we'll first look at a mutation method.

212
00:09:16.160 --> 00:09:20.130
If we have a new array of numbers,

213
00:09:20.130 --> 00:09:22.510
and we do something, let's just one, two, three, four,

214
00:09:22.510 --> 00:09:25.190
five, six, seven, eight, nine,

215
00:09:25.190 --> 00:09:28.870
and I were to call numbers.reverse

216
00:09:28.870 --> 00:09:32.020
and store that result in a new variables

217
00:09:32.020 --> 00:09:35.040
called numbersBackwards

218
00:09:36.510 --> 00:09:39.313
and console log numbersBackwards.

219
00:09:40.620 --> 00:09:41.600
What are we gonna get there?

220
00:09:41.600 --> 00:09:43.220
Is that gonna be that the array reversed?

221
00:09:43.220 --> 00:09:45.110
Is it gonna be something?

222
00:09:45.110 --> 00:09:45.943
It is.

223
00:09:45.943 --> 00:09:49.140
It gives us the array that has been reversed.

224
00:09:49.140 --> 00:09:53.010
Now if I were then to console log numbers,

225
00:09:53.010 --> 00:09:58.010
my question is, is the original array still in this order?

226
00:09:58.580 --> 00:09:59.900
Or has it been deleted?

227
00:09:59.900 --> 00:10:00.910
Has it been removed?

228
00:10:00.910 --> 00:10:02.610
Has it been changed in any way?

229
00:10:02.610 --> 00:10:04.240
Has it been changed?

230
00:10:04.240 --> 00:10:05.880
Meaning has it been mutated?

231
00:10:05.880 --> 00:10:06.973
Now let's refresh.

232
00:10:08.360 --> 00:10:11.760
So, the original array has actually

233
00:10:11.760 --> 00:10:14.640
also been reversed as well.

234
00:10:14.640 --> 00:10:16.800
And that is what is referred to as a mutation,

235
00:10:16.800 --> 00:10:18.430
meaning that the original data

236
00:10:18.430 --> 00:10:22.640
has been changed from what it was initially set out to be.

237
00:10:22.640 --> 00:10:24.080
Now, so we don't even need

238
00:10:24.080 --> 00:10:27.380
to have the secondary variable right here,

239
00:10:27.380 --> 00:10:29.600
we simply just have to run reverse,

240
00:10:29.600 --> 00:10:31.640
and that will mutate itself.

241
00:10:31.640 --> 00:10:34.160
Now that's not necessarily bad,

242
00:10:34.160 --> 00:10:36.200
or incorrect or something,

243
00:10:36.200 --> 00:10:37.740
it's just something to know about.

244
00:10:37.740 --> 00:10:39.510
JavaScript is that some methods

245
00:10:39.510 --> 00:10:41.890
will modify the original array,

246
00:10:41.890 --> 00:10:44.350
whereas some will just create a new array

247
00:10:44.350 --> 00:10:46.460
and leave the original one intact.

248
00:10:46.460 --> 00:10:49.300
And if you spend any time around,

249
00:10:49.300 --> 00:10:51.330
like functional programmers,

250
00:10:51.330 --> 00:10:53.820
or a lot of React developers,

251
00:10:53.820 --> 00:10:55.710
we sorta have this mantra of like,

252
00:10:55.710 --> 00:10:57.890
don't actually mutate the original array,

253
00:10:57.890 --> 00:11:00.140
just create like a new version of it.

254
00:11:00.140 --> 00:11:01.940
That is the modified version.

255
00:11:01.940 --> 00:11:05.810
So what's an immutable example of one of the methods?

256
00:11:05.810 --> 00:11:07.810
Well, if we take our numbers here,

257
00:11:07.810 --> 00:11:09.840
and I'm gonna comment out this reverse here,

258
00:11:09.840 --> 00:11:11.800
because I don't actually want it to reverse,

259
00:11:11.800 --> 00:11:14.200
and we use the slice method.

260
00:11:14.200 --> 00:11:16.320
The slice method will allow us to take

261
00:11:16.320 --> 00:11:20.810
a portion of the array and make it into our own array.

262
00:11:20.810 --> 00:11:22.610
So if I wanna take a slice,

263
00:11:22.610 --> 00:11:26.463
I wanna take numbers two through four,

264
00:11:27.560 --> 00:11:29.470
and stick that into a new array.

265
00:11:29.470 --> 00:11:31.617
So we'll call that pizzaSlice

266
00:11:35.880 --> 00:11:38.462
and console log pizzaSlice,

267
00:11:38.462 --> 00:11:40.360
you'll see, what we've done here is

268
00:11:40.360 --> 00:11:42.980
we've gone from index two,

269
00:11:42.980 --> 00:11:44.570
which is the third item

270
00:11:44.570 --> 00:11:46.770
and stopped at four.

271
00:11:46.770 --> 00:11:50.540
And that returns us the sort of a subset of an array.

272
00:11:50.540 --> 00:11:53.240
So if you ever wanna take sort of a chunk of an array out,

273
00:11:53.240 --> 00:11:54.710
you can use slice.

274
00:11:54.710 --> 00:11:57.150
Now the question is, if I were to console log

275
00:11:57.150 --> 00:11:59.470
the original numbers array,

276
00:11:59.470 --> 00:12:02.960
is that three and four going to be taken out of here?

277
00:12:02.960 --> 00:12:03.793
No, it's not.

278
00:12:03.793 --> 00:12:06.030
You see, it's there and it's there.

279
00:12:06.030 --> 00:12:08.890
So that is referred to as immutable methods,

280
00:12:08.890 --> 00:12:13.890
meaning they do not change the original data,

281
00:12:14.190 --> 00:12:17.760
and mutable or mutation methods,

282
00:12:17.760 --> 00:12:21.270
they do change the original data.

283
00:12:23.740 --> 00:12:25.130
So this is a huge source.

284
00:12:25.130 --> 00:12:27.550
I literally have gotten bitten by that bug

285
00:12:27.550 --> 00:12:29.430
a couple months ago with the reverse,

286
00:12:29.430 --> 00:12:34.220
I forgot that reverse was a mutable method.

287
00:12:34.220 --> 00:12:35.810
So it actually bit me because

288
00:12:35.810 --> 00:12:37.410
it was reversing the original one.

289
00:12:37.410 --> 00:12:39.840
And then the second time I ran it, it reversed it back.

290
00:12:39.840 --> 00:12:41.610
And I was running into this loop where

291
00:12:41.610 --> 00:12:44.550
every other time that it was reversed in the wrong order.

292
00:12:44.550 --> 00:12:49.550
So what's someone to do if one of your methods is mutable,

293
00:12:49.590 --> 00:12:52.720
and you don't want it to actually mutate it?

294
00:12:52.720 --> 00:12:54.120
So we'll do a little comment here.

295
00:12:54.120 --> 00:12:56.830
We'll say anytime you want to

296
00:12:58.420 --> 00:13:01.680
use a mutation method

297
00:13:01.680 --> 00:13:05.600
and not mutate the original array,

298
00:13:05.600 --> 00:13:07.550
there's certainly lots of situations

299
00:13:07.550 --> 00:13:09.980
where you're fine with mutating the array

300
00:13:09.980 --> 00:13:12.910
and if that's the case then just go ahead along your day.

301
00:13:12.910 --> 00:13:14.530
But if there is a case where you're like,

302
00:13:14.530 --> 00:13:16.750
I need to leave this original data intact,

303
00:13:16.750 --> 00:13:18.350
and just change the new one,

304
00:13:18.350 --> 00:13:22.410
you need to take a copy of the original array.

305
00:13:22.410 --> 00:13:25.860
So we need to take a copy of the array.

306
00:13:25.860 --> 00:13:27.040
So what we'll do here is we'll say

307
00:13:27.040 --> 00:13:31.180
const numbersReversed is equal to,

308
00:13:31.180 --> 00:13:32.980
and we'll take a new array.

309
00:13:32.980 --> 00:13:34.310
And how do we copy an array?

310
00:13:34.310 --> 00:13:37.800
Well, we can spread the old one into it.

311
00:13:37.800 --> 00:13:40.253
So numbers, let's take a look here.

312
00:13:41.700 --> 00:13:43.830
Console log numbersReversed.

313
00:13:43.830 --> 00:13:46.030
So online 26,

314
00:13:46.030 --> 00:13:47.010
that's this one right here.

315
00:13:47.010 --> 00:13:49.380
We've got a new version of it.

316
00:13:49.380 --> 00:13:52.490
And then we can just call reverse on it.

317
00:13:52.490 --> 00:13:55.040
So numbersReversed.reverse

318
00:13:56.670 --> 00:13:59.880
and now you'll see that that is being reversed

319
00:13:59.880 --> 00:14:02.650
where the other one is still intact.

320
00:14:02.650 --> 00:14:05.010
More likely, I'm gonna do something like this,

321
00:14:05.010 --> 00:14:07.350
where I just immediately call the method

322
00:14:07.350 --> 00:14:09.350
on the array that was created.

323
00:14:09.350 --> 00:14:11.290
And in that case, it's just a one liner,

324
00:14:11.290 --> 00:14:13.660
and then you have a nice variable that makes sense to you.

325
00:14:13.660 --> 00:14:16.040
Let's check, there, that still works fine.

326
00:14:16.040 --> 00:14:18.030
The original one is still intact.

327
00:14:18.030 --> 00:14:22.080
So again, anytime you use a mutation method,

328
00:14:22.080 --> 00:14:23.400
then you...

329
00:14:26.270 --> 00:14:28.520
So again, anytime you use a mutation method,

330
00:14:28.520 --> 00:14:30.460
you must take a copy of it

331
00:14:30.460 --> 00:14:32.640
if you don't want to modify the original array.

332
00:14:32.640 --> 00:14:35.920
So we'll, as we learn all of these different methods,

333
00:14:35.920 --> 00:14:37.780
most of them are immutable.

334
00:14:37.780 --> 00:14:41.760
There's just a couple that sort of are sort of gotchas.

335
00:14:41.760 --> 00:14:44.320
So let's keep going with this names array up here.

336
00:14:44.320 --> 00:14:47.323
So I'm going to just comment out all of this right here.

337
00:14:48.360 --> 00:14:50.890
And let's talk about just working with this names array.

338
00:14:50.890 --> 00:14:53.700
So the most basic thing that you'll want to do

339
00:14:53.700 --> 00:14:56.180
with an array is to add items to it.

340
00:14:56.180 --> 00:14:59.050
And for that, we use the push array.

341
00:14:59.050 --> 00:15:00.810
So we'll take our names array here,

342
00:15:00.810 --> 00:15:02.390
we'll call .push

343
00:15:02.390 --> 00:15:04.510
and you can add lux.

344
00:15:04.510 --> 00:15:07.853
Now, if you console log, names,

345
00:15:08.941 --> 00:15:11.633
you'll see we've got four items in our array.

346
00:15:13.320 --> 00:15:16.740
This does mutate the original array,

347
00:15:16.740 --> 00:15:17.950
like we just said.

348
00:15:17.950 --> 00:15:20.760
So if that's the case where you want to

349
00:15:20.760 --> 00:15:24.363
add an item to the array, but keep the original one intact,

350
00:15:25.276 --> 00:15:27.730
then what you could do is you could say const names2

351
00:15:27.730 --> 00:15:29.550
is equal to a new array,

352
00:15:29.550 --> 00:15:33.450
you spread the old one into it,

353
00:15:33.450 --> 00:15:35.820
and then you can simply just add the new one

354
00:15:35.820 --> 00:15:36.840
in line with it.

355
00:15:36.840 --> 00:15:38.670
There's no need to actually push it in.

356
00:15:38.670 --> 00:15:39.730
We're just creating a new array,

357
00:15:39.730 --> 00:15:41.650
taking a copy of everything else,

358
00:15:41.650 --> 00:15:43.173
and then adding it into there.

359
00:15:44.110 --> 00:15:46.700
That's a pretty common thing to do in React land,

360
00:15:46.700 --> 00:15:50.510
because you don't want to push items into state,

361
00:15:50.510 --> 00:15:52.850
you wanna take a copy and update state.

362
00:15:52.850 --> 00:15:54.770
So, a little bit of a gotcha there,

363
00:15:54.770 --> 00:15:57.950
but that's how we would sorta get around that.

364
00:15:57.950 --> 00:16:02.150
If you want to add an item to the front of an array.

365
00:16:02.150 --> 00:16:05.030
So if we wanna, let's say we wanna add poppy,

366
00:16:05.030 --> 00:16:07.750
we'll say names dot and the, you think like so

367
00:16:07.750 --> 00:16:10.260
like push is to add it to the end.

368
00:16:10.260 --> 00:16:14.310
So clearly unshift is to add it to (chuckling)

369
00:16:14.310 --> 00:16:17.010
it's not pull, unfortunately it's unshift.

370
00:16:17.010 --> 00:16:19.390
And then we simply just add poppy

371
00:16:19.390 --> 00:16:21.123
and that will add it to the front.

372
00:16:23.240 --> 00:16:25.060
We have names at the front.

373
00:16:25.060 --> 00:16:27.510
The immutable way to do that would be

374
00:16:27.510 --> 00:16:29.020
to create a new variable

375
00:16:32.690 --> 00:16:33.940
and make an array,

376
00:16:33.940 --> 00:16:36.310
copy everything that we have so far,

377
00:16:36.310 --> 00:16:37.890
and then add it to the front.

378
00:16:37.890 --> 00:16:41.050
So if that was the case, we would add it right here.

379
00:16:41.050 --> 00:16:44.217
And then do that, and console log names3.

380
00:16:47.310 --> 00:16:48.540
See it's now added to the front.

381
00:16:48.540 --> 00:16:50.150
Oh, I have a second poppy because

382
00:16:50.150 --> 00:16:53.610
I had added it to the item before I made a copy,

383
00:16:53.610 --> 00:16:56.030
but you probably get the point there.

384
00:16:56.030 --> 00:16:58.360
Now let's talk about the two methods

385
00:16:58.360 --> 00:17:02.780
that you will forever goof up in your life.

386
00:17:02.780 --> 00:17:04.310
And that is slice and splice.

387
00:17:04.310 --> 00:17:07.400
I've already talked to you about slice

388
00:17:07.400 --> 00:17:10.060
and what we said a slice will allow you to take

389
00:17:10.060 --> 00:17:12.730
a portion of the original array.

390
00:17:12.730 --> 00:17:14.760
But there also is splice.

391
00:17:14.760 --> 00:17:18.200
They're both used for grabbing a subset of the array,

392
00:17:18.200 --> 00:17:23.200
whereas slice is immutable and splice is mutable.

393
00:17:23.660 --> 00:17:25.130
So let's go take a look at,

394
00:17:25.130 --> 00:17:30.130
we'll say MDN array splice and MDN array slice.

395
00:17:32.560 --> 00:17:34.100
Actually, I'm going to reorder this

396
00:17:34.100 --> 00:17:37.763
so we do slice first and splice second.

397
00:17:39.580 --> 00:17:41.940
And we'll see here slice returns a shallow copy

398
00:17:41.940 --> 00:17:45.210
of a portion of an array from the beginning and the end.

399
00:17:45.210 --> 00:17:47.710
The end is not included, that's non inclusive.

400
00:17:47.710 --> 00:17:50.810
So meaning that when we did the slice right here,

401
00:17:50.810 --> 00:17:53.270
four, it didn't take the fourth item,

402
00:17:53.270 --> 00:17:55.623
it stopped at the third item.

403
00:17:57.070 --> 00:17:58.960
Whereas we have splice here,

404
00:17:58.960 --> 00:18:03.890
this will actually take the item out of the original array.

405
00:18:03.890 --> 00:18:06.950
The other little gotcha is that there's no start and end,

406
00:18:06.950 --> 00:18:10.510
whereas this one has a start and an end.

407
00:18:10.510 --> 00:18:14.660
This one has a start and how many should you go for.

408
00:18:14.660 --> 00:18:17.300
So if you wanna start for one and delete five,

409
00:18:17.300 --> 00:18:18.480
that's where you would use splice.

410
00:18:18.480 --> 00:18:21.840
So let's take a look at this numbers example right here.

411
00:18:21.840 --> 00:18:23.940
I'll just paste it right here.

412
00:18:23.940 --> 00:18:26.910
And it would say numbers.splice

413
00:18:26.910 --> 00:18:31.690
let's say we start at three and go for two,

414
00:18:31.690 --> 00:18:33.670
six would run out.

415
00:18:33.670 --> 00:18:35.110
And then console log numbers.

416
00:18:35.110 --> 00:18:37.573
Let's do it once before and once after.

417
00:18:40.230 --> 00:18:42.330
You'll see before we have one through nine,

418
00:18:42.330 --> 00:18:45.930
after we have one, two, three, four and five are missing.

419
00:18:45.930 --> 00:18:50.260
So we started at the third slot, went for two,

420
00:18:50.260 --> 00:18:52.990
so killed four, killed five, and then

421
00:18:52.990 --> 00:18:55.580
six, seven, eight, nine, are still intact.

422
00:18:55.580 --> 00:19:00.580
So that is mutable or as slice will

423
00:19:00.870 --> 00:19:03.480
just return a new array, leaving the original intact.

424
00:19:03.480 --> 00:19:07.740
So, all that to say, you probably want to use slice.

425
00:19:07.740 --> 00:19:08.970
How do you remember that?

426
00:19:08.970 --> 00:19:11.670
You probably want a slice of pizza, right?

427
00:19:11.670 --> 00:19:14.520
Because, that's a bad example

428
00:19:14.520 --> 00:19:16.890
because if you take a slice of pizza,

429
00:19:16.890 --> 00:19:20.510
it's not like the pizza would just magically heal itself.

430
00:19:20.510 --> 00:19:22.810
And then, that would be amazing

431
00:19:22.810 --> 00:19:25.570
if you had a pizza that you took a slice out,

432
00:19:25.570 --> 00:19:28.910
and it just immediately grew another piece.

433
00:19:28.910 --> 00:19:29.743
But that's not the case.

434
00:19:29.743 --> 00:19:31.690
But you probably want slice because

435
00:19:31.690 --> 00:19:35.100
it does not mutate the original array, splice will.

436
00:19:35.100 --> 00:19:37.220
You can think of you're splicing into the array,

437
00:19:37.220 --> 00:19:39.513
you're taking something out of it.

438
00:19:40.730 --> 00:19:43.240
Now let's talk about adding items to the middle.

439
00:19:43.240 --> 00:19:44.350
Just comment that out.

440
00:19:44.350 --> 00:19:47.350
So we looked at adding to the end,

441
00:19:47.350 --> 00:19:49.230
we looked at adding to the front.

442
00:19:49.230 --> 00:19:52.760
If you wanna add items into the middle of an array,

443
00:19:52.760 --> 00:19:56.610
it is best to use this spread method that we have.

444
00:19:56.610 --> 00:20:00.350
So if I've got an array of bikes.

445
00:20:00.350 --> 00:20:02.000
I'm gonna paste this in here.

446
00:20:02.000 --> 00:20:05.170
We've got bianchi, miele, panasonic and miyata.

447
00:20:05.170 --> 00:20:10.170
And I want to add benotto in between miele and panasonic.

448
00:20:10.920 --> 00:20:12.660
So, how would I do that?

449
00:20:12.660 --> 00:20:15.720
There is no method to insert an item

450
00:20:15.720 --> 00:20:19.450
at a specific index and have the rest push over.

451
00:20:19.450 --> 00:20:22.490
We'll say const newBikes is equal to,

452
00:20:22.490 --> 00:20:24.970
and what we do is we create a new array.

453
00:20:24.970 --> 00:20:28.580
and then you, I'm gonna put this all on its own line here.

454
00:20:28.580 --> 00:20:30.760
So this is, arrays can be multi line,

455
00:20:30.760 --> 00:20:32.140
there's no difference there.

456
00:20:32.140 --> 00:20:35.260
And we take all of the items before that we want,

457
00:20:35.260 --> 00:20:39.830
so dot dot dot, we'll say bikes.slice

458
00:20:39.830 --> 00:20:42.173
we'll start at zero and we'll go to two.

459
00:20:43.235 --> 00:20:46.550
And what that will do, let's just console log new bikes.

460
00:20:46.550 --> 00:20:48.570
Let's see what we got so far.

461
00:20:48.570 --> 00:20:50.377
So we've got bianchi and miele.

462
00:20:50.377 --> 00:20:52.830
So we took the first two.

463
00:20:52.830 --> 00:20:56.123
Then what we'll do is we'll add our new item, benotto.

464
00:20:59.300 --> 00:21:00.940
Okay, so now we've got bianchi, miele,

465
00:21:00.940 --> 00:21:02.880
and then we added the new item, benotto,

466
00:21:02.880 --> 00:21:05.750
and then we wanna take everything else after that.

467
00:21:05.750 --> 00:21:06.990
And we'll spread it into there.

468
00:21:06.990 --> 00:21:09.050
So we'll say bikes.slice

469
00:21:09.050 --> 00:21:12.330
and we want to start at three,

470
00:21:12.330 --> 00:21:15.540
and go for, go until the end.

471
00:21:15.540 --> 00:21:17.600
And if that's the case, you might think like,

472
00:21:17.600 --> 00:21:19.130
oh, just put a really high number in there,

473
00:21:19.130 --> 00:21:20.420
you can even pass it infinity,

474
00:21:20.420 --> 00:21:22.100
but you don't need to do that.

475
00:21:22.100 --> 00:21:24.230
You just say start at three.

476
00:21:24.230 --> 00:21:25.550
And if you don't pass it to end,

477
00:21:25.550 --> 00:21:28.060
it will just go to the end of the array for you.

478
00:21:28.060 --> 00:21:31.250
And what we've done there is we've taken,

479
00:21:31.250 --> 00:21:33.270
oh, that is wrong.

480
00:21:33.270 --> 00:21:34.210
Look at it.

481
00:21:34.210 --> 00:21:35.223
Look what happened.

482
00:21:36.280 --> 00:21:37.540
We have to start at two

483
00:21:39.000 --> 00:21:41.770
and go, I forgot panasonic there.

484
00:21:41.770 --> 00:21:42.603
Beautiful.

485
00:21:42.603 --> 00:21:44.340
So bianchi, miele, our new one,

486
00:21:44.340 --> 00:21:47.850
and then we started again at two and moved on.

487
00:21:47.850 --> 00:21:50.180
The reason why I put three there

488
00:21:50.180 --> 00:21:52.600
is because of the next example,

489
00:21:52.600 --> 00:21:55.780
which is removing an item from the array.

490
00:21:55.780 --> 00:21:59.150
So now if I wanted to remove panasonic from this array,

491
00:21:59.150 --> 00:22:00.120
let's do that.

492
00:22:00.120 --> 00:22:05.023
So const newBikes2 will create a new array.

493
00:22:06.760 --> 00:22:11.130
And now we need to take everything up until panasonic.

494
00:22:11.130 --> 00:22:16.130
So, panasonic is the one, two, three, fourth one.

495
00:22:16.260 --> 00:22:19.210
So we'll say a newBikes.slice

496
00:22:19.210 --> 00:22:23.210
we'll start at zero and we'll go to the third one.

497
00:22:23.210 --> 00:22:25.253
Let's console log that.

498
00:22:26.790 --> 00:22:28.540
See how we're doing.

499
00:22:28.540 --> 00:22:30.210
Bianchi, miele, benatto.

500
00:22:30.210 --> 00:22:31.043
Okay.

501
00:22:31.043 --> 00:22:34.980
And then we will take everything after the panasonic one.

502
00:22:34.980 --> 00:22:37.800
So newBikes.slice

503
00:22:37.800 --> 00:22:42.730
and we'll start at four and go to the end.

504
00:22:42.730 --> 00:22:45.160
And you'll see that we've now removed panasonic.

505
00:22:45.160 --> 00:22:45.993
Why?

506
00:22:45.993 --> 00:22:49.200
Because we took everything up until panasonic,

507
00:22:49.200 --> 00:22:53.590
we skipped one and started with a one plus there

508
00:22:53.590 --> 00:22:54.680
and then went to the end.

509
00:22:54.680 --> 00:22:56.730
That's how you remove an item from an array.

510
00:22:56.730 --> 00:23:00.760
That's a very common thing to do in single page apps,

511
00:23:00.760 --> 00:23:02.660
in React, in Angular, something like that,

512
00:23:02.660 --> 00:23:05.960
where if you need to take an item out of an array,

513
00:23:05.960 --> 00:23:09.530
you basically find where that thing is in the array,

514
00:23:09.530 --> 00:23:12.990
and then use its index to remove it.

515
00:23:12.990 --> 00:23:14.870
Let's do an example just like that.

516
00:23:14.870 --> 00:23:17.180
Because honestly, that's pretty common thing

517
00:23:17.180 --> 00:23:19.580
for me to do in React World.

518
00:23:19.580 --> 00:23:22.220
So if we have a bunch of comments,

519
00:23:22.220 --> 00:23:24.883
so const comments is equal to this.

520
00:23:26.160 --> 00:23:31.160
And we, each item in the comment is an object,

521
00:23:31.760 --> 00:23:35.880
so the text would be Cool Beans,

522
00:23:35.880 --> 00:23:38.970
and the idea of the comment will be 123.

523
00:23:38.970 --> 00:23:40.420
Now I'm just gonna duplicate this,

524
00:23:40.420 --> 00:23:42.780
maybe four or five times.

525
00:23:42.780 --> 00:23:44.890
So just go ahead and do this yourself now.

526
00:23:44.890 --> 00:23:46.733
So one, two, three, four, five.

527
00:23:47.990 --> 00:23:50.550
All right, so I've got a bunch of comments with IDs,

528
00:23:50.550 --> 00:23:54.450
123, 133, 233, 333 and 433.

529
00:23:54.450 --> 00:23:56.130
Then we might make a function called like,

530
00:23:56.130 --> 00:24:00.800
deleteComment, and we take in the ID of the comment,

531
00:24:00.800 --> 00:24:05.023
and we also want to take in the comments array.

532
00:24:06.430 --> 00:24:08.420
Then inside of here, what we need to do is,

533
00:24:08.420 --> 00:24:13.420
we need to first find the index of the item in the array.

534
00:24:14.990 --> 00:24:18.940
And then second, we need to make a new array

535
00:24:18.940 --> 00:24:22.110
without that item in it.

536
00:24:22.110 --> 00:24:27.110
And then third, what we need to do is return our new array.

537
00:24:27.210 --> 00:24:29.420
So this is something we haven't done yet,

538
00:24:29.420 --> 00:24:34.060
is how do you find the index of something

539
00:24:34.060 --> 00:24:36.840
based on the item that you're searching for?

540
00:24:36.840 --> 00:24:40.710
And that is with a method called find index.

541
00:24:40.710 --> 00:24:42.650
So find index works a little something like this.

542
00:24:42.650 --> 00:24:45.180
Let's just do a super simple example.

543
00:24:45.180 --> 00:24:47.510
So we have this names array.

544
00:24:47.510 --> 00:24:50.290
And I wanna find like a what index is kait.

545
00:24:50.290 --> 00:24:53.320
So I can remove that from the array.

546
00:24:53.320 --> 00:24:54.450
What you can do is you say

547
00:24:54.450 --> 00:24:59.413
const kaitIndex is equal to names.findIndex

548
00:25:01.210 --> 00:25:02.800
and you might think like, oh okay,

549
00:25:02.800 --> 00:25:04.480
maybe I can just pass it like kait

550
00:25:04.480 --> 00:25:06.510
and it will tell me what the kait index is.

551
00:25:06.510 --> 00:25:08.963
So let's see, console log kaitIndex.

552
00:25:11.929 --> 00:25:13.600
And it says kait is not a function.

553
00:25:13.600 --> 00:25:15.770
Well that's, it's not as easy as that,

554
00:25:15.770 --> 00:25:17.770
because our structures are gonna be

555
00:25:17.770 --> 00:25:20.550
a little bit more complex than just strings.

556
00:25:20.550 --> 00:25:22.970
Like in this case, we wanna find an object

557
00:25:22.970 --> 00:25:24.870
where the idea of that object is equal

558
00:25:24.870 --> 00:25:26.080
to what we're looking for.

559
00:25:26.080 --> 00:25:29.400
So if that's the case, it's actually similar to a loop

560
00:25:29.400 --> 00:25:32.650
where we will loop over every single item.

561
00:25:32.650 --> 00:25:35.640
And then when we find the item that we want,

562
00:25:35.640 --> 00:25:38.710
we will return true and that will give us the index.

563
00:25:38.710 --> 00:25:41.030
So what we can do is we give each name

564
00:25:42.210 --> 00:25:45.550
and in this call back, we can say if the name

565
00:25:45.550 --> 00:25:48.040
is equal to the one that we're looking for,

566
00:25:48.040 --> 00:25:52.740
so it we'll say kait, then return true,

567
00:25:52.740 --> 00:25:55.460
else return false,

568
00:25:55.460 --> 00:25:57.120
and this is very verbose.

569
00:25:57.120 --> 00:25:59.930
We'll look at some better ways to write that in a second.

570
00:25:59.930 --> 00:26:01.030
But now when I refresh,

571
00:26:01.030 --> 00:26:04.750
it tells me that kait is the index of two.

572
00:26:04.750 --> 00:26:08.713
And we can verify that by saying names square bracket,

573
00:26:09.600 --> 00:26:13.730
kateIndex, and it should give us, kait, good, it does.

574
00:26:13.730 --> 00:26:17.960
Okay, so, this is a bit long.

575
00:26:17.960 --> 00:26:20.980
And what you can do is really

576
00:26:20.980 --> 00:26:22.160
you could do something like this,

577
00:26:22.160 --> 00:26:25.560
you could put the return false on its own line.

578
00:26:25.560 --> 00:26:30.560
And then actually, this returns true or false itself.

579
00:26:30.700 --> 00:26:32.910
So there's no real need for an if statement.

580
00:26:32.910 --> 00:26:36.910
so we can simply just return this condition,

581
00:26:36.910 --> 00:26:39.260
which will either be true or false.

582
00:26:39.260 --> 00:26:41.560
So let's get rid of all this.

583
00:26:41.560 --> 00:26:45.920
Okay, we'll simply just return name is equal to kait.

584
00:26:45.920 --> 00:26:47.750
See if it still works.

585
00:26:47.750 --> 00:26:48.630
It does.

586
00:26:48.630 --> 00:26:51.510
And then we can even go one step further

587
00:26:51.510 --> 00:26:55.130
and use the, this is an explicit return

588
00:26:55.130 --> 00:26:57.280
but we can use an implicit return

589
00:26:57.280 --> 00:26:59.163
by getting rid of the curly brackets,

590
00:27:00.320 --> 00:27:02.123
putting it all on one line,

591
00:27:04.440 --> 00:27:06.230
getting rid of that semi-colon,

592
00:27:06.230 --> 00:27:08.910
and getting rid of the keyword return.

593
00:27:08.910 --> 00:27:12.000
And what this will do, is it will loop over every name,

594
00:27:12.000 --> 00:27:15.220
pass it, the name, and will simply return,

595
00:27:15.220 --> 00:27:17.781
whether that name is equal to kait,

596
00:27:17.781 --> 00:27:18.660
and that still works.

597
00:27:18.660 --> 00:27:19.840
We'll do a lot more of that.

598
00:27:19.840 --> 00:27:23.120
But in our case, we found out that kait is index two.

599
00:27:23.120 --> 00:27:27.793
So we can say const newNamesWithOutKait is equal to,

600
00:27:30.400 --> 00:27:31.550
we'll make a new array.

601
00:27:32.890 --> 00:27:37.890
And we'll say get everything up to kait index,

602
00:27:39.520 --> 00:27:42.490
so we'll say names.slice

603
00:27:42.490 --> 00:27:45.393
start at zero and go on to the kaitIndex.

604
00:27:47.570 --> 00:27:52.570
And then we want everything after kait index.

605
00:27:53.760 --> 00:27:55.700
names.slice

606
00:27:55.700 --> 00:27:59.260
we'll start at the kaitIndex plus one

607
00:27:59.260 --> 00:28:00.320
and we'll go to the end,

608
00:28:00.320 --> 00:28:02.700
so there's no second argument needed there.

609
00:28:02.700 --> 00:28:05.120
Now, if I were just to console log

610
00:28:05.120 --> 00:28:09.023
the newNamesWithOutKait,

611
00:28:12.210 --> 00:28:14.754
oh, I goofed up there.

612
00:28:14.754 --> 00:28:16.410
What happened?

613
00:28:16.410 --> 00:28:19.730
Oh, I see what I did.

614
00:28:19.730 --> 00:28:22.570
I now have an array of two arrays,

615
00:28:22.570 --> 00:28:24.710
because what we've done is we've created an array

616
00:28:24.710 --> 00:28:26.800
and then we've created a new array here

617
00:28:26.800 --> 00:28:28.520
and a new array here.

618
00:28:28.520 --> 00:28:29.470
That's not what we want.

619
00:28:29.470 --> 00:28:31.050
We don't want two arrays.

620
00:28:31.050 --> 00:28:34.870
What we actually want to do is to take the items

621
00:28:34.870 --> 00:28:37.170
out of this array that gets returned

622
00:28:37.170 --> 00:28:39.327
and spread them into this one.

623
00:28:39.327 --> 00:28:40.560
And the way that we can do that

624
00:28:40.560 --> 00:28:42.603
is dot dot dot in front of it.

625
00:28:44.144 --> 00:28:45.912
And that will spread the items into

626
00:28:45.912 --> 00:28:49.540
a top level array, just a one level deep.

627
00:28:49.540 --> 00:28:51.230
You could actually, this is kinda cool.

628
00:28:51.230 --> 00:28:54.850
There's a new method in JavaScript called flat.

629
00:28:54.850 --> 00:28:56.600
So what you could do is,

630
00:28:56.600 --> 00:29:00.093
you could say new namesWithOutKait.flat

631
00:29:03.180 --> 00:29:05.020
and that actually won't work, you see,

632
00:29:05.020 --> 00:29:06.160
it's still that problem.

633
00:29:06.160 --> 00:29:08.930
And that's because that is a immutable method.

634
00:29:08.930 --> 00:29:12.033
So we would need to const newNames,

635
00:29:12.926 --> 00:29:16.040
I don't know, 99, we got lots of variables now.

636
00:29:16.040 --> 00:29:17.880
Then if you look at it,

637
00:29:17.880 --> 00:29:21.233
the flat will actually flatten the array for us.

638
00:29:22.180 --> 00:29:23.090
That's not really great.

639
00:29:23.090 --> 00:29:27.453
You could even tag this flat onto the end here.

640
00:29:29.020 --> 00:29:32.840
And then go ahead and console log it.

641
00:29:32.840 --> 00:29:33.673
That works too.

642
00:29:33.673 --> 00:29:36.120
That's actually not a bad a little solution.

643
00:29:36.120 --> 00:29:38.590
Create an array, and then every single one of these

644
00:29:38.590 --> 00:29:40.510
is an array and then flatten it.

645
00:29:40.510 --> 00:29:43.460
I quite personally believe, personally,

646
00:29:43.460 --> 00:29:45.580
I believe that this is the best way to do it

647
00:29:45.580 --> 00:29:47.380
with the triple dots.

648
00:29:47.380 --> 00:29:50.080
And that just shows you that you spread each of the items

649
00:29:50.080 --> 00:29:53.910
into the new array and we don't need that flat on the end.

650
00:29:53.910 --> 00:29:54.743
Whoo!

651
00:29:54.743 --> 00:29:55.910
So we'll do that quite a bit

652
00:29:55.910 --> 00:29:58.110
where we use this sort of callback function.

653
00:29:58.110 --> 00:30:01.990
Almost all of the methods use this callback API,

654
00:30:01.990 --> 00:30:04.950
and we'll look at that one we hit looping.

655
00:30:04.950 --> 00:30:06.770
So what we'll do here is we will

656
00:30:06.770 --> 00:30:07.990
go up to our deleteComment,

657
00:30:07.990 --> 00:30:09.780
and let's write the code for that.

658
00:30:09.780 --> 00:30:10.920
So the first thing we need to find

659
00:30:10.920 --> 00:30:12.890
the index of the item in the array,

660
00:30:12.890 --> 00:30:17.890
so const commentIndex is equal to, take the comments,

661
00:30:18.230 --> 00:30:20.107
and we will use the findIndex method.

662
00:30:20.107 --> 00:30:22.440
And we'll take each comment

663
00:30:22.440 --> 00:30:25.390
and we'll say if the comment.id

664
00:30:25.390 --> 00:30:28.180
is equal to the id that has been passed in.

665
00:30:28.180 --> 00:30:30.100
So that's a little bit different,

666
00:30:30.100 --> 00:30:32.340
because we're not just looking for the name

667
00:30:32.340 --> 00:30:33.550
to be directly to kait,

668
00:30:33.550 --> 00:30:36.860
we're looking for an object where its ID property

669
00:30:36.860 --> 00:30:41.070
is equal to the ID that was passed into the function.

670
00:30:41.070 --> 00:30:45.700
Then what we can do is simply just return a new array.

671
00:30:45.700 --> 00:30:49.290
And in that array can be everything up until,

672
00:30:49.290 --> 00:30:51.750
so make a new array with those items in it.

673
00:30:51.750 --> 00:30:56.750
So say comments.slice(0, and go to that commentIndex.

674
00:30:57.770 --> 00:31:00.620
And then we will get everything after that.

675
00:31:00.620 --> 00:31:03.920
So we'll take the commentIndex plus one.

676
00:31:03.920 --> 00:31:04.860
So skip.

677
00:31:04.860 --> 00:31:06.980
The one, the comment that we wanna get rid of

678
00:31:06.980 --> 00:31:08.650
is right here and that's essentially

679
00:31:08.650 --> 00:31:10.497
what we're getting rid of right there,

680
00:31:10.497 --> 00:31:13.540
and we're returning that in one swoop.

681
00:31:13.540 --> 00:31:15.760
So now if I go here

682
00:31:16.720 --> 00:31:18.930
and take a look at comments,

683
00:31:18.930 --> 00:31:22.380
and I want to remove a comment,

684
00:31:22.380 --> 00:31:24.052
what was it called?

685
00:31:24.052 --> 00:31:25.219
DeleteComment.

686
00:31:27.200 --> 00:31:30.960
And we pass it the ID of 233.

687
00:31:30.960 --> 00:31:32.343
And the comments array,

688
00:31:33.545 --> 00:31:35.420
you see that it returns to us

689
00:31:35.420 --> 00:31:38.180
this four comments instead of the original five.

690
00:31:38.180 --> 00:31:40.400
The original ones are still there.

691
00:31:40.400 --> 00:31:43.030
And the return value is a new value.

692
00:31:43.030 --> 00:31:45.370
If you did wanna overwrite that,

693
00:31:45.370 --> 00:31:48.210
you could make this a let and simply just overwrite

694
00:31:48.210 --> 00:31:51.850
the entire array with the new values there.

695
00:31:51.850 --> 00:31:53.720
I think that's enough for now.

696
00:31:53.720 --> 00:31:56.220
We'll go into some more methods in the next video.

