WEBVTT

1
00:00:00.625 --> 00:00:03.208
(upbeat music)

2
00:00:07.210 --> 00:00:08.043
<v Wes>All right, we're gonna talk</v>

3
00:00:08.043 --> 00:00:09.430
about four more kinds of loops.

4
00:00:09.430 --> 00:00:11.650
We've got the for loop, the for of,

5
00:00:11.650 --> 00:00:13.730
the for in, and the while loop.

6
00:00:13.730 --> 00:00:16.760
These four are not nearly as popular

7
00:00:16.760 --> 00:00:19.360
as the array methods that we're working with.

8
00:00:19.360 --> 00:00:21.960
However, they do have their place in the language,

9
00:00:21.960 --> 00:00:24.010
and you probably will run into them from time to time.

10
00:00:24.010 --> 00:00:27.230
So the first one is for, and the way that it works

11
00:00:27.230 --> 00:00:30.480
is you type for, you open and close your parentheses,

12
00:00:30.480 --> 00:00:32.130
and you open and close your block.

13
00:00:32.130 --> 00:00:34.950
The for loop requires three things.

14
00:00:34.950 --> 00:00:37.570
It requires, if we look at the docs here,

15
00:00:37.570 --> 00:00:40.690
if we scroll down, it requires an initial expression,

16
00:00:40.690 --> 00:00:43.950
a condition, and an increment expression.

17
00:00:43.950 --> 00:00:47.313
The plain for loop is great for running a block of code

18
00:00:47.313 --> 00:00:49.300
n number of times, so five number of times,

19
00:00:49.300 --> 00:00:50.900
six number of times, something like that.

20
00:00:50.900 --> 00:00:53.530
So let's do the most basic thing that we have.

21
00:00:53.530 --> 00:00:56.313
We have let i = 0;

22
00:00:58.030 --> 00:00:59.113
i &lt;= 10;

23
00:01:03.598 --> 00:01:06.540
i++ no semi.

24
00:01:06.540 --> 00:01:07.760
We're gonna break down what this is

25
00:01:07.760 --> 00:01:09.270
in just a second inside of that.

26
00:01:09.270 --> 00:01:11.420
Let's just console.log i.

27
00:01:11.420 --> 00:01:14.100
Now, if we open up, now if we refresh, you see

28
00:01:14.100 --> 00:01:17.370
what we're gonna get is we've looped from zero to 10,

29
00:01:17.370 --> 00:01:20.250
so we've looped 11 times over

30
00:01:20.250 --> 00:01:22.920
and logged out what the i variable is.

31
00:01:22.920 --> 00:01:24.330
So let's break this down.

32
00:01:24.330 --> 00:01:27.910
We said that the first one is an initial expression

33
00:01:27.910 --> 00:01:32.300
so you can think about this as sort of set up for the code

34
00:01:32.300 --> 00:01:33.780
that you're going to write.

35
00:01:33.780 --> 00:01:35.400
The loop starts here.

36
00:01:35.400 --> 00:01:39.730
Second is the condition, and the condition will run

37
00:01:39.730 --> 00:01:44.010
each time before each loop runs, meaning that if this

38
00:01:44.010 --> 00:01:47.580
is true then the loop will run one more time.

39
00:01:47.580 --> 00:01:51.000
If this is false, it will no longer run, and it'll move on

40
00:01:51.000 --> 00:01:53.290
to the next lines of code underneath it.

41
00:01:53.290 --> 00:01:58.290
And then finally, they have the i++, which is the increment,

42
00:01:59.430 --> 00:02:01.240
and in this case, what we're doing is we're just

43
00:02:01.240 --> 00:02:04.100
taking the i, which we've set to zero

44
00:02:04.100 --> 00:02:07.040
and incrementing it by one.

45
00:02:07.040 --> 00:02:08.400
And that allows us to access

46
00:02:08.400 --> 00:02:10.480
this variable called i inside of it.

47
00:02:10.480 --> 00:02:11.680
You may be saying, okay, Wes,

48
00:02:11.680 --> 00:02:14.190
why did you not use const here?

49
00:02:14.190 --> 00:02:15.830
And if I refresh that, you'll see

50
00:02:15.830 --> 00:02:19.340
that the first time, setup runs.

51
00:02:19.340 --> 00:02:23.140
It assigns a variable called i and sets it to zero.

52
00:02:23.140 --> 00:02:27.880
Then what happens is we check if that is less than 10, true.

53
00:02:27.880 --> 00:02:31.470
And then we go ahead and run the code that's in here.

54
00:02:31.470 --> 00:02:34.300
Then it comes back, and then it increments it at the end.

55
00:02:34.300 --> 00:02:36.280
And here, we're saying TypeError:

56
00:02:36.280 --> 00:02:38.070
Assignment to constant variable.

57
00:02:38.070 --> 00:02:41.030
So it's a bit of an issue because you can't increment

58
00:02:41.030 --> 00:02:41.900
a constant variable.

59
00:02:41.900 --> 00:02:44.523
So that's why we are using a let here.

60
00:02:45.610 --> 00:02:46.770
Now, what else can you do?

61
00:02:46.770 --> 00:02:50.730
Well, this is helpful for if you want it to start at, say,

62
00:02:50.730 --> 00:02:55.477
100 and go until, I don't know, 120

63
00:02:56.570 --> 00:03:01.150
and then increment by two, so +=2

64
00:03:01.150 --> 00:03:03.690
or just i is equal to i plus two.

65
00:03:03.690 --> 00:03:05.210
And now you'll see if we refresh this,

66
00:03:05.210 --> 00:03:10.210
starts at 100 goes up by two until it hits 120 and exit.

67
00:03:10.700 --> 00:03:13.460
Because of that, this loop is fairly flexible

68
00:03:13.460 --> 00:03:17.300
in incrementing the ways that we want.

69
00:03:17.300 --> 00:03:18.810
One thing I need to note here is that

70
00:03:18.810 --> 00:03:20.530
notice how there's no semicolon here

71
00:03:20.530 --> 00:03:23.350
if I put a semicolon there, the whole thing is broken.

72
00:03:23.350 --> 00:03:24.280
Why?

73
00:03:24.280 --> 00:03:25.113
I'm not sure.

74
00:03:25.113 --> 00:03:26.640
I'm sure there's a great reason why,

75
00:03:26.640 --> 00:03:29.860
but your ESLint will always catch you on that.

76
00:03:29.860 --> 00:03:31.110
So make sure you don't accidentally

77
00:03:31.110 --> 00:03:33.623
put a semicolon there.

78
00:03:34.850 --> 00:03:36.870
Traditionally, this is used to loop

79
00:03:36.870 --> 00:03:40.200
over something like an array of numbers.

80
00:03:40.200 --> 00:03:43.040
And it very well may be that you see

81
00:03:43.040 --> 00:03:45.980
this in the wild, so I'm gonna show you how this works.

82
00:03:45.980 --> 00:03:47.180
So I can start up another one,

83
00:03:47.180 --> 00:03:51.240
for let i = 0.

84
00:03:51.240 --> 00:03:52.990
And you may be saying, hold on, Wes.

85
00:03:52.990 --> 00:03:55.810
Didn't you already create an i variable here?

86
00:03:55.810 --> 00:03:57.170
Well, that's the beauty of using

87
00:03:57.170 --> 00:03:59.470
let or const in this case is that even though

88
00:03:59.470 --> 00:04:02.020
the code is in here, it's actually scoped

89
00:04:02.930 --> 00:04:05.970
to this block right here, so you are able to reuse it.

90
00:04:05.970 --> 00:04:09.090
And that was great because before we had let and const,

91
00:04:09.090 --> 00:04:11.300
we had var and var variable.

92
00:04:11.300 --> 00:04:14.053
Let just me show you if I changed this to var,

93
00:04:15.590 --> 00:04:18.593
and I were to go underneath here, console.log i,

94
00:04:19.620 --> 00:04:22.770
you see that I actually have this 122 variable

95
00:04:22.770 --> 00:04:25.130
that has incremented, and it's now

96
00:04:25.130 --> 00:04:27.580
it's just a global variable floating out in the open.

97
00:04:27.580 --> 00:04:29.740
And now if I wanna have another loop,

98
00:04:29.740 --> 00:04:33.440
I have to use another variable for i.

99
00:04:33.440 --> 00:04:35.280
Whereas if we use let, it will make sure

100
00:04:35.280 --> 00:04:36.930
that it's scoped to the block.

101
00:04:36.930 --> 00:04:39.000
'Cause remember, let and const are block scoped.

102
00:04:39.000 --> 00:04:42.100
So if you wanted to loop over an array the old way,

103
00:04:42.100 --> 00:04:45.920
we would do for let i = 0;

104
00:04:45.920 --> 00:04:49.500
i is less or equal,

105
00:04:49.500 --> 00:04:50.333
I think less?

106
00:04:50.333 --> 00:04:55.160
Yeah, less than the array length, so say numbers.length;

107
00:04:55.160 --> 00:04:57.780
and then i++, and then we go in here.

108
00:04:57.780 --> 00:05:00.120
We'll just console.log i, see what we got.

109
00:05:00.120 --> 00:05:01.670
We're gonna comma this one out,

110
00:05:02.920 --> 00:05:04.410
and we have zero through 11.

111
00:05:04.410 --> 00:05:07.340
That's because there are 12 items in this numbers,

112
00:05:07.340 --> 00:05:08.400
so let's double check that.

113
00:05:08.400 --> 00:05:10.630
There we go, 12 items.

114
00:05:10.630 --> 00:05:14.050
And now to access the individual number,

115
00:05:14.050 --> 00:05:17.040
you have to use this index to retrieve it

116
00:05:17.040 --> 00:05:21.350
so we will console.log numbers square bracket i;

117
00:05:23.640 --> 00:05:27.210
and that should give us two, 34, three.

118
00:05:27.210 --> 00:05:29.030
You see that they're showing up in here.

119
00:05:29.030 --> 00:05:31.400
That's the way loops used to be done.

120
00:05:31.400 --> 00:05:34.540
Way easier with a for each or a map or a reduce,

121
00:05:34.540 --> 00:05:36.370
something like that, way easier now,

122
00:05:36.370 --> 00:05:39.680
so if you do see this, maybe ask yourself,

123
00:05:39.680 --> 00:05:41.570
can I refactor that to a for loop?

124
00:05:41.570 --> 00:05:44.483
'Cause it's much better.

125
00:05:45.780 --> 00:05:47.600
That is the for loop.

126
00:05:47.600 --> 00:05:50.990
Another place that's useful is in canvas.

127
00:05:50.990 --> 00:05:55.020
If we go back to the Etch-A-Sketch one that we worked on,

128
00:05:55.020 --> 00:05:56.180
let's take a look.

129
00:05:56.180 --> 00:05:58.759
We're on our Etch-a-Sketch, open this up.

130
00:05:58.759 --> 00:06:00.200
Do you remember this one where we were drawing

131
00:06:00.200 --> 00:06:01.500
all over the place?

132
00:06:01.500 --> 00:06:05.550
This canvas element actually has a method on it

133
00:06:05.550 --> 00:06:08.040
called getImageData that will allow us

134
00:06:08.040 --> 00:06:11.260
to pull the stuff out of that canvas.

135
00:06:11.260 --> 00:06:15.350
If I select it here, and I were to say $0,

136
00:06:15.350 --> 00:06:17.690
that gives us the canvas.

137
00:06:17.690 --> 00:06:19.610
And oh, do we have a context variable?

138
00:06:19.610 --> 00:06:22.290
That's what we need to push it, pluck it off of.

139
00:06:22.290 --> 00:06:24.690
Ctx yeah, if I have my context,

140
00:06:24.690 --> 00:06:26.517
and I could say getImageData,

141
00:06:27.982 --> 00:06:30.227
and zero, zero, 100, 100.

142
00:06:33.080 --> 00:06:37.340
What that returns to us is, what I just said is give me

143
00:06:37.340 --> 00:06:39.920
the first 100 pixels by 100 pixels

144
00:06:40.770 --> 00:06:45.770
and what that returns to us is this data array with, what?

145
00:06:46.570 --> 00:06:49.950
40,000 items inside of it.

146
00:06:49.950 --> 00:06:52.830
It's this special kind of array called a clamped array,

147
00:06:52.830 --> 00:06:54.680
and they're used for when you have

148
00:06:54.680 --> 00:06:57.660
very, very, very large arrays.

149
00:06:57.660 --> 00:07:00.690
And if you open it up, actually, this is a bad example.

150
00:07:00.690 --> 00:07:02.890
Let me color some stuff in the top right-hand corner

151
00:07:02.890 --> 00:07:06.070
so we can, there we go.

152
00:07:06.070 --> 00:07:09.860
Let me rerun that 'cause I actually need some data,

153
00:07:09.860 --> 00:07:13.660
open that up, open up my data, open up this.

154
00:07:13.660 --> 00:07:17.683
And you'll see that I get 255, zero, 119.

155
00:07:20.250 --> 00:07:23.759
What does that mean and 255, 255, zero, 119,

156
00:07:23.759 --> 00:07:25.250
255, zero, 119?

157
00:07:25.250 --> 00:07:29.320
What these are are RBGA values,

158
00:07:29.320 --> 00:07:31.720
meaning that I've just pulled out the raw data

159
00:07:31.720 --> 00:07:33.350
from this canvas element,

160
00:07:33.350 --> 00:07:38.350
and it's returning to us for every single pixel in there,

161
00:07:38.360 --> 00:07:41.240
(makes screeching sound) every single little pixel in there,

162
00:07:41.240 --> 00:07:43.200
it returns to us four values.

163
00:07:43.200 --> 00:07:45.990
That little pink right there is four values,

164
00:07:45.990 --> 00:07:48.110
meaning that the red is 255.

165
00:07:48.110 --> 00:07:52.400
The zero is the green, and the 119 is the blue.

166
00:07:52.400 --> 00:07:54.280
And then that returns to us an alpha channel,

167
00:07:54.280 --> 00:07:56.370
which is if it's transparent or not.

168
00:07:56.370 --> 00:07:59.060
And 255 would be totally not transparent,

169
00:07:59.060 --> 00:08:02.663
and zero would be totally transparent, see through.

170
00:08:03.610 --> 00:08:05.640
That's a pretty common thing to do,

171
00:08:05.640 --> 00:08:08.040
and if you wanna to loop over that data,

172
00:08:08.040 --> 00:08:10.770
you have to loop over every single pixel,

173
00:08:10.770 --> 00:08:13.330
meaning that you have to take four at a time.

174
00:08:13.330 --> 00:08:18.330
So a for loop, that can increment itself by four,

175
00:08:18.880 --> 00:08:21.330
instead of by one, is very handy

176
00:08:21.330 --> 00:08:22.890
and that honestly is the only place

177
00:08:22.890 --> 00:08:25.530
that I still use for loop.

178
00:08:25.530 --> 00:08:27.860
But your results may differ, so it's good to know it.

179
00:08:27.860 --> 00:08:29.290
And you probably will run across it

180
00:08:29.290 --> 00:08:30.810
in some other code.

181
00:08:30.810 --> 00:08:32.360
So that is what the for loop is.

182
00:08:32.360 --> 00:08:35.770
Now let's loop at the for of loop.

183
00:08:35.770 --> 00:08:38.310
The for of loop is fairly new to the language,

184
00:08:38.310 --> 00:08:40.100
and it's actually pretty nice.

185
00:08:40.100 --> 00:08:41.740
So what is it?

186
00:08:41.740 --> 00:08:46.030
It's used for looping over iterables.

187
00:08:46.030 --> 00:08:47.190
Remember, what's an iterable?

188
00:08:47.190 --> 00:08:50.530
An iterable is something that has a length.

189
00:08:50.530 --> 00:08:52.970
So it's something that is like a number

190
00:08:52.970 --> 00:08:57.720
or a string, and there's some advanced use cases

191
00:08:57.720 --> 00:09:00.580
where you can have a symbol iterator.

192
00:09:00.580 --> 00:09:02.200
I'm not gonna get into that right now,

193
00:09:02.200 --> 00:09:04.590
but just know that in most cases

194
00:09:04.590 --> 00:09:08.060
you'll use this for an array or for a string.

195
00:09:08.060 --> 00:09:12.550
And the way it works is you say for const,

196
00:09:12.550 --> 00:09:15.230
let's say letter of,

197
00:09:15.230 --> 00:09:17.113
let's go and say name,

198
00:09:19.010 --> 00:09:22.370
and we'll just console.log the letter and refresh.

199
00:09:22.370 --> 00:09:26.350
You'll see now I've looped over each of those,

200
00:09:26.350 --> 00:09:29.593
letter of name, and it will give us each of those letter.

201
00:09:31.480 --> 00:09:33.980
Why would that be better than splitting it

202
00:09:33.980 --> 00:09:36.490
and looping over it with a for each like we've learned?

203
00:09:36.490 --> 00:09:40.340
Well, one thing is that this can handle emojis.

204
00:09:40.340 --> 00:09:44.473
If I were to take a look at, I think it was family.

205
00:09:47.020 --> 00:09:49.210
This is, you can't really see it here,

206
00:09:49.210 --> 00:09:51.810
but this is a peach family.

207
00:09:51.810 --> 00:09:53.750
And if I were to console.log it,

208
00:09:53.750 --> 00:09:55.810
you'll see that it gives me the family

209
00:09:55.810 --> 00:09:57.390
with one boy emoji, which is,

210
00:09:57.390 --> 00:10:00.703
and then it gives you the modifier, which is peach skin.

211
00:10:01.740 --> 00:10:04.280
And if I were to take the name

212
00:10:06.510 --> 00:10:08.603
and call split on it normally,

213
00:10:10.700 --> 00:10:14.130
it freaks out at these emojis

214
00:10:14.130 --> 00:10:17.370
because of the zero-width joiner thing.

215
00:10:17.370 --> 00:10:19.510
That's not a great thing as well.

216
00:10:19.510 --> 00:10:21.733
And if I were to use a spread,

217
00:10:23.130 --> 00:10:27.110
that will give us the little pieces that we want.

218
00:10:27.110 --> 00:10:28.780
Let me put a few more emojis in there.

219
00:10:28.780 --> 00:10:30.923
There is Santa.

220
00:10:32.760 --> 00:10:33.980
There is

221
00:10:36.160 --> 00:10:36.993
couple,

222
00:10:39.110 --> 00:10:39.943
there we go.

223
00:10:42.450 --> 00:10:44.530
Loop over it, you see the family

224
00:10:44.530 --> 00:10:45.950
with two women, two children,

225
00:10:45.950 --> 00:10:48.380
is actually, a woman, woman,

226
00:10:48.380 --> 00:10:51.470
girl child, a boy child, and then these things right here

227
00:10:51.470 --> 00:10:54.060
are what are referred to as zero-width joiners.

228
00:10:54.060 --> 00:10:56.770
That's just showing us that it's made up

229
00:10:56.770 --> 00:10:58.660
of multiple emojis.

230
00:10:58.660 --> 00:10:59.640
There's that.

231
00:10:59.640 --> 00:11:02.400
You can obviously use the spread for that as well.

232
00:11:02.400 --> 00:11:05.363
Let me show you, dot dot dot name.

233
00:11:06.314 --> 00:11:08.970
You'll see that it will split that up as well.

234
00:11:08.970 --> 00:11:10.910
That's one use case.

235
00:11:10.910 --> 00:11:15.120
The other use is something to do with promises.

236
00:11:15.120 --> 00:11:19.970
And we are not hitting that just yet.

237
00:11:19.970 --> 00:11:22.100
However, if you ever need to sequence

238
00:11:22.100 --> 00:11:24.160
a bunch of data, meaning you have to do

239
00:11:24.160 --> 00:11:26.730
one thing after another in a loop,

240
00:11:26.730 --> 00:11:30.270
the for of loop will allow you to do something

241
00:11:30.270 --> 00:11:32.520
called a wait inside of it.

242
00:11:32.520 --> 00:11:35.080
We'll come back to that when we learn promises,

243
00:11:35.080 --> 00:11:36.820
but just know that the for of

244
00:11:37.660 --> 00:11:40.060
is very handy for sequencing promises,

245
00:11:40.060 --> 00:11:44.370
and quite honestly, that's the only use case I use it for.

246
00:11:44.370 --> 00:11:46.637
The for of loop can be used with an array as well,

247
00:11:46.637 --> 00:11:47.720
so for const,

248
00:11:50.530 --> 00:11:53.690
number in numbers,

249
00:11:53.690 --> 00:11:55.860
console.log number.

250
00:11:55.860 --> 00:11:57.190
And it should give us each of the numbers

251
00:11:57.190 --> 00:12:00.220
that are in it and zero through 11,

252
00:12:00.220 --> 00:12:01.830
oh that's in, of.

253
00:12:01.830 --> 00:12:02.830
We want for of.

254
00:12:02.830 --> 00:12:05.340
We're gonna learn about for in next.

255
00:12:05.340 --> 00:12:06.173
There we go.

256
00:12:06.173 --> 00:12:07.033
You see it.

257
00:12:07.033 --> 00:12:09.580
It gives us each of the values in there.

258
00:12:09.580 --> 00:12:11.660
The downside to that versus using

259
00:12:11.660 --> 00:12:14.930
a dot for each is that it doesn't give us the index.

260
00:12:14.930 --> 00:12:16.620
It just gives us the raw value.

261
00:12:16.620 --> 00:12:21.020
It also doesn't allow us to filter or anything like that.

262
00:12:21.020 --> 00:12:22.600
There is that for you.

263
00:12:22.600 --> 00:12:24.983
And then finally we have the for in.

264
00:12:26.010 --> 00:12:28.440
The for in works similarly.

265
00:12:28.440 --> 00:12:30.330
Actually, let me just show you.

266
00:12:30.330 --> 00:12:35.000
Remember when we did in,

267
00:12:35.000 --> 00:12:37.890
and I got zero through 11?

268
00:12:37.890 --> 00:12:41.040
What's actually happening there is that it's giving us

269
00:12:41.040 --> 00:12:43.620
the keys of an object.

270
00:12:43.620 --> 00:12:48.153
The for in is used for looping over keys

271
00:12:49.870 --> 00:12:52.310
of an object.

272
00:12:52.310 --> 00:12:55.530
If I were to, let's give ourselves an object,

273
00:12:55.530 --> 00:13:00.530
const wes is equal to this, name: 'wes', age: 100,

274
00:13:00.920 --> 00:13:02.523
cool is true.

275
00:13:04.220 --> 00:13:08.750
I could go here and say for const prop in wes,

276
00:13:08.750 --> 00:13:10.163
console.log the prop.

277
00:13:12.540 --> 00:13:14.810
And you see it name, age, cool.

278
00:13:14.810 --> 00:13:17.400
That will give us each of the props.

279
00:13:17.400 --> 00:13:18.500
And now you may be asking,

280
00:13:18.500 --> 00:13:23.190
how is that better than our object.entries,

281
00:13:23.190 --> 00:13:26.930
object.keys, or object.values?

282
00:13:26.930 --> 00:13:28.660
And it's not.

283
00:13:28.660 --> 00:13:33.380
I much prefer to use those, but it is there. (laughs)

284
00:13:33.380 --> 00:13:34.830
I know I have to teach you about these things,

285
00:13:34.830 --> 00:13:36.110
and you will come across them.

286
00:13:36.110 --> 00:13:38.500
But quite honestly, I don't use them all that often

287
00:13:38.500 --> 00:13:42.090
except for the use cases that I've been telling you.

288
00:13:42.090 --> 00:13:44.430
There is one sort of gotcha

289
00:13:44.430 --> 00:13:47.270
with the for in versus object.entries,

290
00:13:47.270 --> 00:13:49.180
and I'll show you that now.

291
00:13:49.180 --> 00:13:52.350
It looks ahead to this thing called prototypes,

292
00:13:52.350 --> 00:13:57.350
but if I were to make a baseHumanStats object.

293
00:14:00.270 --> 00:14:05.270
And the baseHumanStats are something like feet: two,

294
00:14:05.840 --> 00:14:10.430
and arms: two, and eyes: two,

295
00:14:10.430 --> 00:14:15.060
head: one, and I were to make a new function

296
00:14:15.060 --> 00:14:19.530
called capital H, Human that takes in a name

297
00:14:19.530 --> 00:14:22.480
and then say this.name = name.

298
00:14:22.480 --> 00:14:25.210
Now, this is going a little bit ahead of ourselves,

299
00:14:25.210 --> 00:14:29.720
but we can now use this Human function to make a wes2.

300
00:14:29.720 --> 00:14:33.900
And we'll say new Human, and we'll say 'wes'.

301
00:14:33.900 --> 00:14:37.790
Now, if I were to take a look at wes2,

302
00:14:38.880 --> 00:14:41.620
you'll see that it has a type of Human,

303
00:14:41.620 --> 00:14:43.920
and the name is equal to "wes".

304
00:14:43.920 --> 00:14:47.050
And if I were to say, how many arms does wes have?

305
00:14:47.050 --> 00:14:50.360
None, but if I take this Human function

306
00:14:50.360 --> 00:14:54.563
and set the prototype to be the baseHumanStats,

307
00:14:55.810 --> 00:14:58.830
now if we take a look at wes2,

308
00:14:58.830 --> 00:15:02.350
still looks the same, but if I were to look at feet

309
00:15:06.734 --> 00:15:11.070
or arms, you see that it is referencing

310
00:15:11.070 --> 00:15:13.890
the values from the prototype.

311
00:15:13.890 --> 00:15:15.330
And what does that mean?

312
00:15:15.330 --> 00:15:18.390
Well, what happens with a prototype is that

313
00:15:18.390 --> 00:15:20.360
when you try to access a property,

314
00:15:20.360 --> 00:15:22.900
it first checks on the object itself

315
00:15:22.900 --> 00:15:24.490
for a property on that.

316
00:15:24.490 --> 00:15:27.700
And if it's not on there, it will look up

317
00:15:27.700 --> 00:15:29.810
the prototype chain, meaning it'll say, okay,

318
00:15:29.810 --> 00:15:31.050
it's not on here.

319
00:15:31.050 --> 00:15:35.743
But maybe the thing that created me has a prototype

320
00:15:36.610 --> 00:15:39.050
that has that value, and it will look it up

321
00:15:39.050 --> 00:15:40.150
in the prototype.

322
00:15:40.150 --> 00:15:43.470
In our case, this prototype has some sort of base values

323
00:15:43.470 --> 00:15:45.063
that it will pull it from.

324
00:15:45.961 --> 00:15:48.170
We'll go much more into that when we hit classes.

325
00:15:48.170 --> 00:15:52.123
But all of that to say, if we do,

326
00:15:55.030 --> 00:15:58.617
console.log Object.keys wes2

327
00:16:00.020 --> 00:16:01.810
are we gonna get name: "wes",

328
00:16:01.810 --> 00:16:05.700
and all of these, or are we just gonna get name of wes?

329
00:16:05.700 --> 00:16:08.380
Refresh, we only get name.

330
00:16:08.380 --> 00:16:09.463
Let's use entries.

331
00:16:11.280 --> 00:16:13.800
You see, we get an array where the name is wes.

332
00:16:13.800 --> 00:16:18.760
But, if I were to say for const prop in wes2,

333
00:16:20.610 --> 00:16:22.173
and console.log the prop,

334
00:16:23.650 --> 00:16:27.820
you'll see that it does grab everything from the prototype

335
00:16:28.800 --> 00:16:32.543
that it was made from, so name, feet, arms, eyes, and head.

336
00:16:33.510 --> 00:16:38.510
If you need to grab the prototype methods and properties,

337
00:16:39.530 --> 00:16:43.740
then you can use a for in loop to grab those.

338
00:16:43.740 --> 00:16:46.200
If you don't need those, which I would say

339
00:16:46.200 --> 00:16:49.670
in most cases you don't, then you're fine

340
00:16:49.670 --> 00:16:51.583
with an object.entries.

341
00:16:52.470 --> 00:16:54.690
Next up, we have the while and do while loops.

342
00:16:54.690 --> 00:16:56.960
Again, these are two other loops I don't use all that often,

343
00:16:56.960 --> 00:16:58.370
but they're good to know how they work

344
00:16:58.370 --> 00:17:00.580
because you do find yourself in little situations

345
00:17:00.580 --> 00:17:01.990
where they are useful.

346
00:17:01.990 --> 00:17:05.160
While will take a condition and run infinitely

347
00:17:05.160 --> 00:17:07.540
until the condition is false.

348
00:17:07.540 --> 00:17:09.460
If we take a look at this, it's while,

349
00:17:09.460 --> 00:17:11.200
and you open up your block,

350
00:17:11.200 --> 00:17:13.350
in here there is a condition,

351
00:17:13.350 --> 00:17:16.538
and we need to check for something.

352
00:17:16.538 --> 00:17:20.260
In our case, I would maybe make a variable called cool

353
00:17:20.260 --> 00:17:21.660
and make that to true.

354
00:17:21.660 --> 00:17:25.340
And we say while cool === true

355
00:17:25.340 --> 00:17:28.290
then we just console.log, 'You are cool'.

356
00:17:28.290 --> 00:17:31.640
Now, this is going to be an infinite loop

357
00:17:31.640 --> 00:17:35.060
because there is no what is called an exit condition,

358
00:17:35.060 --> 00:17:37.750
meaning that there's nothing to stop it from running.

359
00:17:37.750 --> 00:17:39.730
So I might crash my computer.

360
00:17:39.730 --> 00:17:41.353
Let's see, refresh.

361
00:17:43.990 --> 00:17:45.990
This says You are cool.

362
00:17:45.990 --> 00:17:48.893
You see it's updating every so often.

363
00:17:51.120 --> 00:17:54.010
Oh, it actually updates pretty frequently

364
00:17:54.010 --> 00:17:55.620
if you leave your mouse over top of it.

365
00:17:55.620 --> 00:17:58.210
You see it's struggling because this is an infinite loop

366
00:17:58.210 --> 00:18:00.650
and if I were doing anything else in JavaScript,

367
00:18:00.650 --> 00:18:03.580
this would probably make the tab crash

368
00:18:03.580 --> 00:18:05.860
because you have a runaway loop.

369
00:18:05.860 --> 00:18:07.290
You need an exit condition

370
00:18:07.290 --> 00:18:09.233
that will set this thing to be false.

371
00:18:10.190 --> 00:18:13.570
Maybe what we could do is we could say let i = 0;

372
00:18:13.570 --> 00:18:17.893
and we'll say i++, and then we'll say if i &gt; 100,

373
00:18:20.140 --> 00:18:22.663
cool = false.

374
00:18:24.150 --> 00:18:27.000
What should happen after we run this loop 100 times,

375
00:18:27.000 --> 00:18:28.183
we'll set it to false.

376
00:18:29.200 --> 00:18:31.440
And yeah, and now it's, I broke it.

377
00:18:31.440 --> 00:18:34.293
I gotta close it down and open it up.

378
00:18:38.250 --> 00:18:40.830
And you see that it's run it 101 times.

379
00:18:40.830 --> 00:18:43.007
Maybe I should make this set to one,

380
00:18:43.007 --> 00:18:45.950
and it runs it 100 times over.

381
00:18:45.950 --> 00:18:48.290
It's important to note that someone could set

382
00:18:48.290 --> 00:18:51.040
this cool variable in another piece of JavaScript code,

383
00:18:51.040 --> 00:18:52.470
and then the next time it run,

384
00:18:52.470 --> 00:18:54.780
it would check that that is true or false.

385
00:18:54.780 --> 00:18:56.220
That is one way to do it.

386
00:18:56.220 --> 00:18:58.007
The only difference between the while loop

387
00:18:58.007 --> 00:19:02.250
and the do loop is that we have a do

388
00:19:02.250 --> 00:19:05.130
and then a while condition at the end.

389
00:19:05.130 --> 00:19:08.530
And what happens is that the do will run first

390
00:19:08.530 --> 00:19:11.860
and then check the condition after the first run,

391
00:19:11.860 --> 00:19:14.240
whereas this will always check the condition

392
00:19:14.240 --> 00:19:16.973
before the first run and then go ahead and do it.

393
00:19:18.000 --> 00:19:21.150
Quite honestly, I've never needed that in my career before,

394
00:19:21.150 --> 00:19:23.210
but it is there if you need it.

395
00:19:23.210 --> 00:19:25.390
While loops, not all that popular.

396
00:19:25.390 --> 00:19:28.110
You may run into little use cases here or there.

397
00:19:28.110 --> 00:19:30.550
Maybe if I find some other use cases from people telling me

398
00:19:30.550 --> 00:19:33.810
once they've viewed this, I'll add this to that video.

399
00:19:33.810 --> 00:19:35.010
See you in the next one!

