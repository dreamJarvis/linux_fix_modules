WEBVTT

1
00:00:00.424 --> 00:00:03.007
(upbeat music)

2
00:00:05.440 --> 00:00:07.990
<v Instructor>Alright, let's talk about this keyword.</v>

3
00:00:07.990 --> 00:00:10.660
We're gonna go into this keyword in this video

4
00:00:10.660 --> 00:00:12.340
as well as in the next one,

5
00:00:12.340 --> 00:00:16.830
which is talking about prototype and prototypal inheritance.

6
00:00:16.830 --> 00:00:21.500
So this keyword in JavaScript refers to the instance

7
00:00:21.500 --> 00:00:25.360
of an object that a function is bound.

8
00:00:25.360 --> 00:00:28.890
So what, what does that even mean?

9
00:00:28.890 --> 00:00:30.940
Well, so far, I've been telling

10
00:00:30.940 --> 00:00:33.810
you that this keyword equals the thing

11
00:00:33.810 --> 00:00:37.770
to the left of the dot when you're calling a method.

12
00:00:37.770 --> 00:00:40.270
So if we let's go ahead and make two buttons,

13
00:00:40.270 --> 00:00:45.160
we have button class is of one will say button one

14
00:00:45.160 --> 00:00:48.060
and then we have button two at the class of two.

15
00:00:48.060 --> 00:00:51.760
If I go down here and I select both of those const

16
00:00:51.760 --> 00:00:54.913
button one is equal to document dot query selector.

17
00:00:56.190 --> 00:00:59.660
Now query selector I just say dot one

18
00:00:59.660 --> 00:01:02.910
and then button two has a class of two.

19
00:01:02.910 --> 00:01:07.910
And we make a function that says, tell me about the button.

20
00:01:10.890 --> 00:01:14.300
And we'll just console log this keyword inside of it.

21
00:01:14.300 --> 00:01:15.640
Then what we can do is we can say

22
00:01:15.640 --> 00:01:19.000
button one dot add event listener,

23
00:01:19.000 --> 00:01:20.170
we're gonna listen for a click.

24
00:01:20.170 --> 00:01:21.410
And when that happens,

25
00:01:21.410 --> 00:01:25.550
we are going to run tell me about the button function.

26
00:01:25.550 --> 00:01:27.810
Same thing for button two.

27
00:01:27.810 --> 00:01:30.530
Now, when I go and click on these,

28
00:01:30.530 --> 00:01:32.860
this keyword is going to be equal

29
00:01:32.860 --> 00:01:35.200
to the button that was clicked.

30
00:01:35.200 --> 00:01:38.020
Now we can call that in instance,

31
00:01:38.020 --> 00:01:42.590
why because button one and button two are simply instances

32
00:01:42.590 --> 00:01:46.260
of the mama button that is in the browser.

33
00:01:46.260 --> 00:01:50.860
Whenever you make a new button, whether you make it via HTML

34
00:01:50.860 --> 00:01:52.670
and it gets rendered to the dom,

35
00:01:52.670 --> 00:01:55.610
or whether you use document dot create element

36
00:01:55.610 --> 00:01:59.090
that will create a new button that is an instance

37
00:01:59.090 --> 00:02:02.930
of the HTML button that is in the browser.

38
00:02:02.930 --> 00:02:05.600
So this keyword in our case,

39
00:02:05.600 --> 00:02:08.530
equals the thing that is to the left of the dot.

40
00:02:08.530 --> 00:02:12.150
So a method that call that called was add event listener

41
00:02:12.150 --> 00:02:13.330
and the thing to the left

42
00:02:13.330 --> 00:02:17.960
of it was the button one or button two.

43
00:02:17.960 --> 00:02:21.230
Now you will also hear this being called as this function

44
00:02:21.230 --> 00:02:24.640
is bound to this button meaning

45
00:02:24.640 --> 00:02:27.640
that when something is bound to something,

46
00:02:27.640 --> 00:02:30.730
it means that this keyword is going to be equal

47
00:02:30.730 --> 00:02:33.070
to whatever it was bound to.

48
00:02:33.070 --> 00:02:36.130
Now we're able to change that with the dot bind method.

49
00:02:36.130 --> 00:02:38.070
But we'll go into that in a future video.

50
00:02:38.070 --> 00:02:41.220
Don't worry all that much about that so far.

51
00:02:41.220 --> 00:02:44.320
So one other thing you need to know about this keyword

52
00:02:44.320 --> 00:02:48.230
is that this keyword is always scoped to a function.

53
00:02:48.230 --> 00:02:52.130
And if you use an arrow function, like we'll convert

54
00:02:52.130 --> 00:02:54.690
this to an arrow function const tell me about the button

55
00:02:54.690 --> 00:02:57.473
is equal to an arrow function.

56
00:02:59.890 --> 00:03:03.003
Then watch what happens to this when I refresh it.

57
00:03:04.536 --> 00:03:09.536
Window okay, so the thing about an arrow function

58
00:03:10.400 --> 00:03:13.660
is that this keyword does not change

59
00:03:13.660 --> 00:03:15.500
when you use an arrow function.

60
00:03:15.500 --> 00:03:17.680
And this keyword will be equal

61
00:03:17.680 --> 00:03:22.460
to whatever this key word was at a higher level function.

62
00:03:22.460 --> 00:03:25.470
And if there is no higher function that is wrapped around

63
00:03:25.470 --> 00:03:28.920
this, then this keyword will just be equal to the window.

64
00:03:28.920 --> 00:03:33.450
So one sort of use case for that is,

65
00:03:33.450 --> 00:03:35.730
if we have let's bring it back to a regular function,

66
00:03:35.730 --> 00:03:37.660
make sure that still works good.

67
00:03:37.660 --> 00:03:42.180
And I wanna say like after one second,

68
00:03:42.180 --> 00:03:45.660
I want to update the text of the button

69
00:03:45.660 --> 00:03:47.610
that says good job or something like that.

70
00:03:47.610 --> 00:03:49.463
We can say set timeout.

71
00:03:51.070 --> 00:03:52.430
And that takes two things.

72
00:03:52.430 --> 00:03:55.280
It takes how long and this that's actually

73
00:03:55.280 --> 00:03:56.730
second argument, the first argument

74
00:03:56.730 --> 00:03:58.083
is a callback function.

75
00:03:59.240 --> 00:04:03.810
Right, and now if I want to be able to update the text

76
00:04:03.810 --> 00:04:08.390
of that, I would have to say this dot text content

77
00:04:08.390 --> 00:04:12.403
is equal to you clicked me.

78
00:04:15.880 --> 00:04:19.533
Okay, after refresh, one second later,

79
00:04:21.080 --> 00:04:22.543
nothing really happened.

80
00:04:23.710 --> 00:04:28.710
Huh, okay, well let's console log this inside of it, okay.

81
00:04:29.770 --> 00:04:34.040
And one second later, we get window what?

82
00:04:34.040 --> 00:04:39.040
So if I log this, maybe we can do this console log

83
00:04:41.170 --> 00:04:46.053
outside and also log inside.

84
00:04:52.330 --> 00:04:54.070
Outside, it's equal to the button,

85
00:04:54.070 --> 00:04:55.890
but inside it's equal to the window.

86
00:04:55.890 --> 00:04:59.150
And that is because every time you create a new function,

87
00:04:59.150 --> 00:05:03.450
it will then change what the value of this is equal to.

88
00:05:03.450 --> 00:05:05.803
And if you need to be able to access

89
00:05:05.803 --> 00:05:09.720
this keyword inside of this function,

90
00:05:09.720 --> 00:05:11.380
then you'd have to save it.

91
00:05:11.380 --> 00:05:13.330
(murmuring) this is previously we used to do this,

92
00:05:13.330 --> 00:05:16.330
we used to say const, that equals this.

93
00:05:16.330 --> 00:05:18.230
And then we go down here and say that.

94
00:05:20.560 --> 00:05:22.080
And then after a second,

95
00:05:22.080 --> 00:05:24.060
it says, you clicked me.

96
00:05:24.060 --> 00:05:25.750
And then that one updates,

97
00:05:25.750 --> 00:05:27.590
whoever, we don't need to do that anymore,

98
00:05:27.590 --> 00:05:29.020
let me bring that back.

99
00:05:29.020 --> 00:05:32.580
Because what happens is that you can change

100
00:05:32.580 --> 00:05:34.193
this to an arrow function.

101
00:05:36.120 --> 00:05:39.730
And this keyword will know not to change,

102
00:05:39.730 --> 00:05:42.860
it will just inherit whatever was at the higher level.

103
00:05:42.860 --> 00:05:45.340
In our case, since this is just an arrow function,

104
00:05:45.340 --> 00:05:49.860
it will grab whatever this is equal to in that function.

105
00:05:49.860 --> 00:05:53.210
So now click it, and it still works exactly

106
00:05:53.210 --> 00:05:55.330
the same way as we had hoped.

107
00:05:55.330 --> 00:05:57.250
So that's kind of like a little gotcha

108
00:05:57.250 --> 00:05:58.760
about arrow functions that's sort

109
00:05:58.760 --> 00:06:01.240
of the main difference there quite honestly

110
00:06:01.240 --> 00:06:04.580
this doesn't happen to me all that often anymore

111
00:06:04.580 --> 00:06:07.410
because I much rather use the event dot current target

112
00:06:07.410 --> 00:06:09.940
and event dot target like we've been using over

113
00:06:09.940 --> 00:06:13.420
there are many use cases where that will still

114
00:06:13.420 --> 00:06:15.130
will come and bite you.

115
00:06:15.130 --> 00:06:18.160
So just so you know about that.

116
00:06:18.160 --> 00:06:21.890
Now, that's what we know about this keyword so far.

117
00:06:21.890 --> 00:06:23.900
Let's comment that out here.

118
00:06:23.900 --> 00:06:26.160
The other thing that we need to know about this keyword

119
00:06:26.160 --> 00:06:29.320
is that it refers to the instance

120
00:06:29.320 --> 00:06:31.040
of the thing that was made.

121
00:06:31.040 --> 00:06:33.530
So if we go up to this pizza here,

122
00:06:33.530 --> 00:06:38.530
and console log this, whenever the pizza is made,

123
00:06:39.010 --> 00:06:44.010
we're going to be getting that was online 25 and we go,

124
00:06:46.100 --> 00:06:50.130
you see that we get access to the pizza that was created.

125
00:06:50.130 --> 00:06:54.610
Now we can do things like store information about the pizza

126
00:06:54.610 --> 00:06:57.270
that is being made inside of that pizza,

127
00:06:57.270 --> 00:06:59.120
right because when you make a pizza,

128
00:06:59.120 --> 00:07:01.390
you need to store information about it like,

129
00:07:01.390 --> 00:07:02.590
what are the toppings?

130
00:07:02.590 --> 00:07:03.650
Who is it for?

131
00:07:03.650 --> 00:07:06.270
So let's go ahead and do that.

132
00:07:06.270 --> 00:07:08.200
I'm gonna modify this pizza.

133
00:07:08.200 --> 00:07:09.600
This is called a constructor,

134
00:07:09.600 --> 00:07:13.110
the function that makes an object is called a constructor.

135
00:07:13.110 --> 00:07:17.790
And that is going to take in array of toppings,

136
00:07:17.790 --> 00:07:20.100
I'm gonna default that to an empty array,

137
00:07:20.100 --> 00:07:23.640
and then also is going to take in a customer's name.

138
00:07:23.640 --> 00:07:25.380
Then inside of here, we just say

139
00:07:25.380 --> 00:07:28.450
this dot toppings is equal to toppings.

140
00:07:28.450 --> 00:07:33.450
So, say, save the toppings that were passed

141
00:07:34.660 --> 00:07:39.410
in to this instance of pizza.

142
00:07:39.410 --> 00:07:41.800
And then we'll do the same thing with the customer say

143
00:07:41.800 --> 00:07:45.600
this dot customer is equal to customer.

144
00:07:45.600 --> 00:07:48.390
And you could do other things like uppercase or lowercase

145
00:07:48.390 --> 00:07:50.670
or generate the name or generate an ID

146
00:07:50.670 --> 00:07:53.350
for that customer inside of it.

147
00:07:53.350 --> 00:07:54.760
Let's actually do that we'll say

148
00:07:54.760 --> 00:07:58.960
this dot ID is equal to Irish

149
00:07:58.960 --> 00:08:01.910
has this awesome little blog post anytime I need

150
00:08:01.910 --> 00:08:06.400
like a random ID, it's not guaranteed to be unique.

151
00:08:06.400 --> 00:08:09.610
But it's good enough for me in most use cases.

152
00:08:09.610 --> 00:08:12.970
And what this does is it gives you just a random hex code

153
00:08:12.970 --> 00:08:14.740
every single time that you run it.

154
00:08:14.740 --> 00:08:17.770
Sometimes I'll use that if I need to grab a random ID.

155
00:08:17.770 --> 00:08:20.443
So I'll take the pound off, I don't need that.

156
00:08:25.040 --> 00:08:27.150
And every single time that pizza is made,

157
00:08:27.150 --> 00:08:29.050
it will grab a new random ID.

158
00:08:29.050 --> 00:08:32.380
Now when I refresh it, you'll see this is my pizza

159
00:08:32.380 --> 00:08:35.920
has a bunch of information about that pizza,

160
00:08:35.920 --> 00:08:39.550
which is the toppings the customer and the ID,

161
00:08:39.550 --> 00:08:41.620
Oh, and they are empty and undefined

162
00:08:41.620 --> 00:08:42.900
because we haven't passed them in.

163
00:08:42.900 --> 00:08:44.850
So let's go ahead and do that.

164
00:08:44.850 --> 00:08:46.010
So when you create a pizza

165
00:08:46.010 --> 00:08:48.200
we want what do we want on our

166
00:08:48.200 --> 00:08:49.883
pepperoni pizza, just pepperoni.

167
00:08:52.620 --> 00:08:55.800
And who's the owner of this pepperoni pizza was boss.

168
00:08:55.800 --> 00:08:57.560
Now I'm going to make, I'm gonna get rid

169
00:08:57.560 --> 00:08:59.990
of these console logs right here.

170
00:08:59.990 --> 00:09:02.400
I'm going to make another pizza here.

171
00:09:02.400 --> 00:09:05.133
So duplicate it and we'll call that Canadian pizza.

172
00:09:08.070 --> 00:09:11.160
And yes, Canadians are responsible for pineapple and pizza.

173
00:09:11.160 --> 00:09:14.100
No, I'm not going to do that to you today

174
00:09:14.100 --> 00:09:18.900
on a Canadian pizza is pepperoni, mushrooms, and onion.

175
00:09:23.590 --> 00:09:26.610
And that will go to my wife.

176
00:09:26.610 --> 00:09:29.370
Now I've got two pizzas, let's go take a look at them.

177
00:09:29.370 --> 00:09:31.700
Refresh, so I clear all this out,

178
00:09:31.700 --> 00:09:35.380
will say the pepperoni pizza and the Canadian pizza.

179
00:09:35.380 --> 00:09:37.060
Now look at it, we open it up.

180
00:09:37.060 --> 00:09:39.780
There's a pizza, it has all of the information

181
00:09:39.780 --> 00:09:42.300
about that pizza stored inside of it,

182
00:09:42.300 --> 00:09:44.490
who it's for and the idea of that pizza.

183
00:09:44.490 --> 00:09:47.600
Same thing goes for each of the toppings.

184
00:09:47.600 --> 00:09:51.300
So this keyword when you're creating an object

185
00:09:51.300 --> 00:09:54.860
is used to store information about that instance

186
00:09:54.860 --> 00:09:58.520
in this is a perfect example the pepperoni pizza

187
00:09:58.520 --> 00:10:00.380
is an instance of pizza.

188
00:10:00.380 --> 00:10:03.880
And it has its own unique ID that needs to stay

189
00:10:03.880 --> 00:10:07.320
with that pizza, like the toppings who's it for in the ID.

190
00:10:07.320 --> 00:10:10.760
Canadian pizza also is an instance of pizza

191
00:10:10.760 --> 00:10:12.600
and it has internal information

192
00:10:12.600 --> 00:10:14.550
that needs to stay with that pizza.

193
00:10:14.550 --> 00:10:16.620
So that is what this is used for.

194
00:10:16.620 --> 00:10:18.530
This is used for storing data

195
00:10:18.530 --> 00:10:23.120
and actually functionality as well on each of the instances.

196
00:10:23.120 --> 00:10:26.470
Now in the next video, we're gonna go into prototypal

197
00:10:26.470 --> 00:10:31.080
methods that can be shared amongst all the pizzas

198
00:10:31.080 --> 00:10:33.210
because they always do the exact same thing.

199
00:10:33.210 --> 00:10:34.310
So see you in that one

