WEBVTT

1
00:00:00.509 --> 00:00:03.092
(upbeat music)

2
00:00:05.700 --> 00:00:07.250
<v Instructor>Let's talk about numbers in JavaScript.</v>

3
00:00:07.250 --> 00:00:10.037
There's only one type of number in JavaScript,

4
00:00:10.037 --> 00:00:12.290
and that is simply just number,

5
00:00:12.290 --> 00:00:14.350
and it's funny that I say the word type of

6
00:00:14.350 --> 00:00:16.770
because there's actually a little keyword

7
00:00:16.770 --> 00:00:17.790
in JavaScript that will allow you

8
00:00:17.790 --> 00:00:21.290
to check what the type of an actual value is.

9
00:00:21.290 --> 00:00:23.660
So let's go ahead and like say const age.

10
00:00:23.660 --> 00:00:26.580
By the way, I've commented out everything up here

11
00:00:26.580 --> 00:00:29.360
just to give us a fresh JS file.

12
00:00:29.360 --> 00:00:32.109
So I'll say const age = 100

13
00:00:32.109 --> 00:00:34.430
and const name = Wes.

14
00:00:34.430 --> 00:00:38.370
If I were to go in here and say typeof age

15
00:00:38.370 --> 00:00:41.040
that gives us number and typeof name, gives us string.

16
00:00:41.040 --> 00:00:44.747
So the typeof and then a space followed by an actual value,

17
00:00:44.747 --> 00:00:46.470
and that value could be a variable

18
00:00:46.470 --> 00:00:49.534
or it could just be simply typeof

19
00:00:49.534 --> 00:00:52.700
actual value that we type in there.

20
00:00:52.700 --> 00:00:54.743
That will tell you whether it's a number,

21
00:00:54.743 --> 00:00:57.420
a string, any of the different types

22
00:00:57.420 --> 00:00:59.010
that we are looking at right now.

23
00:00:59.010 --> 00:01:00.630
So that's pretty handy especially

24
00:01:00.630 --> 00:01:04.170
when you're working with data that's coming from the user.

25
00:01:04.170 --> 00:01:08.150
You're not necessarily sure what type is actually coming in.

26
00:01:08.150 --> 00:01:11.200
You maybe you need to a little bit of massaging.

27
00:01:11.200 --> 00:01:14.650
So numbers in JavaScript are pretty simple.

28
00:01:14.650 --> 00:01:18.320
You can create what's called a integer,

29
00:01:18.320 --> 00:01:19.210
which is a whole number,

30
00:01:19.210 --> 00:01:21.490
or you can create a what's called a float,

31
00:01:21.490 --> 00:01:23.520
which is a number that has a decimal,

32
00:01:23.520 --> 00:01:28.380
and they are both used in the same type of number.

33
00:01:28.380 --> 00:01:30.640
There are multiplication, division, addition

34
00:01:30.640 --> 00:01:32.820
and subtraction available to us.

35
00:01:32.820 --> 00:01:36.540
So if we just say const a = 10

36
00:01:36.540 --> 00:01:38.583
and const b = 20,

37
00:01:39.440 --> 00:01:41.620
if we do a + b,

38
00:01:41.620 --> 00:01:42.880
we get 30.

39
00:01:42.880 --> 00:01:43.870
So

40
00:01:43.870 --> 00:01:45.390
a * b,

41
00:01:45.390 --> 00:01:47.706
200, a / b

42
00:01:47.706 --> 00:01:49.940
and then a - b.

43
00:01:49.940 --> 00:01:53.160
You get the actual values that you would expect.

44
00:01:53.160 --> 00:01:55.190
If there's a decimal, it will return the decimal.

45
00:01:55.190 --> 00:01:57.410
Otherwise, it would just return a whole number.

46
00:01:57.410 --> 00:02:00.610
Pretty simple, the only sort of one to aware of here

47
00:02:00.610 --> 00:02:02.290
is when you are mixing types.

48
00:02:02.290 --> 00:02:03.670
So we looked at this earlier.

49
00:02:03.670 --> 00:02:05.457
If you have a number one,

50
00:02:05.457 --> 00:02:09.610
and you try to do math with something that is not a number,

51
00:02:09.610 --> 00:02:12.240
which is a type of string,

52
00:02:12.240 --> 00:02:13.830
then you start getting

53
00:02:13.830 --> 00:02:16.160
into what's called concatenation world, right?

54
00:02:16.160 --> 00:02:17.410
And that's what in JavaScript

55
00:02:17.410 --> 00:02:19.730
we refer to as the plus sign is loaded

56
00:02:19.730 --> 00:02:22.960
meaning the plus sign can be used with numbers to add.

57
00:02:22.960 --> 00:02:25.380
It can be used with strings to concatenate,

58
00:02:25.380 --> 00:02:27.650
and then there's this whole world of hurt

59
00:02:27.650 --> 00:02:30.370
in the middle that you can run into lots of bugs

60
00:02:30.370 --> 00:02:33.600
where, if you accidentally do use a plus sign

61
00:02:33.600 --> 00:02:35.720
with one of each, then the results

62
00:02:35.720 --> 00:02:38.280
are a little bit unpredictable.

63
00:02:38.280 --> 00:02:41.900
If you try to do math with strings,

64
00:02:41.900 --> 00:02:43.580
it will actually convert them for you.

65
00:02:43.580 --> 00:02:46.040
So 10 times the string of 10,

66
00:02:46.040 --> 00:02:48.352
it will say like,"Um, what are you doing?

67
00:02:48.352 --> 00:02:50.287
"Doing math with strings,

68
00:02:50.287 --> 00:02:51.700
"that's not allowed."

69
00:02:51.700 --> 00:02:54.147
But it'll say like, "Okay, you're multiplying,

70
00:02:54.147 --> 00:02:56.297
"the only thing you can do with a multiplication is numbers,

71
00:02:56.297 --> 00:02:59.710
"so let me just convert 'em over to actual numbers first."

72
00:02:59.710 --> 00:03:02.595
That works with division and subtraction,

73
00:03:02.595 --> 00:03:05.900
but not the plus sign because the plus sign

74
00:03:05.900 --> 00:03:07.238
also does concatenation.

75
00:03:07.238 --> 00:03:08.940
So bit of a headache there.

76
00:03:08.940 --> 00:03:11.100
So we need to make sure that we are,

77
00:03:11.100 --> 00:03:12.940
whenever we're doing math, we're actually dealing

78
00:03:12.940 --> 00:03:16.430
with true numbers and not sort of mixing the two.

79
00:03:16.430 --> 00:03:17.920
Along with numbers, we actually have

80
00:03:17.920 --> 00:03:19.140
what are called helper methods.

81
00:03:19.140 --> 00:03:21.200
Now, we haven't gone into functions or methods just yet,

82
00:03:21.200 --> 00:03:23.390
but I'm sure you can understand what these are.

83
00:03:23.390 --> 00:03:26.970
So if we type in capital M Math.,

84
00:03:26.970 --> 00:03:28.710
we actually have a whole bunch of what are called

85
00:03:28.710 --> 00:03:32.480
helper methods in here that are used for doing math.

86
00:03:32.480 --> 00:03:34.390
And there's tons in here if you wanna

87
00:03:34.390 --> 00:03:35.740
get really nerdy about it,

88
00:03:35.740 --> 00:03:38.390
but sort of the four that you will probably use

89
00:03:38.390 --> 00:03:40.300
is you can run Math.round,

90
00:03:40.300 --> 00:03:42.900
and then, when you put a value

91
00:03:42.900 --> 00:03:44.430
in between these parentheses here,

92
00:03:44.430 --> 00:03:45.660
that's called passing a value.

93
00:03:45.660 --> 00:03:47.190
We're gonna go much into that

94
00:03:47.190 --> 00:03:49.680
when we hit functions in just a minute

95
00:03:49.680 --> 00:03:51.730
and, if you give it a actual value,

96
00:03:51.730 --> 00:03:54.320
it's obviously gonna round it up or down

97
00:03:54.320 --> 00:03:55.360
depending on what we have.

98
00:03:55.360 --> 00:03:57.600
Similarly, we have Math.floor.

99
00:03:57.600 --> 00:04:00.000
That will give you the lower end of that number,

100
00:04:01.110 --> 00:04:03.250
and we have Math.seal.

101
00:04:03.250 --> 00:04:05.770
I'm joking, it's ceil, C-E-I-L,

102
00:04:05.770 --> 00:04:08.050
and that will you the upper one

103
00:04:08.050 --> 00:04:10.690
and then we have Math.random,

104
00:04:10.690 --> 00:04:12.450
which will give you a random number

105
00:04:12.450 --> 00:04:15.300
between zero and one,

106
00:04:15.300 --> 00:04:17.690
which is helpful for doing random stuff.

107
00:04:17.690 --> 00:04:18.610
We'll show you how,

108
00:04:18.610 --> 00:04:21.950
like how could you get a random number between one and 10,

109
00:04:21.950 --> 00:04:25.270
and how could you get a random number between 10 and 50.

110
00:04:25.270 --> 00:04:26.950
We'll look at lots of examples

111
00:04:26.950 --> 00:04:30.820
as to how to do that when we get into some exercises.

112
00:04:30.820 --> 00:04:33.820
Along with multiplication, division, subtraction

113
00:04:33.820 --> 00:04:36.390
and addition, we actually have two other operators,

114
00:04:36.390 --> 00:04:39.150
and those are the modulo and the power.

115
00:04:39.150 --> 00:04:40.410
So if we take

116
00:04:41.249 --> 00:04:42.082
a look here,

117
00:04:42.082 --> 00:04:44.190
I've got these Smarties open right here.

118
00:04:44.190 --> 00:04:46.120
This is a Canadian candy that we have,

119
00:04:46.120 --> 00:04:49.320
and it's kinda like M&amp;M's except a little bit worse

120
00:04:50.640 --> 00:04:53.300
and what happens is you buy a box of 'em

121
00:04:53.300 --> 00:04:55.360
and you wanna split 'em up between your kids.

122
00:04:55.360 --> 00:04:57.580
So let's say, get outta here,

123
00:04:57.580 --> 00:04:59.830
let's say there's 20 Smarties in a box,

124
00:04:59.830 --> 00:05:00.750
and you've got three kids.

125
00:05:00.750 --> 00:05:02.520
Let's do a little bit of math here.

126
00:05:02.520 --> 00:05:03.690
Make it fun.

127
00:05:03.690 --> 00:05:07.700
So const smarties = 20 smarties,

128
00:05:07.700 --> 00:05:10.070
and const kids = 3

129
00:05:10.070 --> 00:05:12.300
so how many smarties does each kid get.

130
00:05:12.300 --> 00:05:13.670
Const eachKidGets

131
00:05:17.810 --> 00:05:20.750
smarties / kids.

132
00:05:20.750 --> 00:05:21.750
We'll go console log

133
00:05:23.280 --> 00:05:24.993
Each kid gets,

134
00:05:26.688 --> 00:05:27.688
eachKidGets.

135
00:05:33.736 --> 00:05:36.986
So each kid gets 6.6666666667 Smarties.

136
00:05:38.550 --> 00:05:40.070
Well, obviously that's not gonna work.

137
00:05:40.070 --> 00:05:43.520
You're not gonna split a Smartie into 66666666,

138
00:05:43.520 --> 00:05:47.040
so what we can do there is you say like okay,

139
00:05:47.040 --> 00:05:49.410
obviously it's the whole number of Smarties.

140
00:05:49.410 --> 00:05:50.901
We're not gonna, we can't round up

141
00:05:50.901 --> 00:05:53.160
because you can't just like pull a fraction

142
00:05:53.160 --> 00:05:54.720
of a Smartie from thin air,

143
00:05:54.720 --> 00:05:56.340
so you have to go to the bottom,

144
00:05:56.340 --> 00:05:59.160
and that's what Math.floor is,

145
00:05:59.160 --> 00:06:00.713
so Math.floor,

146
00:06:03.280 --> 00:06:05.620
and now each kid gets six.

147
00:06:05.620 --> 00:06:07.620
Now, the question is how many are left over,

148
00:06:07.620 --> 00:06:08.700
how many did dad get?

149
00:06:08.700 --> 00:06:13.420
Like when you can no longer evenly distribute them,

150
00:06:13.420 --> 00:06:15.490
each kid gets six, six, six, there's obviously

151
00:06:15.490 --> 00:06:18.070
gonna be two left, but what you can do is

152
00:06:18.070 --> 00:06:20.170
you can use the modulo operator

153
00:06:20.170 --> 00:06:21.660
to tell how many are left

154
00:06:21.660 --> 00:06:24.520
after they've been evenly split up.

155
00:06:24.520 --> 00:06:27.203
So if I take the Smarties,

156
00:06:28.100 --> 00:06:31.340
and I use the % sign, that's the modulo operator,

157
00:06:31.340 --> 00:06:33.700
and I divide it by kids, it gives me two.

158
00:06:33.700 --> 00:06:36.480
Why, because after the number of kids

159
00:06:36.480 --> 00:06:38.650
has been evenly divided into Smarties

160
00:06:38.650 --> 00:06:41.370
how many are left that cannot be evenly divided in?

161
00:06:41.370 --> 00:06:43.390
Of course, that is two are left.

162
00:06:43.390 --> 00:06:46.117
So we could make another const dadGets

163
00:06:47.180 --> 00:06:48.560
smarties

164
00:06:48.560 --> 00:06:49.730
mod

165
00:06:49.730 --> 00:06:50.563
kids,

166
00:06:50.563 --> 00:06:52.640
and that will tell you exactly how many are left

167
00:06:52.640 --> 00:06:53.473
at the end of a day.

168
00:06:53.473 --> 00:06:55.970
Again, let's do another simple example.

169
00:06:55.970 --> 00:06:59.270
I've got 10 and I've got 10 Smarties,

170
00:06:59.270 --> 00:07:00.690
and I got three kids,

171
00:07:00.690 --> 00:07:02.870
so it's gonna be one left at the end of the day.

172
00:07:02.870 --> 00:07:05.330
So we'll look at some examples of where

173
00:07:05.330 --> 00:07:06.580
that might be helpful.

174
00:07:06.580 --> 00:07:09.330
So that modulo operator I don't use all that often,

175
00:07:09.330 --> 00:07:10.550
but it does come in handy

176
00:07:10.550 --> 00:07:11.500
when you sort of need to know it

177
00:07:11.500 --> 00:07:14.200
rather than having to do the math of subtraction

178
00:07:14.200 --> 00:07:17.410
and rounding and all of that sort of hard stuff.

179
00:07:17.410 --> 00:07:19.950
Other things you need to know about math in JavaScript

180
00:07:19.950 --> 00:07:22.290
is that if you do something like this

181
00:07:22.290 --> 00:07:23.793
0.1 + 0.2

182
00:07:24.704 --> 00:07:25.621
is equal to

183
00:07:26.744 --> 00:07:27.744
0.3330000004

184
00:07:31.510 --> 00:07:33.660
and usually when people are learning

185
00:07:33.660 --> 00:07:35.737
they go, "Uh, I'm gonna tweet this.

186
00:07:35.737 --> 00:07:37.890
"How garbage is JavaScript."

187
00:07:37.890 --> 00:07:39.170
so what I invite you to do

188
00:07:39.170 --> 00:07:42.133
is to type in window.location = ``

189
00:07:43.902 --> 00:07:46.893
we'll say https://

190
00:07:48.560 --> 00:07:51.230
and then we'll use our $ curly brackets

191
00:07:51.230 --> 00:07:53.370
0.1 + 0.2 .com.

192
00:07:54.850 --> 00:07:55.683
Ready?

193
00:07:56.800 --> 00:08:00.580
Boom and this will bring you to 0.3000000

194
00:08:00.580 --> 00:08:03.110
repeat 4.com

195
00:08:03.110 --> 00:08:04.310
and then it will,

196
00:08:04.310 --> 00:08:05.617
it says, "Your language isn't broken.

197
00:08:05.617 --> 00:08:07.287
"You're doing floating point math.

198
00:08:07.287 --> 00:08:10.097
"Computers can only natively store integers,

199
00:08:10.097 --> 00:08:11.917
"integers are whole numbers,

200
00:08:11.917 --> 00:08:13.237
"so they need some sort of way

201
00:08:13.237 --> 00:08:14.567
"of representing decimal numbers.

202
00:08:14.567 --> 00:08:18.647
"Representation comes at some sort of degree of inaccuracy.

203
00:08:18.647 --> 00:08:19.962
"That's why more often than not."

204
00:08:19.962 --> 00:08:22.600
And it goes onto show that almost every language

205
00:08:22.600 --> 00:08:23.633
that you work in,

206
00:08:24.780 --> 00:08:27.590
not ColdFusion apparently, will actually

207
00:08:27.590 --> 00:08:29.210
return this result to you.

208
00:08:29.210 --> 00:08:32.010
So that's how floating point numbers work,

209
00:08:32.010 --> 00:08:34.740
and that's why it's probably one thing

210
00:08:34.740 --> 00:08:35.573
that you'll need to know

211
00:08:35.573 --> 00:08:38.090
is if you ever are working with money

212
00:08:38.090 --> 00:08:40.650
don't store money in dollars and cents.

213
00:08:40.650 --> 00:08:45.210
So if I have something like const price

214
00:08:45.210 --> 00:08:48.990
and I say it's like $10 and 34 cents,

215
00:08:48.990 --> 00:08:52.330
and you somebody gives you a $20 bill

216
00:08:52.330 --> 00:08:55.190
that can run into little situations here or there

217
00:08:55.190 --> 00:08:58.700
where you do get the sort of long rounded number

218
00:08:58.700 --> 00:09:01.480
and you have like a half a cent

219
00:09:01.480 --> 00:09:02.620
and what do you do with that.

220
00:09:02.620 --> 00:09:04.810
And if you try to refund something

221
00:09:04.810 --> 00:09:06.990
like I had an own bug on my own course platform

222
00:09:06.990 --> 00:09:09.120
where if someone paid a certain amount,

223
00:09:09.120 --> 00:09:10.840
and I tried to refund them,

224
00:09:10.840 --> 00:09:14.700
it was trying to refund them with this like decimal in it.

225
00:09:14.700 --> 00:09:18.200
So what I do now is that I always store all

226
00:09:18.200 --> 00:09:20.900
of my prices in just cents.

227
00:09:20.900 --> 00:09:23.530
So that way you're always working with whole numbers.

228
00:09:23.530 --> 00:09:25.300
You never have to deal with fractions

229
00:09:25.300 --> 00:09:28.910
or partial numbers and then when you wanna go

230
00:09:28.910 --> 00:09:31.610
and show that actual value to somebody

231
00:09:31.610 --> 00:09:33.530
you simply divide it by zero

232
00:09:33.530 --> 00:09:35.120
and then round the cents.

233
00:09:35.120 --> 00:09:36.640
We'll look at a bunch of examples

234
00:09:36.640 --> 00:09:39.110
of displaying money pretty soon actually.

235
00:09:39.110 --> 00:09:40.640
We'll get into those.

236
00:09:40.640 --> 00:09:42.250
Some other things we need to know about is

237
00:09:42.250 --> 00:09:45.850
that JavaScript also has infinity and negative infinity.

238
00:09:45.850 --> 00:09:48.180
So there actually is like at the end of the day

239
00:09:48.180 --> 00:09:53.050
there is a max that computers can calculate with numbers,

240
00:09:53.050 --> 00:09:56.130
and if you try to calculate something that is too high

241
00:09:56.130 --> 00:10:00.950
then it will return to you infinity or negative infinity.

242
00:10:00.950 --> 00:10:02.630
So let me show you here.

243
00:10:02.630 --> 00:10:06.360
If I have 10, and if you use ** that's actually

244
00:10:06.360 --> 00:10:10.910
to the power of, so 10 to the power of two is 100,

245
00:10:10.910 --> 00:10:13.540
but you start jacking that up real quick,

246
00:10:13.540 --> 00:10:17.860
you start to hit, you see like this is to the power of 60,

247
00:10:17.860 --> 00:10:19.740
but as soon as you go higher than the computer

248
00:10:19.740 --> 00:10:23.430
can actually calculate, it will return to you Infinity.

249
00:10:23.430 --> 00:10:27.220
And if you do typeof Infinity it will give you number.

250
00:10:27.220 --> 00:10:29.990
So infinity and negative infinity

251
00:10:29.990 --> 00:10:33.960
are both true numbers in JavaScript.

252
00:10:33.960 --> 00:10:36.920
Again, I probably have never used that.

253
00:10:36.920 --> 00:10:38.420
The only time I've ever run into it

254
00:10:38.420 --> 00:10:40.720
is where I've accidentally done some math

255
00:10:40.720 --> 00:10:43.510
where I goofed it up, and then it will tell you,

256
00:10:43.510 --> 00:10:44.670
you've hit infinity.

257
00:10:44.670 --> 00:10:45.810
This is higher than computers

258
00:10:45.810 --> 00:10:49.030
can possibly calculate right now.

259
00:10:49.030 --> 00:10:50.620
The other thing that we need to know

260
00:10:50.620 --> 00:10:53.660
is that there is another number that is not a number,

261
00:10:53.660 --> 00:10:54.900
and it's NaN,

262
00:10:54.900 --> 00:10:58.400
so if you try to do something like 10 / dog,

263
00:10:58.400 --> 00:10:59.500
it gives you NaN,

264
00:10:59.500 --> 00:11:02.260
and that means Not a Number,

265
00:11:02.260 --> 00:11:07.000
and Not a Number is a actually a number.

266
00:11:07.000 --> 00:11:10.710
So typeof NaN is a number, which is confusing enough,

267
00:11:10.710 --> 00:11:13.700
but that's something that you're going to see

268
00:11:13.700 --> 00:11:16.430
where if you are trying to do math

269
00:11:16.430 --> 00:11:17.920
with something that is not a number,

270
00:11:17.920 --> 00:11:19.810
instead of erroring out, it's just going

271
00:11:19.810 --> 00:11:22.320
to extra return to you Not a Number.

272
00:11:22.320 --> 00:11:23.340
That's it for numbers.

273
00:11:23.340 --> 00:11:25.753
Let's move into the next one, which is Boolean.

