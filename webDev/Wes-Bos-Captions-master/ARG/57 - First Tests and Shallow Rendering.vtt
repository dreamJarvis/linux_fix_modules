WEBVTT

1
00:00:00.375 --> 00:00:02.767
<v Trainer>Alright, now let's get into</v>

2
00:00:02.767 --> 00:00:05.257
actually testing our components that are on the page

3
00:00:05.257 --> 00:00:07.599
and we're going to start with this item component

4
00:00:07.599 --> 00:00:08.633
that we have here

5
00:00:08.633 --> 00:00:10.974
because this item component doesn't actually have

6
00:00:10.974 --> 00:00:12.696
any queries or mutations in it.

7
00:00:12.696 --> 00:00:15.185
It's actually just past in via props

8
00:00:15.185 --> 00:00:16.866
and then we display it.

9
00:00:16.866 --> 00:00:19.280
So we're going to import this component into a test.

10
00:00:19.280 --> 00:00:20.511
We're going to render it on out.

11
00:00:20.511 --> 00:00:21.344
And we're going to check

12
00:00:21.344 --> 00:00:23.912
that all these things are working as planned.

13
00:00:23.912 --> 00:00:26.545
We're going to check that the description is there,

14
00:00:26.545 --> 00:00:28.006
and that the title is there,

15
00:00:28.006 --> 00:00:29.315
and that the image is there,

16
00:00:29.315 --> 00:00:31.998
and that the price is being formatted properly,

17
00:00:31.998 --> 00:00:32.831
and you get the point.

18
00:00:32.831 --> 00:00:34.766
So let's open up test.

19
00:00:34.766 --> 00:00:36.454
And we're going to make a new one

20
00:00:36.454 --> 00:00:37.287
called

21
00:00:37.287 --> 00:00:38.227
item

22
00:00:38.227 --> 00:00:39.168
.js

23
00:00:39.168 --> 00:00:40.001
And then inside of that,

24
00:00:40.001 --> 00:00:41.614
we're going to import that component.

25
00:00:41.614 --> 00:00:43.240
We're going to import

26
00:00:43.240 --> 00:00:44.490
item component

27
00:00:44.490 --> 00:00:45.323
from

28
00:00:45.323 --> 00:00:46.921
and I believe it's up a level

29
00:00:46.921 --> 00:00:48.112
into components

30
00:00:48.112 --> 00:00:48.945
into

31
00:00:48.945 --> 00:00:50.461
item.

32
00:00:50.461 --> 00:00:51.294
There we go.

33
00:00:51.294 --> 00:00:54.012
Then, what we're going to do is make a fake item

34
00:00:54.012 --> 00:00:55.912
that gets passed into that component.

35
00:00:55.912 --> 00:00:57.882
So const fake item

36
00:00:57.882 --> 00:00:58.739
is equal to this.

37
00:00:58.739 --> 00:01:00.578
And we'll say the ID of it is

38
00:01:00.578 --> 00:01:01.969
ABC

39
00:01:01.969 --> 00:01:03.527
123.

40
00:01:03.527 --> 00:01:05.811
Our title is going to be

41
00:01:05.811 --> 00:01:07.337
'A Cool Item.'

42
00:01:07.337 --> 00:01:09.590
And I'm just going to fill out the rest of the fields here.

43
00:01:09.590 --> 00:01:13.923
You can scrub fast forward through this if you like.

44
00:01:15.143 --> 00:01:17.476
Now we're going to go ahead a write our test suite.

45
00:01:17.476 --> 00:01:18.309
So describe

46
00:01:18.309 --> 00:01:20.984
I always like to put the actually component in the describe.

47
00:01:20.984 --> 00:01:22.484
So we'll say item.

48
00:01:28.409 --> 00:01:29.734
And we're going to

49
00:01:29.734 --> 00:01:30.567
test

50
00:01:30.567 --> 00:01:31.400
that it

51
00:01:31.400 --> 00:01:32.349
renders

52
00:01:32.349 --> 00:01:33.859
and displays

53
00:01:33.859 --> 00:01:34.692
properly.

54
00:01:36.000 --> 00:01:37.000
There we go.

55
00:01:37.842 --> 00:01:40.828
Now, how do we actually render out a component

56
00:01:40.828 --> 00:01:41.661
inside of a test?

57
00:01:41.661 --> 00:01:43.216
That's where we get into

58
00:01:43.216 --> 00:01:44.768
using enzymes

59
00:01:44.768 --> 00:01:45.946
shallow rendering.

60
00:01:45.946 --> 00:01:47.423
I'm going to explain what the difference is

61
00:01:47.423 --> 00:01:49.670
between shallow and mounting in just a second

62
00:01:49.670 --> 00:01:51.118
but let's jump to the top here,

63
00:01:51.118 --> 00:01:52.883
and we'll import

64
00:01:52.883 --> 00:01:54.139
shallow

65
00:01:54.139 --> 00:01:54.972
from

66
00:01:54.972 --> 00:01:55.805
enzyme.

67
00:01:55.805 --> 00:01:57.936
And we'll go down here and actually mount it.

68
00:01:57.936 --> 00:02:00.980
Now, I like to call these mounted components a wrapper

69
00:02:00.980 --> 00:02:04.475
because that is the entire component itself.

70
00:02:04.475 --> 00:02:06.749
And then we can actually dive into those

71
00:02:06.749 --> 00:02:10.664
and find all of the spans and divs and images and prices

72
00:02:10.664 --> 00:02:11.685
and whatnot (mumbles).

73
00:02:11.685 --> 00:02:12.768
Const wrapper

74
00:02:13.731 --> 00:02:16.397
I'll call this wrapper in all of my tests.

75
00:02:16.397 --> 00:02:18.132
And we'll shallow mount it,

76
00:02:18.132 --> 00:02:20.420
and we simply just pass it the component we want.

77
00:02:20.420 --> 00:02:21.997
We'll say item

78
00:02:21.997 --> 00:02:22.830
component

79
00:02:26.547 --> 00:02:27.635
and we'll pass it

80
00:02:27.635 --> 00:02:29.107
the actual item

81
00:02:29.107 --> 00:02:30.296
as if we were writing react.

82
00:02:30.296 --> 00:02:31.784
So we'll say fake item,

83
00:02:31.784 --> 00:02:34.576
so you see we're passing it the data that we have here.

84
00:02:34.576 --> 00:02:36.770
And let's go ahead and

85
00:02:36.770 --> 00:02:37.770
console .log

86
00:02:39.311 --> 00:02:40.495
wrapper

87
00:02:40.495 --> 00:02:42.049
It says shallow wrapper length one.

88
00:02:42.049 --> 00:02:43.670
That tells us that there is something there

89
00:02:43.670 --> 00:02:45.271
but it doesn't show us what it is,

90
00:02:45.271 --> 00:02:48.428
so the way we can do that is copy .debug method

91
00:02:48.428 --> 00:02:50.009
on the end of this wrapper.

92
00:02:50.009 --> 00:02:52.762
So we'll run that and that should show us

93
00:02:52.762 --> 00:02:55.619
all of the HTML that would be rendered out

94
00:02:55.619 --> 00:02:57.898
if this component were to be rendered out

95
00:02:57.898 --> 00:03:00.152
into a react application.

96
00:03:00.152 --> 00:03:03.116
That .debug is alongside all of these

97
00:03:03.116 --> 00:03:04.960
if you go to the

98
00:03:04.960 --> 00:03:06.704
shallow wrapper documentation

99
00:03:06.704 --> 00:03:07.537
for shallow rendering.

100
00:03:07.537 --> 00:03:09.395
You'll see that all of these are the methods

101
00:03:09.395 --> 00:03:11.624
that can be called on

102
00:03:11.624 --> 00:03:13.398
any wrapper that you have.

103
00:03:13.398 --> 00:03:15.250
You can do traversal.

104
00:03:15.250 --> 00:03:16.692
You can go up a level, down a level.

105
00:03:16.692 --> 00:03:18.770
You can search inside using .find.

106
00:03:18.770 --> 00:03:21.147
You can use .first to grab the first thing

107
00:03:21.147 --> 00:03:23.709
if there's multiple elements that are found.

108
00:03:23.709 --> 00:03:25.046
You can check

109
00:03:25.046 --> 00:03:26.452
if things equal in node.

110
00:03:26.452 --> 00:03:29.104
You can find children. You get the point.

111
00:03:29.104 --> 00:03:31.529
There's all kinds of jquery like API methods

112
00:03:31.529 --> 00:03:32.834
that are available

113
00:03:32.834 --> 00:03:35.935
for traversing going in and out of your react

114
00:03:35.935 --> 00:03:36.768
component.

115
00:03:36.768 --> 00:03:39.404
Now, let's do a couple of things.

116
00:03:39.404 --> 00:03:41.054
Let's check a few things.

117
00:03:41.054 --> 00:03:43.033
Let's start with this price tag here.

118
00:03:43.033 --> 00:03:46.141
I want to check that this price tag has

119
00:03:46.141 --> 00:03:47.338
fifty dollars shown

120
00:03:47.338 --> 00:03:48.207
inside of it.

121
00:03:48.207 --> 00:03:49.329
So, how do we grab that?

122
00:03:49.329 --> 00:03:51.880
I always like to put them in, these are like sub-wrappers.

123
00:03:51.880 --> 00:03:53.718
I like to put them in their own variables

124
00:03:53.718 --> 00:03:55.457
if I'm going to be using them more than once

125
00:03:55.457 --> 00:03:57.320
so I'll just make a new variable here.

126
00:03:57.320 --> 00:03:58.386
Const

127
00:03:58.386 --> 00:03:59.219
PriceTag

128
00:03:59.219 --> 00:04:00.052
is equal to

129
00:04:00.052 --> 00:04:01.427
wrapper .find

130
00:04:01.427 --> 00:04:03.965
and we're going to search for the price tag.

131
00:04:03.965 --> 00:04:08.959
Let's switch out the console log with the price tag

132
00:04:08.959 --> 00:04:10.393
and you'll see that we get the price tag.

133
00:04:10.393 --> 00:04:13.776
Now, in order to get the actual text out of that

134
00:04:13.776 --> 00:04:16.731
you think you would just use

135
00:04:16.731 --> 00:04:17.619
.text

136
00:04:17.619 --> 00:04:19.823
however that just gives us the element.

137
00:04:19.823 --> 00:04:22.207
Now, this is the difference between shallow rendering

138
00:04:22.207 --> 00:04:23.942
and actually mounting it.

139
00:04:23.942 --> 00:04:24.864
If we go back,

140
00:04:24.864 --> 00:04:29.614
let me just console log the wrapper .debug one more time.

141
00:04:31.174 --> 00:04:34.443
You'll notice that we have all of these components

142
00:04:34.443 --> 00:04:35.517
that are inside of here.

143
00:04:35.517 --> 00:04:37.089
We have this Add to Cart component.

144
00:04:37.089 --> 00:04:38.769
We have the Delete Item component.

145
00:04:38.769 --> 00:04:40.202
We have our Price Tag component.

146
00:04:40.202 --> 00:04:41.563
We have our title component.

147
00:04:41.563 --> 00:04:42.748
These are all components

148
00:04:42.748 --> 00:04:44.955
and they are not actually getting rendered out

149
00:04:44.955 --> 00:04:45.869
to the true HTML

150
00:04:45.869 --> 00:04:47.986
because what shallow rendering just does

151
00:04:47.986 --> 00:04:50.395
is simply just renders the top level component,

152
00:04:50.395 --> 00:04:52.298
which in our case, it's item,

153
00:04:52.298 --> 00:04:54.451
and it won't go any levels deeper.

154
00:04:54.451 --> 00:04:56.946
It's not going to actually render out the Add to Cart

155
00:04:56.946 --> 00:04:58.031
into a true button

156
00:04:58.031 --> 00:04:59.892
because we're going to

157
00:04:59.892 --> 00:05:02.306
separately test that Add to Cart component ourselves,

158
00:05:02.306 --> 00:05:03.964
and we don't need to go into it.

159
00:05:03.964 --> 00:05:05.948
Similarly with Delete Item,

160
00:05:05.948 --> 00:05:09.216
we don't need to render that out itself

161
00:05:09.216 --> 00:05:11.380
because we're going to have a separate test

162
00:05:11.380 --> 00:05:15.185
that's going to test just that button by itself.

163
00:05:15.185 --> 00:05:16.983
Now, that's okay,

164
00:05:16.983 --> 00:05:20.784
but if we try and go into this Price Tag .text,

165
00:05:20.784 --> 00:05:23.501
you'll see that we just get the Price Tag component.

166
00:05:23.501 --> 00:05:25.588
There's a couple ways around that.

167
00:05:25.588 --> 00:05:26.421
We could

168
00:05:27.838 --> 00:05:29.921
do what's called a .dive.

169
00:05:30.993 --> 00:05:32.203
What .dive will do,

170
00:05:32.203 --> 00:05:34.946
there you go, you see it's giving us fifty bucks now.

171
00:05:34.946 --> 00:05:38.521
Dive will shallow render one level deeper.

172
00:05:38.521 --> 00:05:41.350
So if you ever do need to render one level,

173
00:05:41.350 --> 00:05:43.794
and then go, I actually do need to render another level,

174
00:05:43.794 --> 00:05:45.396
I don't want to mount the entire thing.

175
00:05:45.396 --> 00:05:47.527
I don't want to render the entire component

176
00:05:47.527 --> 00:05:50.053
in all of its levels. I just want to do a shallow.

177
00:05:50.053 --> 00:05:51.998
.dive will take you one level deeper.

178
00:05:51.998 --> 00:05:53.651
Another way you can access the text

179
00:05:53.651 --> 00:05:56.151
that is in there is .children.

180
00:05:59.470 --> 00:06:02.365
And .children will give you the actual child

181
00:06:02.365 --> 00:06:04.010
of that price tag.

182
00:06:04.010 --> 00:06:05.887
And in our case its just a text note.

183
00:06:05.887 --> 00:06:08.369
We could write some expects here, real quick,

184
00:06:08.369 --> 00:06:09.202
expect

185
00:06:10.252 --> 00:06:12.139
the price tag

186
00:06:12.139 --> 00:06:12.972
.children

187
00:06:14.962 --> 00:06:16.386
.toBe

188
00:06:16.386 --> 00:06:18.191
fifty dollars

189
00:06:18.191 --> 00:06:20.828
Doesn't look like its working.

190
00:06:20.828 --> 00:06:21.906
(mumbles)

191
00:06:21.906 --> 00:06:23.563
This is the actual text.

192
00:06:23.563 --> 00:06:24.696
Children

193
00:06:24.696 --> 00:06:26.187
.text.

194
00:06:26.187 --> 00:06:27.020
.tap

195
00:06:27.020 --> 00:06:27.853
.text

196
00:06:29.752 --> 00:06:33.229
And it looks like that one is working just fine

197
00:06:33.229 --> 00:06:35.515
so we are expecting it to be fifty bucks.

198
00:06:35.515 --> 00:06:37.192
If this seems a little bit awkward,

199
00:06:37.192 --> 00:06:38.586
it's because it is.

200
00:06:38.586 --> 00:06:42.238
And I think that the snapshot texting

201
00:06:42.238 --> 00:06:44.729
which we are going to be looking at in the next video

202
00:06:44.729 --> 00:06:46.560
will solve a lot of this traversal,

203
00:06:46.560 --> 00:06:49.403
but for now let's keep going with this sort of traversal

204
00:06:49.403 --> 00:06:52.811
and enzyme testing just to show you how it works

205
00:06:52.811 --> 00:06:54.461
in testing all of the different pieces.

206
00:06:54.461 --> 00:06:56.079
That's the price tag.

207
00:06:56.079 --> 00:06:58.221
Let's check, let's do the H three next.

208
00:06:58.221 --> 00:07:00.759
So, we've got this title tag here,

209
00:07:00.759 --> 00:07:03.112
and we want to find the link inside of that

210
00:07:03.112 --> 00:07:05.352
and find the text of that

211
00:07:05.352 --> 00:07:06.352
so let's say

212
00:07:07.370 --> 00:07:08.203
expect

213
00:07:09.220 --> 00:07:10.086
the wrapper

214
00:07:10.086 --> 00:07:10.919
.find

215
00:07:13.707 --> 00:07:15.374
we'll find the title

216
00:07:17.160 --> 00:07:19.243
inside of that, the link,

217
00:07:20.099 --> 00:07:22.599
and we'll call the .text to be

218
00:07:23.569 --> 00:07:25.907
and I'll just write 'hi' inside of there.

219
00:07:25.907 --> 00:07:27.003
I'll see the error.

220
00:07:27.003 --> 00:07:29.546
It says expected to be hi. It gave you a cool item.

221
00:07:29.546 --> 00:07:33.942
And we can just switch that out with a cool item,

222
00:07:33.942 --> 00:07:38.753
or we could just reference the fake item .title directly

223
00:07:38.753 --> 00:07:40.834
and that's probably writing a better test

224
00:07:40.834 --> 00:07:42.808
because then if the fake item ever changes,

225
00:07:42.808 --> 00:07:45.529
we don't ever have to update our test.

226
00:07:45.529 --> 00:07:46.362
So let's do that.

227
00:07:46.362 --> 00:07:47.304
Fake item

228
00:07:47.304 --> 00:07:48.137
.title.

229
00:07:50.187 --> 00:07:51.903
Looking good.

230
00:07:51.903 --> 00:07:54.310
Another thing we can do is test the image.

231
00:07:54.310 --> 00:07:55.871
So, we'll put that in a variable here.

232
00:07:55.871 --> 00:07:56.788
Const image

233
00:07:58.570 --> 00:08:00.011
is equal to wrapper

234
00:08:00.011 --> 00:08:01.443
.find the image

235
00:08:01.443 --> 00:08:02.360
Console log

236
00:08:03.847 --> 00:08:05.180
the image .debug

237
00:08:07.833 --> 00:08:09.571
See what we're working with here. There we go.

238
00:08:09.571 --> 00:08:12.440
We want to test that the source got set

239
00:08:12.440 --> 00:08:14.424
and that the alt got set.

240
00:08:14.424 --> 00:08:16.926
The way we can grab those is by saying

241
00:08:16.926 --> 00:08:17.759
.props

242
00:08:19.812 --> 00:08:21.371
and referencing right off of there.

243
00:08:21.371 --> 00:08:23.539
So let's just see what props gives us.

244
00:08:23.539 --> 00:08:25.452
Props will give us an object

245
00:08:25.452 --> 00:08:27.791
with all of the props that are passed in.

246
00:08:27.791 --> 00:08:28.831
So, source and alt.

247
00:08:28.831 --> 00:08:30.331
Here we can expect

248
00:08:33.038 --> 00:08:34.658
image .props

249
00:08:34.658 --> 00:08:35.491
.source

250
00:08:36.473 --> 00:08:37.306
to be

251
00:08:38.575 --> 00:08:39.465
fake item

252
00:08:39.465 --> 00:08:40.298
.source

253
00:08:41.357 --> 00:08:42.190
or .image

254
00:08:44.391 --> 00:08:45.224
Good.

255
00:08:45.224 --> 00:08:47.863
And then we'll check that the alt text

256
00:08:47.863 --> 00:08:49.423
is equal to the

257
00:08:49.423 --> 00:08:50.840
fake item .title.

258
00:08:53.089 --> 00:08:54.592
Looking good.

259
00:08:54.592 --> 00:08:55.792
Let's console log the wrapper again.

260
00:08:55.792 --> 00:08:56.675
Console log

261
00:08:56.675 --> 00:08:58.220
And by the way,

262
00:08:58.220 --> 00:09:00.472
I'm putting these all in one it block,

263
00:09:00.472 --> 00:09:02.431
but as soon as you start to get

264
00:09:02.431 --> 00:09:04.013
maybe if you have a couple tests

265
00:09:04.013 --> 00:09:05.891
that relate just to images,

266
00:09:05.891 --> 00:09:07.297
what you could do is you could have

267
00:09:07.297 --> 00:09:08.888
a separate it block up here

268
00:09:08.888 --> 00:09:09.721
You see it

269
00:09:09.721 --> 00:09:10.554
renders

270
00:09:10.554 --> 00:09:11.508
the image

271
00:09:11.508 --> 00:09:13.129
properly.

272
00:09:13.129 --> 00:09:17.206
And then that test will just test the image itself

273
00:09:17.206 --> 00:09:19.420
And if anything ever goes awry with the image

274
00:09:19.420 --> 00:09:20.288
then you know,

275
00:09:20.288 --> 00:09:22.044
okay, something is wrong with the image

276
00:09:22.044 --> 00:09:24.140
and not the actual title that we have here.

277
00:09:24.140 --> 00:09:26.109
And the way that we would do that is

278
00:09:26.109 --> 00:09:28.207
by nicely separating them

279
00:09:28.207 --> 00:09:30.155
into their own tests

280
00:09:30.155 --> 00:09:31.978
and we could take

281
00:09:31.978 --> 00:09:33.395
all of this here,

282
00:09:35.238 --> 00:09:36.893
put it in here,

283
00:09:36.893 --> 00:09:39.696
and we would just copy paste the mounting

284
00:09:39.696 --> 00:09:42.348
of this wrapper once more up here.

285
00:09:42.348 --> 00:09:43.281
Maybe let's do that.

286
00:09:43.281 --> 00:09:45.214
Let's say it renders the image properly.

287
00:09:45.214 --> 00:09:46.127
Then then this one,

288
00:09:46.127 --> 00:09:47.044
it renders

289
00:09:48.496 --> 00:09:49.609
the price tag

290
00:09:49.609 --> 00:09:51.202
and title

291
00:09:51.202 --> 00:09:52.035
properly.

292
00:09:53.036 --> 00:09:55.065
Good. So now we have two test suites.

293
00:09:55.065 --> 00:09:56.850
Or sorry, now we have one test suite

294
00:09:56.850 --> 00:09:58.514
with two different tests inside of it.

295
00:09:58.514 --> 00:09:59.743
It's looking good.

296
00:09:59.743 --> 00:10:01.016
A couple other things that you might want to test here

297
00:10:01.016 --> 00:10:03.280
is that the description is showing up

298
00:10:03.280 --> 00:10:04.944
or just the mere existence of these buttons.

299
00:10:04.944 --> 00:10:07.999
You want to make sure that these buttons are showing up

300
00:10:07.999 --> 00:10:09.436
in our specific use case.

301
00:10:09.436 --> 00:10:11.445
So let's say it renders

302
00:10:11.445 --> 00:10:12.678
out the buttons

303
00:10:12.678 --> 00:10:13.853
properly.

304
00:10:13.853 --> 00:10:16.278
And we're not going to test the functionality

305
00:10:16.278 --> 00:10:17.443
of the buttons just yet

306
00:10:17.443 --> 00:10:18.949
because that's going to come in future tests

307
00:10:18.949 --> 00:10:20.823
when we are mimicking clicks

308
00:10:20.823 --> 00:10:22.926
and we're going to test that there's an item in the cart

309
00:10:22.926 --> 00:10:23.759
and you add an item

310
00:10:23.759 --> 00:10:25.694
and you're going to test that there's two items in the cart

311
00:10:25.694 --> 00:10:27.653
but, in our case, let's just go ahead

312
00:10:27.653 --> 00:10:30.486
and mount this wrapper right here.

313
00:10:32.074 --> 00:10:34.090
Then, we will go

314
00:10:34.090 --> 00:10:36.539
and look for the three buttons.

315
00:10:36.539 --> 00:10:38.061
Console log .wrapper .ebug

316
00:10:38.061 --> 00:10:42.041
just to see what we're working with here.

317
00:10:42.041 --> 00:10:43.039
There it is.

318
00:10:43.039 --> 00:10:45.753
We're going to look for the button list.

319
00:10:45.753 --> 00:10:46.586
So const

320
00:10:47.734 --> 00:10:48.567
buttonList

321
00:10:49.684 --> 00:10:51.684
is equal to wrapper.find

322
00:10:52.680 --> 00:10:53.958
.buttonlist and console log.

323
00:10:53.958 --> 00:10:56.356
I don't know why I put a capital on that.

324
00:10:56.356 --> 00:10:57.189
Let's put that down

325
00:10:57.189 --> 00:10:58.022
buttonList

326
00:11:02.056 --> 00:11:02.889
There we go.

327
00:11:02.889 --> 00:11:07.639
I'm going to get rid of these other console logs in here.

328
00:11:11.918 --> 00:11:13.697
Now, we see that we have one item,

329
00:11:13.697 --> 00:11:15.807
but we want to check that there are three items

330
00:11:15.807 --> 00:11:18.667
so we can call .children on there

331
00:11:18.667 --> 00:11:20.565
and you see that we have a length of three,

332
00:11:20.565 --> 00:11:21.664
so that's our first expect.

333
00:11:21.664 --> 00:11:24.247
Expect the buttonList .children

334
00:11:25.374 --> 00:11:26.706
to have

335
00:11:26.706 --> 00:11:27.539
length

336
00:11:28.590 --> 00:11:29.423
three

337
00:11:32.709 --> 00:11:33.775
(Wrong buzzer sound effect) That didn't work.

338
00:11:33.775 --> 00:11:38.442
Renders out the button properly. I spelt children wrong.

339
00:11:40.443 --> 00:11:42.353
That test is passing.

340
00:11:42.353 --> 00:11:44.378
We also want to check that the three buttons are there.

341
00:11:44.378 --> 00:11:45.711
So if we were to

342
00:11:46.833 --> 00:11:47.750
debug that.

343
00:11:48.634 --> 00:11:49.580
Let's take a look at

344
00:11:49.580 --> 00:11:50.725
what buttons we are actually looking for,

345
00:11:50.725 --> 00:11:52.772
so one of them is going to be a link,

346
00:11:52.772 --> 00:11:54.682
one of them is going to be an add to cart,

347
00:11:54.682 --> 00:11:56.610
and one of them is going to be a delete item.

348
00:11:56.610 --> 00:11:57.445
So we want to check

349
00:11:57.445 --> 00:12:00.744
is there some sort of children in here

350
00:12:00.744 --> 00:12:02.252
or .contains.

351
00:12:02.252 --> 00:12:03.421
There is a contains.

352
00:12:03.421 --> 00:12:05.397
Contains all matching elements,

353
00:12:05.397 --> 00:12:06.983
contains any matching elements,

354
00:12:06.983 --> 00:12:09.165
and contains matching element.

355
00:12:09.165 --> 00:12:10.644
So what these do

356
00:12:10.644 --> 00:12:13.625
is you can actually pass it an existing

357
00:12:13.625 --> 00:12:14.458
component

358
00:12:14.458 --> 00:12:16.740
not a selector, but a component, and it will check that

359
00:12:16.740 --> 00:12:17.971
that's in there.

360
00:12:17.971 --> 00:12:18.804
So what I can do here,

361
00:12:18.804 --> 00:12:21.617
is I can import the add to cart, the remove from cart,

362
00:12:21.617 --> 00:12:24.120
and the link component and check that they're in there

363
00:12:24.120 --> 00:12:26.227
or if it's a little bit easier,

364
00:12:26.227 --> 00:12:27.763
you can just do a quick little selector

365
00:12:27.763 --> 00:12:29.132
and check that they are there.

366
00:12:29.132 --> 00:12:30.229
So let's try that.

367
00:12:30.229 --> 00:12:33.007
So we'll expect that the buttonList

368
00:12:33.007 --> 00:12:34.440
.find

369
00:12:34.440 --> 00:12:36.359
will check for a link

370
00:12:36.359 --> 00:12:37.192
and we'll have

371
00:12:37.192 --> 00:12:38.401
to Have

372
00:12:38.401 --> 00:12:39.234
Length

373
00:12:40.760 --> 00:12:41.593
of 1.

374
00:12:44.054 --> 00:12:45.804
And that didn't work.

375
00:12:47.956 --> 00:12:49.387
Well, find, not filter.

376
00:12:49.387 --> 00:12:50.220
There we go.

377
00:12:50.220 --> 00:12:52.179
Another way we could have done that

378
00:12:52.179 --> 00:12:54.697
is we could have used the

379
00:12:54.697 --> 00:12:55.864
.exists method

380
00:12:56.899 --> 00:12:59.331
that comes from enzyme itself

381
00:12:59.331 --> 00:13:03.103
and then we could just say to be true

382
00:13:03.103 --> 00:13:04.912
and that would also work

383
00:13:04.912 --> 00:13:07.199
or we could just use to be

384
00:13:07.199 --> 00:13:08.032
truthy

385
00:13:09.422 --> 00:13:13.743
and in that case we wouldn't even need to have that

386
00:13:13.743 --> 00:13:16.627
because if it's there it would be Truthy

387
00:13:16.627 --> 00:13:18.250
and if its not it would be Falsey.

388
00:13:18.250 --> 00:13:20.118
I kind of like the

389
00:13:20.118 --> 00:13:21.007
exists

390
00:13:21.007 --> 00:13:22.577
to be

391
00:13:22.577 --> 00:13:23.410
true.

392
00:13:25.376 --> 00:13:26.637
Looks like it is working.

393
00:13:26.637 --> 00:13:29.689
We can do that with the rest of them.

394
00:13:29.689 --> 00:13:31.272
So link add to cart

395
00:13:32.320 --> 00:13:33.987
and remove from cart

396
00:13:35.484 --> 00:13:36.317
component.

397
00:13:37.975 --> 00:13:40.083
Didn't find remove from cart.

398
00:13:40.083 --> 00:13:42.890
Is that what it's called? We'll check our item component.

399
00:13:42.890 --> 00:13:44.917
Oh, I just realized I named this item .js.

400
00:13:44.917 --> 00:13:45.859
Let's rename that

401
00:13:45.859 --> 00:13:47.109
to item.test.js

402
00:13:51.480 --> 00:13:53.167
And in here, it's delete item,

403
00:13:53.167 --> 00:13:55.334
not remove from cart.

404
00:13:55.334 --> 00:13:56.917
What are we saying?

405
00:13:57.865 --> 00:13:59.678
There we go. All of those tests are working.

406
00:13:59.678 --> 00:14:02.445
You get the point. You gotta basically render the thing

407
00:14:02.445 --> 00:14:05.952
to the screen and then do some finding and searching

408
00:14:05.952 --> 00:14:08.550
and sort of doing a sanity check

409
00:14:08.550 --> 00:14:10.977
that are these things actually being rendered out

410
00:14:10.977 --> 00:14:12.588
as I expect them to?

411
00:14:12.588 --> 00:14:17.588
Quite honestly, this seems like a lot of diving in.

412
00:14:17.629 --> 00:14:18.993
It also seems pretty brittle

413
00:14:18.993 --> 00:14:21.488
because as soon as you go ahead and change

414
00:14:21.488 --> 00:14:24.798
any of the layout of these things

415
00:14:24.798 --> 00:14:26.695
then your tests will start to break.

416
00:14:26.695 --> 00:14:28.881
So, what we're going to look at

417
00:14:28.881 --> 00:14:31.234
in the next one is something called snapshot testing

418
00:14:31.234 --> 00:14:35.466
which is greatly going to reduce the tests that we write

419
00:14:35.466 --> 00:14:37.216
for our single items.

