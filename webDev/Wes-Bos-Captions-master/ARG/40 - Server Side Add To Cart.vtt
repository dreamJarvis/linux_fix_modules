WEBVTT

1
00:00:01.270 --> 00:00:02.625
<v Wes>Alright now we're flipping over</v>

2
00:00:02.625 --> 00:00:05.837
to the server side to start adding items to our cart.

3
00:00:05.837 --> 00:00:07.502
But, card? Cart.

4
00:00:07.502 --> 00:00:09.187
But before we even can do that

5
00:00:09.187 --> 00:00:11.059
we need to set up our data model.

6
00:00:11.059 --> 00:00:12.967
So let's open up our datamodel.graphql

7
00:00:12.967 --> 00:00:15.153
and you see that we only have two types so far

8
00:00:15.153 --> 00:00:16.718
we got our user and we have our item

9
00:00:16.718 --> 00:00:19.042
and I guess we have our Permission enum as well.

10
00:00:19.042 --> 00:00:22.754
We're gonna make a new type that's called cart item,

11
00:00:22.754 --> 00:00:24.982
because you can't just take an item

12
00:00:24.982 --> 00:00:27.546
and add it to the users cart directly

13
00:00:27.546 --> 00:00:29.367
because there needs to be some information

14
00:00:29.367 --> 00:00:32.758
about how many, the quantity, that they'd like to have.

15
00:00:32.758 --> 00:00:34.133
So we're going to create a new type

16
00:00:34.133 --> 00:00:37.553
that is related to both the item and the user.

17
00:00:37.553 --> 00:00:40.306
Let's go down here and type CartItem

18
00:00:40.306 --> 00:00:43.797
that has an id, which has a type of ID is required.

19
00:00:43.797 --> 00:00:47.880
And we're gonna put that @unique directive on it.

20
00:00:49.099 --> 00:00:52.437
The quantity, it's gonna be integer that's required.

21
00:00:52.437 --> 00:00:56.770
And we're gonna just default that to a value of one.

22
00:00:58.316 --> 00:01:00.584
The item is going to be an Item,

23
00:01:00.584 --> 00:01:02.751
and this is a relationship

24
00:01:06.022 --> 00:01:08.112
and the user is going to be a User

25
00:01:08.112 --> 00:01:10.384
and that is also a relationship.

26
00:01:10.384 --> 00:01:12.533
Actually both should be required.

27
00:01:12.533 --> 00:01:14.136
You shouldn't be able to create a cart item,

28
00:01:14.136 --> 00:01:17.791
unless you have both of those pieces of information.

29
00:01:17.791 --> 00:01:19.434
That's our data model for cart item,

30
00:01:19.434 --> 00:01:21.073
and now we need to go up to our User

31
00:01:21.073 --> 00:01:22.943
and a cart on here.

32
00:01:22.943 --> 00:01:25.025
So we're gonna say that the person has a cart,

33
00:01:25.025 --> 00:01:28.858
and that is going to be an array of CartItems,

34
00:01:29.924 --> 00:01:31.494
or Item, singular.

35
00:01:31.494 --> 00:01:34.023
It's required and that's required as well.

36
00:01:34.023 --> 00:01:36.543
Then we'll go into our schema.graphql

37
00:01:36.543 --> 00:01:37.570
and find our User

38
00:01:37.570 --> 00:01:39.940
and we'll also add the same line

39
00:01:39.940 --> 00:01:42.091
that we did here to our User

40
00:01:42.091 --> 00:01:44.169
because we want this to be available,

41
00:01:44.169 --> 00:01:46.627
both server side and client side.

42
00:01:46.627 --> 00:01:48.445
Now in order to add things to the cart,

43
00:01:48.445 --> 00:01:50.089
we're gonna need a second mutation

44
00:01:50.089 --> 00:01:51.663
and then in a future video,

45
00:01:51.663 --> 00:01:54.272
we're gonna have a remove from cart as well.

46
00:01:54.272 --> 00:01:58.644
So we'll say addToCart takes an id of the cart

47
00:01:58.644 --> 00:02:00.811
of the item that they want to add.

48
00:02:00.811 --> 00:02:03.394
So it's just going to be an ID,

49
00:02:05.557 --> 00:02:09.557
and that's going to return a CartItem from that.

50
00:02:10.988 --> 00:02:13.578
Now what do we do when change our data model?

51
00:02:13.578 --> 00:02:14.675
We need to redeploy.

52
00:02:14.675 --> 00:02:16.539
And what do you do when you change your schema?

53
00:02:16.539 --> 00:02:20.615
You need to code a resolver that lines up with it.

54
00:02:20.615 --> 00:02:23.032
So let's do, first, redeploy.

55
00:02:24.155 --> 00:02:25.850
There we go.

56
00:02:25.850 --> 00:02:28.811
And then you see that it created both our CartItem,

57
00:02:28.811 --> 00:02:29.699
as well as a User,

58
00:02:29.699 --> 00:02:31.597
but then it created a couple of relationships,

59
00:02:31.597 --> 00:02:34.430
CartItemToUser and CartItemtoItem.

60
00:02:35.915 --> 00:02:38.391
Those are two new relationships that we've just created.

61
00:02:38.391 --> 00:02:41.224
Now I'm gonna start that up again.

62
00:02:42.233 --> 00:02:45.019
And we're gonna open up our Mutation.js

63
00:02:45.019 --> 00:02:47.392
scroll all the way to the bottom here.

64
00:02:47.392 --> 00:02:49.809
We're gonna add our new async

65
00:02:51.268 --> 00:02:52.101
addToCart,

66
00:02:54.003 --> 00:02:57.586
takes in a parent, args, context, and info.

67
00:02:58.967 --> 00:03:00.981
And then, there's three things you need to do here.

68
00:03:00.981 --> 00:03:02.898
First, we need to query

69
00:03:04.401 --> 00:03:06.318
the users current cart.

70
00:03:07.865 --> 00:03:09.933
Well actually I guess, first we need to make sure

71
00:03:09.933 --> 00:03:11.588
that they are signed in.

72
00:03:11.588 --> 00:03:14.671
Second, query the users current cart.

73
00:03:15.795 --> 00:03:20.045
Third, check if that item is already in their cart.

74
00:03:21.266 --> 00:03:23.860
Because there's an opportunity that if I were to

75
00:03:23.860 --> 00:03:25.402
add this bag to my cart,

76
00:03:25.402 --> 00:03:27.243
that's the first time I'm adding it.

77
00:03:27.243 --> 00:03:28.956
But if I were to add it a second time,

78
00:03:28.956 --> 00:03:30.278
it's already in my cart,

79
00:03:30.278 --> 00:03:34.373
so I just want to increment the quantity of that cart item.

80
00:03:34.373 --> 00:03:36.568
Otherwise, you're gonna create a fresh cart item,

81
00:03:36.568 --> 00:03:39.732
so check if that item is already in their cart,

82
00:03:39.732 --> 00:03:41.399
and increment by one

83
00:03:42.540 --> 00:03:43.373
if it is.

84
00:03:44.338 --> 00:03:46.013
And then four,

85
00:03:46.013 --> 00:03:47.013
if it's not,

86
00:03:49.093 --> 00:03:51.010
create a fresh CartItem

87
00:03:53.943 --> 00:03:55.110
for that user.

88
00:03:56.320 --> 00:03:57.153
Awesome!

89
00:03:57.153 --> 00:03:59.184
So first, make sure they are signed in.

90
00:03:59.184 --> 00:04:01.434
Let's just grab the userId.

91
00:04:05.409 --> 00:04:09.142
Could have also destructured that like this.

92
00:04:09.142 --> 00:04:10.917
Whatever floats your boat.

93
00:04:10.917 --> 00:04:12.141
And this is Wes from the future

94
00:04:12.141 --> 00:04:14.265
because I forgot to actually check if they're signed in.

95
00:04:14.265 --> 00:04:16.599
So let's say if there's no userId,

96
00:04:16.599 --> 00:04:18.799
then we'll just throw a new

97
00:04:18.799 --> 00:04:23.216
Error('You must be signed in soon').

98
00:04:24.493 --> 00:04:27.150
And back to regular scheduled programming.

99
00:04:27.150 --> 00:04:29.696
Next query the user's current cart.

100
00:04:29.696 --> 00:04:31.207
Alright, we can do that.

101
00:04:31.207 --> 00:04:33.762
So here, we're going to make a query

102
00:04:33.762 --> 00:04:35.842
that is actually for multiple items.

103
00:04:35.842 --> 00:04:36.922
And I'm gonna show you why.

104
00:04:36.922 --> 00:04:37.930
Let's type it first.

105
00:04:37.930 --> 00:04:39.821
So we're going to destructure the first element

106
00:04:39.821 --> 00:04:44.571
that is returned into a variable called existingCartItem.

107
00:04:46.013 --> 00:04:48.330
And that is going to be queried off the database,

108
00:04:48.330 --> 00:04:50.497
so ctx.db.query.cartItems,

109
00:04:54.354 --> 00:04:56.070
with an s, not cartItem,

110
00:04:56.070 --> 00:04:57.679
and I'll show you why that is true.

111
00:04:57.679 --> 00:05:01.631
Because we want to query it based on both the user's id,

112
00:05:01.631 --> 00:05:05.084
as well as the item id that they're trying to put in.

113
00:05:05.084 --> 00:05:06.140
So we want to know,

114
00:05:06.140 --> 00:05:09.911
has this user put this item into their cart before,

115
00:05:09.911 --> 00:05:11.577
and if this user has not

116
00:05:11.577 --> 00:05:13.592
put this item into their cart before,

117
00:05:13.592 --> 00:05:15.222
then we're gonna make a new one.

118
00:05:15.222 --> 00:05:18.371
And if I were just to use cartItem, singular,

119
00:05:18.371 --> 00:05:20.531
just to query one, it wouldn't work,

120
00:05:20.531 --> 00:05:21.371
and I'll show you why.

121
00:05:21.371 --> 00:05:26.255
Because if you open up your generated prisma.graphql,

122
00:05:26.255 --> 00:05:27.771
and you search for Query,

123
00:05:27.771 --> 00:05:31.605
you'll see that we have this query cartItems,

124
00:05:31.605 --> 00:05:33.423
where we can

125
00:05:33.423 --> 00:05:37.504
where we can filter by CartItemWhereInput.

126
00:05:37.504 --> 00:05:40.584
But if we look for just a singular cartItem,

127
00:05:40.584 --> 00:05:43.824
the input that we're allowed to use is called

128
00:05:43.824 --> 00:05:46.354
CartItemWhereUniqueInput.

129
00:05:46.354 --> 00:05:49.546
And if you take a look for what that is,

130
00:05:49.546 --> 00:05:51.769
so just search for input CartItem,

131
00:05:51.769 --> 00:05:55.398
it only takes an id of the cart item.

132
00:05:55.398 --> 00:05:57.998
And in our case we don't know what the id is right now.

133
00:05:57.998 --> 00:06:00.329
We want to be able to query based on the item id

134
00:06:00.329 --> 00:06:01.747
and the user's id.

135
00:06:01.747 --> 00:06:04.460
So if we were to go back to that query,

136
00:06:04.460 --> 00:06:07.293
and search for CartItemWhereInput,

137
00:06:09.845 --> 00:06:11.792
you'll see that the

138
00:06:11.792 --> 00:06:13.459
ability to filter is

139
00:06:14.421 --> 00:06:18.871
much much more dynamic and much more flexible

140
00:06:18.871 --> 00:06:20.630
than the singular one.

141
00:06:20.630 --> 00:06:24.017
So generally, the singular one's are just by id

142
00:06:24.017 --> 00:06:25.659
or other unique inputs,

143
00:06:25.659 --> 00:06:29.158
and then the multiple ones are much more flexible.

144
00:06:29.158 --> 00:06:30.333
And that's not really a big issue

145
00:06:30.333 --> 00:06:32.816
because we can just assume that the first one

146
00:06:32.816 --> 00:06:35.896
that comes back by using this array destructuring

147
00:06:35.896 --> 00:06:37.827
will be the item that we're looking for,

148
00:06:37.827 --> 00:06:40.696
because there will never be another cart item

149
00:06:40.696 --> 00:06:43.696
where the user and item id are exactly the same.

150
00:06:43.696 --> 00:06:46.120
So we're using cartItems here,

151
00:06:46.120 --> 00:06:50.913
and we say where the user id is equal to the user id

152
00:06:50.913 --> 00:06:53.549
that we pulled out from the request.

153
00:06:53.549 --> 00:06:57.880
And then the item id is equal to the args.id,

154
00:06:57.880 --> 00:07:00.157
and that's the id of the item

155
00:07:00.157 --> 00:07:02.086
that we're going to be passing along.

156
00:07:02.086 --> 00:07:03.625
Now, here is the third one.

157
00:07:03.625 --> 00:07:05.848
Check if that item is already in their cart

158
00:07:05.848 --> 00:07:07.299
and increment by 1.

159
00:07:07.299 --> 00:07:10.132
So let's say, if existingCartItem.

160
00:07:12.231 --> 00:07:17.231
Let's do console.log('This item is already in their cart').

161
00:07:20.510 --> 00:07:25.510
And we'll simply just return ctx.db.mutation.updateCartItem.

162
00:07:27.328 --> 00:07:30.072
So again, if you go to your generated prisma.graphql,

163
00:07:30.072 --> 00:07:33.600
there's an updateCartItem mutation

164
00:07:33.600 --> 00:07:36.733
that takes in some data as well as a where.

165
00:07:36.733 --> 00:07:40.900
So it's exactly what we're going to be using here.

166
00:07:44.540 --> 00:07:48.540
Where the id is equal to the existingCartItem.id

167
00:07:50.770 --> 00:07:53.100
and the data that we wanna update

168
00:07:53.100 --> 00:07:54.350
is the quantity

169
00:07:57.150 --> 00:08:01.693
of that cart item is going to be however much we had before,

170
00:08:01.693 --> 00:08:05.469
the existingCartItem.quantity plus one.

171
00:08:05.469 --> 00:08:06.302
Right?

172
00:08:06.302 --> 00:08:07.219
We're just gonna take whatever they had

173
00:08:07.219 --> 00:08:08.954
and increment it by one.

174
00:08:08.954 --> 00:08:11.392
And because we're just returning this promise here,

175
00:08:11.392 --> 00:08:13.078
then that would be it for the function

176
00:08:13.078 --> 00:08:15.378
if this item is already in their cart.

177
00:08:15.378 --> 00:08:17.642
Otherwise, if this is the case of the first time

178
00:08:17.642 --> 00:08:20.000
that we're adding this item to our cart,

179
00:08:20.000 --> 00:08:22.989
we want to create a new cartItem for that.

180
00:08:22.989 --> 00:08:25.322
So from here, we will return

181
00:08:28.008 --> 00:08:30.591
ctx.db.mutation.createCartItem,

182
00:08:34.419 --> 00:08:36.798
and that takes in some data.

183
00:08:36.798 --> 00:08:38.643
And that data needs a couple things.

184
00:08:38.643 --> 00:08:41.323
Obviously, we need the user that it's connected to

185
00:08:41.323 --> 00:08:43.913
and the item that the cart item is connected to

186
00:08:43.913 --> 00:08:46.491
because really a cart item is just a pointer at

187
00:08:46.491 --> 00:08:48.507
who has it and what item is it.

188
00:08:48.507 --> 00:08:52.208
So the user is going to be usually say userId, right?

189
00:08:52.208 --> 00:08:55.842
But in order to connect a relationship in prisma,

190
00:08:55.842 --> 00:08:57.726
we need to use this syntax here.

191
00:08:57.726 --> 00:08:58.943
Curly brackets.

192
00:08:58.943 --> 00:08:59.776
Connect

193
00:09:00.724 --> 00:09:03.424
where the id is equal to

194
00:09:03.424 --> 00:09:06.898
the userId of the currently signed in person.

195
00:09:06.898 --> 00:09:08.815
And same with the item,

196
00:09:11.876 --> 00:09:16.546
we need to connect where the id is equal to the args.id,

197
00:09:16.546 --> 00:09:20.723
that's the past item id that we've created.

198
00:09:20.723 --> 00:09:23.946
So I think that should be good.

199
00:09:23.946 --> 00:09:26.196
Let's go ahead and try hook up

200
00:09:26.196 --> 00:09:28.476
one of these add to cart buttons,

201
00:09:28.476 --> 00:09:31.847
and see if we're actually getting some data flowing.

202
00:09:31.847 --> 00:09:33.821
Let's flip over to our front end,

203
00:09:33.821 --> 00:09:35.453
and we're gonna make a new component

204
00:09:35.453 --> 00:09:36.511
that's called add to cart.

205
00:09:36.511 --> 00:09:37.682
Go to a components folder.

206
00:09:37.682 --> 00:09:38.515
Make it new.

207
00:09:38.515 --> 00:09:40.515
Capital A, AddToCart.js.

208
00:09:44.882 --> 00:09:49.132
And in there we're gonna import React from 'react',

209
00:09:50.712 --> 00:09:53.262
import the mutation from 'react-apollo',

210
00:09:53.262 --> 00:09:55.762
import gql from 'graphql-tag'.

211
00:09:57.869 --> 00:09:59.365
Then we'll make a new class.

212
00:09:59.365 --> 00:10:00.865
So class AddToCart

213
00:10:03.186 --> 00:10:05.186
extends React.Component.

214
00:10:07.488 --> 00:10:09.488
Export that immediately.

215
00:10:11.333 --> 00:10:13.901
Inside of that we want to render.

216
00:10:13.901 --> 00:10:17.298
And we're gonna assume that this AddToCart gets an id.

217
00:10:17.298 --> 00:10:20.298
So const, id is equal to this.props;

218
00:10:22.180 --> 00:10:24.013
And then return button

219
00:10:26.427 --> 00:10:27.427
Add To Cart.

220
00:10:30.212 --> 00:10:31.404
Is there a shopping cart emoji?

221
00:10:31.404 --> 00:10:32.237
Yeah.

222
00:10:33.148 --> 00:10:34.870
Alright, so it's a very basic button,

223
00:10:34.870 --> 00:10:35.703
doesn't do anything yet.

224
00:10:35.703 --> 00:10:38.953
But let's open up our item.js component

225
00:10:40.173 --> 00:10:41.506
and import that.

226
00:10:49.899 --> 00:10:53.659
And then go swap out that button that we hard coded,

227
00:10:53.659 --> 00:10:57.076
right here, with our AddToCart component.

228
00:10:59.679 --> 00:11:01.240
Good. Looks like it's showing up here.

229
00:11:01.240 --> 00:11:02.840
Obviously it doesn't do anything,

230
00:11:02.840 --> 00:11:06.478
so we need to write a mutation that's going to line up

231
00:11:06.478 --> 00:11:11.036
with the mutation resolver that we built on our server side.

232
00:11:11.036 --> 00:11:13.953
We'll call our ADD_TO_CART_MUTATION

233
00:11:15.847 --> 00:11:19.097
which takes in id that has a type of ID

234
00:11:21.116 --> 00:11:24.577
that is going to run on the server side addToCart

235
00:11:24.577 --> 00:11:27.494
passing an id with the id variable.

236
00:11:28.778 --> 00:11:30.835
And from that, right now, let's just pull back

237
00:11:30.835 --> 00:11:32.835
the id and the quantity,

238
00:11:34.125 --> 00:11:36.106
but we will likely have to come back to this

239
00:11:36.106 --> 00:11:37.273
and modify it.

240
00:11:38.861 --> 00:11:40.254
Then, let's go in.

241
00:11:40.254 --> 00:11:41.892
Oops, what happened here?

242
00:11:41.892 --> 00:11:43.451
Expected dollar?

243
00:11:43.451 --> 00:11:44.717
Found name id.

244
00:11:44.717 --> 00:11:46.300
Did I goof that up?

245
00:11:47.406 --> 00:11:48.239
There we go.

246
00:11:48.239 --> 00:11:51.691
Dollar sign needs to go right here.

247
00:11:51.691 --> 00:11:54.271
Okay, then we'll go into our button

248
00:11:54.271 --> 00:11:56.521
and a mutation around that.

249
00:12:01.709 --> 00:12:05.459
Mutation prop takes the ADD_TO_CART_MUTATION.

250
00:12:08.383 --> 00:12:10.550
And then the child of that

251
00:12:12.993 --> 00:12:15.076
is going to be addToCart.

252
00:12:17.458 --> 00:12:20.061
Make that an implicit return.

253
00:12:20.061 --> 00:12:22.478
Put this button inside of it.

254
00:12:27.616 --> 00:12:29.298
Now, one thing we didn't do is

255
00:12:29.298 --> 00:12:31.300
when we actually use this addToCart,

256
00:12:31.300 --> 00:12:34.627
we didn't pass in the prop id.

257
00:12:34.627 --> 00:12:37.102
So, we need to go back here.

258
00:12:37.102 --> 00:12:40.935
And I'll say AddToCart id is equal to item.id.

259
00:12:42.400 --> 00:12:47.067
Then go back here and add the variable interim mutation.

260
00:12:49.613 --> 00:12:51.780
Id is equal to this.props.

261
00:12:52.939 --> 00:12:54.771
Actually, we already have it in a variable.

262
00:12:54.771 --> 00:12:56.831
So we'll just say, variables

263
00:12:56.831 --> 00:12:59.248
id is equal to id or just id.

264
00:13:01.142 --> 00:13:03.559
Alright, so we have this AddToCart component.

265
00:13:03.559 --> 00:13:05.330
We have a mutation side of it.

266
00:13:05.330 --> 00:13:06.621
We're passing the id,

267
00:13:06.621 --> 00:13:09.181
which is the only thing that this mutation needs,

268
00:13:09.181 --> 00:13:11.853
which exposes this addToCart functionality.

269
00:13:11.853 --> 00:13:14.966
And then on the click of the button,

270
00:13:14.966 --> 00:13:17.800
we're going to run add to cart.

271
00:13:17.800 --> 00:13:20.562
Now this is not gonna do anything on the client side

272
00:13:20.562 --> 00:13:23.863
because we're not displaying anything.

273
00:13:23.863 --> 00:13:26.952
But I bet if I actually open up our dev tools here,

274
00:13:26.952 --> 00:13:28.910
go to network,

275
00:13:28.910 --> 00:13:30.810
clear it out,

276
00:13:30.810 --> 00:13:32.660
click add to cart.

277
00:13:32.660 --> 00:13:35.841
You'll see we have two little requests here.

278
00:13:35.841 --> 00:13:37.330
You'll see that--

279
00:13:37.330 --> 00:13:39.931
Oh, we got a bit of an error here.

280
00:13:39.931 --> 00:13:43.931
Ctx.db.query.cartItems is not a function or its.

281
00:13:44.871 --> 00:13:46.548
Oh, I think I forgot the query part.

282
00:13:46.548 --> 00:13:49.188
So, jump back to the server side.

283
00:13:49.188 --> 00:13:52.119
One thing I did forget to pass is the info.

284
00:13:52.119 --> 00:13:53.479
I don't believe that's our issue,

285
00:13:53.479 --> 00:13:56.146
but let's pass info for this one

286
00:13:57.317 --> 00:13:59.340
and pass info for that one.

287
00:13:59.340 --> 00:14:02.423
So create cart, that goes right here.

288
00:14:05.074 --> 00:14:06.824
Let's give a refresh.

289
00:14:07.730 --> 00:14:10.563
Get some more space going on here.

290
00:14:19.039 --> 00:14:20.017
Add to cart.

291
00:14:20.017 --> 00:14:22.668
Ctx.db.query.cartItems is not a function

292
00:14:22.668 --> 00:14:25.668
or its return value is not iterable.

293
00:14:27.146 --> 00:14:28.479
I see what did here.

294
00:14:28.479 --> 00:14:32.187
So cartItems, the argument to cartItems,

295
00:14:32.187 --> 00:14:35.578
when you want to filter it, is not user in item.

296
00:14:35.578 --> 00:14:37.719
It's actually going to be where,

297
00:14:37.719 --> 00:14:41.357
and then user and item go inside of that.

298
00:14:41.357 --> 00:14:45.056
Let's just double check our other queries here.

299
00:14:45.056 --> 00:14:46.782
We pass a where here

300
00:14:46.782 --> 00:14:48.456
and we pass our data here.

301
00:14:48.456 --> 00:14:50.808
So that should be it.

302
00:14:50.808 --> 00:14:52.725
Let's give it a refresh

303
00:14:55.423 --> 00:14:56.995
and see if that did anything.

304
00:14:56.995 --> 00:14:57.912
Same error?

305
00:15:00.828 --> 00:15:04.016
So it's telling me that you cannot destructure this

306
00:15:04.016 --> 00:15:05.236
because I know that this is a function.

307
00:15:05.236 --> 00:15:06.706
So it's telling me we can't destructure it,

308
00:15:06.706 --> 00:15:09.926
so the way I debugged that is just stick it in a variable

309
00:15:09.926 --> 00:15:11.504
without the destructuring.

310
00:15:11.504 --> 00:15:15.072
And then console.log(existingCartItem).

311
00:15:15.072 --> 00:15:16.645
And then return,

312
00:15:16.645 --> 00:15:19.693
just to see like what is it actually getting right here.

313
00:15:19.693 --> 00:15:22.104
Because for some reason it can't destructure

314
00:15:22.104 --> 00:15:24.365
whatever's being returned.

315
00:15:24.365 --> 00:15:27.571
Gonna go back here and clear it out.

316
00:15:27.571 --> 00:15:28.904
And add to cart.

317
00:15:29.834 --> 00:15:32.204
Oh, it's a promise.

318
00:15:32.204 --> 00:15:35.207
We forgot to await the result of this.

319
00:15:35.207 --> 00:15:37.364
Those cartItems returns a promise immediately,

320
00:15:37.364 --> 00:15:40.084
but we need to await the promise to resolve.

321
00:15:40.084 --> 00:15:43.609
Then we can destructure the output from that.

322
00:15:43.609 --> 00:15:46.614
So let's try that one more time.

323
00:15:46.614 --> 00:15:48.864
Gonna clear everything out.

324
00:15:50.647 --> 00:15:51.647
Add to cart.

325
00:15:53.054 --> 00:15:55.323
Hey hey! There's our data.

326
00:15:55.323 --> 00:15:57.483
Comes back with the quantity of one.

327
00:15:57.483 --> 00:15:59.371
I wonder if we do it again,

328
00:15:59.371 --> 00:16:02.954
is it gonna come back with quantity of two?

329
00:16:04.309 --> 00:16:05.607
Sure does!

330
00:16:05.607 --> 00:16:06.500
So now we have our data,

331
00:16:06.500 --> 00:16:09.711
and I bet if we go to our prisma data explorer,

332
00:16:09.711 --> 00:16:11.009
we'll see that the user

333
00:16:11.009 --> 00:16:14.092
now has a cart item attached to them.

334
00:16:15.104 --> 00:16:16.571
Here's the user.

335
00:16:16.571 --> 00:16:17.565
There it is.

336
00:16:17.565 --> 00:16:20.335
So our cart has one cart item there.

337
00:16:20.335 --> 00:16:24.115
I bet if I were to add another item.

338
00:16:24.115 --> 00:16:26.532
Add to cart and refresh this.

339
00:16:33.969 --> 00:16:36.940
Now the user's cart is populated with two cart items.

340
00:16:36.940 --> 00:16:38.669
Obviously these are only the ids,

341
00:16:38.669 --> 00:16:43.460
but when we do populate them with our GraphQL query,

342
00:16:43.460 --> 00:16:46.288
we'll be able to get info about the cart item

343
00:16:46.288 --> 00:16:48.717
and then we'll even further be able to go get information

344
00:16:48.717 --> 00:16:52.266
about the items inside of that cart item.

345
00:16:52.266 --> 00:16:54.338
So that is actually adding it.

346
00:16:54.338 --> 00:16:55.349
The add to cart works.

347
00:16:55.349 --> 00:16:57.528
In the next video, let's get it working

348
00:16:57.528 --> 00:17:00.088
so we can start to display these things in real-time

349
00:17:00.088 --> 00:17:02.671
as soon as I click add to cart.

