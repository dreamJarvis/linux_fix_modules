WEBVTT

1
00:00:01.307 --> 00:00:02.709
<v Male>All right, in this video we're gonna take a look</v>

2
00:00:02.709 --> 00:00:05.825
at the app that we're building as well as

3
00:00:05.825 --> 00:00:08.534
the tech stack that's going to happen behind it.

4
00:00:08.534 --> 00:00:10.814
So the app we're building is called Sick Fits

5
00:00:10.814 --> 00:00:14.016
and it's sort of like an online store that allows us to

6
00:00:14.016 --> 00:00:17.232
create an account, you can log in and sell your things

7
00:00:17.232 --> 00:00:19.686
and then you can also add them to your basket,

8
00:00:19.686 --> 00:00:21.137
that'll add it to your cart,

9
00:00:21.137 --> 00:00:23.664
you can checkout for your cart and then view your order.

10
00:00:23.664 --> 00:00:25.707
So let's kinda go through the application.

11
00:00:25.707 --> 00:00:26.933
First of all this is the main page.

12
00:00:26.933 --> 00:00:29.855
This is kinda the main part of it where we have items

13
00:00:29.855 --> 00:00:31.280
that we are going to sell.

14
00:00:31.280 --> 00:00:33.522
You can go ahead and add items to your cart

15
00:00:33.522 --> 00:00:36.225
and you see that that item is updated here.

16
00:00:36.225 --> 00:00:38.430
I can add that item to the cart here.

17
00:00:38.430 --> 00:00:40.276
You can open it up, I can change the

18
00:00:40.276 --> 00:00:41.605
number of items that are in the cart

19
00:00:41.605 --> 00:00:44.492
and that will update in real time.

20
00:00:44.492 --> 00:00:46.293
It will also allow us to search for things.

21
00:00:46.293 --> 00:00:48.849
So if I search for Nudie it's going to show us

22
00:00:48.849 --> 00:00:51.853
a couple different items that are in our cart.

23
00:00:51.853 --> 00:00:53.199
You can view single items,

24
00:00:53.199 --> 00:00:57.152
you can add those items to your cart right from there.

25
00:00:57.152 --> 00:01:00.656
Then when you have some things that you like to buy.

26
00:01:00.656 --> 00:01:03.198
We go ahead and put in our credit card number.

27
00:01:03.198 --> 00:01:04.031
What do we got here?

28
00:01:04.031 --> 00:01:05.632
Four, two, got a little shortcut

29
00:01:05.632 --> 00:01:08.013
for the test credit card, we'll talk about that.

30
00:01:08.013 --> 00:01:11.625
And then you go ahead and it's gonna add the item.

31
00:01:11.625 --> 00:01:16.000
And going to route us over to the order page.

32
00:01:16.000 --> 00:01:17.705
And you can see the cart is still open here

33
00:01:17.705 --> 00:01:20.575
because it's action never refreshing the page

34
00:01:20.575 --> 00:01:22.753
is part of the react that we are going to build.

35
00:01:22.753 --> 00:01:25.098
Then you can see your orders, it shows you all of the

36
00:01:25.098 --> 00:01:25.937
items that you have.

37
00:01:25.937 --> 00:01:28.135
We can got to the orders page and see all of our

38
00:01:28.135 --> 00:01:30.758
past orders that we have had.

39
00:01:30.758 --> 00:01:31.817
You can go home to the home page.

40
00:01:31.817 --> 00:01:34.440
You see how nice and fast this is? When we click around?

41
00:01:34.440 --> 00:01:37.272
That's because we're using Apollo to do some caching.

42
00:01:37.272 --> 00:01:38.359
So that the Vagle.

43
00:01:38.359 --> 00:01:39.289
We got some my accounts stuff.

44
00:01:39.289 --> 00:01:40.975
We'll go into to that as well.

45
00:01:40.975 --> 00:01:42.612
So that's what we're building here.

46
00:01:42.612 --> 00:01:46.390
It's kind of got all the things that an application

47
00:01:46.390 --> 00:01:47.780
you would build will need.

48
00:01:47.780 --> 00:01:50.723
Its got E-commerce, its got relationship data,

49
00:01:50.723 --> 00:01:53.593
its got accounts, its got permissions that we're gonna

50
00:01:53.593 --> 00:01:55.462
be able to work with.

51
00:01:55.462 --> 00:01:58.197
Its got carts, its got local state, and

52
00:01:58.197 --> 00:01:59.507
everything we've been working with.

53
00:01:59.507 --> 00:02:02.605
It's obviously not the most battle tested application.

54
00:02:02.605 --> 00:02:04.911
You probably will find stuff. You're not gonna go ahead

55
00:02:04.911 --> 00:02:08.149
and start a store with this tomorrow and expect it

56
00:02:08.149 --> 00:02:09.631
to do absolutely everything you want.

57
00:02:09.631 --> 00:02:13.819
But, hopefully it has all the different pieces that will

58
00:02:13.819 --> 00:02:17.915
give you a good idea how React, and Apollo, and GraphQL,

59
00:02:17.915 --> 00:02:18.972
and the front and the back

60
00:02:18.972 --> 00:02:20.729
and all these things work together.

61
00:02:20.729 --> 00:02:23.287
So that is it. We're gonna look at the stack now.

62
00:02:23.287 --> 00:02:25.777
So, if you go to forward-slash diagram or

63
00:02:25.777 --> 00:02:28.467
I'm also gonna put this diagram up on the

64
00:02:28.467 --> 00:02:31.256
advanced React sales page so you can

65
00:02:31.256 --> 00:02:32.505
reference it there as well.

66
00:02:32.505 --> 00:02:36.068
But, it's really like four main pieces to our application.

67
00:02:36.068 --> 00:02:39.011
And it's broken down into the front end and the back end.

68
00:02:39.011 --> 00:02:40.139
So lets start with he front end.

69
00:02:40.139 --> 00:02:43.751
Obviously the front end it's going to be built in React.

70
00:02:43.751 --> 00:02:46.724
That is my framework of choice and that's why we built

71
00:02:46.724 --> 00:02:48.806
this course as well.

72
00:02:48.806 --> 00:02:52.611
And along with React.js we're gonna be using Next.js

73
00:02:52.611 --> 00:02:56.886
and Next.js is just a framework that allows us to do

74
00:02:56.886 --> 00:03:00.303
server rendering of our React application

75
00:03:01.565 --> 00:03:04.607
and it also provides some other stuff in terms of doing

76
00:03:04.607 --> 00:03:09.107
pages and creating overall layout of our applications.

77
00:03:10.161 --> 00:03:12.623
So I'm a big fan of Next.js, the server rendering is

78
00:03:12.623 --> 00:03:14.482
really good, the server routing is really good.

79
00:03:14.482 --> 00:03:16.917
You don't have to write any custom routing for this.

80
00:03:16.917 --> 00:03:19.601
It just works. It does all of the Webpack and all of

81
00:03:19.601 --> 00:03:21.734
the bundling for us and the tooling.

82
00:03:21.734 --> 00:03:23.871
So it's not something we have to worry about.

83
00:03:23.871 --> 00:03:26.364
There is a little bit of config that we do have to write

84
00:03:26.364 --> 00:03:28.740
for Next.js and we'll get in to that.

85
00:03:28.740 --> 00:03:31.088
For styling it, writing our CSS, we're gonna write it

86
00:03:31.088 --> 00:03:34.700
using styled-components to write CSS specifically

87
00:03:34.700 --> 00:03:36.112
for each of our components.

88
00:03:36.112 --> 00:03:38.794
And then we're gonna be using something called React Apollo

89
00:03:38.794 --> 00:03:42.135
which is an adapter for the Apollo client.

90
00:03:42.135 --> 00:03:44.337
So that the, sort of the view layer.

91
00:03:44.337 --> 00:03:47.757
That's the interface layer we have as React and then,

92
00:03:47.757 --> 00:03:51.385
still on the front end, to manage our data we use

93
00:03:51.385 --> 00:03:52.746
something called Apollo.

94
00:03:52.746 --> 00:03:55.525
So, you may have heard of...

95
00:03:55.525 --> 00:03:57.733
Obviously you've heard of React State by now.

96
00:03:57.733 --> 00:04:01.159
You may probably have heard of something called Redux.

97
00:04:01.159 --> 00:04:03.215
And there is all kinds of things you can use to manage

98
00:04:03.215 --> 00:04:04.592
your data and the client.

99
00:04:04.592 --> 00:04:08.864
And when you're using GraphQL, there's this really great

100
00:04:08.864 --> 00:04:12.328
library call Apollo and what Apollo does is it replaces

101
00:04:12.328 --> 00:04:15.546
the need to use React State. It replaces the need to use

102
00:04:15.546 --> 00:04:18.220
something like Redux. And it also does

103
00:04:18.220 --> 00:04:20.087
Well lets go through it right now.

104
00:04:20.087 --> 00:04:23.260
It helps us perform or mutations with GraphQL.

105
00:04:23.260 --> 00:04:26.935
So that's when we want to sell something, we add an item,

106
00:04:26.935 --> 00:04:30.238
or we delete something or we add something to our cart.

107
00:04:30.238 --> 00:04:32.163
Anytime we're like changing data

108
00:04:32.163 --> 00:04:34.232
that's a mutation,

109
00:04:34.232 --> 00:04:38.118
It also allows us to fetch data from our GraphQL

110
00:04:38.118 --> 00:04:39.388
back in with queries.

111
00:04:39.388 --> 00:04:42.184
It does caching which is amazing because the fact that

112
00:04:42.184 --> 00:04:45.810
I can go to this homepage and click through to these pages.

113
00:04:45.810 --> 00:04:47.629
You see the first time it's a little bit slow

114
00:04:47.629 --> 00:04:49.787
and then the next time after that it's amazing.

115
00:04:49.787 --> 00:04:53.196
That because the data. These items are stored in the cache

116
00:04:53.196 --> 00:04:57.613
and it just makes it instant for us to go back and forth

117
00:04:57.613 --> 00:05:00.420
between the two because the data is store in the cache.

118
00:05:00.420 --> 00:05:03.122
There is no secondary cache that we need to manage,

119
00:05:03.122 --> 00:05:05.048
like something like with Redux.

120
00:05:05.048 --> 00:05:07.294
We can manage our local state with it

121
00:05:07.294 --> 00:05:08.862
we're gonna go into that.

122
00:05:08.862 --> 00:05:10.320
For example,

123
00:05:10.320 --> 00:05:14.289
if the cart is open or the cart is closed, that is data not

124
00:05:14.289 --> 00:05:16.624
stored in the database but it's data stored

125
00:05:16.624 --> 00:05:19.124
locally in the in the browser.

126
00:05:21.155 --> 00:05:22.673
Error in loading states.

127
00:05:22.673 --> 00:05:24.615
So anytime I were to...

128
00:05:24.615 --> 00:05:28.397
You see if I search here for Nudie, you see that it

129
00:05:28.397 --> 00:05:29.413
really quickly.

130
00:05:29.413 --> 00:05:31.680
Backspace, if I type in Nudie again.

131
00:05:31.680 --> 00:05:33.734
You see how it turns yellow for a quick second?

132
00:05:33.734 --> 00:05:35.076
That's the loading state.

133
00:05:35.076 --> 00:05:39.878
Or if something were to go wrong when I was trying to search

134
00:05:39.878 --> 00:05:42.984
or add item or delete an item or anything at all,

135
00:05:42.984 --> 00:05:45.715
it takes care catching those errors and

136
00:05:45.715 --> 00:05:48.684
nicely providing them to us.

137
00:05:48.684 --> 00:05:50.264
And so I have a little note here.

138
00:05:50.264 --> 00:05:52.855
Apollo client replaces the need to use Redux and

139
00:05:52.855 --> 00:05:54.974
data fetching libraries and caching libraries.

140
00:05:54.974 --> 00:05:58.377
It does it all for us. Its sort of a one stop shop for

141
00:05:58.377 --> 00:06:00.503
managing our data in our client.

142
00:06:00.503 --> 00:06:02.670
Now, that's the front end.

143
00:06:02.670 --> 00:06:05.036
We'll flip over to the back end.

144
00:06:05.036 --> 00:06:08.264
The back end database. At the end of the day our database

145
00:06:08.264 --> 00:06:11.818
that we're going to be using is mySQL.

146
00:06:11.818 --> 00:06:13.962
However, you can use PostgreSQL,

147
00:06:13.962 --> 00:06:16.565
there's gonna be adapter for all of the databases

148
00:06:16.565 --> 00:06:18.064
in the coming future.

149
00:06:18.064 --> 00:06:22.397
However, we don't necessarily care that it's in mySQL

150
00:06:22.397 --> 00:06:25.028
because we're not gonna be interfacing with the mySQL

151
00:06:25.028 --> 00:06:26.592
database directly. We're gonna be using

152
00:06:26.592 --> 00:06:28.875
something called Prisma.

153
00:06:28.875 --> 00:06:32.454
And what what Prisma does is it takes like an

154
00:06:32.454 --> 00:06:35.482
empty database, or you can also have an existing database

155
00:06:35.482 --> 00:06:39.348
that has some data in it. And it provides sort of

156
00:06:39.348 --> 00:06:42.667
an interface layer on top of your database for all

157
00:06:42.667 --> 00:06:45.648
of your common CRUD operations, all of your

158
00:06:45.648 --> 00:06:48.453
Create Read Update and Delete.

159
00:06:48.453 --> 00:06:50.890
And I really like that because when you're making

160
00:06:50.890 --> 00:06:55.140
a GraphQL API, it's, we're all doing the same thing

161
00:06:56.450 --> 00:06:58.544
at the end of the day. We're all creating data, we're all

162
00:06:58.544 --> 00:07:03.273
creating relationships between data, we're all updating data

163
00:07:03.273 --> 00:07:04.871
and we're all deleting data.

164
00:07:04.871 --> 00:07:09.245
So, it provides a very comprehensive API right on top of

165
00:07:09.245 --> 00:07:10.386
all of our data models.

166
00:07:10.386 --> 00:07:12.967
So what we're gonna do, we're gonna define what our

167
00:07:12.967 --> 00:07:16.808
data looks like. It's gonna ingest that and then provide

168
00:07:16.808 --> 00:07:19.803
us with a set of API's that allows us to do

169
00:07:19.803 --> 00:07:22.339
all of the CRUD operations on top of it.

170
00:07:22.339 --> 00:07:25.557
So we do that though creating our schema.

171
00:07:25.557 --> 00:07:28.418
We can use GraphQL to establish any relationships

172
00:07:28.418 --> 00:07:29.251
between our data.

173
00:07:29.251 --> 00:07:31.853
So were going to be having items and we're gonna have users

174
00:07:31.853 --> 00:07:34.472
and a user will have items, and a user will have orders

175
00:07:34.472 --> 00:07:37.249
and there's gonna be items in the cart and cart items

176
00:07:37.249 --> 00:07:38.317
need to refer to the items.

177
00:07:38.317 --> 00:07:42.740
There's all kind of relationships going on in here.

178
00:07:42.740 --> 00:07:46.041
And it can either be self hosted or used as a service.

179
00:07:46.041 --> 00:07:49.457
So right now Prisma is a all open source.

180
00:07:49.457 --> 00:07:51.590
You can go ahead and host it yourself or you can use,

181
00:07:51.590 --> 00:07:53.429
well it's what we're gonna be doing in this tutorial is,

182
00:07:53.429 --> 00:07:57.190
using the Prisma development service that will allow us

183
00:07:57.190 --> 00:08:00.017
to get up and running with that right away.

184
00:08:00.017 --> 00:08:04.184
Now, Prisma by itself does not provide any sort of

185
00:08:05.449 --> 00:08:06.927
additional Logic layer.

186
00:08:06.927 --> 00:08:11.787
It's just a set of GraphQL, Create Read Update and Delete

187
00:08:11.787 --> 00:08:13.410
API's on top of it.

188
00:08:13.410 --> 00:08:16.587
And now if you were to want to introduce any sort Logic

189
00:08:16.587 --> 00:08:20.392
before you actually save the data into your database,

190
00:08:20.392 --> 00:08:23.325
then you need something else.

191
00:08:23.325 --> 00:08:26.621
Because lets say you wanted to, well lets look at us.

192
00:08:26.621 --> 00:08:30.857
Lets say we wanted to resize an image before put it up.

193
00:08:30.857 --> 00:08:34.140
Or lets say we wanted to send an email as soon as the

194
00:08:34.140 --> 00:08:38.850
order has been created. Or lets say we wanted to do

195
00:08:38.850 --> 00:08:41.420
write limiting or anything else. If you want to do anything

196
00:08:41.420 --> 00:08:44.387
before it actually gets put into the data, it's simply just

197
00:08:44.387 --> 00:08:47.706
storing data, then we need another layer on top of that.

198
00:08:47.706 --> 00:08:50.176
That's actually going to take care of

199
00:08:50.176 --> 00:08:52.035
handling all of the Logic.

200
00:08:52.035 --> 00:08:56.805
So that's what GraphQL Yoga is and GraphQL Yoga is where

201
00:08:56.805 --> 00:08:59.071
we're going to, it's gonna sit on top of Prisma

202
00:08:59.071 --> 00:09:03.210
or sit in front of Prisma and sort of proxy

203
00:09:03.210 --> 00:09:04.235
all of the requests.

204
00:09:04.235 --> 00:09:06.878
So this is where we implement all of our query and

205
00:09:06.878 --> 00:09:08.334
mutation resolvers.

206
00:09:08.334 --> 00:09:11.550
That means like when someone requests to add an item,

207
00:09:11.550 --> 00:09:15.133
before we put it into the prism database, we to actually

208
00:09:15.133 --> 00:09:17.238
do a little bit of data massaging and that happens

209
00:09:17.238 --> 00:09:18.263
at a Yoga layer.

210
00:09:18.263 --> 00:09:21.348
Any custom server inside Logic that needs to happen.

211
00:09:21.348 --> 00:09:23.581
Charging credit cards. You can't charge your credit card

212
00:09:23.581 --> 00:09:25.838
in a database, but you can't do that just client side.

213
00:09:25.838 --> 00:09:28.386
That needs to happen on there server side.

214
00:09:28.386 --> 00:09:32.691
So before it makes its way into the Prisma DB,

215
00:09:32.691 --> 00:09:36.172
we make sure that we charge the credit card

216
00:09:36.172 --> 00:09:37.010
on the Yoga server.

217
00:09:37.010 --> 00:09:39.404
And this is just an express server that sits in front

218
00:09:39.404 --> 00:09:43.226
of Prisma sending emails, performing authentication,

219
00:09:43.226 --> 00:09:45.185
any permissions that we may have.

220
00:09:45.185 --> 00:09:48.797
All of the Logic is going to happen in front of the Prisma

221
00:09:48.797 --> 00:09:50.071
with the GraphicQL Yoga.

222
00:09:50.071 --> 00:09:53.563
So it seems like a lot, however, I do believe that

223
00:09:53.563 --> 00:09:56.527
all of these things have their own use case.

224
00:09:56.527 --> 00:10:00.258
And it is the best stack for building GraphicQL

225
00:10:00.258 --> 00:10:01.152
in my opinion right now.

226
00:10:01.152 --> 00:10:05.504
I have spent a year on this and I have built my own

227
00:10:05.504 --> 00:10:06.685
which was very painful.

228
00:10:06.685 --> 00:10:09.746
I've tried a whole bunch of other servers that are out there

229
00:10:09.746 --> 00:10:13.345
and in my opinion this is the best way forward for

230
00:10:13.345 --> 00:10:16.512
building a hundred percent open source

231
00:10:17.736 --> 00:10:19.941
based GraphicQL stack.

232
00:10:19.941 --> 00:10:21.190
So hopefully that makes sense.

233
00:10:21.190 --> 00:10:24.395
We're going to be coming back to these pieces fairly often.

234
00:10:24.395 --> 00:10:26.700
Just so we understand what all the different pieces are,

235
00:10:26.700 --> 00:10:29.999
but for now lets actually get writing some code

