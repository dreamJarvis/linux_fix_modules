WEBVTT

1
00:00:01.070 --> 00:00:03.300
<v Wes>All right, let's flip over to the back end now</v>

2
00:00:03.300 --> 00:00:06.450
'cause we're gonna start building our GraphQL server

3
00:00:06.450 --> 00:00:09.040
that we can interface with our React application.

4
00:00:09.040 --> 00:00:11.190
Now, I've mentioned a few times

5
00:00:11.190 --> 00:00:12.680
in the past that we're gonna be using

6
00:00:12.680 --> 00:00:14.270
something called Prisma on the back end,

7
00:00:14.270 --> 00:00:18.570
and Prisma is a 100% open source library

8
00:00:18.570 --> 00:00:21.810
that sort of sits on top of an existing

9
00:00:21.810 --> 00:00:23.590
or a brand new database

10
00:00:23.590 --> 00:00:28.590
and provides you a full-featured GraphQL API

11
00:00:28.610 --> 00:00:31.890
that we can use to perform all of our CRUD operations,

12
00:00:31.890 --> 00:00:35.120
all of our relationships, all of our data updating,

13
00:00:35.120 --> 00:00:35.953
everything that we need.

14
00:00:35.953 --> 00:00:37.640
Remember I was showing you in the last video

15
00:00:37.640 --> 00:00:40.740
how I was querying and you can write mutations,

16
00:00:40.740 --> 00:00:43.340
and you can relate data to one another?

17
00:00:43.340 --> 00:00:46.270
I hadn't written any code to get that up and running.

18
00:00:46.270 --> 00:00:49.600
Prisma does all of the heavy lifting for you

19
00:00:49.600 --> 00:00:52.310
to provide you with a full featured GraphQL API.

20
00:00:52.310 --> 00:00:54.570
Then we're gonna layer on something called Yoga

21
00:00:54.570 --> 00:00:58.140
on top of that that will allow us to add our custom logic

22
00:00:58.140 --> 00:00:59.700
that is specific to our application.

23
00:00:59.700 --> 00:01:01.700
So if we look back here,

24
00:01:01.700 --> 00:01:05.740
Prisma gives us a set of CRUD APIs for MySQL or Postgres.

25
00:01:05.740 --> 00:01:08.330
Actually, just at the time of recording,

26
00:01:08.330 --> 00:01:10.800
it also now supports MongoDB,

27
00:01:10.800 --> 00:01:12.750
and they are making adapters

28
00:01:12.750 --> 00:01:14.240
for all kinds of different databases.

29
00:01:14.240 --> 00:01:15.190
And that's really cool because

30
00:01:15.190 --> 00:01:18.810
if your company likes to use an existing database,

31
00:01:18.810 --> 00:01:21.530
or you specifically like to use a database,

32
00:01:21.530 --> 00:01:23.530
then can just use that adapter for it.

33
00:01:23.530 --> 00:01:26.380
However, if you don't care about which database,

34
00:01:26.380 --> 00:01:29.440
it doesn't matter at all because we're never

35
00:01:29.440 --> 00:01:31.150
actually going to be writing any MySQL,

36
00:01:31.150 --> 00:01:34.030
Postgres, or MongoDB queries ourself.

37
00:01:34.030 --> 00:01:35.730
We're always going to be interfacing

38
00:01:35.730 --> 00:01:40.190
with the GraphQL queries that Prisma surfaces for us.

39
00:01:40.190 --> 00:01:43.770
So you can set up your own Prisma instance

40
00:01:43.770 --> 00:01:45.920
by using Docker or something like that.

41
00:01:45.920 --> 00:01:49.110
We are going be using the Demo server from Prisma

42
00:01:49.110 --> 00:01:51.430
in the interest of just getting up and running.

43
00:01:51.430 --> 00:01:54.160
However, do know that you can run your own Prisma,

44
00:01:54.160 --> 00:01:56.600
you can run your own MySQL database,

45
00:01:56.600 --> 00:01:58.740
and that's likely what you will do

46
00:01:58.740 --> 00:02:01.100
putting this thing into production.

47
00:02:01.100 --> 00:02:03.010
So, first thing we need to do is get you

48
00:02:03.010 --> 00:02:06.090
actually signed up for Prisma Demo server.

49
00:02:06.090 --> 00:02:08.620
So we'll go and click on Get Started,

50
00:02:08.620 --> 00:02:10.640
and you can open the console.

51
00:02:10.640 --> 00:02:13.990
It's going to ask you to, or it might not say Open Console,

52
00:02:13.990 --> 00:02:15.510
but it might say Sign Up there.

53
00:02:15.510 --> 00:02:17.070
At the end of the day we just need you to sign up

54
00:02:17.070 --> 00:02:20.440
for a Prisma account and log into that thing.

55
00:02:20.440 --> 00:02:22.390
Then what we'll want to do,

56
00:02:22.390 --> 00:02:24.970
when you're logged in you'll probably see nothing here.

57
00:02:24.970 --> 00:02:26.500
We want to go over to our terminal

58
00:02:26.500 --> 00:02:27.980
and do a little bit of work.

59
00:02:27.980 --> 00:02:29.850
So, the first thing we need to do is make sure,

60
00:02:29.850 --> 00:02:32.170
triple check you're in the back end folder,

61
00:02:32.170 --> 00:02:33.150
not the front end folder,

62
00:02:33.150 --> 00:02:37.210
not just the regular sick-fits folder, the back end folder.

63
00:02:37.210 --> 00:02:40.810
Now, inside of that, we're going to globally install Prisma

64
00:02:40.810 --> 00:02:45.751
'cause Prisma has a command line tool that has some things

65
00:02:45.751 --> 00:02:47.100
for sorta bootstrapping our application,

66
00:02:47.100 --> 00:02:48.320
and we're gonna be using those.

67
00:02:48.320 --> 00:02:50.460
So you type, npm i -g.

68
00:02:50.460 --> 00:02:53.090
The -g is for global, hopefully you know that.

69
00:02:53.090 --> 00:02:56.270
And we install Prisma.

70
00:02:56.270 --> 00:03:00.423
Now it's gonna go ahead and install that globally for us.

71
00:03:02.580 --> 00:03:06.350
Once that has installed, we're going to type prisma login,

72
00:03:06.350 --> 00:03:09.330
and this is actually kind of a nifty way to log in.

73
00:03:09.330 --> 00:03:10.260
I really like it.

74
00:03:10.260 --> 00:03:11.820
So you just type prisma login,

75
00:03:11.820 --> 00:03:16.820
and it's gonna open up your browser to say Grant Permission,

76
00:03:17.290 --> 00:03:19.150
and then you just close the window

77
00:03:19.150 --> 00:03:21.550
and go back to your terminal and you're authenticated,

78
00:03:21.550 --> 00:03:24.310
which I think is pretty cool.

79
00:03:24.310 --> 00:03:28.330
Then what we want to do is to type prisma init

80
00:03:28.330 --> 00:03:31.150
because it's going to sort of follow us

81
00:03:31.150 --> 00:03:33.072
through a whole bunch of steps.

82
00:03:33.072 --> 00:03:34.260
So let's hit that.

83
00:03:34.260 --> 00:03:35.860
It's gonna ask us a few questions here.

84
00:03:35.860 --> 00:03:38.170
So, first one, Set up a Prisma,

85
00:03:38.170 --> 00:03:40.400
do you want to deploy to an existing server?

86
00:03:40.400 --> 00:03:42.900
So, you might have an existing database,

87
00:03:42.900 --> 00:03:46.250
so if you have a MySQL database or a Postgres database

88
00:03:46.250 --> 00:03:49.470
or a MongoDB that you want to connect to, you could do that.

89
00:03:49.470 --> 00:03:52.290
You could set up a local database using Docker,

90
00:03:52.290 --> 00:03:54.680
or you can use either your own

91
00:03:54.680 --> 00:03:57.750
hosted endpoint of a Prisma server,

92
00:03:57.750 --> 00:04:01.100
or you can, in our case, we're going to use the Demo server.

93
00:04:01.100 --> 00:04:02.610
So we're going to use our arrow keys

94
00:04:02.610 --> 00:04:05.380
to hit enter on that one, then it's gonna ask us,

95
00:04:05.380 --> 00:04:07.910
do we want to put it in the US or the EU.

96
00:04:07.910 --> 00:04:10.140
It's kinda cool because it'll show you what the latency is.

97
00:04:10.140 --> 00:04:11.420
Obviously pick the one that has

98
00:04:11.420 --> 00:04:13.380
the least amount of latency for you.

99
00:04:13.380 --> 00:04:16.770
I'm gonna use the US since I'm in Canada, nice and close.

100
00:04:16.770 --> 00:04:19.070
Then choose a name for your service,

101
00:04:19.070 --> 00:04:22.723
so I'm gonna call mine siccccccccck-fits.

102
00:04:24.630 --> 00:04:26.500
And then you have a stage.

103
00:04:26.500 --> 00:04:28.610
So you can have development and production stages,

104
00:04:28.610 --> 00:04:29.480
which is kinda neat.

105
00:04:29.480 --> 00:04:30.923
I'm gonna leave that at dev.

106
00:04:36.250 --> 00:04:37.780
And there we go, it just created.

107
00:04:37.780 --> 00:04:40.210
If I say, get status, it's gonna show us

108
00:04:40.210 --> 00:04:42.250
that it created just these two files here,

109
00:04:42.250 --> 00:04:43.720
and let's actually go ahead

110
00:04:43.720 --> 00:04:45.720
and take a look at what those files are.

111
00:04:47.350 --> 00:04:51.310
First let's open this prisma.yml, so open up prisma.yml,

112
00:04:52.938 --> 00:04:55.120
and you're going to see there's two pieces of information.

113
00:04:55.120 --> 00:04:58.060
We're actually going to be modifying this just slightly.

114
00:04:58.060 --> 00:04:59.960
So the first is the actual endpoint

115
00:04:59.960 --> 00:05:01.280
that we're going to be hitting,

116
00:05:01.280 --> 00:05:02.480
and I'm gonna stick that in

117
00:05:02.480 --> 00:05:04.270
what's called an environmental variable.

118
00:05:04.270 --> 00:05:06.750
And what environmental variables are,

119
00:05:06.750 --> 00:05:10.230
they allow you to set variables

120
00:05:10.230 --> 00:05:12.010
based on the (laughs) environment.

121
00:05:12.010 --> 00:05:16.030
Wow, what an amazing exclamation, explanation, Wes!

122
00:05:16.030 --> 00:05:18.420
What are environmental variables?

123
00:05:18.420 --> 00:05:19.860
Let's say you have development

124
00:05:19.860 --> 00:05:21.120
and then you go to production

125
00:05:21.120 --> 00:05:23.270
and then maybe you have a staging

126
00:05:23.270 --> 00:05:24.930
or maybe you have a different server

127
00:05:24.930 --> 00:05:26.890
that you're testing it out on,

128
00:05:26.890 --> 00:05:29.840
and those things might contain sensitive information

129
00:05:29.840 --> 00:05:31.730
or they might just contain values

130
00:05:31.730 --> 00:05:33.930
that need to change depending on

131
00:05:33.930 --> 00:05:35.540
what environment you are sitting in.

132
00:05:35.540 --> 00:05:38.150
And it's likely that we'll want to change this endpoint

133
00:05:38.150 --> 00:05:40.060
when you switch over to production.

134
00:05:40.060 --> 00:05:41.050
So what we're gonna do is,

135
00:05:41.050 --> 00:05:42.490
we're gonna go to the sidebar here,

136
00:05:42.490 --> 00:05:47.130
and you see that we have this variables.env.sample?

137
00:05:47.130 --> 00:05:50.900
This variables.env file, will, if you open it up,

138
00:05:50.900 --> 00:05:54.100
it's going to contain a whole bunch of information,

139
00:05:54.100 --> 00:05:55.620
of sensitive information.

140
00:05:55.620 --> 00:05:57.370
And let me tell you a couple times,

141
00:05:57.370 --> 00:06:00.950
do not ever push this variable

142
00:06:00.950 --> 00:06:02.910
to anywhere that the public can see.

143
00:06:02.910 --> 00:06:05.670
So it doesn't go on GitHub, and it doesn't go,

144
00:06:05.670 --> 00:06:08.830
and if you look at the gitignore for this file,

145
00:06:08.830 --> 00:06:11.700
it'll show you that it's ignoring all .env files.

146
00:06:11.700 --> 00:06:14.430
But this is just private information

147
00:06:14.430 --> 00:06:16.510
that is specific to your deploy

148
00:06:16.510 --> 00:06:18.500
and should never be seen by the public.

149
00:06:18.500 --> 00:06:21.370
So, first thing we want to do is actually rename this

150
00:06:21.370 --> 00:06:25.470
from variables.env.sample to just varables.env.

151
00:06:25.470 --> 00:06:28.160
A lot of people just have it as a .env file.

152
00:06:28.160 --> 00:06:29.780
However, I find in my tutorials,

153
00:06:29.780 --> 00:06:32.870
because it's a hidden .env file, a lot of people lose it.

154
00:06:32.870 --> 00:06:35.930
So I've renamed mine to variables.env.

155
00:06:35.930 --> 00:06:38.940
So we want to rename it to just variables.env,

156
00:06:38.940 --> 00:06:40.580
take the .sample off.

157
00:06:40.580 --> 00:06:42.650
I get lots of email of people goofing that up.

158
00:06:42.650 --> 00:06:43.890
So I'll say it again.

159
00:06:43.890 --> 00:06:48.450
Do not put the .sample on the end, so remove that.

160
00:06:48.450 --> 00:06:50.020
And then we want to go ahead

161
00:06:50.020 --> 00:06:53.080
and take this endpoint outta here,

162
00:06:53.080 --> 00:06:55.223
and stick it into the PRISMA_ENDPOINT.

163
00:06:56.690 --> 00:06:57.523
Good.

164
00:06:57.523 --> 00:07:00.280
And then we'll go back to our prisma.yml file,

165
00:07:00.280 --> 00:07:04.980
and we'll interpolate with this syntax, ${env:}

166
00:07:04.980 --> 00:07:05.850
and then we'll just use

167
00:07:05.850 --> 00:07:09.720
the name of the variable PRISMA_ENDPOINT.

168
00:07:09.720 --> 00:07:10.950
Bam, good.

169
00:07:10.950 --> 00:07:14.940
Couple other things we want to add to this prisma.yml file.

170
00:07:14.940 --> 00:07:17.260
Second, we have this thing called a secret,

171
00:07:17.260 --> 00:07:22.260
and we will use a Prisma secret, so we'll say PRISMA_SECRET,

172
00:07:24.510 --> 00:07:25.620
and what that will do is,

173
00:07:25.620 --> 00:07:27.400
it's going to lock down your database

174
00:07:27.400 --> 00:07:29.880
so that the general public can't just

175
00:07:29.880 --> 00:07:31.740
start going and adding and deleting stuff.

176
00:07:31.740 --> 00:07:34.210
Now, I'm going to make you comment

177
00:07:34.210 --> 00:07:37.050
that out for now because what that allows us,

178
00:07:37.050 --> 00:07:39.820
if you omit the secret then it just makes it wide open,

179
00:07:39.820 --> 00:07:42.130
and that makes it really easy for development,

180
00:07:42.130 --> 00:07:43.940
but at the huge security concern

181
00:07:43.940 --> 00:07:45.430
when you actually go to production.

182
00:07:45.430 --> 00:07:46.850
So we'll want to uncomment that

183
00:07:46.850 --> 00:07:48.720
just before we go to production.

184
00:07:48.720 --> 00:07:50.320
So uncomment that.

185
00:07:50.320 --> 00:07:54.990
We'll go into here and change this secret to something else,

186
00:07:54.990 --> 00:07:56.913
so, uh, I don't know.

187
00:07:57.760 --> 00:07:58.790
That sounds good.

188
00:07:58.790 --> 00:08:01.380
Good, and then finally we need something called

189
00:08:01.380 --> 00:08:04.920
a post-deploy hook because the way that this is gonna happen

190
00:08:04.920 --> 00:08:07.876
is we're gonna modify our data model.

191
00:08:07.876 --> 00:08:10.280
We're gonna add fields, like things like,

192
00:08:10.280 --> 00:08:12.100
we're gonna add the user's email address

193
00:08:12.100 --> 00:08:13.090
and the user's password.

194
00:08:13.090 --> 00:08:14.860
Those are gonna be fields on the user.

195
00:08:14.860 --> 00:08:17.990
And then we need to relay that new updated information

196
00:08:17.990 --> 00:08:21.090
to our Prisma, which is hosted on the Prisma server.

197
00:08:21.090 --> 00:08:24.647
So in order to do that, we need to deploy it,

198
00:08:24.647 --> 00:08:27.260
and then after the deploy is done,

199
00:08:27.260 --> 00:08:29.410
the Prisma server is actually gonna return to us

200
00:08:29.410 --> 00:08:31.290
what's called a GraphQL schema.

201
00:08:31.290 --> 00:08:35.676
So we need what's called a post-deploy hook in there

202
00:08:35.676 --> 00:08:36.970
that will pull that schema for us.

203
00:08:36.970 --> 00:08:39.530
If this seems a little bit confusing,

204
00:08:39.530 --> 00:08:41.920
just hold your horses for just a second,

205
00:08:41.920 --> 00:08:44.070
we'll fill it out and then we'll go through it together.

206
00:08:44.070 --> 00:08:46.600
So, our hooks are going to be,

207
00:08:46.600 --> 00:08:51.600
and make sure you tab in one level, post-deploy,

208
00:08:51.600 --> 00:08:56.600
and then tab in one level, - graphql get-schema -p prisma,

209
00:09:00.090 --> 00:09:01.310
and that will run it.

210
00:09:01.310 --> 00:09:02.363
Okay, good.

211
00:09:03.903 --> 00:09:04.736
I think we've got that.

212
00:09:04.736 --> 00:09:06.200
Let's crack open that other file,

213
00:09:06.200 --> 00:09:07.580
which is that data model here.

214
00:09:07.580 --> 00:09:10.450
So we have type User, and then that User,

215
00:09:10.450 --> 00:09:11.850
this is just the default that it gives you.

216
00:09:11.850 --> 00:09:13.530
User will have an ID and a name,

217
00:09:13.530 --> 00:09:16.260
and obviously we're gonna go and expand this,

218
00:09:16.260 --> 00:09:18.120
as well as create our new types.

219
00:09:18.120 --> 00:09:20.910
But this is the schema of how everything looks.

220
00:09:20.910 --> 00:09:22.770
So what we want to do now is actually deploy

221
00:09:22.770 --> 00:09:25.480
this data model to the Prisma server

222
00:09:25.480 --> 00:09:27.690
that is running on prisma.io.

223
00:09:27.690 --> 00:09:30.990
And normally what you'd do is you go to the command line

224
00:09:30.990 --> 00:09:32.760
and you type prisma deploy

225
00:09:32.760 --> 00:09:34.430
and that's going to take everything

226
00:09:34.430 --> 00:09:36.950
in your prisma.yml file and deploy it,

227
00:09:36.950 --> 00:09:40.270
but it's going to actually complain to you.

228
00:09:40.270 --> 00:09:42.610
Warning, a valid environmental variable to satisfy

229
00:09:42.610 --> 00:09:46.270
declaration PRISMA_ENDPOINT could not be found.

230
00:09:46.270 --> 00:09:48.140
And that's because we are using

231
00:09:48.140 --> 00:09:50.030
this alternate naming convention

232
00:09:50.030 --> 00:09:51.910
for environmental variables file

233
00:09:51.910 --> 00:09:55.207
as variables.env instead of .env.

234
00:09:55.207 --> 00:09:57.938
And the way you can solve that is just by saying,

235
00:09:57.938 --> 00:10:00.340
prisma --help, and we'll see what

236
00:10:00.340 --> 00:10:02.363
all of the Prisma options are.

237
00:10:03.500 --> 00:10:06.230
And we want to deploy so I think we can say

238
00:10:06.230 --> 00:10:09.113
prisma deploy --help.

239
00:10:11.690 --> 00:10:13.470
There we go and then it tells us

240
00:10:13.470 --> 00:10:17.580
that we can pass a custom path to environmental files,

241
00:10:17.580 --> 00:10:22.580
so we can say, prisma deploy --env-file, or just -e

242
00:10:23.470 --> 00:10:25.840
and then we can give it the variables.env file.

243
00:10:25.840 --> 00:10:27.960
And that should actually work.

244
00:10:27.960 --> 00:10:29.440
Oh ho, there we go!

245
00:10:29.440 --> 00:10:30.510
So what's happening here is

246
00:10:30.510 --> 00:10:33.060
it's deploying the service to our sick-fits.

247
00:10:33.060 --> 00:10:35.240
It says okay, here are the following changes that you made.

248
00:10:35.240 --> 00:10:37.940
You created a user, you added the field name,

249
00:10:37.940 --> 00:10:41.120
and the ID name and then you also added the updated

250
00:10:41.120 --> 00:10:44.753
and created fields to that.

251
00:10:45.630 --> 00:10:47.790
I do get this error right here,

252
00:10:47.790 --> 00:10:49.950
command prepare, blah blah blah.

253
00:10:49.950 --> 00:10:51.870
If you get that, it's safe to ignore it.

254
00:10:51.870 --> 00:10:54.120
I have been in touch with the Prisma folks,

255
00:10:54.120 --> 00:10:56.740
and they said that is currently just how it works.

256
00:10:56.740 --> 00:10:58.430
It will be removed at a future.

257
00:10:58.430 --> 00:11:00.890
So even though it's red, it is just a warning,

258
00:11:00.890 --> 00:11:03.500
and it's not anything you need to worry about.

259
00:11:03.500 --> 00:11:06.637
Now, if we go back to our Prisma console here,

260
00:11:06.637 --> 00:11:09.100
and you refresh, you should now see

261
00:11:09.100 --> 00:11:11.950
your sick-fits service showing up.

262
00:11:11.950 --> 00:11:14.491
And you might have to go to servers first

263
00:11:14.491 --> 00:11:17.020
and select either EU or US.

264
00:11:17.020 --> 00:11:20.060
I deployed to US so I'm gonna click on that one.

265
00:11:20.060 --> 00:11:22.960
And you see, here we go, sick-fits,

266
00:11:22.960 --> 00:11:26.370
this is our actual database that we've worked on,

267
00:11:26.370 --> 00:11:29.770
and you can use this really handy data browser

268
00:11:29.770 --> 00:11:32.490
where you can see all of the different values that we have.

269
00:11:32.490 --> 00:11:35.260
Let me show you the actual finished one that I have here,

270
00:11:35.260 --> 00:11:37.040
where I can go to my data browser.

271
00:11:37.040 --> 00:11:38.430
I can see that there is users.

272
00:11:38.430 --> 00:11:40.630
These are all of the users that we have,

273
00:11:40.630 --> 00:11:42.310
all of the different cart items,

274
00:11:42.310 --> 00:11:44.190
all of the orders that I have created,

275
00:11:44.190 --> 00:11:46.720
all the items and all of the order items.

276
00:11:46.720 --> 00:11:48.740
So go back to Services.

277
00:11:48.740 --> 00:11:51.440
One thing you do need to note is that your requests

278
00:11:51.440 --> 00:11:54.600
are limited at 10 per 10 seconds, I believe.

279
00:11:54.600 --> 00:11:57.060
So I'm just on the Prisma docs here,

280
00:11:57.060 --> 00:12:01.180
and it says, here we go, Prisma sandboxes,

281
00:12:01.180 --> 00:12:02.990
which is what we're using, the Demo server,

282
00:12:02.990 --> 00:12:07.420
10 requests per 10 seconds, which is fine.

283
00:12:07.420 --> 00:12:09.480
If you do more than that in 10 seconds,

284
00:12:09.480 --> 00:12:11.970
then it will just queue them up,

285
00:12:11.970 --> 00:12:14.030
and you can queue up to 25 requests.

286
00:12:14.030 --> 00:12:15.400
That's not going to be an issue

287
00:12:15.400 --> 00:12:16.760
when you are in development

288
00:12:16.760 --> 00:12:18.600
because you're not gonna be hitting that many.

289
00:12:18.600 --> 00:12:20.670
At most we'll be firing off

290
00:12:20.670 --> 00:12:23.300
three or four requests per page load,

291
00:12:23.300 --> 00:12:24.750
and by the time you come back to that,

292
00:12:24.750 --> 00:12:26.530
that will have cleared.

293
00:12:26.530 --> 00:12:28.650
But, for production, obviously you don't want

294
00:12:28.650 --> 00:12:30.730
to be using the Demo server.

295
00:12:30.730 --> 00:12:33.130
So we've got that up and running.

296
00:12:33.130 --> 00:12:35.050
One other thing we want to take a look at is,

297
00:12:35.050 --> 00:12:38.530
if I take a git status now, you'll see that

298
00:12:38.530 --> 00:12:41.670
there's a couple different things that have changed here.

299
00:12:41.670 --> 00:12:45.180
First, obviously we deleted this variables.env file

300
00:12:45.180 --> 00:12:47.230
and renamed it to variables.env.

301
00:12:47.230 --> 00:12:49.410
So now it looks like that's been deleted

302
00:12:49.410 --> 00:12:52.700
because we don't track the new variables.env.

303
00:12:52.700 --> 00:12:55.000
Our Prisma and data model are there,

304
00:12:55.000 --> 00:12:57.840
but the modified, this is what comes down.

305
00:12:57.840 --> 00:13:00.730
Remember when we wrote that post-deploy hook

306
00:13:00.730 --> 00:13:03.590
in our prisma.yml file?

307
00:13:03.590 --> 00:13:04.920
What this does is it goes ahead

308
00:13:04.920 --> 00:13:07.500
and gets the schema after we deploy it

309
00:13:07.500 --> 00:13:08.660
and we can look at that.

310
00:13:08.660 --> 00:13:12.220
It's in the source folder generated prisma.graphql.

311
00:13:12.220 --> 00:13:15.780
So let's look at prisma.graphql,

312
00:13:15.780 --> 00:13:20.070
and this is the magic that is behind all of what Prisma is.

313
00:13:20.070 --> 00:13:21.640
So it creates this API,

314
00:13:21.640 --> 00:13:24.640
and all of the API lives in this prisma.graphql.

315
00:13:24.640 --> 00:13:27.200
So you can take a look at, we have all our Mutations,

316
00:13:27.200 --> 00:13:28.853
createUser, updateUser, deleteUser,

317
00:13:28.853 --> 00:13:31.130
upsert, updateManyUsers, deleteManyUsers.

318
00:13:31.130 --> 00:13:34.553
So we didn't have to create any endpoints or anything

319
00:13:34.553 --> 00:13:38.260
to be able to use all of these Mutations.

320
00:13:38.260 --> 00:13:39.830
As well as, this is one thing

321
00:13:39.830 --> 00:13:41.190
that's kinda bugging me right now,

322
00:13:41.190 --> 00:13:46.010
the syntax highlighting in VS Code is broken.

323
00:13:46.010 --> 00:13:48.100
There are two syntax highlighters

324
00:13:48.100 --> 00:13:49.990
that you could use to highlight it.

325
00:13:49.990 --> 00:13:52.170
One is from Prisma themselves.

326
00:13:52.170 --> 00:13:54.740
It is brand new at the time of recording.

327
00:13:54.740 --> 00:13:57.670
However, it has this problem with the broken one.

328
00:13:57.670 --> 00:14:00.570
The other one is GraphQL for VS Code,

329
00:14:00.570 --> 00:14:03.610
has almost 300,000 installs,

330
00:14:03.610 --> 00:14:07.300
and it also has this problem as well.

331
00:14:07.300 --> 00:14:09.580
A couple months ago I made an issue.

332
00:14:09.580 --> 00:14:10.700
It looked like it was fixed,

333
00:14:10.700 --> 00:14:13.810
but looks like it has come back to haunt us,

334
00:14:13.810 --> 00:14:15.200
which is annoying because this is

335
00:14:15.200 --> 00:14:18.040
what comments are in GraphQL is three quotes.

336
00:14:18.040 --> 00:14:20.870
So if you are trying to like read this,

337
00:14:20.870 --> 00:14:23.060
you can simply just remove it,

338
00:14:23.060 --> 00:14:24.550
delete the comments,

339
00:14:24.550 --> 00:14:26.430
and that's going to actually give you

340
00:14:26.430 --> 00:14:29.850
the proper syntax highlighting that we're looking for.

341
00:14:29.850 --> 00:14:31.180
So what else do we have?

342
00:14:31.180 --> 00:14:32.130
We have different queries,

343
00:14:32.130 --> 00:14:33.820
if we want to query a bunch of users,

344
00:14:33.820 --> 00:14:35.140
if we want to query one user,

345
00:14:35.140 --> 00:14:36.800
if we want UserConnection.

346
00:14:36.800 --> 00:14:38.890
We're gonna be using that with our pagination.

347
00:14:38.890 --> 00:14:40.240
This will give us information about

348
00:14:40.240 --> 00:14:44.370
how many users are there in total, et cetera, et cetera.

349
00:14:44.370 --> 00:14:45.830
Everything that you could possibly need.

350
00:14:45.830 --> 00:14:47.410
See how large this file is?

351
00:14:47.410 --> 00:14:51.170
Just for one data model with two fields,

352
00:14:51.170 --> 00:14:54.290
it creates a GraphQL API that would have been,

353
00:14:54.290 --> 00:14:56.420
what, almost 250 lines of coding?

354
00:14:56.420 --> 00:14:58.480
And this is going to get into the thousands

355
00:14:58.480 --> 00:15:00.700
and thousands of lines of code,

356
00:15:00.700 --> 00:15:03.000
as we create more complex data models.

357
00:15:03.000 --> 00:15:05.880
So, let's actually go ahead and add something.

358
00:15:05.880 --> 00:15:08.000
So maybe we'll say we want an email,

359
00:15:08.000 --> 00:15:10.530
and the type is going to be a String,

360
00:15:10.530 --> 00:15:15.040
and with GraphQL, the syntax of it is pretty interesting.

361
00:15:15.040 --> 00:15:17.400
First of all, the name for these are called fields.

362
00:15:17.400 --> 00:15:18.490
This is a type.

363
00:15:18.490 --> 00:15:19.770
These are called fields.

364
00:15:19.770 --> 00:15:23.280
And then you specify the type of that field.

365
00:15:23.280 --> 00:15:25.620
And you can say all the different types are,

366
00:15:25.620 --> 00:15:28.700
let's just go to the GraphQL documentation,

367
00:15:28.700 --> 00:15:30.740
take a look at what all the different types are.

368
00:15:30.740 --> 00:15:32.460
So we have fields.

369
00:15:32.460 --> 00:15:34.990
We're gonna learn about arguments and fragments

370
00:15:34.990 --> 00:15:39.240
and directives and all that good stuff coming through.

371
00:15:39.240 --> 00:15:43.020
But click through to object types and fields,

372
00:15:43.020 --> 00:15:46.730
and you can see that the built-in ones are

373
00:15:46.730 --> 00:15:49.810
integers, floats, strings, booleans, ID,

374
00:15:49.810 --> 00:15:51.653
and then in addition to that,

375
00:15:53.510 --> 00:15:56.940
Prisma will expose a date/time type for us,

376
00:15:56.940 --> 00:16:00.650
which is automatically added to the user for tracking

377
00:16:00.650 --> 00:16:04.190
both when it was created and when it was last updated.

378
00:16:04.190 --> 00:16:06.610
Similarly, we can also put an exclamation mark

379
00:16:06.610 --> 00:16:09.260
on the end and that will make sure that it is required.

380
00:16:09.260 --> 00:16:12.050
And if you would like an array of strings

381
00:16:12.050 --> 00:16:13.820
instead of just one string,

382
00:16:13.820 --> 00:16:16.987
you can simply put some angle brackets around it,

383
00:16:16.987 --> 00:16:18.710
and that would be an array of strings,

384
00:16:18.710 --> 00:16:20.610
where each string is not required,

385
00:16:20.610 --> 00:16:22.020
but the array itself is required.

386
00:16:22.020 --> 00:16:24.760
If you wanted both of them to be required,

387
00:16:24.760 --> 00:16:26.400
you could put a bang on each of them.

388
00:16:26.400 --> 00:16:27.420
But we're gonna back that up

389
00:16:27.420 --> 00:16:31.810
and just make it a string that is required.

390
00:16:31.810 --> 00:16:33.280
These right here, where you have an @,

391
00:16:33.280 --> 00:16:35.850
these are called directives in GraphQL,

392
00:16:35.850 --> 00:16:38.080
and directives can do anything that you want.

393
00:16:38.080 --> 00:16:41.810
And they are implemented by your GraphQL server,

394
00:16:41.810 --> 00:16:45.150
so if we take a look at the GraphQL directive,

395
00:16:45.150 --> 00:16:48.150
you can see that we have @name,

396
00:16:48.150 --> 00:16:50.810
you have @unique, which is what we're using here.

397
00:16:50.810 --> 00:16:54.740
You have @relation for setting relations between values.

398
00:16:54.740 --> 00:16:58.580
You have defaults, which is used for obviously

399
00:16:58.580 --> 00:17:01.780
setting defaults of the value.

400
00:17:01.780 --> 00:17:03.310
So we're gonna go through some of them.

401
00:17:03.310 --> 00:17:04.890
There are some other ones I haven't used in here

402
00:17:04.890 --> 00:17:06.400
which is @rename.

403
00:17:06.400 --> 00:17:08.590
So once we have added the email,

404
00:17:08.590 --> 00:17:09.423
what do we have to do?

405
00:17:09.423 --> 00:17:11.830
Well, we have to go and re-deploy it again,

406
00:17:11.830 --> 00:17:15.160
but remember we typed that really long thing,

407
00:17:15.160 --> 00:17:18.270
prisma deploy env file variables.env?

408
00:17:18.270 --> 00:17:21.190
What I've done, if you open up your package.json,

409
00:17:21.190 --> 00:17:24.570
you're gonna see that I've created npm script called deploy,

410
00:17:24.570 --> 00:17:28.220
which will sorta tuck away all of that hard stuff,

411
00:17:28.220 --> 00:17:31.520
which is prisma deploy env file variables.env.

412
00:17:31.520 --> 00:17:35.743
And we can simply just go here and type npm run deploy.

413
00:17:37.530 --> 00:17:38.530
What that's gonna do

414
00:17:41.200 --> 00:17:43.230
is it, see, it tells you what changes we had.

415
00:17:43.230 --> 00:17:46.070
We created a field email with the type of string.

416
00:17:46.070 --> 00:17:49.020
It also gives you a link to your GraphQL database endpoint,

417
00:17:49.020 --> 00:17:50.490
so you can actually click on that.

418
00:17:50.490 --> 00:17:51.650
And this is going to give us

419
00:17:51.650 --> 00:17:54.170
what is called a GraphQL playground,

420
00:17:54.170 --> 00:17:56.560
and this is what I was playing around with earlier.

421
00:17:56.560 --> 00:17:58.720
It allows us to just go into it,

422
00:17:58.720 --> 00:18:01.220
so we can look at our schema and see what we have.

423
00:18:01.220 --> 00:18:04.760
We have different queries and we have different mutations.

424
00:18:04.760 --> 00:18:06.780
And let's actually just go ahead and play with them now.

425
00:18:06.780 --> 00:18:11.070
So, if I were to query users,

426
00:18:11.070 --> 00:18:15.273
and for each user I want to grab the ID,

427
00:18:16.700 --> 00:18:19.210
and you can hit your Control + Space,

428
00:18:19.210 --> 00:18:20.340
and the name of the person.

429
00:18:20.340 --> 00:18:22.020
Go ahead and run it.

430
00:18:22.020 --> 00:18:23.120
There's obviously no one there,

431
00:18:23.120 --> 00:18:25.690
but if we were to, let's create a new tab here,

432
00:18:25.690 --> 00:18:27.430
and we'll make a mutation.

433
00:18:27.430 --> 00:18:30.010
And we'll say create user,

434
00:18:30.010 --> 00:18:33.030
and it tells us that you need to pass it,

435
00:18:33.030 --> 00:18:34.890
the only thing that you can pass it is data.

436
00:18:34.890 --> 00:18:38.280
So sometimes you can pass it directly, like name is Wes,

437
00:18:38.280 --> 00:18:40.730
and sometimes they'll tuck it away in its own type,

438
00:18:40.730 --> 00:18:43.390
which in this case is just data,

439
00:18:43.390 --> 00:18:47.300
which has a type of createUser input.

440
00:18:47.300 --> 00:18:49.370
And if you don't know what a createUser input is,

441
00:18:49.370 --> 00:18:52.830
you can go to your schema take a look at createUser,

442
00:18:52.830 --> 00:18:57.140
and then it says it requires a createUser input

443
00:18:57.140 --> 00:18:59.492
which is right here, argument, createUser input.

444
00:18:59.492 --> 00:19:00.430
So we can click through to that,

445
00:19:00.430 --> 00:19:03.160
and it tells us that a specific type

446
00:19:03.160 --> 00:19:05.170
that has been created is called,

447
00:19:05.170 --> 00:19:09.050
UserCreateInput, and that requires a string and email.

448
00:19:09.050 --> 00:19:10.780
So that's what we're gonna do here.

449
00:19:10.780 --> 00:19:15.780
The data is going to be name, Wes Bos,

450
00:19:16.800 --> 00:19:19.590
again with the single quotes.

451
00:19:19.590 --> 00:19:21.050
This is gonna be the death of me.

452
00:19:21.050 --> 00:19:24.130
You do not actually need these commas here,

453
00:19:24.130 --> 00:19:26.920
it's just my own habit from writing JavaScript,

454
00:19:26.920 --> 00:19:28.410
but you do not need it.

455
00:19:28.410 --> 00:19:32.853
And same with the email, it's going to be hey@cool.com.

456
00:19:35.650 --> 00:19:38.100
So, this is up and running.

457
00:19:38.100 --> 00:19:40.700
It's yelling at us now because when you create a user,

458
00:19:40.700 --> 00:19:44.210
you actually have to ask for some specific data back

459
00:19:44.210 --> 00:19:46.000
when it pings back.

460
00:19:46.000 --> 00:19:48.190
So in our case, what do we wanna pull back?

461
00:19:48.190 --> 00:19:50.140
Let's just grab the name and the email

462
00:19:50.140 --> 00:19:51.620
of the user that we just created.

463
00:19:51.620 --> 00:19:53.850
So if I go ahead and run that,

464
00:19:53.850 --> 00:19:55.950
okay, it looks like it has worked.

465
00:19:55.950 --> 00:19:57.150
And there's two ways that we can

466
00:19:57.150 --> 00:19:58.510
actually check if it has worked.

467
00:19:58.510 --> 00:20:01.120
So let me close down some of these here.

468
00:20:01.120 --> 00:20:03.300
We can go to our data browser here,

469
00:20:03.300 --> 00:20:05.810
so I click on Services, go to my sick-fits here,

470
00:20:05.810 --> 00:20:08.980
and on the side, you should see, oh, our data browser User.

471
00:20:08.980 --> 00:20:10.560
There's the user that we just created,

472
00:20:10.560 --> 00:20:11.900
so we can actually see it in here.

473
00:20:11.900 --> 00:20:14.180
And why I like using this is you can actually

474
00:20:14.180 --> 00:20:17.140
edit the data directly from here if you double click it.

475
00:20:17.140 --> 00:20:19.250
And that's often much easier

476
00:20:19.250 --> 00:20:21.400
than having to manually write the query

477
00:20:21.400 --> 00:20:23.170
or the mutation right inside of here.

478
00:20:23.170 --> 00:20:25.010
But if we flip back to Users here

479
00:20:25.860 --> 00:20:27.800
and we were to run that again,

480
00:20:27.800 --> 00:20:28.870
you see that our data comes back.

481
00:20:28.870 --> 00:20:29.703
Let's do that again.

482
00:20:29.703 --> 00:20:31.230
Go back to createUser.

483
00:20:31.230 --> 00:20:34.193
Let's change that to Joe Cool,

484
00:20:37.100 --> 00:20:40.357
and he's gonna be joeboy69@coolboys.net.

485
00:20:47.670 --> 00:20:48.630
Good, it ran.

486
00:20:48.630 --> 00:20:51.290
Go back to our Users, query 'em, good.

487
00:20:51.290 --> 00:20:52.590
Let's get some,

488
00:20:52.590 --> 00:20:54.330
let's get comfortable with some of the other things.

489
00:20:54.330 --> 00:20:57.160
So, users can also take arguments,

490
00:20:57.160 --> 00:21:01.000
so if you don't have any arguments for it, it's just users,

491
00:21:01.000 --> 00:21:04.240
but if you wanna pass it arguments you give it parentheses,

492
00:21:04.240 --> 00:21:07.130
and then if you wanna know what to pass it,

493
00:21:07.130 --> 00:21:10.340
Control + Space, I'll say where,

494
00:21:10.340 --> 00:21:13.010
that's gonna be an object.

495
00:21:13.010 --> 00:21:17.267
Let's just say, where the name contains Wes.

496
00:21:18.730 --> 00:21:20.633
Oh, it's double quotes.

497
00:21:22.040 --> 00:21:24.590
Run it again and you should only get one.

498
00:21:24.590 --> 00:21:27.300
Similarly, we also have userConnection.

499
00:21:27.300 --> 00:21:30.690
So lets go ahead and try that out, so let's do a query.

500
00:21:30.690 --> 00:21:32.553
We want the userConnection,

501
00:21:35.990 --> 00:21:39.470
and from that we want the,

502
00:21:39.470 --> 00:21:41.700
we can get some page info.

503
00:21:41.700 --> 00:21:42.533
What will that?

504
00:21:42.533 --> 00:21:46.423
hasNextPage, hasPreviousPage, startCursor, endCursor.

505
00:21:48.270 --> 00:21:50.570
We'll be talking about that when we hit pagination,

506
00:21:50.570 --> 00:21:53.290
but you can also from here get the aggregate,

507
00:21:53.290 --> 00:21:54.870
and that will have a count.

508
00:21:54.870 --> 00:21:56.610
So see how it automatically filled it in there?

509
00:21:56.610 --> 00:21:59.330
The only value the aggregate will give you is count,

510
00:21:59.330 --> 00:22:01.240
so it automatically just filled it in there.

511
00:22:01.240 --> 00:22:03.280
So if I run it now, it'll tell us,

512
00:22:03.280 --> 00:22:06.220
usersConnection hasNextPage: false,

513
00:22:06.220 --> 00:22:09.120
hasPreviousPage: false, aggregate, there's two of 'em.

514
00:22:09.120 --> 00:22:14.120
But if I were to specifically limit that to the first one,

515
00:22:15.560 --> 00:22:18.080
now when I run it, it's gonna tell us,

516
00:22:18.080 --> 00:22:21.120
okay, there is two users.

517
00:22:21.120 --> 00:22:24.220
However, you asked for the first one,

518
00:22:24.220 --> 00:22:27.710
so there is clearly a next page.

519
00:22:27.710 --> 00:22:29.050
So that's what we'll be hitting

520
00:22:29.050 --> 00:22:30.870
once we hit our pagination level.

521
00:22:30.870 --> 00:22:33.630
So, that is our Prisma setup.

522
00:22:33.630 --> 00:22:34.650
It's nice to have this.

523
00:22:34.650 --> 00:22:37.310
However, we are not going to be interfacing

524
00:22:37.310 --> 00:22:40.250
with this directly because you notice that anybody

525
00:22:40.250 --> 00:22:43.320
that has this URL is able to just go in

526
00:22:43.320 --> 00:22:45.440
and willy nilly start creating stuff,

527
00:22:45.440 --> 00:22:47.370
as well as when you create a user,

528
00:22:47.370 --> 00:22:49.280
we need to hash passwords and all that stuff,

529
00:22:49.280 --> 00:22:51.500
and that's where the next video is gonna come in.

530
00:22:51.500 --> 00:22:53.880
That's where our Yoga server is going to live.

531
00:22:53.880 --> 00:22:55.230
So, see ya in the next one.

