WEBVTT

1
00:00:01.366 --> 00:00:02.199
<v Wes>Alright, now we're gonna do</v>

2
00:00:02.199 --> 00:00:03.860
the whole password reset flow.

3
00:00:03.860 --> 00:00:04.980
And the way that's gonna work is

4
00:00:04.980 --> 00:00:05.950
we're gonna have a forum here

5
00:00:05.950 --> 00:00:08.040
where you put in your email address

6
00:00:08.040 --> 00:00:10.670
and it's gonna send you an email with a token

7
00:00:10.670 --> 00:00:12.770
that is good for one hour.

8
00:00:12.770 --> 00:00:16.400
And then, when you click on that URL and supply that token,

9
00:00:16.400 --> 00:00:19.800
then it will be able to reset the user's password.

10
00:00:19.800 --> 00:00:22.550
Now, there's a bit of an issue that we have here is that,

11
00:00:22.550 --> 00:00:24.740
we've just been using the regular user

12
00:00:24.740 --> 00:00:28.690
that's been imported from the generated prisma.graphql.

13
00:00:28.690 --> 00:00:31.730
So, if we go to prisma.graphql

14
00:00:31.730 --> 00:00:34.563
and we look at the type user.

15
00:00:35.470 --> 00:00:38.460
You'll see that we have the ID, the name, the email,

16
00:00:38.460 --> 00:00:41.280
but we also have the password, the reset token

17
00:00:41.280 --> 00:00:44.840
and the reset token expiry, and that's not necessarily

18
00:00:44.840 --> 00:00:47.520
something that you want available on the front end.

19
00:00:47.520 --> 00:00:49.910
Especially this password reset token.

20
00:00:49.910 --> 00:00:53.890
Because, what could happen if this field is available

21
00:00:53.890 --> 00:00:54.930
to the client side,

22
00:00:54.930 --> 00:00:58.660
is that someone could reset the password,

23
00:00:58.660 --> 00:01:02.750
they could modify the query to also ask for the token

24
00:01:02.750 --> 00:01:04.270
to come back and then all of a sudden

25
00:01:04.270 --> 00:01:06.366
you could just reset the password from this forum

26
00:01:06.366 --> 00:01:07.920
and get the token.

27
00:01:07.920 --> 00:01:09.900
And then, go ahead and reset this person's password.

28
00:01:09.900 --> 00:01:12.980
So, this is where we get into like sort of like

29
00:01:12.980 --> 00:01:15.930
back end only fields where they should never ever

30
00:01:15.930 --> 00:01:17.300
be available, on the front end.

31
00:01:17.300 --> 00:01:18.877
And the way that we do that.

32
00:01:18.877 --> 00:01:21.750
(can hitting floor)

33
00:01:21.750 --> 00:01:23.330
Dropped my can.

34
00:01:23.330 --> 00:01:28.330
The way that we do that is we're going to be

35
00:01:28.810 --> 00:01:32.500
redefining this user type in our front end,

36
00:01:32.500 --> 00:01:33.700
which is our, or sorry,

37
00:01:33.700 --> 00:01:35.780
we're gonna be redefining it in our yoga

38
00:01:36.620 --> 00:01:38.690
so that we never actually leak any of those

39
00:01:38.690 --> 00:01:39.860
sensitive fields over.

40
00:01:39.860 --> 00:01:41.200
So, let's go down here

41
00:01:41.200 --> 00:01:43.630
and we're just gonna say type User.

42
00:01:43.630 --> 00:01:46.140
And we sort of need to redefine all of these.

43
00:01:46.140 --> 00:01:49.470
You can just kind of copy this, here.

44
00:01:49.470 --> 00:01:51.150
You can paste it over here.

45
00:01:51.150 --> 00:01:52.680
You get rid of the implements node

46
00:01:52.680 --> 00:01:55.090
'cause we don't have that concept on the yoga server.

47
00:01:55.090 --> 00:01:55.940
So we go through it.

48
00:01:55.940 --> 00:01:56.773
ID, yes.

49
00:01:56.773 --> 00:01:57.606
Name, yes.

50
00:01:57.606 --> 00:01:58.748
Email, yes.

51
00:01:58.748 --> 00:01:59.581
Password, no.

52
00:01:59.581 --> 00:02:00.414
Reset token, no.

53
00:02:00.414 --> 00:02:01.270
Expiry, no.

54
00:02:01.270 --> 00:02:03.730
And permissions, yes, of course.

55
00:02:03.730 --> 00:02:05.290
And we don't need to redefine permission

56
00:02:05.290 --> 00:02:08.120
because it will, if we don't define

57
00:02:08.120 --> 00:02:09.383
what the permission enom is,

58
00:02:09.383 --> 00:02:12.670
it's just gonna import it from this that we have right here.

59
00:02:12.670 --> 00:02:14.180
So, that's really, really important.

60
00:02:14.180 --> 00:02:15.500
Make sure you don't skip that piece

61
00:02:15.500 --> 00:02:17.560
because that could be a potential security issue

62
00:02:17.560 --> 00:02:20.500
in the application that you're building.

63
00:02:20.500 --> 00:02:21.370
Now that we have that,

64
00:02:21.370 --> 00:02:23.680
let's go into our schema actually

65
00:02:23.680 --> 00:02:24.620
we're already here.

66
00:02:24.620 --> 00:02:25.897
And lets make another mutation,

67
00:02:25.897 --> 00:02:28.167
and that's called requestReset.

68
00:02:30.440 --> 00:02:31.930
That is going to take in an email

69
00:02:31.930 --> 00:02:33.010
which is a string.

70
00:02:33.010 --> 00:02:34.163
And it is required.

71
00:02:35.010 --> 00:02:37.753
And from that lets also just return a SuccessMessage.

72
00:02:39.258 --> 00:02:40.803
Oh, I forgot the colon here.

73
00:02:41.780 --> 00:02:46.240
Good, now we're gonna go in to our mutations.

74
00:02:46.240 --> 00:02:48.580
And again, hopefully you get the whole point of this

75
00:02:48.580 --> 00:02:50.690
lets just duplicate the signout one.

76
00:02:50.690 --> 00:02:52.447
We'll call it requestReset.

77
00:02:54.560 --> 00:02:56.330
Parent, args, ctx, info.

78
00:02:56.330 --> 00:02:58.450
And then inside of here we're gonna be doing

79
00:02:58.450 --> 00:03:00.600
a whole bunch of work, so lets get into it.

80
00:03:02.970 --> 00:03:07.023
First thing we do is check if this is a real user.

81
00:03:08.100 --> 00:03:11.330
Then two, we're going to set a reset token

82
00:03:11.330 --> 00:03:15.523
and a expiry on that user.

83
00:03:17.158 --> 00:03:20.973
And then three, we're going to email them that reset token.

84
00:03:22.160 --> 00:03:24.760
So we're going to do the first two parts here.

85
00:03:24.760 --> 00:03:28.630
And then we're going to come back and actually

86
00:03:28.630 --> 00:03:31.610
set up it to send email with our application.

87
00:03:31.610 --> 00:03:33.920
First thing, wanna do, is check if there is a user

88
00:03:33.920 --> 00:03:36.360
so const user = await.

89
00:03:36.360 --> 00:03:39.653
Since we're using await here we need to an async function.

90
00:03:41.260 --> 00:03:45.530
Ctx.db.query.user.

91
00:03:45.530 --> 00:03:49.393
Where the email is equal to the args.email.

92
00:03:51.130 --> 00:03:52.050
Good.

93
00:03:52.050 --> 00:03:54.650
Then we'll say if there is no user

94
00:03:54.650 --> 00:03:56.833
throw new error.

95
00:03:58.660 --> 00:04:00.980
No user, and we can probably just take this

96
00:04:00.980 --> 00:04:02.170
from this one right here.

97
00:04:02.170 --> 00:04:03.570
No user user with the email.

98
00:04:05.970 --> 00:04:08.810
Email, and in this case I didn't destructure it.

99
00:04:08.810 --> 00:04:10.543
Args.email.

100
00:04:12.840 --> 00:04:14.780
Good, well if they got this far that means

101
00:04:14.780 --> 00:04:17.370
there is a user so we're going to set

102
00:04:17.370 --> 00:04:19.310
and generate a reset token.

103
00:04:19.310 --> 00:04:21.710
So, now the token needs to be something

104
00:04:21.710 --> 00:04:23.810
that is both random and unique,

105
00:04:23.810 --> 00:04:27.350
as well as something that is cryptographically strong,

106
00:04:27.350 --> 00:04:30.220
because you don't want somebody being able to figure out

107
00:04:30.220 --> 00:04:32.680
how you've generated these tokens, and just trying them.

108
00:04:32.680 --> 00:04:35.800
So, what we're gonna be using is a built in module to node.

109
00:04:35.800 --> 00:04:37.050
It's called crypto.

110
00:04:37.050 --> 00:04:39.690
So, we'll go up to the top we'll say const.

111
00:04:39.690 --> 00:04:42.563
And the function on crypto is called randomBytes.

112
00:04:43.810 --> 00:04:46.169
Sounds like my dinner last night.

113
00:04:46.169 --> 00:04:47.827
Right? Am I right?

114
00:04:47.827 --> 00:04:48.780
(laughing)

115
00:04:48.780 --> 00:04:51.462
Byte, B-Y, how do you spell bytes, there we go.

116
00:04:51.462 --> 00:04:53.683
Const randomBytes equals require crypto.

117
00:04:54.800 --> 00:04:56.960
That's a built in module to node.

118
00:04:56.960 --> 00:04:59.830
We also wanna grab the promisify utility,

119
00:04:59.830 --> 00:05:01.870
because this randomBytes right here

120
00:05:01.870 --> 00:05:03.550
you can run it synchronously,

121
00:05:03.550 --> 00:05:06.360
but it's best to always run your modules asynchronously.

122
00:05:06.360 --> 00:05:09.430
And the way the randomBytes works is via callback function.

123
00:05:09.430 --> 00:05:11.330
At the time of recording, we wanna turn that

124
00:05:11.330 --> 00:05:12.880
into a promised based function.

125
00:05:12.880 --> 00:05:15.590
So, const promisify...

126
00:05:17.780 --> 00:05:21.300
Equals require util.

127
00:05:21.300 --> 00:05:24.560
So, in Node there is a util library

128
00:05:24.560 --> 00:05:26.660
that has this promisify and what that will do

129
00:05:26.660 --> 00:05:29.730
is it will take callback based functions,

130
00:05:29.730 --> 00:05:32.380
and turn them into promised based functions.

131
00:05:32.380 --> 00:05:35.470
So, we'll go back down to our reset flow down here,

132
00:05:35.470 --> 00:05:36.700
reset token.

133
00:05:36.700 --> 00:05:40.650
And, we'll make a token const resetToken is equal to,

134
00:05:40.650 --> 00:05:42.930
and normally what we'd do is, is we'd just say,

135
00:05:42.930 --> 00:05:47.930
randomBytes, and when we ask for 20 dot toString hex.

136
00:05:50.690 --> 00:05:51.970
So, what this is gonna do,

137
00:05:51.970 --> 00:05:54.170
is you call random bytes, you give it a length

138
00:05:54.170 --> 00:05:56.510
of how long you wish it to be.

139
00:05:56.510 --> 00:06:00.567
And then, you convert it from, this returns a buffer

140
00:06:00.567 --> 00:06:02.530
and return the buffer into hex,

141
00:06:02.530 --> 00:06:05.080
which is, and again, they give us a string.

142
00:06:05.080 --> 00:06:06.930
However this is synchronous at the moment,

143
00:06:06.930 --> 00:06:11.930
so what we can do is, we can, await promisify randomBytes

144
00:06:13.320 --> 00:06:15.910
and then call toString on the end there.

145
00:06:15.910 --> 00:06:18.030
And that will call it a asynchronously.

146
00:06:18.030 --> 00:06:19.730
Then we also need an expiry,

147
00:06:19.730 --> 00:06:22.070
so how long is this token good for,

148
00:06:22.070 --> 00:06:24.730
and I'm gonna do it for one hour in this application.

149
00:06:24.730 --> 00:06:27.120
So, const resetTokenExpiry...

150
00:06:29.660 --> 00:06:34.660
is equal to now plus 3,600,000.

151
00:06:35.710 --> 00:06:39.530
And that is is one hour from now.

152
00:06:39.530 --> 00:06:43.490
Then we wanna take these variables that we just made

153
00:06:43.490 --> 00:06:45.460
and save them to the user.

154
00:06:45.460 --> 00:06:49.350
So, we will capture that const response is equal to

155
00:06:49.350 --> 00:06:51.803
ctx.db.mutation.updateUser.

156
00:06:53.720 --> 00:06:56.580
So, we wanna update a specific user.

157
00:06:56.580 --> 00:07:01.400
And, we'll say where the email is equal to the args.email.

158
00:07:01.400 --> 00:07:04.200
And, the data that we wanna update on that user

159
00:07:04.200 --> 00:07:09.200
is the resetToken, which is equal to the resetToken.

160
00:07:10.820 --> 00:07:13.277
And, the resetTokenExpiry...

161
00:07:16.430 --> 00:07:18.510
Which is equal to the resetTokenExpiry.

162
00:07:18.510 --> 00:07:20.860
And, of course, you don't need to double up on these

163
00:07:20.860 --> 00:07:23.980
'cause of ES6, so we can simply just pass

164
00:07:23.980 --> 00:07:25.570
the two values that we want.

165
00:07:25.570 --> 00:07:27.970
So, we're generating these random things

166
00:07:27.970 --> 00:07:30.480
and then we are bringing them in.

167
00:07:30.480 --> 00:07:32.810
A little bit of a syntax issue here,

168
00:07:32.810 --> 00:07:34.743
lets debug that real quick.

169
00:07:37.160 --> 00:07:39.890
Missing one parenthesis there.

170
00:07:39.890 --> 00:07:41.630
Good, we have this response.

171
00:07:41.630 --> 00:07:43.400
Lets just console log the response

172
00:07:43.400 --> 00:07:46.050
to see what we are dealing with.

173
00:07:46.050 --> 00:07:48.610
Okay, so lets, we don't have any sort of interface

174
00:07:48.610 --> 00:07:49.870
to actually work with this,

175
00:07:49.870 --> 00:07:52.450
so lets open up our playground real quick.

176
00:07:52.450 --> 00:07:57.193
Localhost four four, four four four four.

177
00:08:00.230 --> 00:08:03.510
Lets make a new one mutation reset...

178
00:08:04.753 --> 00:08:07.190
requestReset, I always get confused between reset

179
00:08:07.190 --> 00:08:08.630
and requestReset.

180
00:08:08.630 --> 00:08:11.080
And then we will say requestReset

181
00:08:11.080 --> 00:08:15.097
the email is equal to wesbos@gmail.com.

182
00:08:18.040 --> 00:08:22.110
And return form that, I'm just gonna ask for the message

183
00:08:22.110 --> 00:08:23.810
and that's one thing we forgot to do here

184
00:08:23.810 --> 00:08:27.663
is lets just a message, thanks.

185
00:08:29.850 --> 00:08:32.130
And, now lets go, make sure your

186
00:08:32.130 --> 00:08:35.460
back end is open here.

187
00:08:35.460 --> 00:08:38.140
And, clear it out with any errors.

188
00:08:38.140 --> 00:08:39.403
And go ahead an run it.

189
00:08:42.620 --> 00:08:45.060
Get an error here, the original argument

190
00:08:45.060 --> 00:08:47.133
must be a type of function.

191
00:08:48.260 --> 00:08:50.513
So, I see what the issue is.

192
00:08:51.570 --> 00:08:54.140
This randomBytes, that's not how you promisify it

193
00:08:54.140 --> 00:08:56.997
you promisify it like that.

194
00:08:56.997 --> 00:09:00.220
And then take one of these parenthesis off there.

195
00:09:00.220 --> 00:09:03.500
Because we wanna make, what we could also do is right here

196
00:09:03.500 --> 00:09:06.370
is say const randomBytesPromiseified

197
00:09:09.420 --> 00:09:12.247
is equal to promisify randomBytes.

198
00:09:14.265 --> 00:09:15.640
And then we have a new function called that

199
00:09:15.640 --> 00:09:17.578
and then we can simply just await.

200
00:09:17.578 --> 00:09:19.067
Alright, lets clear this all out.

201
00:09:23.730 --> 00:09:27.650
I bet that will work, that's a little bit cleaner.

202
00:09:27.650 --> 00:09:28.993
Let's try it once more.

203
00:09:32.430 --> 00:09:35.810
It says thanks, good, now lets go back to our terminal here.

204
00:09:35.810 --> 00:09:38.750
We get a promise, which is pending,

205
00:09:38.750 --> 00:09:42.360
that's because we want to await this.

206
00:09:42.360 --> 00:09:44.850
Otherwise the response is not going to be a response

207
00:09:44.850 --> 00:09:45.750
it's just going to be a promise.

208
00:09:45.750 --> 00:09:46.900
So lets try that again.

209
00:09:51.670 --> 00:09:54.710
Good, there we go, so this is the user

210
00:09:54.710 --> 00:09:57.370
and this is the user, with the, you see the password,

211
00:09:57.370 --> 00:10:01.350
you see the resetToken, and you see the resetTokenExpiry.

212
00:10:01.350 --> 00:10:04.150
This is the token that we want to work with

213
00:10:04.150 --> 00:10:07.630
and what you can also do is open up your Prisma,

214
00:10:07.630 --> 00:10:09.390
just so we can pull that value out,

215
00:10:09.390 --> 00:10:12.750
because we're gonna like, sorta pause this request reset.

216
00:10:12.750 --> 00:10:16.300
Code up the actual reset portion of this

217
00:10:16.300 --> 00:10:17.500
and then we're gonna come back

218
00:10:17.500 --> 00:10:19.673
and work on sending email.

219
00:10:20.560 --> 00:10:23.193
So, just open app.prisma.io.

220
00:10:29.040 --> 00:10:30.503
Go to your users.

221
00:10:31.730 --> 00:10:34.470
And find the one that has a reset token.

222
00:10:34.470 --> 00:10:37.320
Have that handy, and lets get into actually resetting it.

223
00:10:38.580 --> 00:10:40.830
So, we'll do the sorta same song and dance,

224
00:10:40.830 --> 00:10:42.230
we'll go back to our schema.

225
00:10:43.221 --> 00:10:46.730
And, add in a resetPassword mutation

226
00:10:46.730 --> 00:10:51.730
that takes in the resetToken, which is a string.

227
00:10:51.900 --> 00:10:53.220
And is required.

228
00:10:53.220 --> 00:10:55.210
It takes in their new password.

229
00:10:55.210 --> 00:10:56.390
Which is a string and required.

230
00:10:56.390 --> 00:10:58.990
And then also we're gonna ask for a confirmPassword.

231
00:11:00.949 --> 00:11:03.230
Which is a string, and is required

232
00:11:03.230 --> 00:11:05.350
so that we can double check, you can also check

233
00:11:05.350 --> 00:11:07.260
if the password is the same on the client side

234
00:11:07.260 --> 00:11:08.890
you can do it on either end.

235
00:11:08.890 --> 00:11:11.393
And from that lets just return a user.

236
00:11:12.690 --> 00:11:13.913
Which is required.

237
00:11:14.960 --> 00:11:17.983
We'll go into our mutation and code that up.

238
00:11:18.857 --> 00:11:19.690
Async.

239
00:11:22.362 --> 00:11:23.529
ResetPassword.

240
00:11:26.870 --> 00:11:30.860
Parent, args, ctx, info.

241
00:11:30.860 --> 00:11:32.040
Now, what do we need to do here?

242
00:11:32.040 --> 00:11:37.040
First check if the passwords match.

243
00:11:39.980 --> 00:11:44.980
Two, check if it's a legit reset token.

244
00:11:48.360 --> 00:11:53.360
Three, check if it's not expired, or check if it's expired.

245
00:11:56.190 --> 00:12:00.250
Four, hash their new password.

246
00:12:00.250 --> 00:12:05.250
Five, save the new password to the user

247
00:12:05.730 --> 00:12:09.913
and remove old resetToken fields.

248
00:12:15.970 --> 00:12:16.803
Six.

249
00:12:19.330 --> 00:12:22.080
Generate JWT.

250
00:12:22.080 --> 00:12:25.933
Seven, set the JWT cookie.

251
00:12:27.550 --> 00:12:32.550
Eight, return the new user.

252
00:12:33.000 --> 00:12:38.000
And nine, HHEWHEWHW have a beer, 'cause that is a lot.

253
00:12:38.930 --> 00:12:41.200
Okay, so, this is all a pseudo code

254
00:12:41.200 --> 00:12:42.580
of things that we need to do.

255
00:12:42.580 --> 00:12:47.120
This might be another nice one, everything we've done here.

256
00:12:47.120 --> 00:12:48.560
We've done previously before,

257
00:12:48.560 --> 00:12:50.050
so if you wanna try this yourselves

258
00:12:50.050 --> 00:12:51.330
feel free to pause it, otherwise

259
00:12:51.330 --> 00:12:52.890
lets go ahead and do it together.

260
00:12:52.890 --> 00:12:55.060
First, check if the passwords match, this one's easy.

261
00:12:55.060 --> 00:13:00.060
So, if args.password doesn't equal args.confirmPassword

262
00:13:04.750 --> 00:13:09.713
throw new error yo passwords don't match.

263
00:13:14.770 --> 00:13:15.603
Good.

264
00:13:15.603 --> 00:13:18.190
Two, check if it's legit and check if it's expired.

265
00:13:18.190 --> 00:13:19.990
We're gonna do these in one query

266
00:13:19.990 --> 00:13:22.173
so we don't have to hit the database twice.

267
00:13:22.173 --> 00:13:24.610
And, I'll show you how we can do that.

268
00:13:24.610 --> 00:13:27.730
So, we are going to say const the user

269
00:13:27.730 --> 00:13:32.730
is equal to ctx.db.query. Normally we would do .user,

270
00:13:33.610 --> 00:13:35.740
and we would await that.

271
00:13:35.740 --> 00:13:37.160
But the problem here, is that,

272
00:13:37.160 --> 00:13:39.490
lets actually open up our Prisma,

273
00:13:39.490 --> 00:13:41.483
and look for our query user.

274
00:13:43.110 --> 00:13:46.230
It takes a UserWhereUniqueInput, right,

275
00:13:46.230 --> 00:13:48.260
so what are the fields that we can pass

276
00:13:48.260 --> 00:13:51.670
we can only pass in ID or an email

277
00:13:51.670 --> 00:13:53.130
for where the user is unique,

278
00:13:53.130 --> 00:13:55.120
and the only reason those two ones are

279
00:13:55.120 --> 00:13:58.393
is because when we open up our data model.

280
00:13:59.380 --> 00:14:03.140
We've only marked the ID and the email as unique.

281
00:14:03.140 --> 00:14:06.370
So, we could go ahead and add unique to these.

282
00:14:06.370 --> 00:14:08.060
However, sometimes, the reason why

283
00:14:08.060 --> 00:14:11.250
I didn't do those as unique is I wanna show you how

284
00:14:11.250 --> 00:14:13.870
you can query based on fields that are not unique,

285
00:14:13.870 --> 00:14:16.800
and you're just expecting the first item to come back.

286
00:14:16.800 --> 00:14:18.050
And the way that we can do that,

287
00:14:18.050 --> 00:14:21.260
is we can use the users query,

288
00:14:21.260 --> 00:14:23.300
where it will return an array,

289
00:14:23.300 --> 00:14:27.650
and then we can just destructure the first returned item

290
00:14:27.650 --> 00:14:29.810
into a variable called user.

291
00:14:29.810 --> 00:14:31.489
And that gives us the ability to,

292
00:14:31.489 --> 00:14:33.120
well lets take a look at the queries.

293
00:14:33.120 --> 00:14:35.440
We can search based on users

294
00:14:35.440 --> 00:14:38.773
where is UserWhereInput is the input.

295
00:14:41.061 --> 00:14:43.160
And, that gives us the availability

296
00:14:43.160 --> 00:14:44.450
to do all of these things.

297
00:14:44.450 --> 00:14:46.270
Where you can do multiple inputs.

298
00:14:46.270 --> 00:14:48.380
You can do things like greater or equal to.

299
00:14:48.380 --> 00:14:50.000
We have all of this available to us,

300
00:14:50.000 --> 00:14:51.790
which is much more robust,

301
00:14:51.790 --> 00:14:55.243
then the two little inputs that we had.

302
00:14:56.080 --> 00:14:58.070
Specifically the greater than value

303
00:14:58.070 --> 00:14:59.700
is exactly what we need here.

304
00:14:59.700 --> 00:15:02.320
So, we say, grab the first user

305
00:15:02.320 --> 00:15:04.453
where we search for users.

306
00:15:06.050 --> 00:15:09.130
And we can say where the resetToken

307
00:15:11.590 --> 00:15:13.767
is equal to the args.resetToken

308
00:15:15.689 --> 00:15:17.689
and the resetTokenExpiry

309
00:15:20.790 --> 00:15:22.710
is greater or equal to

310
00:15:24.161 --> 00:15:24.994
gte,

311
00:15:25.860 --> 00:15:27.330
right now

312
00:15:27.330 --> 00:15:28.690
minus

313
00:15:28.690 --> 00:15:30.443
3,600,000.

314
00:15:32.520 --> 00:15:34.750
And what that's gonna do, is it's going to first look

315
00:15:34.750 --> 00:15:37.810
for somebody with that token, but it's also going to check

316
00:15:37.810 --> 00:15:42.480
that that token is still within that one hour time limit.

317
00:15:42.480 --> 00:15:45.470
Otherwise, if it does match the token,

318
00:15:45.470 --> 00:15:46.970
but it doesn't match this one,

319
00:15:46.970 --> 00:15:49.100
it's not going to return anything,

320
00:15:49.100 --> 00:15:51.050
and we gonna be able to tell the user

321
00:15:51.050 --> 00:15:52.030
that something went wrong.

322
00:15:52.030 --> 00:15:54.230
So, here we'll that if there is no user,

323
00:15:54.230 --> 00:15:57.210
again, we're gonna throw a new error.

324
00:15:57.210 --> 00:15:59.683
This token is either invalid or expired.

325
00:16:02.000 --> 00:16:04.130
So, there we go, we're checking for those

326
00:16:04.130 --> 00:16:06.450
otherwise we're going to hash their new password.

327
00:16:06.450 --> 00:16:08.480
So, const password

328
00:16:10.680 --> 00:16:15.340
is equal to await bcrypt.hash

329
00:16:15.340 --> 00:16:17.870
args.password, so their new password.

330
00:16:17.870 --> 00:16:19.213
We'll use 10 there again.

331
00:16:21.429 --> 00:16:23.410
And then we need to save the new password

332
00:16:23.410 --> 00:16:24.860
and remove the old field.

333
00:16:24.860 --> 00:16:26.600
So lets say const updatedUser

334
00:16:28.100 --> 00:16:29.440
is equal to await

335
00:16:29.440 --> 00:16:32.510
ctx.db.mutation

336
00:16:34.557 --> 00:16:35.474
.updateUser

337
00:16:37.090 --> 00:16:38.050
where,

338
00:16:38.050 --> 00:16:40.450
and here you can use either the email

339
00:16:40.450 --> 00:16:42.340
from the found user right here,

340
00:16:42.340 --> 00:16:46.010
or you can use the reset token to identify them.

341
00:16:46.010 --> 00:16:47.300
I'll use email here.

342
00:16:47.300 --> 00:16:50.140
Where the email is equal to user.email

343
00:16:51.780 --> 00:16:54.850
and the data that we wanna update is

344
00:16:54.850 --> 00:16:57.523
we wanna update the password to be the password.

345
00:16:58.410 --> 00:17:01.687
And, hopefully you get it by now, you can just do that.

346
00:17:01.687 --> 00:17:04.027
An, then we also want to set the resetToken

347
00:17:05.860 --> 00:17:06.693
to be null.

348
00:17:09.400 --> 00:17:14.320
And the resetTokenExpiry to be null as well.

349
00:17:14.320 --> 00:17:16.190
Six, generate the JWT.

350
00:17:16.190 --> 00:17:19.690
So, const the token is equal to jwt.sign

351
00:17:21.915 --> 00:17:22.748
userId

352
00:17:24.196 --> 00:17:26.819
is equal to the updatedUser.id.

353
00:17:26.819 --> 00:17:30.094
So, the new user that we just queried right here.

354
00:17:30.094 --> 00:17:33.610
Then we also have to pass the process.env.APP_SECRET.

355
00:17:36.060 --> 00:17:37.913
Set the JWT cookie.

356
00:17:39.180 --> 00:17:41.030
Ctx.response

357
00:17:44.300 --> 00:17:45.960
cookie.

358
00:17:45.960 --> 00:17:48.193
Cook-yuh, that's how the Dutch say it.

359
00:17:50.633 --> 00:17:51.466
This is probably a good time to

360
00:17:51.466 --> 00:17:52.433
put this in a variable so you don't

361
00:17:52.433 --> 00:17:54.463
have to run that every single time.

362
00:17:55.560 --> 00:17:57.550
So, we've set the response.

363
00:17:57.550 --> 00:18:02.343
Return the new user, finally return updatedUser.

364
00:18:04.090 --> 00:18:07.380
Whoo, that was a lot of work,

365
00:18:07.380 --> 00:18:10.160
but it looks like everything should work.

366
00:18:10.160 --> 00:18:12.410
Obviously this is a joke, we can remove that.

367
00:18:13.568 --> 00:18:15.023
So, what we're gonna do is, now

368
00:18:15.023 --> 00:18:16.970
that we have this reset token,

369
00:18:16.970 --> 00:18:18.970
and assuming that this video didn't

370
00:18:18.970 --> 00:18:20.680
take you more than an hour.

371
00:18:20.680 --> 00:18:22.670
Now, we're going to take this token,

372
00:18:22.670 --> 00:18:24.653
go back to our playground here.

373
00:18:25.600 --> 00:18:27.810
I'm gonna make a new tab here.

374
00:18:27.810 --> 00:18:30.524
Mutation reset.

375
00:18:30.524 --> 00:18:31.850
I'm gonna say reset...

376
00:18:35.040 --> 00:18:37.920
It doesn't look like our, I gotta refresh this arrow here

377
00:18:37.920 --> 00:18:40.490
'cause our method is not pulling up.

378
00:18:40.490 --> 00:18:44.570
Now does it show us, reset, there we go, resetPassword.

379
00:18:44.570 --> 00:18:48.100
It takes in a token, which I'm gonna paste in there.

380
00:18:48.100 --> 00:18:51.960
Then it's going to take in a password,

381
00:18:51.960 --> 00:18:55.230
which I'm going to reset to dog.

382
00:18:55.230 --> 00:18:58.690
And then I confirmPasword, which I'm going to set to

383
00:19:00.050 --> 00:19:01.840
D-O double g.

384
00:19:01.840 --> 00:19:04.260
So, lets see if it throws that error for us.

385
00:19:04.260 --> 00:19:06.170
And then back from that lets just get

386
00:19:06.170 --> 00:19:07.870
the ID and the name of the person.

387
00:19:08.980 --> 00:19:11.360
Here we go, run.

388
00:19:11.360 --> 00:19:12.850
Your passwords don't match, good.

389
00:19:12.850 --> 00:19:14.980
So that means our error handling is working.

390
00:19:14.980 --> 00:19:18.670
Now lets just actually pass it, run it.

391
00:19:18.670 --> 00:19:19.520
Boom.

392
00:19:19.520 --> 00:19:23.250
Now it looks like our password has been updated.

393
00:19:23.250 --> 00:19:25.600
So, I'm gonna go to my application here

394
00:19:25.600 --> 00:19:28.870
and try to sign in with wesbos@gmail.com,

395
00:19:28.870 --> 00:19:30.920
and my new password is just dog.

396
00:19:30.920 --> 00:19:32.770
Sign in, bam.

397
00:19:32.770 --> 00:19:34.320
It looks like it's all working.

398
00:19:36.480 --> 00:19:38.090
And then if I were to run this again,

399
00:19:38.090 --> 00:19:40.320
this resetToken should not work.

400
00:19:40.320 --> 00:19:44.040
So, run, this token is either invalid or expired, good,

401
00:19:44.040 --> 00:19:45.970
because we invalidated that token

402
00:19:45.970 --> 00:19:48.560
after we reset it here, and now we have it.

403
00:19:48.560 --> 00:19:51.370
So, that's all of the back end part of it,

404
00:19:51.370 --> 00:19:54.290
but now we need to be able to write the front end

405
00:19:54.290 --> 00:19:55.810
which is the react side,

406
00:19:55.810 --> 00:19:57.910
so lets jump into the next video for that.

