WEBVTT

1
00:00:01.191 --> 00:00:02.655
<v ->Alright, in this video we're going to look</v>

2
00:00:02.655 --> 00:00:05.302
at how you can display the currently logged in user.

3
00:00:05.302 --> 00:00:06.600
And in the next video we are going

4
00:00:06.600 --> 00:00:07.865
to look at how we can actually create

5
00:00:07.865 --> 00:00:10.074
a sign-in form because well, it signs you in

6
00:00:10.074 --> 00:00:12.061
when you sign up for an account.

7
00:00:12.061 --> 00:00:13.679
There's no way to sort of replicate that.

8
00:00:13.679 --> 00:00:16.274
So, if you open up your dev tools

9
00:00:16.274 --> 00:00:18.876
and you go to the application cookies tab

10
00:00:18.876 --> 00:00:20.620
you'll that there is a token

11
00:00:20.620 --> 00:00:22.563
that has been set in your cookies.

12
00:00:22.563 --> 00:00:25.749
And that value contains that actual jwt.

13
00:00:25.749 --> 00:00:27.244
If you were to actually take that

14
00:00:27.244 --> 00:00:32.244
go to jwt dot io, and we were to paste in that token

15
00:00:32.248 --> 00:00:33.951
that you have here, you can see

16
00:00:33.951 --> 00:00:37.771
that the jwt, there's this purple part in the middle.

17
00:00:37.771 --> 00:00:39.763
And that can be decoded into a payload

18
00:00:39.763 --> 00:00:42.407
and you can actually stick a bunch of information

19
00:00:42.407 --> 00:00:43.571
in that if you like.

20
00:00:43.571 --> 00:00:44.961
In our case, this is the specific

21
00:00:44.961 --> 00:00:47.633
user ID that we're looking for.

22
00:00:47.633 --> 00:00:49.825
So, what we want to do is on every single request

23
00:00:49.825 --> 00:00:52.875
this token is going to come along for the ride.

24
00:00:52.875 --> 00:00:56.218
We're going to take that token, decode it

25
00:00:56.218 --> 00:00:57.987
with jwt on the backend, and then

26
00:00:57.987 --> 00:01:00.746
stick the user ID onto every single request.

27
00:01:00.746 --> 00:01:03.183
That means, if we actually need to figure out

28
00:01:03.183 --> 00:01:06.752
who the current user is we can quickly query the database,

29
00:01:06.752 --> 00:01:09.272
having already known that user ID.

30
00:01:09.272 --> 00:01:12.164
So, we're going to jump into the backend

31
00:01:12.164 --> 00:01:14.889
and open up our index dot js.

32
00:01:14.889 --> 00:01:17.371
Remember that we did this server express

33
00:01:17.371 --> 00:01:19.279
middleware for cookie-parser.

34
00:01:19.279 --> 00:01:21.592
Let's build another middleware here.

35
00:01:21.592 --> 00:01:23.506
This is not a package like cookie-parser is.

36
00:01:23.506 --> 00:01:26.073
It's just going to be our own, custom middleware.

37
00:01:26.073 --> 00:01:28.823
So, let's just say decode the jwt

38
00:01:30.702 --> 00:01:34.202
so we can get the user ID on each request.

39
00:01:36.400 --> 00:01:41.003
Say server dot express dot use and this will give us

40
00:01:41.003 --> 00:01:42.958
just like you've ever taken my node course,

41
00:01:42.958 --> 00:01:47.749
you get a request, you get a response, and you get a next.

42
00:01:47.749 --> 00:01:51.499
And, inside of that we will console that log.

43
00:01:53.960 --> 00:01:56.293
Heyyyyyyy, I'm a middleware.

44
00:01:59.232 --> 00:02:01.660
Make sure you know how to use quotes.

45
00:02:01.660 --> 00:02:03.846
And we'll cloud next.

46
00:02:03.846 --> 00:02:07.054
Now, if we open up our terminal here.

47
00:02:07.054 --> 00:02:08.757
Make sure you're on your backend tab.

48
00:02:08.757 --> 00:02:10.993
And if I refresh one of these things.

49
00:02:10.993 --> 00:02:12.541
Actually, you don't see it on this page

50
00:02:12.541 --> 00:02:15.683
'cause there are no queries, so let's go to the homepage.

51
00:02:15.683 --> 00:02:18.818
And you that because there's one, two, three, four

52
00:02:18.818 --> 00:02:20.804
requests that came through, we're getting

53
00:02:20.804 --> 00:02:23.812
all four of those middleware requests coming in.

54
00:02:23.812 --> 00:02:27.913
I think you can also say, request dot send, test.

55
00:02:27.913 --> 00:02:30.877
And I believe this will likely break our application

56
00:02:30.877 --> 00:02:33.840
because what it's doing is it's jacking the request

57
00:02:33.840 --> 00:02:35.831
and sending it out from there.

58
00:02:35.831 --> 00:02:37.582
Actually you can't do next at the same time.

59
00:02:37.582 --> 00:02:40.714
So, now if I refresh this you see that it breaks

60
00:02:40.714 --> 00:02:43.474
because what we're doing is before the actually query

61
00:02:43.474 --> 00:02:47.205
can be run we're stepping in and using a middleware.

62
00:02:47.205 --> 00:02:48.664
That's the whole point of middleware

63
00:02:48.664 --> 00:02:51.643
is that you can step in between requests

64
00:02:51.643 --> 00:02:56.643
or before a request and do a little bit of extra work.

65
00:02:56.646 --> 00:02:59.376
And, in our case if we look at our network

66
00:02:59.376 --> 00:03:03.236
you see here's the response that came back, right, test.

67
00:03:03.236 --> 00:03:05.786
And it actually came back and obviously our application's

68
00:03:05.786 --> 00:03:08.543
going to break because the data that it's getting

69
00:03:08.543 --> 00:03:11.266
looks nothing like the data that we are expected.

70
00:03:11.266 --> 00:03:13.304
So, we'll take that out next.

71
00:03:13.304 --> 00:03:15.822
What we'll do next is just press that down the line

72
00:03:15.822 --> 00:03:17.650
so we can modify the request.

73
00:03:17.650 --> 00:03:20.008
And then, keep the request going

74
00:03:20.008 --> 00:03:22.735
so that our database and our Yoga server

75
00:03:22.735 --> 00:03:25.741
will be able to pick it up no problem.

76
00:03:25.741 --> 00:03:27.929
Now, what we need to do here is first

77
00:03:27.929 --> 00:03:31.161
we need to pull the token out of the request.

78
00:03:31.161 --> 00:03:36.078
So, let's say, const, token is equal to request dot cookies

79
00:03:41.132 --> 00:03:44.713
And let's just console log the token.

80
00:03:44.713 --> 00:03:46.738
Now, open this sucker up again.

81
00:03:46.738 --> 00:03:49.086
I like to clear it out, give it a refresh.

82
00:03:49.086 --> 00:03:50.464
And you see that the token comes

83
00:03:50.464 --> 00:03:52.252
along for the ride every single time.

84
00:03:52.252 --> 00:03:55.015
That's the beauty of using that cookie-parser

85
00:03:55.015 --> 00:03:57.530
is that we're able to access any cookies

86
00:03:57.530 --> 00:03:59.513
that come along on that request by just saying,

87
00:03:59.513 --> 00:04:01.258
request dot cookies dot token.

88
00:04:01.258 --> 00:04:04.954
And, if I were just to console log cookies instead,

89
00:04:04.954 --> 00:04:08.621
and we were to go into our application here.

90
00:04:09.544 --> 00:04:13.374
You see there's some other cookies that just got added here

91
00:04:13.374 --> 00:04:15.284
and you can look at the domain name.

92
00:04:15.284 --> 00:04:17.447
These are coming from Cloudinary.

93
00:04:17.447 --> 00:04:21.106
So, when we request an image they likely set some cookies.

94
00:04:21.106 --> 00:04:24.126
I'm not sure why they would need to set intercom cookies

95
00:04:24.126 --> 00:04:26.920
when you're just loading an image, but they did.

96
00:04:26.920 --> 00:04:29.354
Now, we have this token here.

97
00:04:29.354 --> 00:04:33.576
If I were to add another one, called like, cool.

98
00:04:33.576 --> 00:04:36.243
And we set the value to be true.

99
00:04:37.759 --> 00:04:40.426
And it expires in twenty-twenty.

100
00:04:43.081 --> 00:04:47.067
Now, if I refresh this you'll see that the token

101
00:04:47.067 --> 00:04:49.058
is obviously coming along for the ride

102
00:04:49.058 --> 00:04:51.740
as well as that cool cookie that we add.

103
00:04:51.740 --> 00:04:53.609
And that's the benefit of using cookies

104
00:04:53.609 --> 00:04:55.973
is that I didn't have to send that along

105
00:04:55.973 --> 00:04:57.725
for the ride, it just came with it.

106
00:04:57.725 --> 00:05:00.283
Whereas, with local storage you have to explicitly

107
00:05:00.283 --> 00:05:02.111
send it over every single time.

108
00:05:02.111 --> 00:05:04.627
And that's usually not an issue if you have

109
00:05:04.627 --> 00:05:06.213
just a client side application.

110
00:05:06.213 --> 00:05:09.114
'Cause especially in Apollo you can tell

111
00:05:09.114 --> 00:05:10.787
it that on every single request.

112
00:05:10.787 --> 00:05:11.804
Just pull that from the local host

113
00:05:11.804 --> 00:05:13.730
and you don't have to do it manually every single time.

114
00:05:13.730 --> 00:05:15.766
But, because it's a serve side render

115
00:05:15.766 --> 00:05:17.962
when I refresh this page or I visit this page

116
00:05:17.962 --> 00:05:20.848
for the very first time after being signed in

117
00:05:20.848 --> 00:05:24.020
maybe a couple of days ago the server ...

118
00:05:24.020 --> 00:05:25.321
There's not way for me to send

119
00:05:25.321 --> 00:05:27.559
the local storage along for the ride.

120
00:05:27.559 --> 00:05:29.590
And that's where we're going to be using cookies.

121
00:05:29.590 --> 00:05:32.146
So, let's go back in here.

122
00:05:32.146 --> 00:05:35.800
We've got our token, then what we want to do

123
00:05:35.800 --> 00:05:37.540
it decode that token.

124
00:05:37.540 --> 00:05:41.176
So, you'll say, if there is a token

125
00:05:41.176 --> 00:05:42.963
because there might not always be a token.

126
00:05:42.963 --> 00:05:44.223
The person might be signed out

127
00:05:44.223 --> 00:05:45.807
so there's going to be no token.

128
00:05:45.807 --> 00:05:49.587
If there is we will take the user ID out of the token

129
00:05:49.587 --> 00:05:53.670
so say, const, user ID is equal to jwt dot verify

130
00:05:57.023 --> 00:05:59.463
You give it the token, then we also need

131
00:05:59.463 --> 00:06:04.028
to make sure that we are passing along the app secret.

132
00:06:04.028 --> 00:06:06.518
If you open up our variables dot env

133
00:06:06.518 --> 00:06:08.749
you remember we have this here.

134
00:06:08.749 --> 00:06:11.833
You can always decode it without having a secret.

135
00:06:11.833 --> 00:06:13.980
But, what this will do is that it'll make sure

136
00:06:13.980 --> 00:06:16.257
that no one has monekyed with it and added

137
00:06:16.257 --> 00:06:18.897
in their own values to the jwt.

138
00:06:18.897 --> 00:06:21.457
Because anyone could just go ahead and edit their cookies

139
00:06:21.457 --> 00:06:23.694
saying that they are an administrator

140
00:06:23.694 --> 00:06:26.050
and then, you could see how that would be a bit of an issue.

141
00:06:26.050 --> 00:06:30.474
So, we will pass the process do env dot APP_SECRET

142
00:06:30.474 --> 00:06:34.641
and then, we will put the user ID onto the request

143
00:06:36.707 --> 00:06:39.207
for further request to access.

144
00:06:40.599 --> 00:06:42.342
So, we'll simply just tack it on.

145
00:06:42.342 --> 00:06:45.713
Request dot user ID is equal to user ID.

146
00:06:45.713 --> 00:06:48.307
And then, that's it, we will call next.

147
00:06:48.307 --> 00:06:50.944
So, regardless of if there's a token or if there's not

148
00:06:50.944 --> 00:06:53.710
a token we will call next and that will pass along

149
00:06:53.710 --> 00:06:55.175
the request.

150
00:06:55.175 --> 00:06:56.825
It's not going to send a response

151
00:06:56.825 --> 00:06:58.046
directly from this middelware.

152
00:06:58.046 --> 00:07:00.236
It will pass it along the line and then,

153
00:07:00.236 --> 00:07:02.431
later when we get into one of our

154
00:07:02.431 --> 00:07:05.442
resolvers, whether that's a query or mutation resolver,

155
00:07:05.442 --> 00:07:08.159
we'll be able to easily access this user ID

156
00:07:08.159 --> 00:07:12.462
without having to decode the jwt every single time.

157
00:07:12.462 --> 00:07:14.782
One little error I have here is I forgot

158
00:07:14.782 --> 00:07:16.814
to import the jwt.

159
00:07:16.814 --> 00:07:19.647
So, import, jwt from jsonwebtoken.

160
00:07:21.732 --> 00:07:23.982
Oh, const, equals, require.

161
00:07:29.281 --> 00:07:31.066
Looking good.

162
00:07:31.066 --> 00:07:34.029
Alright, next we need to go into our schema

163
00:07:34.029 --> 00:07:36.542
and add in a query for the current user.

164
00:07:36.542 --> 00:07:38.618
I'm just going to call that me.

165
00:07:38.618 --> 00:07:42.601
And when someone queries me it's going to return a user.

166
00:07:42.601 --> 00:07:45.380
It's not going to be required because it's possible

167
00:07:45.380 --> 00:07:47.210
that you could query me and there is no logged in user.

168
00:07:47.210 --> 00:07:49.361
So, we will not put an exclamation on the end

169
00:07:49.361 --> 00:07:51.592
and there is no arguments because it's simply

170
00:07:51.592 --> 00:07:54.717
going to take in that jsonwebtoken cookie

171
00:07:54.717 --> 00:07:57.357
and parser it for us so, we don't need to pass it,

172
00:07:57.357 --> 00:07:59.353
like, here it my user ID.

173
00:07:59.353 --> 00:08:00.448
It will already know it

174
00:08:00.448 --> 00:08:03.004
because it's been passed along with the request.

175
00:08:03.004 --> 00:08:05.683
So, that's a very simple one that we can pass along.

176
00:08:05.683 --> 00:08:07.831
Now, you'll know that any time we add something

177
00:08:07.831 --> 00:08:11.532
to our schema we have to add something to our resolvers.

178
00:08:11.532 --> 00:08:13.603
And thankfully, this is not one that we're going

179
00:08:13.603 --> 00:08:15.395
to be just forwarding to the database.

180
00:08:15.395 --> 00:08:17.710
So, we'll say anytime someone requests me.

181
00:08:17.710 --> 00:08:20.024
We can do that same signature that we have.

182
00:08:20.024 --> 00:08:24.357
Which is the parent, the args, the ctx and the info.

183
00:08:26.936 --> 00:08:29.613
And from that first we're going to check.

184
00:08:29.613 --> 00:08:31.359
And maybe we should to a comment.

185
00:08:31.359 --> 00:08:34.359
Check if there is a current user ID.

186
00:08:36.511 --> 00:08:39.850
So, if, and how do you access the request?

187
00:08:39.850 --> 00:08:40.743
Right?

188
00:08:40.743 --> 00:08:42.529
Because in middelware it's pretty easy.

189
00:08:42.529 --> 00:08:43.991
You get the request, you get the response,

190
00:08:43.991 --> 00:08:45.128
then you get the next.

191
00:08:45.128 --> 00:08:46.629
But, there is a request and a response,

192
00:08:46.629 --> 00:08:48.653
but there's no way ... like how do we access it from here?

193
00:08:48.653 --> 00:08:52.515
And the way that you access it is on the ctx.

194
00:08:52.515 --> 00:08:54.297
So, you say ctx dot.

195
00:08:54.297 --> 00:08:56.575
And it's request here, not req.

196
00:08:56.575 --> 00:08:58.161
That bit me a whole bunch of times.

197
00:08:58.161 --> 00:09:01.180
I'm so used to writing request and response like that.

198
00:09:01.180 --> 00:09:05.180
But, it's full blown, request, and at that point

199
00:09:06.110 --> 00:09:08.691
it's just a regular express request.

200
00:09:08.691 --> 00:09:10.313
So, anything that you're use to doing

201
00:09:10.313 --> 00:09:11.898
in express lane, you can do that in here.

202
00:09:11.898 --> 00:09:14.753
So, we'll just say if the request has a user ID, right?

203
00:09:14.753 --> 00:09:18.000
Like, if we have put it on the request, right here,

204
00:09:18.000 --> 00:09:20.646
then we can access it over here.

205
00:09:20.646 --> 00:09:24.173
If there is not one, so we'll put bang in front of that.

206
00:09:24.173 --> 00:09:27.425
If there's no user ID then, we are simply

207
00:09:27.425 --> 00:09:29.175
going to return null.

208
00:09:30.963 --> 00:09:33.240
And that's important that we're returning null there.

209
00:09:33.240 --> 00:09:35.872
And often what you'll do is if there's nothing

210
00:09:35.872 --> 00:09:37.098
found you will throw an error

211
00:09:37.098 --> 00:09:39.098
and say, no, user found.

212
00:09:40.793 --> 00:09:44.283
But, it's important that we return null in this case

213
00:09:44.283 --> 00:09:48.912
because we do want to be able to have this query.

214
00:09:48.912 --> 00:09:52.933
And for it to return nothing because someone

215
00:09:52.933 --> 00:09:55.574
might not be logged in.

216
00:09:55.574 --> 00:09:57.900
Otherwise, if their is a user ID

217
00:09:57.900 --> 00:10:01.445
we're simply going to return the ctx dot database

218
00:10:01.445 --> 00:10:05.220
dot query dot user, and we're going to use if we look

219
00:10:05.220 --> 00:10:07.123
at our generated one.

220
00:10:07.123 --> 00:10:10.290
If we look for type query, you can see

221
00:10:11.785 --> 00:10:15.035
that there is a user query, right here.

222
00:10:17.013 --> 00:10:18.997
And you can pass it a ware.

223
00:10:18.997 --> 00:10:20.575
So, that's what we're going to do.

224
00:10:20.575 --> 00:10:24.177
Ware, the ID of the user is equal to the ctx

225
00:10:24.177 --> 00:10:26.760
dot request dot user ID, right?

226
00:10:30.233 --> 00:10:32.167
Oh, make sure that's lowercase ID

227
00:10:32.167 --> 00:10:33.668
that will ruin your day.

228
00:10:33.668 --> 00:10:35.416
We've got that here, that here.

229
00:10:35.416 --> 00:10:38.268
You can also put it up into it's own variable in there.

230
00:10:38.268 --> 00:10:40.622
I'm not going to do that just 'cause it's fairly simple.

231
00:10:40.622 --> 00:10:42.939
Second, we also need to pass the info

232
00:10:42.939 --> 00:10:45.413
and the info again is going to be the actual query

233
00:10:45.413 --> 00:10:46.759
that's coming from the client's side

234
00:10:46.759 --> 00:10:48.546
because that user's going to end up

235
00:10:48.546 --> 00:10:50.662
having a cart and it has permissions

236
00:10:50.662 --> 00:10:52.205
and it has the name, and the email address.

237
00:10:52.205 --> 00:10:53.465
And it's going to have orders

238
00:10:53.465 --> 00:10:55.812
and it's going to have all of this data associated with it.

239
00:10:55.812 --> 00:10:58.329
And our user query is going to get quite large

240
00:10:58.329 --> 00:11:01.625
so we want to be able to pass the actual query

241
00:11:01.625 --> 00:11:04.426
from the front end so that when we

242
00:11:04.426 --> 00:11:05.927
just want to get the user's email address

243
00:11:05.927 --> 00:11:08.895
we're not getting a whole cart at the exact same time.

244
00:11:08.895 --> 00:11:12.969
So, that's why we pass info along to it.

245
00:11:12.969 --> 00:11:15.325
And because we are returning a promise here

246
00:11:15.325 --> 00:11:17.355
we do not need to wait for that to resolve.

247
00:11:17.355 --> 00:11:20.402
We just return the promise and it will resolve itself

248
00:11:20.402 --> 00:11:22.952
once is has been finished and come back.

249
00:11:22.952 --> 00:11:24.825
What else do we have here?

250
00:11:24.825 --> 00:11:27.270
This is just a shorthand syntax.

251
00:11:27.270 --> 00:11:30.187
So, instead of saying, me function,

252
00:11:31.091 --> 00:11:34.250
that this is the shorthand method syntax in ex6,

253
00:11:34.250 --> 00:11:36.238
if you're unfamiliar with that.

254
00:11:36.238 --> 00:11:38.595
This is a spelling mistake, we'll fix that

255
00:11:38.595 --> 00:11:42.337
and we can remove all of these items here.

256
00:11:42.337 --> 00:11:43.389
Looking good.

257
00:11:43.389 --> 00:11:45.707
I think we're done on the backend.

258
00:11:45.707 --> 00:11:47.793
Let's flip over to the client's side

259
00:11:47.793 --> 00:11:50.237
so we can actually get to querying this.

260
00:11:50.237 --> 00:11:52.966
Alright, now we need to flip to the front end

261
00:11:52.966 --> 00:11:53.871
and built an react component that's going

262
00:11:53.871 --> 00:11:55.987
to both query the back end for the data

263
00:11:55.987 --> 00:11:58.721
as well as display it in some use case.

264
00:11:58.721 --> 00:12:01.063
And that's actually going to be quite a bit of code.

265
00:12:01.063 --> 00:12:03.172
Every single time we need to get the current user

266
00:12:03.172 --> 00:12:04.632
we're going to have to write a query,

267
00:12:04.632 --> 00:12:06.617
and we're going to have to import the query

268
00:12:06.617 --> 00:12:08.780
component from react Apollo.

269
00:12:08.780 --> 00:12:10.565
And then, we're going to have

270
00:12:10.565 --> 00:12:11.963
to have a render prop for that.

271
00:12:11.963 --> 00:12:14.516
So, what I'm going to show you in this part of the video

272
00:12:14.516 --> 00:12:17.600
is that this is how we can make our own

273
00:12:17.600 --> 00:12:19.619
Render Prop component that will allow us

274
00:12:19.619 --> 00:12:21.807
to tuck sort of all that complexity

275
00:12:21.807 --> 00:12:24.472
into its on component and just make it a nice,

276
00:12:24.472 --> 00:12:27.068
clean, little user coponent that will provide

277
00:12:27.068 --> 00:12:29.217
to us a user if the user is logged in.

278
00:12:29.217 --> 00:12:31.910
So, let's go into the components folder

279
00:12:31.910 --> 00:12:33.901
and make a new file called user.

280
00:12:33.901 --> 00:12:35.687
Capital U dot js.

281
00:12:35.687 --> 00:12:40.187
In that we're going to import query from react Apollo.

282
00:12:41.167 --> 00:12:44.345
Going to import gql and we're also

283
00:12:44.345 --> 00:12:47.845
going to import PropTypes from prop types.

284
00:12:50.591 --> 00:12:53.367
Now, what we need to do is write the query

285
00:12:53.367 --> 00:12:54.380
for what we want.

286
00:12:54.380 --> 00:12:57.880
Const, current user query is equal to gql.

287
00:12:59.699 --> 00:13:02.250
And that is going to ask for me.

288
00:13:02.250 --> 00:13:04.320
And back from me, we need the ID,

289
00:13:04.320 --> 00:13:09.320
the email, the name and the permissions of the user.

290
00:13:09.469 --> 00:13:10.302
We're going to actually come

291
00:13:10.302 --> 00:13:13.842
back to that and add in the user's order, the user's cart

292
00:13:13.842 --> 00:13:16.671
and the items that are in the user's cart.

293
00:13:16.671 --> 00:13:18.622
Good, that's good for our query.

294
00:13:18.622 --> 00:13:20.577
Then, what we're going to do

295
00:13:20.577 --> 00:13:22.198
is we're going to make our user component.

296
00:13:22.198 --> 00:13:25.304
So, const user is equal to props,

297
00:13:25.304 --> 00:13:29.221
and from that we will return a query component.

298
00:13:32.202 --> 00:13:36.815
That query takes a query, which is our current user query.

299
00:13:36.815 --> 00:13:38.554
Usually, what I would do is the child

300
00:13:38.554 --> 00:13:40.416
of query is going to be a function

301
00:13:40.416 --> 00:13:43.335
that has our data in it and from that

302
00:13:43.335 --> 00:13:45.835
we will return a paragraph tag

303
00:13:47.269 --> 00:13:50.275
with the data dot user dot name or something in that.

304
00:13:50.275 --> 00:13:52.470
But, instead of that we're actually going

305
00:13:52.470 --> 00:13:54.384
to make the user component just take one of these

306
00:13:54.384 --> 00:13:56.536
itself and make it a Render Prop.

307
00:13:56.536 --> 00:13:58.809
So, rather than returning that the child

308
00:13:58.809 --> 00:14:01.206
of this is simply going to take the payload

309
00:14:01.206 --> 00:14:03.637
and pass it to the child function.

310
00:14:03.637 --> 00:14:08.470
So, it'll say props dot children, and pass it the payload.

311
00:14:09.927 --> 00:14:12.205
Right, so, what this will do is allow us

312
00:14:12.205 --> 00:14:17.025
to do something like this where we have a user component

313
00:14:17.025 --> 00:14:19.456
and we'll be able to take the payload

314
00:14:19.456 --> 00:14:21.901
just like we are used to and pop it in

315
00:14:21.901 --> 00:14:24.724
without having to rewrite this query

316
00:14:24.724 --> 00:14:26.759
or pass it every, single time.

317
00:14:26.759 --> 00:14:28.632
Which is really, really useful.

318
00:14:28.632 --> 00:14:30.988
Last thing we want to do is any props

319
00:14:30.988 --> 00:14:32.733
that actually get passed the from query,

320
00:14:32.733 --> 00:14:36.764
then need to be spread into this query component right here.

321
00:14:36.764 --> 00:14:39.680
So, we'll say, dot, dot, dot, props.

322
00:14:39.680 --> 00:14:41.626
So, anytime we want to write a user component

323
00:14:41.626 --> 00:14:44.368
and we want to pass additional props

324
00:14:44.368 --> 00:14:45.948
to the query component we can simply

325
00:14:45.948 --> 00:14:47.294
just past it to our user component

326
00:14:47.294 --> 00:14:50.012
and they will automatically get passed on down.

327
00:14:50.012 --> 00:14:52.637
Go ahead and export default the user component.

328
00:14:52.637 --> 00:14:56.054
Let's also export the current user query.

329
00:15:00.843 --> 00:15:03.041
So we can access it we're going to need

330
00:15:03.041 --> 00:15:06.868
to re-fetch this query a number of different places.

331
00:15:06.868 --> 00:15:10.771
We'll make sure that the user dot proptypes

332
00:15:10.771 --> 00:15:12.854
is equal to the children.

333
00:15:13.824 --> 00:15:18.241
It's going to be a proptypes dot func and isRequired.

334
00:15:19.623 --> 00:15:21.899
That way we knew whenver you use it

335
00:15:21.899 --> 00:15:23.809
the only thing you must pass as child

336
00:15:23.809 --> 00:15:26.494
is going to be a function.

337
00:15:26.494 --> 00:15:28.479
Good, so this is how you build

338
00:15:28.479 --> 00:15:30.460
your own Render Prop component.

339
00:15:30.460 --> 00:15:32.042
Now, how do we actually use it?

340
00:15:32.042 --> 00:15:35.025
Well, let's go into ... let's try inner nav.

341
00:15:35.025 --> 00:15:37.948
And let's just go right at the top of this

342
00:15:37.948 --> 00:15:41.781
and we'll import the user component from user.

343
00:15:44.811 --> 00:15:46.684
Let's try just user right here.

344
00:15:46.684 --> 00:15:51.101
User, the child of user is going to take in the data.

345
00:15:55.630 --> 00:15:58.297
And let's just console that log.

346
00:15:59.361 --> 00:16:00.336
The data.

347
00:16:00.336 --> 00:16:02.929
Oh, this is not in curly brackets.

348
00:16:02.929 --> 00:16:04.929
Parentheses and, return.

349
00:16:09.377 --> 00:16:12.460
And another paragraph that says user.

350
00:16:14.420 --> 00:16:16.535
Alright, let's check it out.

351
00:16:16.535 --> 00:16:20.355
Internal server error, what happened?

352
00:16:20.355 --> 00:16:22.382
Something on the client's side.

353
00:16:22.382 --> 00:16:25.215
Syntax error, unexpected name, me.

354
00:16:27.091 --> 00:16:27.924
Why?

355
00:16:30.087 --> 00:16:30.920
Here, gql.

356
00:16:32.881 --> 00:16:35.562
Oh, we went a little too quick on it.

357
00:16:35.562 --> 00:16:39.210
The query is going to be called me.

358
00:16:39.210 --> 00:16:42.887
So, make sure you put your me query inside of that.

359
00:16:42.887 --> 00:16:45.083
We'll see if that fixes it.

360
00:16:45.083 --> 00:16:47.083
Good, give it a refresh.

361
00:16:48.129 --> 00:16:50.605
And we see the paragraph user.

362
00:16:50.605 --> 00:16:53.328
Does our user get console logged?

363
00:16:53.328 --> 00:16:54.745
Dot data, dot me.

364
00:16:55.659 --> 00:16:56.492
Hey, hey!

365
00:16:56.492 --> 00:16:57.639
There it is.

366
00:16:57.639 --> 00:17:00.080
So, it's showing me the permissions, the email, the ID.

367
00:17:00.080 --> 00:17:03.012
All of the information about that specific user.

368
00:17:03.012 --> 00:17:05.652
And, what we should be able to do now

369
00:17:05.652 --> 00:17:08.827
is go into our nav and display that data.

370
00:17:08.827 --> 00:17:09.964
So, we will say ...

371
00:17:09.964 --> 00:17:12.564
Let's actually go ahead and destructure this data

372
00:17:12.564 --> 00:17:13.981
one step further.

373
00:17:15.841 --> 00:17:19.091
So, we'll destructure the data into me.

374
00:17:21.308 --> 00:17:23.659
And here, let's just console log me

375
00:17:23.659 --> 00:17:26.159
and return, say, if me return.

376
00:17:35.100 --> 00:17:40.017
Me dot name, otherwise we're going to return null, nothing.

377
00:17:45.158 --> 00:17:46.908
Bit of an error here.

378
00:17:47.969 --> 00:17:49.386
Unexpected token.

379
00:17:53.787 --> 00:17:56.508
Oh, it's 'cause we ... the payload has data

380
00:17:56.508 --> 00:17:58.132
inside of it so this is

381
00:17:58.132 --> 00:17:59.753
kind of a two-level destructure, right?

382
00:17:59.753 --> 00:18:01.257
So, we have our payload.

383
00:18:01.257 --> 00:18:04.314
But, we're going to destructure that into data.

384
00:18:04.314 --> 00:18:06.999
We can also grab the error if we wanted to

385
00:18:06.999 --> 00:18:08.456
but in our case we just want data.

386
00:18:08.456 --> 00:18:09.839
And then, we're going to further destructure

387
00:18:09.839 --> 00:18:12.525
data into me and that will give us

388
00:18:12.525 --> 00:18:14.273
payload dot data dot me,

389
00:18:14.273 --> 00:18:17.201
into just the top level variable called me.

390
00:18:17.201 --> 00:18:18.951
I bet that'll fix it.

391
00:18:19.823 --> 00:18:21.841
Beautiful, this says Wes Bos.

392
00:18:21.841 --> 00:18:26.091
Now, try to open that up in an incognito window.

393
00:18:26.091 --> 00:18:29.050
It's doesn't show me anything 'cause I'm not signed in.

394
00:18:29.050 --> 00:18:34.050
If you, for some reason, don't have that cookie right here,

395
00:18:34.720 --> 00:18:36.470
then we need to do the next video.

396
00:18:36.470 --> 00:18:38.498
Which you have to actually be able

397
00:18:38.498 --> 00:18:40.498
to sign in and sign out.

398
00:18:42.062 --> 00:18:44.164
So, let's jump into that with the next video.

