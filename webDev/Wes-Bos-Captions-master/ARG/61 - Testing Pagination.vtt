WEBVTT

1
00:00:01.150 --> 00:00:04.230
<v Wes>Alright, let's do tests for pagination.</v>

2
00:00:04.230 --> 00:00:05.700
Let's go into our test folder,

3
00:00:05.700 --> 00:00:09.540
make a new file, Pagination.test.js.

4
00:00:09.540 --> 00:00:11.680
And let's just open our nav.test

5
00:00:11.680 --> 00:00:16.300
and grab all of these, paste 'em in.

6
00:00:16.300 --> 00:00:17.133
Now let's go through it.

7
00:00:17.133 --> 00:00:18.270
We need enzyme, we need wait,

8
00:00:18.270 --> 00:00:20.240
we need to-json, we don't need the nav,

9
00:00:20.240 --> 00:00:22.133
we need pagination.

10
00:00:23.870 --> 00:00:26.010
We also need the pagination query,

11
00:00:26.010 --> 00:00:28.680
so let's just triple check we

12
00:00:28.680 --> 00:00:31.000
had exported that.

13
00:00:31.000 --> 00:00:31.890
No, we haven't.

14
00:00:31.890 --> 00:00:34.530
So this query here, the PAGINATION_QUERY,

15
00:00:34.530 --> 00:00:36.060
needs to be exported

16
00:00:38.520 --> 00:00:40.283
as a named export.

17
00:00:42.150 --> 00:00:44.870
And then we need to import that sucker

18
00:00:44.870 --> 00:00:48.180
as a named import from the pagination.

19
00:00:48.180 --> 00:00:50.250
We don't care about the current user.

20
00:00:50.250 --> 00:00:52.627
We do need the MockedProvider.

21
00:00:53.650 --> 00:00:58.650
And we don't care about the utestUtils in this one.

22
00:00:58.950 --> 00:01:02.040
I believe we also need to mess with the router,

23
00:01:02.040 --> 00:01:04.610
but let's hit the error that the router gives us first

24
00:01:04.610 --> 00:01:06.760
so we can see it and then we'll come back

25
00:01:06.760 --> 00:01:10.210
and figure out how we can mock the router.

26
00:01:10.210 --> 00:01:12.080
Alright, so first thing we need to do

27
00:01:12.080 --> 00:01:14.780
is to make some mocks and this pagination's

28
00:01:14.780 --> 00:01:16.930
gonna test for all types of situations

29
00:01:16.930 --> 00:01:19.580
when you have very few items, when you have tons of items,

30
00:01:19.580 --> 00:01:22.410
when you have a couple pages, when you have lots of pages.

31
00:01:22.410 --> 00:01:24.100
So we're going to make a function

32
00:01:24.100 --> 00:01:26.903
that's going to create mocks called makeMocksFor

33
00:01:27.810 --> 00:01:29.350
and then we'll have the length

34
00:01:29.350 --> 00:01:30.670
of the items being put in,

35
00:01:30.670 --> 00:01:33.400
so makeMocksFor 18 items.

36
00:01:33.400 --> 00:01:36.110
And from that, we just wanna return our mocks,

37
00:01:36.110 --> 00:01:37.410
which is an array.

38
00:01:37.410 --> 00:01:40.760
Inside of that we'll have the request.

39
00:01:40.760 --> 00:01:44.330
Query is the PAGINATION_QUERY.

40
00:01:44.330 --> 00:01:47.510
And then the variables is going to be

41
00:01:47.510 --> 00:01:52.403
skip zero, and first four.

42
00:01:54.160 --> 00:01:58.193
And the result back from that is going to be the data.

43
00:01:59.640 --> 00:02:01.430
And then the data that comes back,

44
00:02:01.430 --> 00:02:02.660
if you take a look at this.

45
00:02:02.660 --> 00:02:05.507
Remember we were working with that itemsConnection,

46
00:02:08.970 --> 00:02:11.070
that comes back, and the we have an aggregate,

47
00:02:11.070 --> 00:02:12.203
inside of that we have a count.

48
00:02:12.203 --> 00:02:14.730
We need to mock that entire thing.

49
00:02:14.730 --> 00:02:17.073
We'll say the itemsConnection

50
00:02:22.560 --> 00:02:25.257
that has a typename of aggregate,

51
00:02:30.700 --> 00:02:33.170
that'll stop it from whining about typenames.

52
00:02:33.170 --> 00:02:34.653
Then we need the aggregate,

53
00:02:36.060 --> 00:02:38.863
inside of that you have a typename as well,

54
00:02:40.010 --> 00:02:41.640
which is a count.

55
00:02:41.640 --> 00:02:43.940
Inside of that we'll have a count

56
00:02:43.940 --> 00:02:46.743
and that will just be the length that's passed in.

57
00:02:48.330 --> 00:02:51.180
So that is our generator for making mocks.

58
00:02:51.180 --> 00:02:53.420
Now let's go ahead and start writing our tests.

59
00:02:53.420 --> 00:02:55.603
So, describe, Pagination,

60
00:03:04.620 --> 00:03:07.650
say it, we'll first check that it displays

61
00:03:07.650 --> 00:03:09.683
a loading message.

62
00:03:14.890 --> 00:03:18.883
We'll take our wrapper, we'll mount it.

63
00:03:22.490 --> 00:03:24.410
Inside of that we'll have Pagination

64
00:03:26.440 --> 00:03:28.510
and there is a page.

65
00:03:28.510 --> 00:03:29.793
We'll try one.

66
00:03:30.910 --> 00:03:35.010
Also our mock provider need to be past the mocks,

67
00:03:35.010 --> 00:03:37.202
and we'll use our new handy-dandy function,

68
00:03:37.202 --> 00:03:40.200
MakeMocksFor one item.

69
00:03:40.200 --> 00:03:42.330
Then in here, let's just console.log,

70
00:03:42.330 --> 00:03:45.420
wrapper.debug, see what we're dealing with.

71
00:03:45.420 --> 00:03:46.723
Head back to our terminal.

72
00:03:47.660 --> 00:03:51.090
Gonna flip back out, looks like we're getting an error.

73
00:03:51.090 --> 00:03:54.490
Cannot read items connection of undefined.

74
00:03:54.490 --> 00:03:56.840
So that is an error that's coming from

75
00:03:56.840 --> 00:03:58.800
the actual component itself.

76
00:03:58.800 --> 00:04:02.650
A way we can debug that is we'll go to our Pagination here

77
00:04:02.650 --> 00:04:05.231
and it's telling us it can't read item connection

78
00:04:05.231 --> 00:04:08.630
of undefined, meaning data is being passed undefined.

79
00:04:08.630 --> 00:04:09.670
Let's triple check that.

80
00:04:09.670 --> 00:04:13.390
Console.log data right from the component.

81
00:04:13.390 --> 00:04:15.420
Yeah, see, we're getting undefined.

82
00:04:15.420 --> 00:04:19.400
So I bet that we're getting an error,

83
00:04:19.400 --> 00:04:20.840
and because we're not doing anything

84
00:04:20.840 --> 00:04:22.990
with the error here, it's hard to know.

85
00:04:22.990 --> 00:04:25.547
So let's console log the error and see.

86
00:04:25.547 --> 00:04:26.380
There we go.

87
00:04:26.380 --> 00:04:27.640
Network error, no more mock responses

88
00:04:27.640 --> 00:04:30.810
for the query PAGINATION_QUERY.

89
00:04:30.810 --> 00:04:32.610
Variables nothing, ah, I see.

90
00:04:32.610 --> 00:04:34.767
We don't actually have to specify

91
00:04:34.767 --> 00:04:38.370
the variables here because they are defaults.

92
00:04:38.370 --> 00:04:40.988
And we are not passing any variables

93
00:04:40.988 --> 00:04:42.870
in our query right here,

94
00:04:42.870 --> 00:04:46.170
so it doesn't make sense to put them in our request.

95
00:04:46.170 --> 00:04:47.763
I bet that will fix it.

96
00:04:48.620 --> 00:04:51.083
Get rid of that error as well, save that.

97
00:04:52.610 --> 00:04:54.400
Okay, that looks good.

98
00:04:54.400 --> 00:04:55.840
It looks like we're loading.

99
00:04:55.840 --> 00:04:59.440
Because there are no nesting mutations or queries

100
00:04:59.440 --> 00:05:01.020
inside of here, we can actually

101
00:05:01.020 --> 00:05:06.020
go into our pagination and put a data-test pagination on it.

102
00:05:09.520 --> 00:05:14.293
And then use that to grab it and check.

103
00:05:18.340 --> 00:05:22.653
So go down here, put expect, const pagination equals

104
00:05:30.850 --> 00:05:35.850
wrapper.find, and we expect toJSON pagination

105
00:05:41.025 --> 00:05:43.003
toMatchSnapshot.

106
00:05:46.410 --> 00:05:47.410
It looks like we wrote it,

107
00:05:47.410 --> 00:05:50.323
let's just double check our pagination snapshot.

108
00:05:51.940 --> 00:05:54.233
It says null, that's not good.

109
00:05:56.300 --> 00:05:58.675
I wonder if we are not finding anything

110
00:05:58.675 --> 00:06:00.090
when we're running that.

111
00:06:00.090 --> 00:06:03.773
Data-test, console.log, pagination.debug.

112
00:06:07.070 --> 00:06:08.853
Not finding anything.

113
00:06:15.030 --> 00:06:19.663
So let's back that up and console.log the wrapper.

114
00:06:21.670 --> 00:06:24.210
Oh, obviously it doesn't, it's not finding anything

115
00:06:24.210 --> 00:06:25.450
because it's in loading state.

116
00:06:25.450 --> 00:06:28.653
So our expect is not snapshot yet.

117
00:06:30.830 --> 00:06:32.640
We'll remove that snapshot

118
00:06:35.130 --> 00:06:39.764
and in here I'll expect wrapper.text

119
00:06:39.764 --> 00:06:42.833
.toContain loading.

120
00:06:46.150 --> 00:06:48.760
Good, so that's all we need to do here.

121
00:06:48.760 --> 00:06:50.523
We'll save that for the next one.

122
00:06:51.610 --> 00:06:55.773
Next one, it renders pagination for 18 items.

123
00:06:56.850 --> 00:06:59.930
And we can go ahead and take this mount,

124
00:06:59.930 --> 00:07:04.453
paste it in, change makeMocksFor to 18 items.

125
00:07:06.060 --> 00:07:10.000
Then we'll await wait, this is not async,

126
00:07:10.000 --> 00:07:11.550
so make sure you mark it as so.

127
00:07:14.080 --> 00:07:18.963
Then we'll update and let's just console.log

128
00:07:21.120 --> 00:07:23.393
wrapper.debug, see what we're working with.

129
00:07:24.240 --> 00:07:25.880
And it looks like one more error.

130
00:07:25.880 --> 00:07:28.210
Let's see here, there we go.

131
00:07:28.210 --> 00:07:30.990
Uncaught error, no router instance found.

132
00:07:30.990 --> 00:07:32.920
You should only use next/router

133
00:07:32.920 --> 00:07:34.240
inside the client of your app.

134
00:07:34.240 --> 00:07:36.366
So this is another good example of

135
00:07:36.366 --> 00:07:41.366
we are using a link and inside of our pagination

136
00:07:43.360 --> 00:07:46.470
we are using the prefetch attribute on there,

137
00:07:46.470 --> 00:07:49.110
and what that does, by putting prefetch,

138
00:07:49.110 --> 00:07:50.670
it's going to actually try to go ahead

139
00:07:50.670 --> 00:07:53.420
and start to prefetch pages,

140
00:07:53.420 --> 00:07:56.582
but because we're not inside of an application instance,

141
00:07:56.582 --> 00:07:58.260
it has no router.

142
00:07:58.260 --> 00:07:59.650
It's very similar to the Apollo,

143
00:07:59.650 --> 00:08:01.600
it has no Apollo to look for.

144
00:08:01.600 --> 00:08:04.638
So what we can do is we can fake the router

145
00:08:04.638 --> 00:08:07.160
just by importing it.

146
00:08:07.160 --> 00:08:12.160
So, we'll go up here, import router from next/router.

147
00:08:13.730 --> 00:08:17.370
And then we can mock the router portion of that.

148
00:08:17.370 --> 00:08:21.489
So we'll say router.router, this'll seem a little bit weird,

149
00:08:21.489 --> 00:08:24.800
but that's the actual router method on it.

150
00:08:24.800 --> 00:08:27.140
And we'll set that to an object

151
00:08:27.140 --> 00:08:30.713
where push just does nothing,

152
00:08:32.640 --> 00:08:37.640
and prefetch does nothing.

153
00:08:37.842 --> 00:08:40.970
If we cared about if these were called or not,

154
00:08:40.970 --> 00:08:44.810
we could put them as mocks in the time of authoring.

155
00:08:44.810 --> 00:08:46.080
But in this case we're just putting them

156
00:08:46.080 --> 00:08:48.270
as functions that do nothing.

157
00:08:48.270 --> 00:08:50.410
And the, when the browser looks for them,

158
00:08:50.410 --> 00:08:52.720
it'll run that prefetch, nothing will happen,

159
00:08:52.720 --> 00:08:54.800
but it's not gonna complain about what we have.

160
00:08:54.800 --> 00:08:56.860
And that comes straight from the next documentation

161
00:08:56.860 --> 00:08:58.570
on how to best do that.

162
00:08:58.570 --> 00:09:01.960
So, looks like we're passing, that's good.

163
00:09:01.960 --> 00:09:03.530
So what we wanna do here, now,

164
00:09:03.530 --> 00:09:07.470
is check that we have the right number of pages.

165
00:09:07.470 --> 00:09:12.470
So we'll expect the wrapper.find, .totalPages.

166
00:09:17.960 --> 00:09:21.173
I think in here we have a total pages class, do we?

167
00:09:25.860 --> 00:09:28.780
We need to wrap this in a total pages span.

168
00:09:28.780 --> 00:09:32.473
So we'll grab here, say span.totalPages,

169
00:09:36.740 --> 00:09:38.023
put that inside of there.

170
00:09:42.470 --> 00:09:47.313
In here we'll find it, we'll grab the text from it,

171
00:09:49.570 --> 00:09:54.570
and we'll expect that toEqual a string of five.

172
00:09:57.690 --> 00:09:58.910
Looks like it's working.

173
00:09:58.910 --> 00:10:01.870
Another thing we can do is just snapshot the entire thing,

174
00:10:01.870 --> 00:10:03.110
make sure it's working.

175
00:10:03.110 --> 00:10:06.737
So const nav is equal to wrapper.find a div

176
00:10:09.493 --> 00:10:12.576
with the data-test set to pagination.

177
00:10:16.493 --> 00:10:18.826
Let's console.log nav.debug.

178
00:10:25.630 --> 00:10:26.593
Get rid of that.

179
00:10:28.590 --> 00:10:30.520
Didn't find it, let's see.

180
00:10:30.520 --> 00:10:34.900
Nothing, I spelled pagination wrong, of course.

181
00:10:34.900 --> 00:10:37.640
There it is, and we can go ahead and snapshot that,

182
00:10:37.640 --> 00:10:40.957
expect toJSON, nav, toMatch snappy.

183
00:10:49.400 --> 00:10:53.063
Wrote a snapshot, let's check out the pagination.

184
00:10:54.040 --> 00:10:56.063
Oh, why did I call this nav, this is not nav,

185
00:10:56.063 --> 00:10:58.450
this is pagination.

186
00:10:58.450 --> 00:11:02.700
We'll open up our pagination snapshot,

187
00:11:02.700 --> 00:11:05.940
and it renders pagination for 18 items.

188
00:11:05.940 --> 00:11:09.113
And we do see 18 items total.

189
00:11:11.380 --> 00:11:14.020
And we see links to the rest of the pages, good.

190
00:11:14.020 --> 00:11:17.140
That's working for us.

191
00:11:17.140 --> 00:11:20.900
Now we need to work on the disabling and enabling

192
00:11:20.900 --> 00:11:22.940
of the previous and next buttons.

193
00:11:22.940 --> 00:11:24.300
So those are two separate tests.

194
00:11:24.300 --> 00:11:29.210
We'll say it disables prev button on first page.

195
00:11:29.210 --> 00:11:30.550
And let's actually go ahead and write

196
00:11:30.550 --> 00:11:31.470
the rest of the tests.

197
00:11:31.470 --> 00:11:36.470
It enables, or disables next button on last page.

198
00:11:41.240 --> 00:11:46.240
And then the third one, it enables all buttons

199
00:11:46.990 --> 00:11:49.003
on a middle page.

200
00:11:52.460 --> 00:11:53.940
Okay.

201
00:11:53.940 --> 00:11:56.570
Now we'll do the first one here.

202
00:11:56.570 --> 00:11:59.780
We can take the whole, all three of these things here,

203
00:11:59.780 --> 00:12:03.723
we'll mount it for 18 items, we'll await and update.

204
00:12:05.030 --> 00:12:09.770
And then we will expect the wrapper.find,

205
00:12:09.770 --> 00:12:13.050
we're gonna find the previous button, a.prev,

206
00:12:15.250 --> 00:12:19.183
and we're gonna grab the prop aria disabled.

207
00:12:22.970 --> 00:12:27.940
And we're gonna expect that toEqual true.

208
00:12:27.940 --> 00:12:32.370
So, this button

209
00:12:34.130 --> 00:12:36.020
is going to be either true or false,

210
00:12:36.020 --> 00:12:38.140
and that's exactly what we're checking for here.

211
00:12:38.140 --> 00:12:39.233
So, is that running?

212
00:12:43.930 --> 00:12:45.650
Method props is only meant to run

213
00:12:45.650 --> 00:12:48.653
on a single node, two found instead.

214
00:12:49.550 --> 00:12:52.930
Ah, there's two prev buttons in the wrapper, why?

215
00:12:52.930 --> 00:12:57.913
Let's console.log, wrapper.find,

216
00:13:02.162 --> 00:13:02.995
a.prev,

217
00:13:07.667 --> 00:13:08.500
.debug.

218
00:13:13.290 --> 00:13:18.290
Oh, why does the pagination have a prev on the next button?

219
00:13:19.990 --> 00:13:21.973
There we go, this should say next.

220
00:13:24.340 --> 00:13:25.700
And you see that now our snapshot

221
00:13:25.700 --> 00:13:26.830
for the other ones changed.

222
00:13:26.830 --> 00:13:28.610
So we'll accept those.

223
00:13:28.610 --> 00:13:31.360
And everything is working,

224
00:13:31.360 --> 00:13:33.600
so I'm gonna get rid of that debug.

225
00:13:33.600 --> 00:13:38.600
We do hafta check that the a.next is equal to false,

226
00:13:41.490 --> 00:13:43.450
because, when we're on the first page,

227
00:13:43.450 --> 00:13:45.303
the next page works.

228
00:13:48.130 --> 00:13:49.540
So those are all running.

229
00:13:49.540 --> 00:13:52.487
And now you can take all of this

230
00:13:52.487 --> 00:13:55.323
and we'll go to the next test and paste it in.

231
00:13:57.040 --> 00:14:01.680
Except that we're going to make this page five,

232
00:14:01.680 --> 00:14:03.950
this is gonna be the last page.

233
00:14:03.950 --> 00:14:05.990
And then we're going to switch these around

234
00:14:05.990 --> 00:14:08.040
so that when we're on the last page

235
00:14:08.040 --> 00:14:12.203
the previous page is not disabled and the opposite here.

236
00:14:13.800 --> 00:14:15.110
Those are all passing.

237
00:14:15.110 --> 00:14:17.880
And then, finally, we're going to run one.

238
00:14:17.880 --> 00:14:21.510
Go ahead and copy, paste,

239
00:14:21.510 --> 00:14:23.470
and we're going to just put ourselves

240
00:14:23.470 --> 00:14:25.600
in the middle, maybe on page three,

241
00:14:25.600 --> 00:14:27.970
and they should both be set to true.

242
00:14:27.970 --> 00:14:30.720
Nope, they should both be set to false,

243
00:14:30.720 --> 00:14:32.603
'cause they both aren't disabled.

244
00:14:33.530 --> 00:14:34.500
Looking good.

245
00:14:34.500 --> 00:14:35.840
One other thing you could do there,

246
00:14:35.840 --> 00:14:38.110
instead of writing three separate tests,

247
00:14:38.110 --> 00:14:40.090
what you could do is you could programmatically

248
00:14:40.090 --> 00:14:43.340
update the prop of this pagination component

249
00:14:43.340 --> 00:14:46.560
from one to five to three,

250
00:14:46.560 --> 00:14:49.160
and then run all of these expects.

251
00:14:49.160 --> 00:14:50.760
I prefer to have them as separate tests

252
00:14:50.760 --> 00:14:52.700
just so I know exactly what's going on.

253
00:14:52.700 --> 00:14:54.860
You're gonna get better fails there.

254
00:14:54.860 --> 00:14:56.180
But you could do that as well,

255
00:14:56.180 --> 00:15:00.640
'cause, if you did it all in one test and it failed,

256
00:15:00.640 --> 00:15:02.400
you would have to dig in and figure out

257
00:15:02.400 --> 00:15:03.550
why it failed.

258
00:15:03.550 --> 00:15:05.330
When, in this case, it's very clear

259
00:15:05.330 --> 00:15:07.683
which part of it has failed.

260
00:15:08.580 --> 00:15:11.050
So, that is all the tests for our pagination.

261
00:15:11.050 --> 00:15:13.170
I think we're pretty good at writing

262
00:15:13.170 --> 00:15:14.040
all of these mocks.

263
00:15:14.040 --> 00:15:17.023
Let's move into writing some mutation mocks.

