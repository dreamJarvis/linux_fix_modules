WEBVTT

1
00:00:00.000 --> 00:00:01.083
(dashing through sound)

2
00:00:01.083 --> 00:00:02.450
<v ->Alright, let's get running.</v>

3
00:00:02.450 --> 00:00:04.710
Our first test, and kinda,

4
00:00:04.710 --> 00:00:06.130
one thing that's nice is about Jest

5
00:00:06.130 --> 00:00:07.650
is that it's zero config.

6
00:00:07.650 --> 00:00:09.850
So, the question is, where do you put your test?

7
00:00:09.850 --> 00:00:12.580
And it doesn't really matter where you put them,

8
00:00:12.580 --> 00:00:14.670
as long as they're either in a folder called,

9
00:00:14.670 --> 00:00:17.229
underscore underscore test underscore underscore,

10
00:00:17.229 --> 00:00:19.700
or, they have a dot spec dot js,

11
00:00:19.700 --> 00:00:22.770
or a dot test dot js extension on it.

12
00:00:22.770 --> 00:00:24.280
So, what a lot of people will do,

13
00:00:24.280 --> 00:00:25.410
and we talked about this earlier,

14
00:00:25.410 --> 00:00:27.100
is, you'll have a folder

15
00:00:27.100 --> 00:00:29.290
for every single component that you build.

16
00:00:29.290 --> 00:00:31.900
So, right now, we only have our files,

17
00:00:31.900 --> 00:00:33.440
right in our components folder.

18
00:00:33.440 --> 00:00:35.310
But, often what you'll see is, you'll see people

19
00:00:35.310 --> 00:00:37.620
have a components folder.

20
00:00:37.620 --> 00:00:41.620
And inside of that, you might have pagination component.

21
00:00:41.620 --> 00:00:44.290
And inside of that, you might have index dot js,

22
00:00:44.290 --> 00:00:45.890
which is the actual pagination.

23
00:00:45.890 --> 00:00:49.010
That you might have a style dot js, which has

24
00:00:49.010 --> 00:00:50.910
all your style components inside of it.

25
00:00:50.910 --> 00:00:52.960
And then, you might have something like a pagination dot

26
00:00:52.960 --> 00:00:57.490
test dot js, which will actually run all the tests.

27
00:00:57.490 --> 00:01:00.570
Or, there's lots of tests you might see inside of that

28
00:01:00.570 --> 00:01:05.520
they'll have a tests directory, and then inside of that,

29
00:01:05.520 --> 00:01:08.210
you'll have all of the names of your tests, so,

30
00:01:08.210 --> 00:01:11.250
whatever dot test dot js, inside of that.

31
00:01:11.250 --> 00:01:13.200
Now, that's not what we are going to be doing here,

32
00:01:13.200 --> 00:01:15.300
just 'cause, for simplicity's sake,

33
00:01:15.300 --> 00:01:17.720
we are just going to have one folder

34
00:01:17.720 --> 00:01:20.070
that has a underscore underscore test,

35
00:01:20.070 --> 00:01:21.800
and then inside of that, we're gonna name,

36
00:01:21.800 --> 00:01:23.780
we're gonna mirror all of these components

37
00:01:23.780 --> 00:01:27.500
that we have here, with the dot test dot js on the end.

38
00:01:27.500 --> 00:01:28.910
So, let's go ahead and do that.

39
00:01:28.910 --> 00:01:30.660
You're not in your components folder.

40
00:01:30.660 --> 00:01:32.667
You're just in your front-end folder.

41
00:01:32.667 --> 00:01:34.600
You're gonna make a folder

42
00:01:34.600 --> 00:01:37.933
called underscore underscore tests underscore underscore.

43
00:01:38.892 --> 00:01:41.840
And then, inside of that folder, is where we're going to

44
00:01:41.840 --> 00:01:42.920
put all of our tests over.

45
00:01:42.920 --> 00:01:44.830
And we're actually gonna, sort of, double config these.

46
00:01:44.830 --> 00:01:47.850
We're both gonna put it in this folder, and give it

47
00:01:47.850 --> 00:01:48.781
a dot test dot js.

48
00:01:48.781 --> 00:01:53.120
That's not necessary, but I just like to clearly show myself

49
00:01:53.120 --> 00:01:55.620
which ones are tests, and which ones are not.

50
00:01:55.620 --> 00:01:57.770
So, let's go ahead and make a new file inside

51
00:01:57.770 --> 00:01:59.170
of this test directory,

52
00:01:59.170 --> 00:02:02.600
and we'll call it sample dot test dot js.

53
00:02:02.600 --> 00:02:06.920
Then, inside of this, we can start to write some code,

54
00:02:06.920 --> 00:02:09.560
and usually what you'll do, is you'll have a couple imports.

55
00:02:09.560 --> 00:02:13.040
However, there are a few globals that we have access to.

56
00:02:13.040 --> 00:02:15.130
So, if we go to the Jest documentation,

57
00:02:15.130 --> 00:02:16.433
go to the docs,

58
00:02:17.730 --> 00:02:19.520
go to the globals ,

59
00:02:19.520 --> 00:02:22.130
you'll see that there is all of these globals

60
00:02:22.130 --> 00:02:23.330
that are available to us.

61
00:02:23.330 --> 00:02:25.870
The ones that we're going to be using right now

62
00:02:25.870 --> 00:02:30.870
are describe and test and expect,

63
00:02:31.460 --> 00:02:32.940
that are just available to us.

64
00:02:32.940 --> 00:02:37.130
So you don't have to import describe, test, or expect.

65
00:02:37.130 --> 00:02:38.170
So, first, what we're gonna do,

66
00:02:38.170 --> 00:02:40.010
is we're gonna type in a describe,

67
00:02:40.010 --> 00:02:42.970
and the describe function will take,

68
00:02:42.970 --> 00:02:45.130
first thing, you describe what's going on,

69
00:02:45.130 --> 00:02:47.620
and then second, you give it a group of tests,

70
00:02:47.620 --> 00:02:48.610
inside of that.

71
00:02:48.610 --> 00:02:51.030
Now, that's important, because you use a describe

72
00:02:51.030 --> 00:02:53.420
to group together related tests.

73
00:02:53.420 --> 00:02:56.110
Generally, you're gonna have one describe per test file.

74
00:02:56.110 --> 00:02:59.640
However, it's not uncommon for you to do multiple describes

75
00:02:59.640 --> 00:03:02.170
just to keep them a little bit separate.

76
00:03:02.170 --> 00:03:03.300
You can put as many as you want.

77
00:03:03.300 --> 00:03:07.760
So in here, we're going to say, sample test 101.

78
00:03:07.760 --> 00:03:11.450
Then you have a, arrow function inside of there,

79
00:03:11.450 --> 00:03:13.180
and we can go ahead and just console log:

80
00:03:13.180 --> 00:03:16.853
I am running some tests.

81
00:03:18.050 --> 00:03:19.660
Now, we'll see if that works.

82
00:03:19.660 --> 00:03:24.090
What we can do is go back to our terminal here,

83
00:03:24.090 --> 00:03:27.070
and we will go into our front-end folder,

84
00:03:27.070 --> 00:03:29.540
and we'll run npm run test.

85
00:03:29.540 --> 00:03:31.820
Now under the hood, what is that doing?

86
00:03:31.820 --> 00:03:34.390
Well, let's look at our package json,

87
00:03:34.390 --> 00:03:36.740
look at our scripts.

88
00:03:36.740 --> 00:03:38.930
You see we have a test command here.

89
00:03:38.930 --> 00:03:41.740
That is just setting the node environment to test,

90
00:03:41.740 --> 00:03:46.070
and then running the command jest with dash dash watch,

91
00:03:46.070 --> 00:03:47.077
inside of that.

92
00:03:47.077 --> 00:03:50.070
And we'll go back here and you'll see

93
00:03:50.070 --> 00:03:51.970
you can get all of your console logs

94
00:03:51.970 --> 00:03:54.220
that you have inside of your tests, right here.

95
00:03:54.220 --> 00:03:56.508
And then it will tell you if your test suites

96
00:03:56.508 --> 00:03:58.750
have failed or passed.

97
00:03:58.750 --> 00:04:03.460
So, a test suite is a describe, and then inside of that,

98
00:04:03.460 --> 00:04:06.040
we're actually going to set up

99
00:04:06.040 --> 00:04:07.957
all of our different tests that we have.

100
00:04:07.957 --> 00:04:09.707
So, let's go ahead and do that now.

101
00:04:11.440 --> 00:04:12.450
So we'll remove that.

102
00:04:12.450 --> 00:04:16.580
Now, we can either use the test command,

103
00:04:16.580 --> 00:04:20.520
or the it command, and they are the exact same thing.

104
00:04:20.520 --> 00:04:23.370
We are going to be using the it one, 'cause I feel like

105
00:04:23.370 --> 00:04:24.350
it reads better.

106
00:04:24.350 --> 00:04:27.660
I also have a bit of a past in using libraries that have it.

107
00:04:27.660 --> 00:04:32.433
So, we'll say, it works as expected.

108
00:04:33.690 --> 00:04:36.600
And then you give it another function, here.

109
00:04:36.600 --> 00:04:39.450
And then inside of each of your it blocks,

110
00:04:39.450 --> 00:04:41.800
then that's where we are going to be doing

111
00:04:41.800 --> 00:04:43.290
each of our expects.

112
00:04:43.290 --> 00:04:48.240
So, we're gonna say, expect, we'll say, one, dot.

113
00:04:48.240 --> 00:04:51.780
And this is where we can use all of our dots to equals.

114
00:04:51.780 --> 00:04:52.747
So we'll go to expect,

115
00:04:52.747 --> 00:04:55.880
you'll see that they are all available here.

116
00:04:55.880 --> 00:04:58.360
So expect one to equal.

117
00:04:58.360 --> 00:05:01.590
I have a Jest for vs code extension.

118
00:05:01.590 --> 00:05:04.060
Turn on here, that gives me these nice completions.

119
00:05:04.060 --> 00:05:07.630
So, we'll say, expect one to equal one.

120
00:05:07.630 --> 00:05:08.800
You see this little green dot?

121
00:05:08.800 --> 00:05:09.660
It actually shows up.

122
00:05:09.660 --> 00:05:10.590
This is pretty nifty.

123
00:05:10.590 --> 00:05:14.400
I have a vs code package that will run all of my tests,

124
00:05:14.400 --> 00:05:17.170
sort of, behind the scenes, so that I can see them working

125
00:05:17.170 --> 00:05:18.102
inside of it.

126
00:05:18.102 --> 00:05:19.670
You don't have to install that.

127
00:05:19.670 --> 00:05:21.390
That's why I'm going to be showing you how it works

128
00:05:21.390 --> 00:05:22.970
in the terminal, as well.

129
00:05:22.970 --> 00:05:23.803
You see?

130
00:05:23.803 --> 00:05:24.990
It works as expected.

131
00:05:24.990 --> 00:05:25.823
Good.

132
00:05:25.823 --> 00:05:28.290
Now, you can put as many as expects in here,

133
00:05:28.290 --> 00:05:29.123
as you would want.

134
00:05:29.123 --> 00:05:31.980
So, like, oh maybe, we will have a variable.

135
00:05:31.980 --> 00:05:34.483
That's here, so var age is equal to 100.

136
00:05:35.550 --> 00:05:40.550
And, we wanna expect the age to equal 99.

137
00:05:42.000 --> 00:05:44.010
And, obviously, that's going to fail.

138
00:05:44.010 --> 00:05:45.870
And it's going to give us good information

139
00:05:45.870 --> 00:05:46.950
about how it works.

140
00:05:46.950 --> 00:05:50.310
So, it expected the value to equal 99.

141
00:05:50.310 --> 00:05:54.170
It received 100, and our tests have failed.

142
00:05:54.170 --> 00:05:58.333
We go ahead and change that now to 100.

143
00:05:59.300 --> 00:06:00.133
You see that?

144
00:06:00.133 --> 00:06:02.190
They both have passed.

145
00:06:02.190 --> 00:06:07.190
Now, you will often run many expects inside of an it.

146
00:06:07.200 --> 00:06:10.520
But, as soon as you are checking something else

147
00:06:10.520 --> 00:06:13.618
about how that component or how that function works,

148
00:06:13.618 --> 00:06:15.689
then you grab another it block.

149
00:06:15.689 --> 00:06:18.939
So, I say, it handles ranges just fine.

150
00:06:25.446 --> 00:06:28.529
And we'll say const age equal to 200.

151
00:06:29.850 --> 00:06:34.850
We'll expect the age to be greater than 100.

152
00:06:39.680 --> 00:06:41.310
So, now we've got two tests, right?

153
00:06:41.310 --> 00:06:43.940
We expect them to equal the exact amount,

154
00:06:43.940 --> 00:06:45.210
and then we have this second test

155
00:06:45.210 --> 00:06:47.030
that is handling the ranges,

156
00:06:47.030 --> 00:06:50.100
and we get check marks beside both of those.

157
00:06:50.100 --> 00:06:52.210
Now, sometimes you're going to have test

158
00:06:52.210 --> 00:06:55.250
that are temporarily broken, for whatever reason.

159
00:06:55.250 --> 00:06:56.870
Maybe you are working on the component

160
00:06:56.870 --> 00:06:59.380
and you wanna skip that test.

161
00:06:59.380 --> 00:07:00.570
Or, the opposite.

162
00:07:00.570 --> 00:07:02.950
You wanna just focus in, and only run that test.

163
00:07:02.950 --> 00:07:05.140
So, if I were to run a third test here,

164
00:07:05.140 --> 00:07:08.123
so, it, let's do something stupid.

165
00:07:11.520 --> 00:07:14.713
Makes a list of dog names.

166
00:07:19.760 --> 00:07:24.760
And, we will say, const dogs is equal to snickers and hugo.

167
00:07:26.970 --> 00:07:31.970
We'll expect dogs to equal dogs.

168
00:07:33.660 --> 00:07:35.210
Let's just try that.

169
00:07:35.210 --> 00:07:36.113
Good, they all work.

170
00:07:36.113 --> 00:07:38.080
Now, let's try a couple more.

171
00:07:38.080 --> 00:07:40.540
Expect dogs.

172
00:07:40.540 --> 00:07:43.260
Let's try some of the array ones in here.

173
00:07:43.260 --> 00:07:47.403
To contain snickers.

174
00:07:50.050 --> 00:07:51.743
Is that still runnin' just fine?

175
00:07:52.750 --> 00:07:54.180
Looks like it is!

176
00:07:54.180 --> 00:07:57.960
Now, let's say we're trying to fix this test,

177
00:07:57.960 --> 00:08:00.750
and we didn't want the other ones to run.

178
00:08:00.750 --> 00:08:04.370
What you can do, is you can say, it dot only.

179
00:08:04.370 --> 00:08:07.400
And what will do is, it will only run that one test

180
00:08:07.400 --> 00:08:08.320
that we're working on,

181
00:08:08.320 --> 00:08:11.230
and it's going to skip the other ones.

182
00:08:11.230 --> 00:08:14.580
Similarly, you can use it dot skip,

183
00:08:14.580 --> 00:08:17.060
and it's going to skip that specific test,

184
00:08:17.060 --> 00:08:18.230
and it will tell you that you're two,

185
00:08:18.230 --> 00:08:19.420
currently skipping one.

186
00:08:19.420 --> 00:08:22.710
Often, that's better, because if you do have a problem

187
00:08:22.710 --> 00:08:25.430
that is going on here, if there's an error,

188
00:08:25.430 --> 00:08:28.490
you get your terminal all clogged up with information.

189
00:08:28.490 --> 00:08:31.570
So, it's nice to be able to skip it or to only it,

190
00:08:31.570 --> 00:08:32.810
and focus in on it.

191
00:08:32.810 --> 00:08:34.560
So, some shorthands for that.

192
00:08:34.560 --> 00:08:38.200
I don't like to add the dot only and the dot skip onto it,

193
00:08:38.200 --> 00:08:42.199
so I like to use the xit, and that will skip it.

194
00:08:42.199 --> 00:08:44.760
Xit, instead of it, will skip it.

195
00:08:44.760 --> 00:08:47.600
And then the f it, which I think that, f it,

196
00:08:47.600 --> 00:08:48.800
that's just skip it, right?

197
00:08:48.800 --> 00:08:50.160
But it's (laughs) not.

198
00:08:50.160 --> 00:08:52.810
It stands for focus it, which means, like,

199
00:08:52.810 --> 00:08:54.960
only run this specific one.

200
00:08:54.960 --> 00:08:57.670
And you can see here that I've got these yellow circles,

201
00:08:57.670 --> 00:08:59.030
showing up to my l o tests,

202
00:08:59.030 --> 00:09:02.700
because I'm focusing in on running this test.

203
00:09:02.700 --> 00:09:04.980
So, that's the basics of how to describe.

204
00:09:04.980 --> 00:09:07.020
Makes the test sweet, and then inside of that,

205
00:09:07.020 --> 00:09:08.540
we run our individual tests,

206
00:09:08.540 --> 00:09:10.100
and then inside each of those,

207
00:09:10.100 --> 00:09:12.150
we run our assertions against it.

208
00:09:12.150 --> 00:09:14.270
Obviously, this is just silly data,

209
00:09:14.270 --> 00:09:16.800
so let's just take a look at how we can actually run this

210
00:09:16.800 --> 00:09:18.300
with a real function.

211
00:09:18.300 --> 00:09:21.740
It's gonna move this one back to it.

212
00:09:21.740 --> 00:09:23.270
Make sure they're all passing.

213
00:09:23.270 --> 00:09:26.890
Good, now, we have this format money function

214
00:09:26.890 --> 00:09:28.370
that we use quite a bit here, and

215
00:09:28.370 --> 00:09:30.920
there's actually quite a lot going on here,

216
00:09:30.920 --> 00:09:34.640
because we're taking in the amount of cents,

217
00:09:34.640 --> 00:09:36.510
and we're dividing it by 100.

218
00:09:36.510 --> 00:09:39.480
We're formatting it based on US dollars,

219
00:09:39.480 --> 00:09:41.670
and then if it's a whole dollar amount,

220
00:09:41.670 --> 00:09:43.673
we want to leave off the dot zero zero, right?

221
00:09:43.673 --> 00:09:46.090
So there's a whole bunch of different situations

222
00:09:46.090 --> 00:09:47.610
where I might just have cents.

223
00:09:47.610 --> 00:09:48.700
I might just have dollars and cents.

224
00:09:48.700 --> 00:09:50.050
I might have thousands of dollars.

225
00:09:50.050 --> 00:09:52.240
I might just have 100 dollars and 50 cents.

226
00:09:52.240 --> 00:09:54.910
I might have millions of dollars and 50 cents.

227
00:09:54.910 --> 00:09:57.320
So we need to be able to test, absolutely,

228
00:09:57.320 --> 00:09:59.040
every single one of those to make sure

229
00:09:59.040 --> 00:10:02.420
that this format currency, or format money function,

230
00:10:02.420 --> 00:10:03.970
is rock-solid.

231
00:10:03.970 --> 00:10:05.170
So that's exactly what we're gonna do.

232
00:10:05.170 --> 00:10:06.360
Go into our tests.

233
00:10:06.360 --> 00:10:09.910
Make a new file, and we'll call it format money

234
00:10:09.910 --> 00:10:14.043
dot test dot js.

235
00:10:15.470 --> 00:10:18.030
And you can immediately see that it just reran

236
00:10:18.030 --> 00:10:20.790
and failed that 'cause there are no tests in here.

237
00:10:20.790 --> 00:10:23.390
By the way, while we're on this right now,

238
00:10:23.390 --> 00:10:28.390
the dash watch flag that I passed in package json,

239
00:10:28.710 --> 00:10:32.150
it will only actually watch files that have changed

240
00:10:32.150 --> 00:10:34.380
since your last git commit.

241
00:10:34.380 --> 00:10:37.840
So, that's really helpful because it's not going to monitor

242
00:10:37.840 --> 00:10:39.950
absolutely every single file that you want.

243
00:10:39.950 --> 00:10:42.260
It will only monitor files that have change

244
00:10:42.260 --> 00:10:45.400
since your last git commit, so, I really like that.

245
00:10:45.400 --> 00:10:47.100
So, if you're having trouble, make your you actually

246
00:10:47.100 --> 00:10:48.950
have a git repo up and running.

247
00:10:48.950 --> 00:10:51.050
Now, inside of this format, money:

248
00:10:51.050 --> 00:10:52.560
First thing we're gonna do is import

249
00:10:52.560 --> 00:10:55.610
the format, money, function from.

250
00:10:55.610 --> 00:10:59.310
We'll go into our lib folder and grab the format money,

251
00:10:59.310 --> 00:11:01.050
and you could do that for all of the functions

252
00:11:01.050 --> 00:11:01.883
that are in there.

253
00:11:01.883 --> 00:11:03.310
Maybe that's some good practice.

254
00:11:03.310 --> 00:11:06.190
Then we'll have our describe of the test suite.

255
00:11:06.190 --> 00:11:09.943
So we're gonna describe the format money function,

256
00:11:11.010 --> 00:11:14.190
and that's just describing what this test suite is about.

257
00:11:14.190 --> 00:11:16.940
And then, inside of here, we'll have our it.

258
00:11:16.940 --> 00:11:19.480
And let's try it first with just the sentence,

259
00:11:19.480 --> 00:11:20.330
fractional dollars.

260
00:11:20.330 --> 00:11:25.330
So it works with fractional dollars,

261
00:11:25.830 --> 00:11:27.240
and here's where we'll have our expect.

262
00:11:27.240 --> 00:11:28.453
So we'll say, expect.

263
00:11:30.130 --> 00:11:31.450
We can run it right in here.

264
00:11:31.450 --> 00:11:36.083
Format money, and we'll pass it one cent,

265
00:11:37.000 --> 00:11:40.467
to equal dollar zero dot zero one.

266
00:11:47.930 --> 00:11:48.830
Give it a run.

267
00:11:48.830 --> 00:11:50.320
And it looks like it passed.

268
00:11:50.320 --> 00:11:52.473
The way we can test if that doesn't work,

269
00:11:54.180 --> 00:11:57.430
is if I were to change it to something else.

270
00:11:57.430 --> 00:11:59.220
And also, this is really handy.

271
00:11:59.220 --> 00:12:01.270
If you don't know what it's going to equal,

272
00:12:01.270 --> 00:12:02.640
you can always just make it break

273
00:12:02.640 --> 00:12:07.530
and see what you've received, and then what it's expecting,

274
00:12:07.530 --> 00:12:10.999
and then you can just copy the received out of there,

275
00:12:10.999 --> 00:12:12.860
and paste it into here.

276
00:12:12.860 --> 00:12:14.600
And that's actually why we're gonna get

277
00:12:14.600 --> 00:12:16.520
into snapshot testing, in just a second.

278
00:12:16.520 --> 00:12:18.080
Good, now we also want to test it with

279
00:12:18.080 --> 00:12:20.350
a couple other currencies that come in.

280
00:12:20.350 --> 00:12:23.560
So we'll duplicate it, and let's just try it with ten cents.

281
00:12:23.560 --> 00:12:27.010
And we'll expect it to be ten zero.

282
00:12:27.010 --> 00:12:28.940
Looks like both of those work.

283
00:12:28.940 --> 00:12:32.110
Let's try it with nine cents.

284
00:12:32.110 --> 00:12:33.603
Should be zero nine.

285
00:12:34.830 --> 00:12:39.830
Good, and let's try it with 40 cents.

286
00:12:40.110 --> 00:12:42.930
Should be, decimal four zero.

287
00:12:42.930 --> 00:12:44.850
Good, and that's really helpful because sometimes

288
00:12:44.850 --> 00:12:47.430
I was running into issues where there was no zero,

289
00:12:47.430 --> 00:12:50.990
it would just be like, zero, it would equal that.

290
00:12:50.990 --> 00:12:55.040
And then I would say, no, even though you've rounded

291
00:12:55.040 --> 00:12:57.040
and just showed me the number of decimals needed,

292
00:12:57.040 --> 00:12:59.400
I actually need to visually see

293
00:12:59.400 --> 00:13:00.820
the 40 cents on the end there.

294
00:13:00.820 --> 00:13:03.090
So that'll show us that it's there.

295
00:13:03.090 --> 00:13:04.850
Good, I'm reasonably happy with that.

296
00:13:04.850 --> 00:13:06.370
I've kinda covered all of them.

297
00:13:06.370 --> 00:13:09.225
And generally, what will happen is, if you ever do

298
00:13:09.225 --> 00:13:12.655
run across something that broke, you're like, oh, weird,

299
00:13:12.655 --> 00:13:16.313
when that thing was 33 dollars and 33 cents,

300
00:13:17.440 --> 00:13:18.750
it broke in a weird way.

301
00:13:18.750 --> 00:13:20.570
And what you do, you immediately go in

302
00:13:20.570 --> 00:13:22.920
and write a test for it that fails,

303
00:13:22.920 --> 00:13:25.490
and then you fix your format money function

304
00:13:25.490 --> 00:13:28.000
so that your tests start to pass.

305
00:13:28.000 --> 00:13:29.880
So that's good for fractional dollars.

306
00:13:29.880 --> 00:13:31.493
Next thing we want to do is,

307
00:13:31.493 --> 00:13:33.950
it leaves cents off for whole dollars.

308
00:13:33.950 --> 00:13:38.950
So we'll set it leaves cents off for whole dollars.

309
00:13:40.800 --> 00:13:42.063
Run that function here.

310
00:13:43.700 --> 00:13:48.283
Say expect format money.

311
00:13:49.810 --> 00:13:54.600
We'll start with 5,000 cents that should to equal

312
00:13:56.440 --> 00:13:58.193
just dollar 50, right?

313
00:13:59.140 --> 00:14:00.980
And, that looks like it's working.

314
00:14:00.980 --> 00:14:04.430
So, if it wasn't working, you would get something like,

315
00:14:04.430 --> 00:14:07.510
50 dot zero zero, and then it would break, right,

316
00:14:07.510 --> 00:14:10.250
because I don't want this dot zero zero,

317
00:14:10.250 --> 00:14:11.750
if it's the whole amount of dollars,

318
00:14:11.750 --> 00:14:13.820
I just want the clean 50 dollars.

319
00:14:13.820 --> 00:14:16.660
So, it looks like it's working for me, there.

320
00:14:16.660 --> 00:14:18.483
Let's try it with one dollar.

321
00:14:20.940 --> 00:14:22.833
That should equal just one.

322
00:14:24.486 --> 00:14:25.600
Looks like that's working.

323
00:14:25.600 --> 00:14:27.030
Duplicate that over.

324
00:14:27.030 --> 00:14:29.530
Let's try it with 500,000 dollars.

325
00:14:29.530 --> 00:14:34.530
So, 500, and that should equal 500.

326
00:14:35.700 --> 00:14:39.020
That, looks like it's working.

327
00:14:39.020 --> 00:14:41.490
The way, again, you could take out the comma

328
00:14:41.490 --> 00:14:44.090
and see exactly what the function is giving us

329
00:14:44.090 --> 00:14:45.330
versus what we expected,

330
00:14:45.330 --> 00:14:47.883
but of course, we want the comma to be in there.

331
00:14:49.490 --> 00:14:51.790
Then we want to do another one that has a mix.

332
00:14:51.790 --> 00:14:56.780
So, it works with whole and fractional dollars.

333
00:15:01.240 --> 00:15:03.650
So, we could just duplicate one of these, bring 'em down.

334
00:15:03.650 --> 00:15:05.470
This is very simple, 'cause we're just using

335
00:15:05.470 --> 00:15:07.340
the two equal assertion here.

336
00:15:07.340 --> 00:15:10.130
I believe there's also a dot two b,

337
00:15:10.130 --> 00:15:13.700
but this will be strictly quality checking for us.

338
00:15:13.700 --> 00:15:17.083
So, let's say, 50 dollars and 12 cents.

339
00:15:17.930 --> 00:15:20.460
So, obviously, I expected that to be 50 dollars,

340
00:15:20.460 --> 00:15:24.271
and it's giving us 50 dot 12, so if we change that,

341
00:15:24.271 --> 00:15:25.493
it's working.

342
00:15:27.394 --> 00:15:30.053
If we get one dollar and one cents, 101,

343
00:15:34.390 --> 00:15:35.223
beautiful.

344
00:15:38.080 --> 00:15:39.573
One dollar and 10 cents.

345
00:15:43.480 --> 00:15:44.860
Working.

346
00:15:44.860 --> 00:15:47.743
And then, let's just go bananas with some crazy number.

347
00:15:49.220 --> 00:15:52.470
That, I don't know what that will be,

348
00:15:52.470 --> 00:15:54.290
so you can just kinda, (clicking tongue)

349
00:15:54.290 --> 00:15:56.973
copy this, paste it in here,

350
00:16:00.140 --> 00:16:01.390
and all of our tests with array.

351
00:16:01.390 --> 00:16:02.830
So, you can see how it's kinda fun,

352
00:16:02.830 --> 00:16:04.360
like, oh, how I wonder what other kind of,

353
00:16:04.360 --> 00:16:06.740
edge case I could run into with this.

354
00:16:06.740 --> 00:16:08.910
And I have used this function

355
00:16:08.910 --> 00:16:10.310
in many of my different applications.

356
00:16:10.310 --> 00:16:11.143
And I've run into

357
00:16:11.143 --> 00:16:13.500
all the different edge cases for formatting,

358
00:16:13.500 --> 00:16:16.220
and I think that I've covered them all in this.

359
00:16:16.220 --> 00:16:19.180
This is a nice test suite that gives me confidence

360
00:16:19.180 --> 00:16:21.530
in this format money function working.

361
00:16:21.530 --> 00:16:25.100
So, that's a very basic of unit testing.

362
00:16:25.100 --> 00:16:28.440
Now, let's jump into the specifics of unit testing

363
00:16:28.440 --> 00:16:29.553
a react component.

