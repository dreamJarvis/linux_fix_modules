WEBVTT

1
00:00:00.866 --> 00:00:03.199
(whistling)

2
00:00:12.113 --> 00:00:13.830
<v Instructor>In the last video we learned all</v>

3
00:00:13.830 --> 00:00:17.461
about flex-basis, flex-grow, and flex-shrink

4
00:00:17.461 --> 00:00:20.231
and how all of that works.

5
00:00:20.231 --> 00:00:23.496
In this video, I want to take a little bit further

6
00:00:23.496 --> 00:00:25.942
and see how it works when you've maybe

7
00:00:25.942 --> 00:00:27.994
changed a direction of your axises,

8
00:00:27.994 --> 00:00:32.139
or if you have items that wrap, which is more likely.

9
00:00:32.139 --> 00:00:35.666
I just got the flex-wrapping in columns one open here.

10
00:00:35.666 --> 00:00:38.889
Again, we're just right back with our six little

11
00:00:38.889 --> 00:00:42.029
emoji friends here that we're gonna be working with.

12
00:00:42.029 --> 00:00:44.129
I've got display:flex on our flex container,

13
00:00:44.129 --> 00:00:46.629
and then on each of our items,

14
00:00:47.479 --> 00:00:49.511
like .box, I'll grab 'em all,

15
00:00:49.511 --> 00:00:54.511
I'm just gonna set a flex-basis of 500px and give it a save.

16
00:00:57.400 --> 00:01:02.400
You'll see what happens is that, since I gave it 500px,

17
00:01:02.749 --> 00:01:05.508
that will be 500 plus 500 plus 500,

18
00:01:05.508 --> 00:01:08.880
they're all clearly not 500 pixels wide.

19
00:01:08.880 --> 00:01:12.609
They're 233 pixels wide, and how come?

20
00:01:12.609 --> 00:01:15.529
That's because what is kicking in right now?

21
00:01:15.529 --> 00:01:17.026
I should ask you, what's kicking in?

22
00:01:17.026 --> 00:01:19.176
Is the flex-grow kicking in,

23
00:01:19.176 --> 00:01:21.926
or is the flex-shrink kicking in?

24
00:01:23.971 --> 00:01:26.724
After we give the 500 pixels to each of them,

25
00:01:26.724 --> 00:01:30.792
we actually don't have enough room for all of these six.

26
00:01:30.792 --> 00:01:33.263
That'd be 3,000 pixels wide.

27
00:01:33.263 --> 00:01:36.271
What is our browser at right now?

28
00:01:36.271 --> 00:01:39.001
We're at about 1,400 pixels wide.

29
00:01:39.001 --> 00:01:41.259
We just don't have enough room for it,

30
00:01:41.259 --> 00:01:45.216
and when you kick on flex-shrink, the default is one,

31
00:01:45.216 --> 00:01:48.716
which means each item gets enough space.

32
00:01:48.716 --> 00:01:50.503
However, we can go back to our container

33
00:01:50.503 --> 00:01:52.336
and turn on flex-wrap.

34
00:01:55.589 --> 00:01:58.108
Just say wrap, give it a save, and refresh,

35
00:01:58.108 --> 00:02:00.587
and you can see, okay, that's interesting.

36
00:02:00.587 --> 00:02:05.327
Now, the items are now getting their, view inspect one,

37
00:02:05.327 --> 00:02:09.098
500 pixel flex-basis on, and now we've got this

38
00:02:09.098 --> 00:02:11.514
extra space to the right, so you tell me,

39
00:02:11.514 --> 00:02:13.599
how do we deal with extra space?

40
00:02:13.599 --> 00:02:15.599
That's called flex-grow.

41
00:02:18.905 --> 00:02:20.957
Give it a save and now each of them

42
00:02:20.957 --> 00:02:25.207
are going to be evenly distributed between the two.

43
00:02:27.248 --> 00:02:30.248
Now, where this becomes interesting is

44
00:02:30.248 --> 00:02:32.903
if I select box three, for example,

45
00:02:32.903 --> 00:02:35.469
and I change the flex-grow

46
00:02:35.469 --> 00:02:39.136
to something ridiculous like 10 and refresh,

47
00:02:40.820 --> 00:02:42.276
look what happens.

48
00:02:42.276 --> 00:02:46.000
Now, previously we've only been working with one row,

49
00:02:46.000 --> 00:02:49.495
and now, since we have flex-wrap turned on,

50
00:02:49.495 --> 00:02:53.578
flex-grow, -shrink, and -basis, all of those work

51
00:02:54.636 --> 00:02:57.388
only on the row that they are on,

52
00:02:57.388 --> 00:03:01.011
so they don't have any effect on the item before or after,

53
00:03:01.011 --> 00:03:05.091
which is fantastic because we don't have any sort of,

54
00:03:05.091 --> 00:03:06.057
if I look at the index here,

55
00:03:06.057 --> 00:03:10.173
we don't have any sort of weird HTML wrapping going on here.

56
00:03:10.173 --> 00:03:12.751
It's all just working out for us.

57
00:03:12.751 --> 00:03:14.801
Now what I want to do is change the axis.

58
00:03:14.801 --> 00:03:15.837
It's been a couple of videos since

59
00:03:15.837 --> 00:03:18.247
I've really nailed down axis.

60
00:03:18.247 --> 00:03:20.968
By default, the axis in Flexbox,

61
00:03:20.968 --> 00:03:23.348
the default one is left to right.

62
00:03:23.348 --> 00:03:25.757
The main axis goes from left to right

63
00:03:25.757 --> 00:03:28.751
and the cross axis is from top to bottom.

64
00:03:28.751 --> 00:03:32.001
By default, the flex-direction is what?

65
00:03:32.846 --> 00:03:36.514
It's row, so if I put on row it does nothing,

66
00:03:36.514 --> 00:03:39.847
but if I change that from row to column,

67
00:03:40.731 --> 00:03:45.172
what happens? Refresh. Whoa! What's going on here?

68
00:03:45.172 --> 00:03:49.564
Interesting what just happened. Let's peel this back a bit.

69
00:03:49.564 --> 00:03:51.944
If I take this flex-basis off,

70
00:03:51.944 --> 00:03:56.352
let me just take everything off here and refresh.

71
00:03:56.352 --> 00:04:00.926
What's going on here? The items are stacking themselves

72
00:04:00.926 --> 00:04:04.383
vertically because we've changed the axises,

73
00:04:04.383 --> 00:04:06.061
and the main axis used to be left to right

74
00:04:06.061 --> 00:04:07.581
and now it's from top to bottom,

75
00:04:07.581 --> 00:04:11.331
so our elements are going from top to bottom.

76
00:04:13.379 --> 00:04:17.296
Now, if I put a flex-grow of one on one of them

77
00:04:18.694 --> 00:04:21.572
and a flex-grow of 10, let's maybe not do 10,

78
00:04:21.572 --> 00:04:24.596
let's do five on the third one and refresh.

79
00:04:24.596 --> 00:04:28.768
You'll notice that nothing happens, and that's because,

80
00:04:28.768 --> 00:04:33.024
again, there is no height on this container.

81
00:04:33.024 --> 00:04:37.191
If I were to put a border, 10px, solid, goldenrod,

82
00:04:38.711 --> 00:04:41.582
let's get a new color out, keep it fun.

83
00:04:41.582 --> 00:04:44.076
See this goldenrod border here?

84
00:04:44.076 --> 00:04:46.211
This is where is ends at the bottom here.

85
00:04:46.211 --> 00:04:49.297
In order for it to fill the available space,

86
00:04:49.297 --> 00:04:51.752
there is really no extra space and it's really

87
00:04:51.752 --> 00:04:56.669
not hurting it vertically because there's extra space here.

88
00:04:57.534 --> 00:04:58.878
What we actually need to do, again,

89
00:04:58.878 --> 00:05:01.211
is put a min-height on that,

90
00:05:03.461 --> 00:05:05.228
and give it a save.

91
00:05:05.228 --> 00:05:07.982
There we go. Interesting what happens here is that

92
00:05:07.982 --> 00:05:09.899
if I resize vertically,

93
00:05:11.334 --> 00:05:14.751
you'll see that at this point right here,

94
00:05:15.633 --> 00:05:18.509
there is extra space, and because box three

95
00:05:18.509 --> 00:05:21.417
has a flex-grow of five, it's going to get

96
00:05:21.417 --> 00:05:24.619
five times the amount of extra space

97
00:05:24.619 --> 00:05:26.869
that this one has in there.

98
00:05:27.862 --> 00:05:30.237
Now, what happens if,

99
00:05:30.237 --> 00:05:32.924
previously when we were working with the

100
00:05:32.924 --> 00:05:35.821
left to right and we ran out of space horizontally,

101
00:05:35.821 --> 00:05:37.255
it would wrap onto the next line,

102
00:05:37.255 --> 00:05:41.265
so what happens if we give each of our items

103
00:05:41.265 --> 00:05:44.858
a flex-basis of, let's say, 250px?

104
00:05:44.858 --> 00:05:49.323
Each of them, ideally, will be 250px. Refresh.

105
00:05:49.323 --> 00:05:54.117
Now, you'll see that they go all vertically, right?

106
00:05:54.117 --> 00:05:58.074
Each of them get their 250 pixels, 250 and they'll go.

107
00:05:58.074 --> 00:06:01.406
There's no extra space, there's not too much space.

108
00:06:01.406 --> 00:06:04.411
That's because, since we're working vertically now,

109
00:06:04.411 --> 00:06:06.177
we've got all the space that we want.

110
00:06:06.177 --> 00:06:08.906
Browsers scroll by default top to bottom.

111
00:06:08.906 --> 00:06:11.224
A way we could fix that is we could put

112
00:06:11.224 --> 00:06:14.813
a hard height on it and set up a min-height.

113
00:06:14.813 --> 00:06:17.965
Whoa! Look what happened here.

114
00:06:17.965 --> 00:06:21.132
Let's go through what's going on here.

115
00:06:22.652 --> 00:06:26.344
We've got our 250 pixels for each one.

116
00:06:26.344 --> 00:06:31.035
However, since box three has a flex-grow of five,

117
00:06:31.035 --> 00:06:34.548
it divvied up the 250, the 250, the 250,

118
00:06:34.548 --> 00:06:37.593
and then there's a little bit left at the bottom here,

119
00:06:37.593 --> 00:06:41.645
and it gave three five times as much as the rest.

120
00:06:41.645 --> 00:06:44.150
This is where the really interesting part comes in.

121
00:06:44.150 --> 00:06:47.233
Instead of, when we had them in rows,

122
00:06:48.453 --> 00:06:51.381
where it would wrap around underneath,

123
00:06:51.381 --> 00:06:53.698
it will wrap around to the side.

124
00:06:53.698 --> 00:06:56.638
You can go ahead and give different flex-basises

125
00:06:56.638 --> 00:07:00.729
to all of the different ones that we would want.

126
00:07:00.729 --> 00:07:03.979
Bring that down here. Flex-basis 100px.

127
00:07:09.775 --> 00:07:12.624
You'll notice that, since now that one's 100px,

128
00:07:12.624 --> 00:07:14.647
it actually can fit inside of there

129
00:07:14.647 --> 00:07:16.920
and it (whistles) sneaks it down on there.

130
00:07:16.920 --> 00:07:19.448
Five and six, why are they so big?

131
00:07:19.448 --> 00:07:23.802
Because we really only had two extra ones that we want

132
00:07:23.802 --> 00:07:26.945
on here, and by default, it's going to stretch them

133
00:07:26.945 --> 00:07:30.028
across evenly on the available space.

134
00:07:31.109 --> 00:07:33.353
That's the way it works like that.

135
00:07:33.353 --> 00:07:36.114
If I see what happens when we run

136
00:07:36.114 --> 00:07:38.794
out of space vertically here,

137
00:07:38.794 --> 00:07:42.211
once we hit that 250, 250, 250, plus 100,

138
00:07:43.366 --> 00:07:46.879
once we hit that limit vertically, there's no space for it,

139
00:07:46.879 --> 00:07:49.628
but it does know that it can put it right up here,

140
00:07:49.628 --> 00:07:53.628
so it's gonna wrap it around to the next column.

141
00:07:55.233 --> 00:07:57.499
If we duplicate this a couple times,

142
00:07:57.499 --> 00:08:00.318
you can go as far as you want and make some

143
00:08:00.318 --> 00:08:03.231
pretty cool different layouts there,

144
00:08:03.231 --> 00:08:05.640
when you're just working on your vertical axis.

145
00:08:05.640 --> 00:08:09.415
At a certain point, they're all just gonna

146
00:08:09.415 --> 00:08:14.415
come onto one column and you'll have a horizontal scroll.

147
00:08:14.914 --> 00:08:17.247
(whistling)

