WEBVTT

1
00:00:00.107 --> 00:00:02.690
(upbeat music)

2
00:00:04.291 --> 00:00:05.940
<v ->All right, now we're gonna get into the order page,</v>

3
00:00:05.940 --> 00:00:08.580
and everything so far has been website-y,

4
00:00:08.580 --> 00:00:10.590
but sometimes you need a little bit,

5
00:00:10.590 --> 00:00:12.880
this is the part where it gets a little bit more app-y,

6
00:00:12.880 --> 00:00:16.070
where we'll be able to list out all the pizzas that we have.

7
00:00:16.070 --> 00:00:17.810
You can add the pizzas to your order.

8
00:00:17.810 --> 00:00:20.100
You can type in your name and your email.

9
00:00:20.100 --> 00:00:21.630
You can remove things from your order,

10
00:00:21.630 --> 00:00:23.440
and it will also give you your total.

11
00:00:23.440 --> 00:00:24.500
So how this is gonna work

12
00:00:24.500 --> 00:00:26.460
is that this is just a regular form

13
00:00:26.460 --> 00:00:28.070
where it's done in React.

14
00:00:28.070 --> 00:00:29.990
And then when somebody submits it,

15
00:00:29.990 --> 00:00:32.330
we just take the data about their order,

16
00:00:32.330 --> 00:00:34.810
and then we send that off via email.

17
00:00:34.810 --> 00:00:38.310
So, this is just a glorified contact form.

18
00:00:38.310 --> 00:00:41.440
There's no like, Domino's Pizza tracker behind this

19
00:00:41.440 --> 00:00:43.380
or anything too crazy,

20
00:00:43.380 --> 00:00:45.820
but it just takes your order and sends it off to an email.

21
00:00:45.820 --> 00:00:49.490
And in order to send that email, that's like backend, right?

22
00:00:49.490 --> 00:00:51.950
And we don't really have a backend with this.

23
00:00:51.950 --> 00:00:54.470
So, we will be using server-less functions.

24
00:00:54.470 --> 00:00:57.220
I'm gonna show you how to get a sip of the server

25
00:00:57.220 --> 00:00:59.210
if you need it in a Gatsby website.

26
00:00:59.210 --> 00:01:01.590
So, first thing we wanna do

27
00:01:01.590 --> 00:01:06.273
is let's go over to our order page,

28
00:01:07.270 --> 00:01:11.370
and let's make a,

29
00:01:11.370 --> 00:01:13.900
we're actually, we're just gonna code most of it directly,

30
00:01:13.900 --> 00:01:15.640
right inside of this page.

31
00:01:15.640 --> 00:01:17.210
You can move it out into your own component

32
00:01:17.210 --> 00:01:19.510
if you need to reuse it.

33
00:01:19.510 --> 00:01:21.980
So, first thing you wanna do is,

34
00:01:21.980 --> 00:01:23.450
we gotta go to our regular order page.

35
00:01:23.450 --> 00:01:24.660
We've gotta fix this title.

36
00:01:24.660 --> 00:01:27.000
We'll put that on our list for something to do

37
00:01:27.000 --> 00:01:29.350
in the future.

38
00:01:29.350 --> 00:01:33.033
And then we will replace this paragraph tag with a form tag.

39
00:01:35.040 --> 00:01:38.300
Then, we'll take, get rid of the action.

40
00:01:38.300 --> 00:01:39.650
Now, inside of this,

41
00:01:39.650 --> 00:01:42.940
we need a couple of different field sets.

42
00:01:42.940 --> 00:01:44.490
A field set for the first one,

43
00:01:44.490 --> 00:01:46.269
which is your name and email.

44
00:01:46.269 --> 00:01:48.780
A second field set for your menu.

45
00:01:48.780 --> 00:01:51.330
And a third field set for your order.

46
00:01:51.330 --> 00:01:53.500
I like using field sets because you can disable

47
00:01:53.500 --> 00:01:55.560
entire groups of fields with them at once,

48
00:01:55.560 --> 00:01:58.260
as well as it's just a pretty slick way

49
00:01:58.260 --> 00:01:59.950
to group together inputs.

50
00:01:59.950 --> 00:02:03.773
Field set; and then in here, we'll say legend.

51
00:02:11.380 --> 00:02:13.453
Say your info.

52
00:02:14.470 --> 00:02:16.800
Give yourself another field set,

53
00:02:16.800 --> 00:02:19.203
which says menu.

54
00:02:22.120 --> 00:02:25.143
And then the third one that says, order.

55
00:02:31.280 --> 00:02:35.600
Save. Okay, we got our info, our menu, and our order.

56
00:02:35.600 --> 00:02:38.370
So, let's work our way from top to bottom.

57
00:02:38.370 --> 00:02:40.450
So first one, your info.

58
00:02:40.450 --> 00:02:43.950
We need to have a label

59
00:02:44.950 --> 00:02:46.660
that is for our name.

60
00:02:46.660 --> 00:02:48.910
Let's say, name,

61
00:02:48.910 --> 00:02:51.750
and then we'll have an input below it

62
00:02:51.750 --> 00:02:53.830
with the type of text,

63
00:02:53.830 --> 00:02:56.803
and a name of name.

64
00:02:59.210 --> 00:03:00.840
And then the, well,

65
00:03:00.840 --> 00:03:03.140
the value in the onChange, we'll hook up in just a second,

66
00:03:03.140 --> 00:03:05.630
but just go ahead and duplicate that,

67
00:03:05.630 --> 00:03:09.793
and then change the name to email.

68
00:03:11.420 --> 00:03:14.120
I guess this is name.

69
00:03:14.120 --> 00:03:16.900
And type is email here.

70
00:03:16.900 --> 00:03:19.053
That won't be capital E.

71
00:03:20.900 --> 00:03:23.890
Right, so this is the first thing that we need to encounter,

72
00:03:23.890 --> 00:03:26.050
is if you type into this, you'll see React

73
00:03:26.050 --> 00:03:27.450
is gonna yell at us.

74
00:03:27.450 --> 00:03:29.000
Oh, and it's not yelling at us just yet.

75
00:03:29.000 --> 00:03:32.090
But if we wanna be able to save our data to state,

76
00:03:32.090 --> 00:03:34.970
when it gets typed into an input box,

77
00:03:34.970 --> 00:03:39.970
we need to correspond that with some state.

78
00:03:39.980 --> 00:03:41.430
So, normally the way that works

79
00:03:41.430 --> 00:03:45.540
is you say something like this, like const, name,

80
00:03:45.540 --> 00:03:48.740
and setName is equal to useState.

81
00:03:50.479 --> 00:03:52.300
And we'll set it, default it to nothing.

82
00:03:52.300 --> 00:03:55.920
And then we'll import useState from React, right?

83
00:03:55.920 --> 00:03:59.310
So we import the hook useState, and then we create it.

84
00:03:59.310 --> 00:04:03.573
And when somebody types into this input here,

85
00:04:04.880 --> 00:04:08.440
we say the value is equal to name.

86
00:04:08.440 --> 00:04:09.910
And then onChange.

87
00:04:10.800 --> 00:04:13.380
Here, let me show you the error that comes up

88
00:04:13.380 --> 00:04:14.320
if you just do this.

89
00:04:14.320 --> 00:04:18.400
Watch. If you type into it now, nothing is popping up.

90
00:04:18.400 --> 00:04:20.020
And you get all these errors from React,

91
00:04:20.020 --> 00:04:22.660
saying a component changing an uncontrolled input of text

92
00:04:22.660 --> 00:04:24.560
should not to be controlled.

93
00:04:24.560 --> 00:04:27.080
Input elements should not switch from uncontrolled

94
00:04:27.080 --> 00:04:28.990
to control or vice versa.

95
00:04:28.990 --> 00:04:31.700
Okay, so what that means is that you cannot

96
00:04:31.700 --> 00:04:35.250
put state into an input in React

97
00:04:35.250 --> 00:04:39.330
without having a plan of attack for what happens

98
00:04:39.330 --> 00:04:41.170
when somebody types into here.

99
00:04:41.170 --> 00:04:44.113
So normally what we have to do is say onChange

100
00:04:44.113 --> 00:04:45.370
when that happens.

101
00:04:45.370 --> 00:04:48.240
Maybe do pass the event.

102
00:04:48.240 --> 00:04:53.240
And then we say, setName e.target.value.

103
00:04:56.200 --> 00:04:58.030
And now we should be able to type. There we are.

104
00:04:58.030 --> 00:04:59.640
Now we're able to type into it.

105
00:04:59.640 --> 00:05:02.410
And what happens is that when somebody types into it,

106
00:05:02.410 --> 00:05:05.920
we take the event and we run our set name function,

107
00:05:05.920 --> 00:05:06.790
and put it into that.

108
00:05:06.790 --> 00:05:08.110
Now, that's okay.

109
00:05:08.110 --> 00:05:12.050
But what happens when you have, seven or eight,

110
00:05:12.050 --> 00:05:13.890
or 15 different inputs?

111
00:05:13.890 --> 00:05:16.370
Having to create new state,

112
00:05:16.370 --> 00:05:19.300
and update our function for absolutely every single one

113
00:05:19.300 --> 00:05:22.900
can get a little bit out of hand.

114
00:05:22.900 --> 00:05:25.760
And there's whole libraries out there.

115
00:05:25.760 --> 00:05:26.990
Formik is a really popular one

116
00:05:26.990 --> 00:05:28.670
for do dealing with forms in React.

117
00:05:28.670 --> 00:05:32.380
But what I like to do in most of my forms in React

118
00:05:32.380 --> 00:05:35.403
is just to make myself a custom little hook called useForm.

119
00:05:36.290 --> 00:05:37.650
And let's actually stick that

120
00:05:37.650 --> 00:05:42.030
in its own file because it is a reusable one

121
00:05:42.030 --> 00:05:44.350
that we'll wanna use throughout the entire thing.

122
00:05:44.350 --> 00:05:46.520
So we'll go into our utils folder.

123
00:05:46.520 --> 00:05:47.867
And this is the first time we're using utils.

124
00:05:47.867 --> 00:05:50.283
And we'll say useForm.js,

125
00:05:51.490 --> 00:05:56.490
and we'll import useState from React.

126
00:06:02.540 --> 00:06:05.280
And here we'll make a, well, then we'll export it.

127
00:06:05.280 --> 00:06:07.390
Export default useForm.

128
00:06:09.080 --> 00:06:10.980
Okay, I put a function in front of it.

129
00:06:15.200 --> 00:06:17.333
And that will take in some defaults.

130
00:06:18.680 --> 00:06:20.010
And then inside of here, we're making,

131
00:06:20.010 --> 00:06:21.330
this is our own custom hook.

132
00:06:21.330 --> 00:06:26.330
So, we'll say const, values and setValues

133
00:06:27.040 --> 00:06:28.800
is equal to useState.

134
00:06:28.800 --> 00:06:32.822
And we'll set the defaults that get passed in, okay?

135
00:06:32.822 --> 00:06:36.063
Oh, not default. Defaults with an s on it.

136
00:06:38.900 --> 00:06:39.960
Next what we'll need to do

137
00:06:39.960 --> 00:06:44.960
is make a function like an updater function.

138
00:06:46.660 --> 00:06:48.937
So function, updateValue.

139
00:06:50.520 --> 00:06:55.520
That takes in that event, and then run set values.

140
00:06:55.590 --> 00:06:57.960
And normally, like we did right here.

141
00:06:57.960 --> 00:07:01.260
Normally, we just say setName and pass it the actual value.

142
00:07:01.260 --> 00:07:05.312
But because this useForm is going to take an object

143
00:07:05.312 --> 00:07:07.280
instead of just a single value,

144
00:07:07.280 --> 00:07:10.010
we need to spread the existing values into it

145
00:07:10.010 --> 00:07:11.730
and then update the new one.

146
00:07:11.730 --> 00:07:12.563
So we'll say setValues.

147
00:07:12.563 --> 00:07:15.260
And then this right here

148
00:07:15.260 --> 00:07:20.083
is copy the existing values into it.

149
00:07:22.890 --> 00:07:25.110
So, ...values.

150
00:07:25.110 --> 00:07:27.940
So again, that's everything that is currently in state,

151
00:07:27.940 --> 00:07:32.940
and then update the new value that changed.

152
00:07:33.010 --> 00:07:34.280
So, what value?

153
00:07:34.280 --> 00:07:36.640
Like, if somebody types into name,

154
00:07:36.640 --> 00:07:39.420
we wanna update the name property

155
00:07:39.420 --> 00:07:44.420
to be e.target.value, right?

156
00:07:44.569 --> 00:07:49.569
But we can't hard code name or email or anything else.

157
00:07:49.730 --> 00:07:52.950
So what we can do is maybe make that part dynamic.

158
00:07:52.950 --> 00:07:56.920
Just say e.target.name.

159
00:07:56.920 --> 00:08:01.920
And what happens there is we take the name attribute

160
00:08:02.668 --> 00:08:04.120
of the input.

161
00:08:04.120 --> 00:08:06.370
It's a little bit confusing ' cause it's also name,

162
00:08:06.370 --> 00:08:09.070
but we take the name attribute of the input,

163
00:08:09.070 --> 00:08:12.550
and set it to be the value of what the user typed.

164
00:08:12.550 --> 00:08:14.070
And we make that totally dynamic.

165
00:08:14.070 --> 00:08:18.430
And that will work for all of our values that we have here.

166
00:08:18.430 --> 00:08:20.060
And then finally from this hook,

167
00:08:20.060 --> 00:08:23.700
we need to return the values,

168
00:08:23.700 --> 00:08:26.832
which is our state, and then our update value,

169
00:08:26.832 --> 00:08:29.330
property that we have here.

170
00:08:29.330 --> 00:08:33.417
One other thing that I like to do here

171
00:08:33.417 --> 00:08:38.417
is I'll sometimes check if it's a number, and convert.

172
00:08:42.640 --> 00:08:46.500
Because I've used this little hook here many times over.

173
00:08:46.500 --> 00:08:48.960
And if you have an input with the type of number,

174
00:08:48.960 --> 00:08:50.280
it comes in as a string,

175
00:08:50.280 --> 00:08:51.960
and then you it to state and it's a string.

176
00:08:51.960 --> 00:08:53.210
You're expecting a number.

177
00:08:53.210 --> 00:08:58.210
So what we do here is we'll just say, let value is equal to,

178
00:09:00.110 --> 00:09:01.040
or just let value.

179
00:09:01.040 --> 00:09:04.300
We'll create the variable. And we'll say if or no.

180
00:09:04.300 --> 00:09:05.133
No, no, no. We'll do this.

181
00:09:05.133 --> 00:09:09.760
Let value is equal to e.target.value.

182
00:09:09.760 --> 00:09:13.263
Now we'll go down here and just say it's a value.

183
00:09:14.418 --> 00:09:15.251
And then we'll say,

184
00:09:15.251 --> 00:09:19.870
if the e.target.type is equal to a number,

185
00:09:22.060 --> 00:09:25.907
value is equal to parseInt e.target volume.

186
00:09:31.580 --> 00:09:34.130
And what that does is it just checks if,

187
00:09:34.130 --> 00:09:35.580
oh, I changed it to de-structuring here,

188
00:09:35.580 --> 00:09:37.060
but it checks if the type is the number,

189
00:09:37.060 --> 00:09:39.090
then forces it to be an actual number

190
00:09:39.090 --> 00:09:40.500
before you go ahead and set it.

191
00:09:40.500 --> 00:09:42.410
So, we aren't using that here,

192
00:09:42.410 --> 00:09:44.880
but if you're gonna be reusing this useForm hook

193
00:09:44.880 --> 00:09:46.130
in other projects,

194
00:09:46.130 --> 00:09:47.990
I know that that's something I always like to add

195
00:09:47.990 --> 00:09:49.820
to my own custom hook.

196
00:09:49.820 --> 00:09:52.945
Okay, so we've created our own custom hook here.

197
00:09:52.945 --> 00:09:56.870
What you need to do is hop back into our order.js.

198
00:09:56.870 --> 00:10:01.053
And we'll take this here, this useState, and delete it.

199
00:10:02.420 --> 00:10:06.940
And we will say const, curly bracket, value.

200
00:10:06.940 --> 00:10:08.760
So, it's no longer square bracket.

201
00:10:08.760 --> 00:10:12.087
And the reason is because we're returning an object here.

202
00:10:12.087 --> 00:10:17.087
Values and updateValues is equal to useForm,

203
00:10:19.090 --> 00:10:20.620
and then we'll pass it the default,

204
00:10:20.620 --> 00:10:22.860
where the name's gonna be empty.

205
00:10:22.860 --> 00:10:24.860
And the email is also gonna be empty.

206
00:10:24.860 --> 00:10:28.370
So you have to explicitly set the default values

207
00:10:28.370 --> 00:10:30.950
of whatever inputs you have.

208
00:10:30.950 --> 00:10:32.620
Otherwise React whines about you creating

209
00:10:32.620 --> 00:10:34.830
a new value in there.

210
00:10:34.830 --> 00:10:39.830
Okay, so, then we can take our values here

211
00:10:39.880 --> 00:10:42.700
and go down to here, our input.

212
00:10:42.700 --> 00:10:46.130
And say the value is equal to values.name,

213
00:10:46.130 --> 00:10:49.353
and the onChange is going to simply be.

214
00:10:50.454 --> 00:10:52.660
What did we call it? updateValues.

215
00:10:57.540 --> 00:11:00.920
So let's see if that, useForm is not defined.

216
00:11:00.920 --> 00:11:02.980
Oh, I forgot to import useForm.

217
00:11:05.430 --> 00:11:07.770
There it goes. So it imported the hook right there.

218
00:11:07.770 --> 00:11:10.053
So now I should be able to type into here.

219
00:11:11.030 --> 00:11:12.140
Not working. Okay.

220
00:11:12.140 --> 00:11:13.377
Let's clear up the errors here

221
00:11:13.377 --> 00:11:15.760
and we give it a whole refresh.

222
00:11:15.760 --> 00:11:18.540
What is it yelling at us? Failed prompt type.

223
00:11:18.540 --> 00:11:21.260
You provide a value prop to your form field

224
00:11:21.260 --> 00:11:23.083
without an onChange handler.

225
00:11:24.600 --> 00:11:29.600
What? I did, I did.

226
00:11:38.620 --> 00:11:40.870
Okay, so let's debug this.

227
00:11:40.870 --> 00:11:44.680
So I'm gonna take the email out of the equation entirely.

228
00:11:44.680 --> 00:11:47.160
Just so I know I'm working with one.

229
00:11:47.160 --> 00:11:49.690
Okay. Same error's popping up.

230
00:11:49.690 --> 00:11:51.140
So now my question is,

231
00:11:51.140 --> 00:11:53.983
is our values and updateValues

232
00:11:54.980 --> 00:11:57.010
actually being returned from that function?

233
00:11:57.010 --> 00:12:02.010
Let's try. Okay, so we're getting, there we go.

234
00:12:04.120 --> 00:12:07.170
We get our actual object, but the second value's undefined.

235
00:12:07.170 --> 00:12:10.180
So, it's complaining that this onChange

236
00:12:10.180 --> 00:12:11.960
is not actually a function, which it's not.

237
00:12:11.960 --> 00:12:12.793
It says undefined.

238
00:12:12.793 --> 00:12:14.960
So let's go back to our form here.

239
00:12:14.960 --> 00:12:18.930
And we have our function, update function.

240
00:12:18.930 --> 00:12:20.170
Did I spell that wrong?

241
00:12:20.170 --> 00:12:21.573
Yeah. I put an s on it.

242
00:12:23.530 --> 00:12:26.500
So, let's change that.

243
00:12:26.500 --> 00:12:28.917
Anywhere you have put updateValues,

244
00:12:30.220 --> 00:12:31.723
just take the s off.

245
00:12:34.030 --> 00:12:35.430
And now I should be able to, there we go.

246
00:12:35.430 --> 00:12:36.940
Now I'm able to type into it.

247
00:12:36.940 --> 00:12:39.490
We can go a little bit further and inspect

248
00:12:39.490 --> 00:12:41.473
with React on this sucker.

249
00:12:47.690 --> 00:12:52.380
And, we have our hook, which is the form.

250
00:12:52.380 --> 00:12:54.790
And there we go. You see the state.

251
00:12:54.790 --> 00:12:57.508
Sorry it's a little bit small, but you see ERT.

252
00:12:57.508 --> 00:12:59.290
If I were to type wes into here,

253
00:12:59.290 --> 00:13:02.770
you see state is automatically updating with that hook,

254
00:13:02.770 --> 00:13:04.310
which is awesome.

255
00:13:04.310 --> 00:13:06.849
Then we should be able to use this same hook

256
00:13:06.849 --> 00:13:09.420
with our email input.

257
00:13:09.420 --> 00:13:14.383
So I'll go, value is equal to values.email,

258
00:13:15.250 --> 00:13:18.373
and onChange is equal to updateValue.

259
00:13:21.610 --> 00:13:23.493
Now I should be able to type to this.

260
00:13:25.810 --> 00:13:28.540
You see that. It's updating right to state.

261
00:13:28.540 --> 00:13:30.680
And I love that because if for some reason

262
00:13:30.680 --> 00:13:34.240
you wanted to add, like a coupon input

263
00:13:34.240 --> 00:13:35.120
or something like that,

264
00:13:35.120 --> 00:13:38.483
we could simply just go input, type of text,

265
00:13:39.360 --> 00:13:44.360
name equals coupon, value equals values.coupon,

266
00:13:45.670 --> 00:13:49.914
and onChange is equal to updateValue.

267
00:13:49.914 --> 00:13:53.030
Then we would go to our default, say coupon.

268
00:13:53.030 --> 00:13:55.657
You can even set default here, FREESHIP.

269
00:13:57.390 --> 00:14:00.570
And here we go.

270
00:14:00.570 --> 00:14:03.860
It's by default shows up right in here.

271
00:14:03.860 --> 00:14:06.400
Should be rendered a state,

272
00:14:06.400 --> 00:14:10.330
but I should be able to mirror that directly to state.

273
00:14:10.330 --> 00:14:14.340
That's a nice small example of a hook that is custom,

274
00:14:14.340 --> 00:14:17.790
but also cuts down on a lot of, sort of boiler plate code.

275
00:14:17.790 --> 00:14:18.623
I'll get rid of that.

276
00:14:18.623 --> 00:14:19.810
We don't actually have coupons here,

277
00:14:19.810 --> 00:14:21.110
so we can get rid of that.

278
00:14:22.470 --> 00:14:23.610
All right, so that's the first part,

279
00:14:23.610 --> 00:14:25.907
which is our name and your email.

280
00:14:25.907 --> 00:14:27.470
The second part is the menu.

281
00:14:27.470 --> 00:14:31.340
So we need to loop over all of our pizzas

282
00:14:31.340 --> 00:14:33.210
and list them out with their photo,

283
00:14:33.210 --> 00:14:37.340
as well as the prices for the different sizes.

284
00:14:37.340 --> 00:14:39.540
So let's go to the menu here.

285
00:14:39.540 --> 00:14:43.340
So how do we get all of our pizzas?

286
00:14:43.340 --> 00:14:46.160
Well, in our case, we can,

287
00:14:46.160 --> 00:14:50.040
we could use any query that we have here.

288
00:14:50.040 --> 00:14:52.067
We could use a page query 'cause we're on a page,

289
00:14:52.067 --> 00:14:53.970
but we could also use static query,

290
00:14:53.970 --> 00:14:58.470
because there's no specific variable that gets set to it.

291
00:14:58.470 --> 00:14:59.900
So I'm gonna use the page query here.

292
00:14:59.900 --> 00:15:04.197
So, actually we can just go into pizzas.js.

293
00:15:11.710 --> 00:15:13.793
We queried all the pizzas here.

294
00:15:17.160 --> 00:15:21.210
Could we import this query from another page?

295
00:15:21.210 --> 00:15:22.870
I've never done this with Gatsby.

296
00:15:22.870 --> 00:15:25.830
I've never like, import it. So let's see.

297
00:15:25.830 --> 00:15:28.670
Can we import a query from another page,

298
00:15:28.670 --> 00:15:30.100
and then export it from here?

299
00:15:30.100 --> 00:15:32.840
I don't think so, because the way that Gatsby works

300
00:15:32.840 --> 00:15:37.460
is that it turns your queries into numbers, but let's see.

301
00:15:37.460 --> 00:15:42.300
So if we go up here and import query.

302
00:15:42.300 --> 00:15:44.440
Is that we named it? Yeah.

303
00:15:44.440 --> 00:15:48.193
From. Pizzas.

304
00:15:49.030 --> 00:15:51.000
And then if I console log

305
00:15:52.530 --> 00:15:57.390
the query, yeah,

306
00:15:57.390 --> 00:16:00.193
you see it calls the logs a number.

307
00:16:02.300 --> 00:16:04.430
I don't think that will work,

308
00:16:04.430 --> 00:16:05.433
but we can try.

309
00:16:06.890 --> 00:16:10.150
I'll just export query. We could also import.

310
00:16:10.150 --> 00:16:14.743
And import and export it all at once.

311
00:16:17.960 --> 00:16:21.740
I think we just say export query from pizzas.

312
00:16:21.740 --> 00:16:22.573
Let's try it.

313
00:16:23.800 --> 00:16:27.088
So what I did there is I just imported and exported

314
00:16:27.088 --> 00:16:29.900
the query from this one

315
00:16:29.900 --> 00:16:31.030
in a single line.

316
00:16:31.030 --> 00:16:32.310
That's part of JavaScript.

317
00:16:32.310 --> 00:16:34.120
That's not special Gatsby or anything.

318
00:16:34.120 --> 00:16:35.160
So now my question is,

319
00:16:35.160 --> 00:16:38.920
is does this page have the pizza data as well?

320
00:16:38.920 --> 00:16:41.933
So we'll go to our React components, go to our order page.

321
00:16:47.048 --> 00:16:51.570
Doesn't look like it. Does not look like it.

322
00:16:51.570 --> 00:16:52.670
We got our location.

323
00:16:52.670 --> 00:16:54.830
We would have, like a data prop here

324
00:16:54.830 --> 00:16:59.630
if we actually had data here.

325
00:16:59.630 --> 00:17:03.440
So, no, unfortunately that does not work.

326
00:17:03.440 --> 00:17:05.240
So we'll just go down here,

327
00:17:05.240 --> 00:17:10.240
and export const query is equal to graphql.

328
00:17:13.200 --> 00:17:18.017
We'll import graphql, and then query pizzas.

329
00:17:21.070 --> 00:17:26.070
It's allSanityPizza, and for each node,

330
00:17:27.210 --> 00:17:31.090
we want the name, the ID, the slug.

331
00:17:31.090 --> 00:17:32.890
We don't care about the slug, do we?

332
00:17:33.830 --> 00:17:37.320
Let's grab it just in case. It's not that expensive.

333
00:17:37.320 --> 00:17:38.480
Actually, it's not expensive at all,

334
00:17:38.480 --> 00:17:40.050
'cause it runs at build time.

335
00:17:40.050 --> 00:17:41.190
It's kind of nice thing about Gatsby

336
00:17:41.190 --> 00:17:44.930
is you don't have to worry about fetching too much data,

337
00:17:44.930 --> 00:17:47.520
because that just happens at build time.

338
00:17:47.520 --> 00:17:50.320
It doesn't happen on your pages, your user's page load,

339
00:17:50.320 --> 00:17:51.720
which is cool.

340
00:17:51.720 --> 00:17:52.873
We want the price of the pizza

341
00:17:52.873 --> 00:17:57.873
and the image, asset, fluid, max width.

342
00:18:00.290 --> 00:18:04.180
We're gonna want 100 px on this image here.

343
00:18:04.180 --> 00:18:07.143
And then we use the ...GatsbySanityImageFluid.

344
00:18:11.030 --> 00:18:12.840
That's referred to as a fragment, again.

345
00:18:12.840 --> 00:18:14.948
Those ..., in our case.

346
00:18:14.948 --> 00:18:17.400
Okay. There we go.

347
00:18:17.400 --> 00:18:18.233
See, I just saved that,

348
00:18:18.233 --> 00:18:21.660
and all of a sudden this data with the pizzas showed up.

349
00:18:21.660 --> 00:18:22.670
So, and there we go.

350
00:18:22.670 --> 00:18:26.110
There's all of our pizzas. Looking good; cool.

351
00:18:26.110 --> 00:18:29.760
So we can go into the second set under menu

352
00:18:29.760 --> 00:18:32.453
and start to loop over those pizzas.

353
00:18:35.670 --> 00:18:38.093
So right here, curly brackets,

354
00:18:44.120 --> 00:18:46.143
pizzas, oh it's not pizzas, is it?

355
00:18:47.850 --> 00:18:50.773
We have to de-structure our data in here,

356
00:18:52.420 --> 00:18:54.570
and I'll say const pizzas

357
00:18:54.570 --> 00:18:58.330
is equal to data.pizzas.nodes.

358
00:18:58.330 --> 00:19:01.093
Up here, so we can have a nice, clean variable.

359
00:19:04.210 --> 00:19:05.673
Objects are not valid as.

360
00:19:10.370 --> 00:19:12.700
Sorry, you can hear my kids playing hide and seek

361
00:19:12.700 --> 00:19:13.623
in the background.

362
00:19:16.920 --> 00:19:20.833
Pizzas.map, pizza.

363
00:19:24.180 --> 00:19:25.963
Use parenthesis there.

364
00:19:26.940 --> 00:19:27.943
We'll have a div.

365
00:19:29.410 --> 00:19:31.560
We'll replace that with a style in just a second.

366
00:19:31.560 --> 00:19:36.560
The key is equal to the pizza.id, and inside of that,

367
00:19:37.470 --> 00:19:39.400
we'll have a Gatsby image.

368
00:19:39.400 --> 00:19:40.410
We'll get that in a second.

369
00:19:40.410 --> 00:19:43.230
Let's just get the div,

370
00:19:43.230 --> 00:19:46.133
and put an h2 inside of it with the pizza.name.

371
00:19:47.360 --> 00:19:50.300
Let's make sure we can actually just show everything up.

372
00:19:50.300 --> 00:19:52.880
Okay. So there's all our pizzas.

373
00:19:52.880 --> 00:19:55.460
Let's work on getting the image to show up next.

374
00:19:55.460 --> 00:19:58.010
So go to the top of your file.

375
00:19:58.010 --> 00:20:02.093
Import Img from Gatsby image.

376
00:20:05.100 --> 00:20:08.713
And then we'll go right above here.

377
00:20:08.713 --> 00:20:13.713
Img, fluid is equal to pizza.image.asset.fluid.

378
00:20:24.380 --> 00:20:25.240
Here we go.

379
00:20:25.240 --> 00:20:29.550
And then we also wanna put a width of 50 on it

380
00:20:29.550 --> 00:20:32.010
and a height of 50 on it.

381
00:20:32.010 --> 00:20:34.495
The reason why I queried it at 100 by 100

382
00:20:34.495 --> 00:20:36.990
is so that it will look crisp

383
00:20:36.990 --> 00:20:41.650
on high resolution screens: 4K monitors, iPhones,

384
00:20:44.020 --> 00:20:45.667
retina displays, things like that.

385
00:20:45.667 --> 00:20:49.520
We'll talk about that when we hit styling.

386
00:20:49.520 --> 00:20:51.820
It's not constraining itself, but that's okay.

387
00:20:52.850 --> 00:20:54.860
Next step, oh, we should put an alt on there

388
00:20:54.860 --> 00:20:55.780
before we forget.

389
00:20:55.780 --> 00:20:59.643
So alt is equal to pizza.name. Okay.

390
00:21:02.260 --> 00:21:03.850
This is bothering me.

391
00:21:03.850 --> 00:21:07.083
A form label must be associated with a control.

392
00:21:08.580 --> 00:21:10.760
Oh, you gotta put an ID.

393
00:21:10.760 --> 00:21:12.160
Is that gonna make it happy?

394
00:21:16.080 --> 00:21:17.040
Why is this?

395
00:21:17.040 --> 00:21:19.407
A form label must be associated with a control.

396
00:21:19.407 --> 00:21:23.030
It's like you don't know why something is breaking.

397
00:21:23.030 --> 00:21:25.853
You just Google the rule you're breaking,

398
00:21:27.760 --> 00:21:30.430
and it will show you an example of how to actually do it.

399
00:21:30.430 --> 00:21:35.430
So, label, sibling control, html4, okay.

400
00:21:38.559 --> 00:21:41.459
Using the ID to associate the controls. That's what I did.

401
00:21:44.960 --> 00:21:49.960
ID, it's got the name. ID is equal to email.

402
00:21:59.380 --> 00:22:00.653
Still yelling at me.

403
00:22:12.750 --> 00:22:15.600
All right. Well, that's what it says it's supposed to do.

404
00:22:18.090 --> 00:22:18.923
Check the answer.

405
00:22:18.923 --> 00:22:21.090
And someone will pull a request or whatever

406
00:22:21.090 --> 00:22:23.010
if we find the actual issue.

407
00:22:23.010 --> 00:22:25.400
I don't wanna put the input inside of the label.

408
00:22:25.400 --> 00:22:26.390
I'm gonna leave that for now.

409
00:22:26.390 --> 00:22:30.070
Since I can't figure it out, that's fine.

410
00:22:30.070 --> 00:22:34.770
Okay. So, we've got our pizza showing up.

411
00:22:34.770 --> 00:22:38.540
Next thing that we need to do is to display the prices

412
00:22:38.540 --> 00:22:40.580
in buttons for each one of those.

413
00:22:40.580 --> 00:22:43.950
So, let's go right below this div here

414
00:22:44.870 --> 00:22:45.710
with the pizza name,

415
00:22:45.710 --> 00:22:47.940
and give ourselves another div.

416
00:22:47.940 --> 00:22:52.940
And we're gonna loop over the sizes of an array of small,

417
00:22:53.110 --> 00:22:58.110
medium, and large, and we'll map over each of those sizes.

418
00:23:01.170 --> 00:23:04.980
And for each one, we will return a button

419
00:23:08.580 --> 00:23:10.283
with a type of button,

420
00:23:11.700 --> 00:23:14.370
and inside of that button

421
00:23:18.290 --> 00:23:19.980
will be a size.

422
00:23:24.440 --> 00:23:25.923
Let's see what we got here.

423
00:23:29.390 --> 00:23:32.940
What's wrong with that? Unexpected comma.

424
00:23:32.940 --> 00:23:35.720
We are missing the parentheses. There we go.

425
00:23:35.720 --> 00:23:37.880
So now we've buttons: small, medium, large.

426
00:23:37.880 --> 00:23:39.040
All right, now let's do price.

427
00:23:39.040 --> 00:23:41.210
So my idea with price is that the price that we have

428
00:23:41.210 --> 00:23:42.850
attached to the pizza is a medium.

429
00:23:42.850 --> 00:23:46.210
And then the small and the large can be calculated

430
00:23:46.210 --> 00:23:48.350
based off of that price.

431
00:23:48.350 --> 00:23:51.770
So to do that, let's go and make a utility function.

432
00:23:51.770 --> 00:23:53.970
So let's go into our utils folder,

433
00:23:53.970 --> 00:23:57.453
make a new file, and let's call it calculatePizzaPrice.js.

434
00:24:04.920 --> 00:24:08.573
We'll export default function, calculatePizzaPrice.

435
00:24:13.680 --> 00:24:18.620
And that will take in the cents and the size.

436
00:24:18.620 --> 00:24:19.453
And then up here,

437
00:24:19.453 --> 00:24:23.210
let's just say const sizes is equal to,

438
00:24:23.210 --> 00:24:27.240
small is going to be 0.75.

439
00:24:27.240 --> 00:24:30.690
So quarter of, or three quarters of the price.

440
00:24:30.690 --> 00:24:35.690
Medium is going to be the price that it is.

441
00:24:35.820 --> 00:24:39.920
And large will be 1.25 the price.

442
00:24:39.920 --> 00:24:42.693
And then from this, we just return the what?

443
00:24:46.280 --> 00:24:51.280
The cents multiplied by the sizes, square bracket, size.

444
00:24:53.200 --> 00:24:57.050
This is what I love so much about ES modules is, like,

445
00:24:57.050 --> 00:24:58.000
I just created this.

446
00:24:58.000 --> 00:25:01.110
And this is by default scoped to this module.

447
00:25:01.110 --> 00:25:03.480
So I didn't need to, like, create a closure

448
00:25:03.480 --> 00:25:04.390
or anything like that.

449
00:25:04.390 --> 00:25:08.500
I could just declare this little piece of JavaScript

450
00:25:08.500 --> 00:25:09.530
inside of the file,

451
00:25:09.530 --> 00:25:13.270
and then it will be accessible anywhere within this module.

452
00:25:13.270 --> 00:25:17.790
We'll go back to our order here, and beside the size,

453
00:25:17.790 --> 00:25:19.683
let's do the price.

454
00:25:21.720 --> 00:25:26.720
So we'll say pizza.price.

455
00:25:27.370 --> 00:25:28.820
Let's just get it showing up.

456
00:25:29.980 --> 00:25:33.433
Okay. And then we can calculatePizzaPrice.

457
00:25:35.230 --> 00:25:39.010
Pass it the price, as well as the size.

458
00:25:39.010 --> 00:25:42.010
And then we'll have to import that function.

459
00:25:42.010 --> 00:25:43.030
Boom, there we go.

460
00:25:43.030 --> 00:25:46.563
Let's just check it. Import, right there, good.

461
00:25:47.460 --> 00:25:50.670
And here we go. So it's 1092, 1456, 1820.

462
00:25:52.812 --> 00:25:55.270
Okay, so they're all going up and down.

463
00:25:55.270 --> 00:25:58.450
Now in order to get them to format nicely,

464
00:25:58.450 --> 00:26:03.450
we need to create another utility function

465
00:26:03.570 --> 00:26:05.003
called format money.

466
00:26:06.110 --> 00:26:08.510
So let's go into our utils folder here

467
00:26:08.510 --> 00:26:12.803
and make a formatMoney.js.

468
00:26:15.550 --> 00:26:19.550
And we need to first make a number formatter.

469
00:26:19.550 --> 00:26:24.550
So we'll say const formatter is equal to Intl.NumberFormat.

470
00:26:28.530 --> 00:26:30.900
And I am gonna say en-CA.

471
00:26:30.900 --> 00:26:35.060
You can put en-US, or wherever, whatever country

472
00:26:35.060 --> 00:26:37.150
and locale you are from.

473
00:26:37.150 --> 00:26:40.890
Let's say style, currency. Did we do this already?

474
00:26:40.890 --> 00:26:42.220
I feel like we've done this already.

475
00:26:42.220 --> 00:26:44.600
Maybe that was a different course.

476
00:26:44.600 --> 00:26:46.700
Nope, no, that was, that was a different course.

477
00:26:46.700 --> 00:26:49.820
Okay. So this right here, Intl.NumberFormat.

478
00:26:49.820 --> 00:26:52.900
This is built into the browser as well as node js.

479
00:26:52.900 --> 00:26:56.510
And it's built in for a formatting currency,

480
00:26:56.510 --> 00:26:58.400
which is really, really good.

481
00:26:58.400 --> 00:27:01.620
Then we say, currency is going to be, I'm going to say CAD.

482
00:27:01.620 --> 00:27:04.990
You could do USD or again, any whatever,

483
00:27:04.990 --> 00:27:07.468
whatever format that you want.

484
00:27:07.468 --> 00:27:09.010
So that's kind of interesting.

485
00:27:09.010 --> 00:27:10.900
This right here is, will tell you

486
00:27:10.900 --> 00:27:13.980
where to put the commas and decimals.

487
00:27:13.980 --> 00:27:16.850
And this right here is, it will actually format it

488
00:27:16.850 --> 00:27:18.340
as a currency.

489
00:27:18.340 --> 00:27:20.680
It won't convert or anything for you,

490
00:27:20.680 --> 00:27:23.270
but it will format it as that country's currency

491
00:27:23.270 --> 00:27:24.790
needs to be formatted.

492
00:27:24.790 --> 00:27:27.710
And again, this will put the, I don't know, in Europe,

493
00:27:27.710 --> 00:27:29.700
you use decimals where you should use commas

494
00:27:29.700 --> 00:27:31.240
and commas where you should use decimals,

495
00:27:31.240 --> 00:27:34.050
which is weird, but whatever.

496
00:27:34.050 --> 00:27:39.050
So export default function formatMoney.

497
00:27:39.260 --> 00:27:40.840
That takes in cents.

498
00:27:40.840 --> 00:27:45.840
And then we are going to return our formmatter.format.

499
00:27:46.220 --> 00:27:47.720
And normally we just say cents

500
00:27:47.720 --> 00:27:49.920
but because we want it to format as dollars.

501
00:27:49.920 --> 00:27:52.160
Here, let me show you what happens here.

502
00:27:52.160 --> 00:27:55.860
So. let's go back to our order,

503
00:27:55.860 --> 00:27:59.253
and let's wrap this in formatMoney.

504
00:28:04.120 --> 00:28:07.983
Okay. And then we've gotta import formatMoney from that.

505
00:28:09.459 --> 00:28:12.380
Here we go. See, $1,000 for a pizza.

506
00:28:12.380 --> 00:28:16.270
It's obviously too much. We need to divide that by 100.

507
00:28:16.270 --> 00:28:18.880
So we'll go back to our formatMoney,

508
00:28:18.880 --> 00:28:22.803
and cents divided by 100.

509
00:28:25.490 --> 00:28:27.548
Boom. That's looking good.

510
00:28:27.548 --> 00:28:29.680
I think we should stop there for this video.

511
00:28:29.680 --> 00:28:31.720
This video is getting a little bit long.

512
00:28:31.720 --> 00:28:34.310
We'll just pick it up in the next video

513
00:28:34.310 --> 00:28:36.553
with some styling, I think.

